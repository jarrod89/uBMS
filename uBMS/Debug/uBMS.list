
uBMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bc0  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08003d50  08003d50  00013d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003f94  08003f94  00013f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003f98  08003f98  00013f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08003f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000740  20000068  08004004  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200007a8  08004004  000207a8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001ca58  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000034ee  00000000  00000000  0003caf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000076a6  00000000  00000000  0003ffde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c78  00000000  00000000  00047688  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000012c8  00000000  00000000  00048300  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000680c  00000000  00000000  000495c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004e66  00000000  00000000  0004fdd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00054c3a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000022b0  00000000  00000000  00054cb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003d38 	.word	0x08003d38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003d38 	.word	0x08003d38

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f092 0f00 	teq	r2, #0
 80004ba:	bf14      	ite	ne
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e720      	b.n	8000314 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aedc 	beq.w	80002c2 <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6c1      	b.n	80002c2 <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_InitTick+0x24>)
{
 8000a08:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000a0a:	6818      	ldr	r0, [r3, #0]
 8000a0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a10:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a14:	f000 f878 	bl	8000b08 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	4621      	mov	r1, r4
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	f000 f83e 	bl	8000aa0 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000a24:	2000      	movs	r0, #0
 8000a26:	bd10      	pop	{r4, pc}
 8000a28:	20000000 	.word	0x20000000

08000a2c <HAL_Init>:
{
 8000a2c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a2e:	2003      	movs	r0, #3
 8000a30:	f000 f824 	bl	8000a7c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f7ff ffe5 	bl	8000a04 <HAL_InitTick>
  HAL_MspInit();
 8000a3a:	f002 feb9 	bl	80037b0 <HAL_MspInit>
}
 8000a3e:	2000      	movs	r0, #0
 8000a40:	bd08      	pop	{r3, pc}
	...

08000a44 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000a44:	4a02      	ldr	r2, [pc, #8]	; (8000a50 <HAL_IncTick+0xc>)
 8000a46:	6813      	ldr	r3, [r2, #0]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000094 	.word	0x20000094

08000a54 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a54:	4b01      	ldr	r3, [pc, #4]	; (8000a5c <HAL_GetTick+0x8>)
 8000a56:	6818      	ldr	r0, [r3, #0]
}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000094 	.word	0x20000094

08000a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a60:	b538      	push	{r3, r4, r5, lr}
 8000a62:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a64:	f7ff fff6 	bl	8000a54 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a68:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000a6a:	4605      	mov	r5, r0
  {
    wait++;
 8000a6c:	bf18      	it	ne
 8000a6e:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000a70:	f7ff fff0 	bl	8000a54 <HAL_GetTick>
 8000a74:	1b40      	subs	r0, r0, r5
 8000a76:	4284      	cmp	r4, r0
 8000a78:	d8fa      	bhi.n	8000a70 <HAL_Delay+0x10>
  {
  }
}
 8000a7a:	bd38      	pop	{r3, r4, r5, pc}

08000a7c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a7e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a84:	041b      	lsls	r3, r3, #16
 8000a86:	0c1b      	lsrs	r3, r3, #16
 8000a88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a8c:	0200      	lsls	r0, r0, #8
 8000a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a92:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000a96:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a98:	60d3      	str	r3, [r2, #12]
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa2:	b530      	push	{r4, r5, lr}
 8000aa4:	68dc      	ldr	r4, [r3, #12]
 8000aa6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aaa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	bf28      	it	cs
 8000ab4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	f04f 0501 	mov.w	r5, #1
 8000abc:	fa05 f303 	lsl.w	r3, r5, r3
 8000ac0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac4:	bf8c      	ite	hi
 8000ac6:	3c03      	subhi	r4, #3
 8000ac8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aca:	4019      	ands	r1, r3
 8000acc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ace:	fa05 f404 	lsl.w	r4, r5, r4
 8000ad2:	3c01      	subs	r4, #1
 8000ad4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000ad6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	ea42 0201 	orr.w	r2, r2, r1
 8000adc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	bfaf      	iteee	ge
 8000ae2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae6:	f000 000f 	andlt.w	r0, r0, #15
 8000aea:	4b06      	ldrlt	r3, [pc, #24]	; (8000b04 <HAL_NVIC_SetPriority+0x64>)
 8000aec:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	bfa5      	ittet	ge
 8000af0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000af4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000afc:	bd30      	pop	{r4, r5, pc}
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00
 8000b04:	e000ed14 	.word	0xe000ed14

08000b08 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b08:	3801      	subs	r0, #1
 8000b0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b0e:	d20a      	bcs.n	8000b26 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b14:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b16:	21f0      	movs	r1, #240	; 0xf0
 8000b18:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b1c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b20:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b26:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000e010 	.word	0xe000e010
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b36:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000b38:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b3a:	bf0c      	ite	eq
 8000b3c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b40:	f022 0204 	bicne.w	r2, r2, #4
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	4770      	bx	lr
 8000b48:	e000e010 	.word	0xe000e010

08000b4c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b4c:	4770      	bx	lr

08000b4e <HAL_SYSTICK_IRQHandler>:
{
 8000b4e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000b50:	f7ff fffc 	bl	8000b4c <HAL_SYSTICK_Callback>
 8000b54:	bd08      	pop	{r3, pc}
	...

08000b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b5c:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b60:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8000cd8 <HAL_GPIO_Init+0x180>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b64:	4a5a      	ldr	r2, [pc, #360]	; (8000cd0 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00;
 8000b66:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b68:	fa38 f403 	lsrs.w	r4, r8, r3
 8000b6c:	d102      	bne.n	8000b74 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000b6e:	b003      	add	sp, #12
 8000b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b74:	2401      	movs	r4, #1
 8000b76:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000b7a:	ea18 050a 	ands.w	r5, r8, sl
 8000b7e:	f000 809c 	beq.w	8000cba <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b82:	684c      	ldr	r4, [r1, #4]
 8000b84:	f024 0b10 	bic.w	fp, r4, #16
 8000b88:	f1bb 0f02 	cmp.w	fp, #2
 8000b8c:	d114      	bne.n	8000bb8 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8000b8e:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000b92:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b96:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000b9a:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b9e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000ba2:	270f      	movs	r7, #15
 8000ba4:	fa07 f70c 	lsl.w	r7, r7, ip
 8000ba8:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000bac:	690e      	ldr	r6, [r1, #16]
 8000bae:	fa06 f60c 	lsl.w	r6, r6, ip
 8000bb2:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8000bb4:	f8ce 6020 	str.w	r6, [lr, #32]
 8000bb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000bbc:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000bbe:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000bc0:	fa07 f70c 	lsl.w	r7, r7, ip
 8000bc4:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bc6:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000bca:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bcc:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bd0:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bd4:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bd8:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000bdc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bde:	d811      	bhi.n	8000c04 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8000be0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000be2:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8000be6:	68ce      	ldr	r6, [r1, #12]
 8000be8:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000bec:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000bf0:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bf2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bf4:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000bf8:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000bfc:	409e      	lsls	r6, r3
 8000bfe:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000c02:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c04:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000c06:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c08:	688e      	ldr	r6, [r1, #8]
 8000c0a:	fa06 f60c 	lsl.w	r6, r6, ip
 8000c0e:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c10:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000c12:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c14:	d551      	bpl.n	8000cba <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8000c1a:	f046 0601 	orr.w	r6, r6, #1
 8000c1e:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8000c22:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8000c26:	f023 0703 	bic.w	r7, r3, #3
 8000c2a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000c2e:	f006 0601 	and.w	r6, r6, #1
 8000c32:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000c36:	9601      	str	r6, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c38:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3c:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000c3e:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c40:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000c44:	f04f 0e0f 	mov.w	lr, #15
 8000c48:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000c4c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c50:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000c54:	d033      	beq.n	8000cbe <HAL_GPIO_Init+0x166>
 8000c56:	4e1f      	ldr	r6, [pc, #124]	; (8000cd4 <HAL_GPIO_Init+0x17c>)
 8000c58:	42b0      	cmp	r0, r6
 8000c5a:	d032      	beq.n	8000cc2 <HAL_GPIO_Init+0x16a>
 8000c5c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c60:	42b0      	cmp	r0, r6
 8000c62:	d030      	beq.n	8000cc6 <HAL_GPIO_Init+0x16e>
 8000c64:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c68:	42b0      	cmp	r0, r6
 8000c6a:	d02e      	beq.n	8000cca <HAL_GPIO_Init+0x172>
 8000c6c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c70:	42b0      	cmp	r0, r6
 8000c72:	bf14      	ite	ne
 8000c74:	2607      	movne	r6, #7
 8000c76:	2604      	moveq	r6, #4
 8000c78:	fa06 f60c 	lsl.w	r6, r6, ip
 8000c7c:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c80:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8000c82:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c84:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c86:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000c8a:	bf0c      	ite	eq
 8000c8c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000c8e:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8000c90:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 8000c92:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c94:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000c98:	bf0c      	ite	eq
 8000c9a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000c9c:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000c9e:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 8000ca0:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ca2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000ca6:	bf0c      	ite	eq
 8000ca8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000caa:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8000cac:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 8000cae:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cb0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000cb2:	bf54      	ite	pl
 8000cb4:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000cb6:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000cb8:	60d6      	str	r6, [r2, #12]
    position++;
 8000cba:	3301      	adds	r3, #1
 8000cbc:	e754      	b.n	8000b68 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	e7da      	b.n	8000c78 <HAL_GPIO_Init+0x120>
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	e7d8      	b.n	8000c78 <HAL_GPIO_Init+0x120>
 8000cc6:	2602      	movs	r6, #2
 8000cc8:	e7d6      	b.n	8000c78 <HAL_GPIO_Init+0x120>
 8000cca:	2603      	movs	r6, #3
 8000ccc:	e7d4      	b.n	8000c78 <HAL_GPIO_Init+0x120>
 8000cce:	bf00      	nop
 8000cd0:	40010400 	.word	0x40010400
 8000cd4:	48000400 	.word	0x48000400
 8000cd8:	40021000 	.word	0x40021000

08000cdc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cdc:	b10a      	cbz	r2, 8000ce2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cde:	6181      	str	r1, [r0, #24]
 8000ce0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ce2:	6281      	str	r1, [r0, #40]	; 0x28
 8000ce4:	4770      	bx	lr

08000ce6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000ce6:	6943      	ldr	r3, [r0, #20]
 8000ce8:	4059      	eors	r1, r3
 8000cea:	6141      	str	r1, [r0, #20]
 8000cec:	4770      	bx	lr

08000cee <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000cee:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8000cf2:	2a01      	cmp	r2, #1
{
 8000cf4:	b510      	push	{r4, lr}
 8000cf6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000cf8:	d00b      	beq.n	8000d12 <HAL_PCD_SetAddress+0x24>
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 8000d00:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000d04:	6800      	ldr	r0, [r0, #0]
 8000d06:	f001 fd9f 	bl	8002848 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 8000d10:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000d12:	2002      	movs	r0, #2
  return HAL_OK;
}
 8000d14:	bd10      	pop	{r4, pc}

08000d16 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000d16:	b570      	push	{r4, r5, r6, lr}
 8000d18:	4604      	mov	r4, r0
 8000d1a:	f001 000f 	and.w	r0, r1, #15
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000d1e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000d22:	b2c5      	uxtb	r5, r0
 8000d24:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8000d28:	fb01 4105 	mla	r1, r1, r5, r4
    ep->is_in = 1U;
 8000d2c:	bf15      	itete	ne
 8000d2e:	eb04 1545 	addne.w	r5, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
    ep->is_in = 0U;
 8000d32:	eb04 1545 	addeq.w	r5, r4, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8000d36:	3128      	addne	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8000d38:	f501 710a 	addeq.w	r1, r1, #552	; 0x228
    ep->is_in = 1U;
 8000d3c:	bf15      	itete	ne
 8000d3e:	2601      	movne	r6, #1
    ep->is_in = 0U;
 8000d40:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 8000d42:	f885 6029 	strbne.w	r6, [r5, #41]	; 0x29
    ep->is_in = 0U;
 8000d46:	f885 6229 	strbeq.w	r6, [r5, #553]	; 0x229
  }

  ep->num = ep_addr & 0xFU;
  ep->maxpacket = ep_mps;
 8000d4a:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8000d4c:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 8000d4e:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & 0xFU;
 8000d50:	b2c0      	uxtb	r0, r0
 8000d52:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 8000d54:	b102      	cbz	r2, 8000d58 <HAL_PCD_EP_Open+0x42>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000d56:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000d58:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8000d5a:	bf04      	itt	eq
 8000d5c:	2300      	moveq	r3, #0
 8000d5e:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8000d60:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d009      	beq.n	8000d7c <HAL_PCD_EP_Open+0x66>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000d6e:	6820      	ldr	r0, [r4, #0]
 8000d70:	f001 fb8c 	bl	800248c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d74:	2000      	movs	r0, #0
 8000d76:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428

  return ret;
 8000d7a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8000d7c:	2002      	movs	r0, #2
}
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}

08000d80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d80:	b570      	push	{r4, r5, r6, lr}
 8000d82:	f001 010f 	and.w	r1, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0xFU];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d86:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 8000d8a:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000d8c:	2500      	movs	r5, #0
  ep->is_in = 0U;
  ep->num = ep_addr & 0xFU;
 8000d8e:	f886 1228 	strb.w	r1, [r6, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8000d92:	f504 710a 	add.w	r1, r4, #552	; 0x228
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d96:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8000d98:	f8c6 223c 	str.w	r2, [r6, #572]	; 0x23c
  ep->xfer_len = len;
 8000d9c:	f8c6 3240 	str.w	r3, [r6, #576]	; 0x240
  ep->xfer_count = 0U;
 8000da0:	f8c6 5244 	str.w	r5, [r6, #580]	; 0x244
  ep->is_in = 0U;
 8000da4:	f886 5229 	strb.w	r5, [r6, #553]	; 0x229
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000da8:	6800      	ldr	r0, [r0, #0]
 8000daa:	f001 fd6b 	bl	8002884 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000dae:	4628      	mov	r0, r5
 8000db0:	bd70      	pop	{r4, r5, r6, pc}

08000db2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000db2:	b570      	push	{r4, r5, r6, lr}
 8000db4:	f001 010f 	and.w	r1, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0xFU];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000db8:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8000dbc:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
 8000dbe:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_count = 0U;
 8000dc0:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000dc2:	2301      	movs	r3, #1
  ep->num = ep_addr & 0xFU;
 8000dc4:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8000dc8:	f104 0128 	add.w	r1, r4, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000dcc:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8000dce:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_count = 0U;
 8000dd0:	646e      	str	r6, [r5, #68]	; 0x44
  ep->is_in = 1U;
 8000dd2:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000dd6:	6800      	ldr	r0, [r0, #0]
 8000dd8:	f001 fd54 	bl	8002884 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000ddc:	4630      	mov	r0, r6
 8000dde:	bd70      	pop	{r4, r5, r6, pc}

08000de0 <HAL_PCD_IRQHandler>:
{
 8000de0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000de4:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000de6:	6800      	ldr	r0, [r0, #0]
 8000de8:	f001 fd34 	bl	8002854 <USB_ReadInterrupts>
 8000dec:	0400      	lsls	r0, r0, #16
 8000dee:	f100 8230 	bmi.w	8001252 <HAL_PCD_IRQHandler+0x472>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000df2:	6820      	ldr	r0, [r4, #0]
 8000df4:	f001 fd2e 	bl	8002854 <USB_ReadInterrupts>
 8000df8:	0541      	lsls	r1, r0, #21
 8000dfa:	d50f      	bpl.n	8000e1c <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000dfc:	6822      	ldr	r2, [r4, #0]
 8000dfe:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000e02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e06:	041b      	lsls	r3, r3, #16
 8000e08:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 8000e0a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e0c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000e10:	f002 fdad 	bl	800396e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e14:	2100      	movs	r1, #0
 8000e16:	4620      	mov	r0, r4
 8000e18:	f7ff ff69 	bl	8000cee <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000e1c:	6820      	ldr	r0, [r4, #0]
 8000e1e:	f001 fd19 	bl	8002854 <USB_ReadInterrupts>
 8000e22:	0443      	lsls	r3, r0, #17
 8000e24:	d508      	bpl.n	8000e38 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e26:	6822      	ldr	r2, [r4, #0]
 8000e28:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e30:	041b      	lsls	r3, r3, #16
 8000e32:	0c1b      	lsrs	r3, r3, #16
 8000e34:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000e38:	6820      	ldr	r0, [r4, #0]
 8000e3a:	f001 fd0b 	bl	8002854 <USB_ReadInterrupts>
 8000e3e:	0487      	lsls	r7, r0, #18
 8000e40:	d508      	bpl.n	8000e54 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e42:	6822      	ldr	r2, [r4, #0]
 8000e44:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000e48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e4c:	041b      	lsls	r3, r3, #16
 8000e4e:	0c1b      	lsrs	r3, r3, #16
 8000e50:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e54:	6820      	ldr	r0, [r4, #0]
 8000e56:	f001 fcfd 	bl	8002854 <USB_ReadInterrupts>
 8000e5a:	04c6      	lsls	r6, r0, #19
 8000e5c:	d526      	bpl.n	8000eac <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000e5e:	6822      	ldr	r2, [r4, #0]
 8000e60:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000e64:	f023 0304 	bic.w	r3, r3, #4
 8000e68:	041b      	lsls	r3, r3, #16
 8000e6a:	0c1b      	lsrs	r3, r3, #16
 8000e6c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e70:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000e74:	f023 0308 	bic.w	r3, r3, #8
 8000e78:	041b      	lsls	r3, r3, #16
 8000e7a:	0c1b      	lsrs	r3, r3, #16
 8000e7c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8000e80:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d105      	bne.n	8000e94 <HAL_PCD_IRQHandler+0xb4>
      hpcd->LPM_State = LPM_L0;
 8000e88:	2100      	movs	r1, #0
 8000e8a:	f884 1460 	strb.w	r1, [r4, #1120]	; 0x460
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f002 fe04 	bl	8003a9c <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8000e94:	4620      	mov	r0, r4
 8000e96:	f002 fd87 	bl	80039a8 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e9a:	6822      	ldr	r2, [r4, #0]
 8000e9c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000ea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ea4:	041b      	lsls	r3, r3, #16
 8000ea6:	0c1b      	lsrs	r3, r3, #16
 8000ea8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000eac:	6820      	ldr	r0, [r4, #0]
 8000eae:	f001 fcd1 	bl	8002854 <USB_ReadInterrupts>
 8000eb2:	0505      	lsls	r5, r0, #20
 8000eb4:	d51d      	bpl.n	8000ef2 <HAL_PCD_IRQHandler+0x112>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000eb6:	6820      	ldr	r0, [r4, #0]
 8000eb8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	f043 0308 	orr.w	r3, r3, #8
 8000ec2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000ec6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000eca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ece:	041b      	lsls	r3, r3, #16
 8000ed0:	0c1b      	lsrs	r3, r3, #16
 8000ed2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000ed6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8000ee4:	f001 fcb6 	bl	8002854 <USB_ReadInterrupts>
 8000ee8:	04c0      	lsls	r0, r0, #19
 8000eea:	d402      	bmi.n	8000ef2 <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_SuspendCallback(hpcd);
 8000eec:	4620      	mov	r0, r4
 8000eee:	f002 fd4b 	bl	8003988 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8000ef2:	6820      	ldr	r0, [r4, #0]
 8000ef4:	f001 fcae 	bl	8002854 <USB_ReadInterrupts>
 8000ef8:	0601      	lsls	r1, r0, #24
 8000efa:	d529      	bpl.n	8000f50 <HAL_PCD_IRQHandler+0x170>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000f02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f06:	0412      	lsls	r2, r2, #16
 8000f08:	0c12      	lsrs	r2, r2, #16
 8000f0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8000f0e:	f894 2460 	ldrb.w	r2, [r4, #1120]	; 0x460
 8000f12:	2a00      	cmp	r2, #0
 8000f14:	f040 81a2 	bne.w	800125c <HAL_PCD_IRQHandler+0x47c>
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000f18:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000f1c:	b292      	uxth	r2, r2
 8000f1e:	f042 0204 	orr.w	r2, r2, #4
 8000f22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000f26:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000f2a:	b292      	uxth	r2, r2
 8000f2c:	f042 0208 	orr.w	r2, r2, #8
 8000f30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000f34:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000f38:	f3c3 038d 	ubfx	r3, r3, #2, #14
      hpcd->LPM_State = LPM_L1;
 8000f3c:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000f3e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 8000f42:	f884 1460 	strb.w	r1, [r4, #1120]	; 0x460
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000f46:	f8c4 3464 	str.w	r3, [r4, #1124]	; 0x464
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	f002 fda6 	bl	8003a9c <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000f50:	6820      	ldr	r0, [r4, #0]
 8000f52:	f001 fc7f 	bl	8002854 <USB_ReadInterrupts>
 8000f56:	0582      	lsls	r2, r0, #22
 8000f58:	d50b      	bpl.n	8000f72 <HAL_PCD_IRQHandler+0x192>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000f5a:	6822      	ldr	r2, [r4, #0]
 8000f5c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000f60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f64:	041b      	lsls	r3, r3, #16
 8000f66:	0c1b      	lsrs	r3, r3, #16
 8000f68:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f002 fcfa 	bl	8003966 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000f72:	6820      	ldr	r0, [r4, #0]
 8000f74:	f001 fc6e 	bl	8002854 <USB_ReadInterrupts>
 8000f78:	05c3      	lsls	r3, r0, #23
 8000f7a:	d508      	bpl.n	8000f8e <HAL_PCD_IRQHandler+0x1ae>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000f7c:	6822      	ldr	r2, [r4, #0]
 8000f7e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000f82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f86:	041b      	lsls	r3, r3, #16
 8000f88:	0c1b      	lsrs	r3, r3, #16
 8000f8a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8000f8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 8000f92:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8000f96:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 8000f98:	f011 070f 	ands.w	r7, r1, #15
 8000f9c:	f040 80a5 	bne.w	80010ea <HAL_PCD_IRQHandler+0x30a>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fa0:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000fa2:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fa6:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000fa8:	d129      	bne.n	8000ffe <HAL_PCD_IRQHandler+0x21e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000faa:	ea03 030a 	and.w	r3, r3, sl
 8000fae:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000fb0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000fb4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000fb8:	f200 4002 	addw	r0, r0, #1026	; 0x402
 8000fbc:	fa10 f083 	uxtah	r0, r0, r3
 8000fc0:	f830 3032 	ldrh.w	r3, [r0, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 8000fc4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000fc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fca:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000fcc:	4413      	add	r3, r2
 8000fce:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f002 fcc1 	bl	8003958 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000fd6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000fda:	b153      	cbz	r3, 8000ff2 <HAL_PCD_IRQHandler+0x212>
 8000fdc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000fde:	b942      	cbnz	r2, 8000ff2 <HAL_PCD_IRQHandler+0x212>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000fe0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000fe4:	6821      	ldr	r1, [r4, #0]
 8000fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fea:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000fee:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000ff2:	6820      	ldr	r0, [r4, #0]
 8000ff4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000ff8:	041a      	lsls	r2, r3, #16
 8000ffa:	d4ca      	bmi.n	8000f92 <HAL_PCD_IRQHandler+0x1b2>
 8000ffc:	e6f9      	b.n	8000df2 <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000ffe:	051a      	lsls	r2, r3, #20
 8001000:	d51e      	bpl.n	8001040 <HAL_PCD_IRQHandler+0x260>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001002:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001006:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 800100a:	f200 4106 	addw	r1, r0, #1030	; 0x406
 800100e:	fa11 f383 	uxtah	r3, r1, r3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 8001012:	f504 6186 	add.w	r1, r4, #1072	; 0x430
 8001016:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 800101a:	f8b4 222e 	ldrh.w	r2, [r4, #558]	; 0x22e
 800101e:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001022:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 8001026:	f001 fd15 	bl	8002a54 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800102a:	6822      	ldr	r2, [r4, #0]
 800102c:	8813      	ldrh	r3, [r2, #0]
 800102e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001032:	051b      	lsls	r3, r3, #20
 8001034:	0d1b      	lsrs	r3, r3, #20
 8001036:	8013      	strh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001038:	4620      	mov	r0, r4
 800103a:	f002 fc7f 	bl	800393c <HAL_PCD_SetupStageCallback>
 800103e:	e7d8      	b.n	8000ff2 <HAL_PCD_IRQHandler+0x212>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001040:	041f      	lsls	r7, r3, #16
 8001042:	d5d6      	bpl.n	8000ff2 <HAL_PCD_IRQHandler+0x212>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001044:	8803      	ldrh	r3, [r0, #0]
 8001046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800104a:	051b      	lsls	r3, r3, #20
 800104c:	0d1b      	lsrs	r3, r3, #20
 800104e:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001050:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001054:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8001058:	f200 4106 	addw	r1, r0, #1030	; 0x406
 800105c:	fa11 f383 	uxtah	r3, r1, r3
 8001060:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8001064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001068:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244

          if (ep->xfer_count != 0U)
 800106c:	b163      	cbz	r3, 8001088 <HAL_PCD_IRQHandler+0x2a8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 800106e:	f8b4 222e 	ldrh.w	r2, [r4, #558]	; 0x22e
 8001072:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8001076:	f001 fced 	bl	8002a54 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800107a:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 800107e:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8001082:	4413      	add	r3, r2
 8001084:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001088:	2100      	movs	r1, #0
 800108a:	4620      	mov	r0, r4
 800108c:	f002 fc5c 	bl	8003948 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001090:	6822      	ldr	r2, [r4, #0]
 8001092:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
 8001096:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800109a:	f202 4506 	addw	r5, r2, #1030	; 0x406
 800109e:	b289      	uxth	r1, r1
 80010a0:	b953      	cbnz	r3, 80010b8 <HAL_PCD_IRQHandler+0x2d8>
 80010a2:	5a6b      	ldrh	r3, [r5, r1]
 80010a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80010a8:	049b      	lsls	r3, r3, #18
 80010aa:	0c9b      	lsrs	r3, r3, #18
 80010ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80010b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80010b4:	526b      	strh	r3, [r5, r1]
 80010b6:	e007      	b.n	80010c8 <HAL_PCD_IRQHandler+0x2e8>
 80010b8:	2b3d      	cmp	r3, #61	; 0x3d
 80010ba:	d811      	bhi.n	80010e0 <HAL_PCD_IRQHandler+0x300>
 80010bc:	0858      	lsrs	r0, r3, #1
 80010be:	07de      	lsls	r6, r3, #31
 80010c0:	bf48      	it	mi
 80010c2:	3001      	addmi	r0, #1
 80010c4:	0280      	lsls	r0, r0, #10
 80010c6:	5268      	strh	r0, [r5, r1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80010c8:	8813      	ldrh	r3, [r2, #0]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	ea03 030b 	and.w	r3, r3, fp
 80010d0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80010d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010dc:	8013      	strh	r3, [r2, #0]
 80010de:	e788      	b.n	8000ff2 <HAL_PCD_IRQHandler+0x212>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80010e0:	4860      	ldr	r0, [pc, #384]	; (8001264 <HAL_PCD_IRQHandler+0x484>)
 80010e2:	095b      	lsrs	r3, r3, #5
 80010e4:	ea40 2383 	orr.w	r3, r0, r3, lsl #10
 80010e8:	e7e4      	b.n	80010b4 <HAL_PCD_IRQHandler+0x2d4>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80010ea:	b23e      	sxth	r6, r7
 80010ec:	f830 9026 	ldrh.w	r9, [r0, r6, lsl #2]
 80010f0:	fa1f f989 	uxth.w	r9, r9
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80010f4:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 80010f8:	d03e      	beq.n	8001178 <HAL_PCD_IRQHandler+0x398>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80010fa:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 80010fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001102:	051b      	lsls	r3, r3, #20
 8001104:	0d1b      	lsrs	r3, r3, #20
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001106:	ea4f 1847 	mov.w	r8, r7, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800110a:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800110e:	eb04 0108 	add.w	r1, r4, r8
 8001112:	f891 3234 	ldrb.w	r3, [r1, #564]	; 0x234
 8001116:	2b00      	cmp	r3, #0
 8001118:	d157      	bne.n	80011ca <HAL_PCD_IRQHandler+0x3ea>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800111a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800111e:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 8001122:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001126:	fa15 f383 	uxtah	r3, r5, r3
 800112a:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 800112e:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8001132:	b135      	cbz	r5, 8001142 <HAL_PCD_IRQHandler+0x362>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001134:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
 8001138:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 800113c:	462b      	mov	r3, r5
 800113e:	f001 fc89 	bl	8002a54 <USB_ReadPMA>
 8001142:	eb04 1346 	add.w	r3, r4, r6, lsl #5
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
        ep->xfer_buff += count;
 8001146:	eb04 0108 	add.w	r1, r4, r8
        ep->xfer_count += count;
 800114a:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800114e:	442a      	add	r2, r5
 8001150:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
        ep->xfer_buff += count;
 8001154:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
 8001158:	442a      	add	r2, r5
 800115a:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800115e:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001162:	b11b      	cbz	r3, 800116c <HAL_PCD_IRQHandler+0x38c>
 8001164:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8001168:	4285      	cmp	r5, r0
 800116a:	d269      	bcs.n	8001240 <HAL_PCD_IRQHandler+0x460>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800116c:	44a0      	add	r8, r4
 800116e:	4620      	mov	r0, r4
 8001170:	f898 1228 	ldrb.w	r1, [r8, #552]	; 0x228
 8001174:	f002 fbe8 	bl	8003948 <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001178:	f019 0f80 	tst.w	r9, #128	; 0x80
 800117c:	f43f af39 	beq.w	8000ff2 <HAL_PCD_IRQHandler+0x212>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001180:	6823      	ldr	r3, [r4, #0]
 8001182:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8001186:	b292      	uxth	r2, r2
 8001188:	ea02 020a 	and.w	r2, r2, sl
 800118c:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001190:	eb04 1747 	add.w	r7, r4, r7, lsl #5
 8001194:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001198:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800119c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80011a0:	fa13 f382 	uxtah	r3, r3, r2
 80011a4:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 80011a8:	f833 2031 	ldrh.w	r2, [r3, r1, lsl #3]
 80011ac:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80011b0:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80011b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011b4:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80011b8:	441a      	add	r2, r3
 80011ba:	63fa      	str	r2, [r7, #60]	; 0x3c

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80011bc:	6c33      	ldr	r3, [r6, #64]	; 0x40
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80011be:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d143      	bne.n	800124c <HAL_PCD_IRQHandler+0x46c>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80011c4:	f002 fbc8 	bl	8003958 <HAL_PCD_DataInStageCallback>
 80011c8:	e713      	b.n	8000ff2 <HAL_PCD_IRQHandler+0x212>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80011ca:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 80011ce:	b213      	sxth	r3, r2
 80011d0:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 80011d4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80011d8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80011dc:	d022      	beq.n	8001224 <HAL_PCD_IRQHandler+0x444>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80011de:	f200 4502 	addw	r5, r0, #1026	; 0x402
 80011e2:	fa15 f383 	uxtah	r3, r5, r3
 80011e6:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 80011ea:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 80011ee:	b135      	cbz	r5, 80011fe <HAL_PCD_IRQHandler+0x41e>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80011f0:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 80011f4:	462b      	mov	r3, r5
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80011f6:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80011fa:	f001 fc2b 	bl	8002a54 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);
 80011fe:	eb04 0308 	add.w	r3, r4, r8
 8001202:	6822      	ldr	r2, [r4, #0]
 8001204:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8001208:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800120c:	b29b      	uxth	r3, r3
 800120e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800121a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800121e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001222:	e78e      	b.n	8001142 <HAL_PCD_IRQHandler+0x362>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001224:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001228:	fa15 f383 	uxtah	r3, r5, r3
 800122c:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8001230:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8001234:	2d00      	cmp	r5, #0
 8001236:	d0e2      	beq.n	80011fe <HAL_PCD_IRQHandler+0x41e>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001238:	462b      	mov	r3, r5
 800123a:	f8b1 2232 	ldrh.w	r2, [r1, #562]	; 0x232
 800123e:	e7da      	b.n	80011f6 <HAL_PCD_IRQHandler+0x416>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001240:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8001244:	4620      	mov	r0, r4
 8001246:	f7ff fd9b 	bl	8000d80 <HAL_PCD_EP_Receive>
 800124a:	e795      	b.n	8001178 <HAL_PCD_IRQHandler+0x398>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800124c:	f7ff fdb1 	bl	8000db2 <HAL_PCD_EP_Transmit>
 8001250:	e6cf      	b.n	8000ff2 <HAL_PCD_IRQHandler+0x212>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001252:	f8df a014 	ldr.w	sl, [pc, #20]	; 8001268 <HAL_PCD_IRQHandler+0x488>
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001256:	f8df b014 	ldr.w	fp, [pc, #20]	; 800126c <HAL_PCD_IRQHandler+0x48c>
 800125a:	e6ca      	b.n	8000ff2 <HAL_PCD_IRQHandler+0x212>
      HAL_PCD_SuspendCallback(hpcd);
 800125c:	4620      	mov	r0, r4
 800125e:	f002 fb93 	bl	8003988 <HAL_PCD_SuspendCallback>
 8001262:	e675      	b.n	8000f50 <HAL_PCD_IRQHandler+0x170>
 8001264:	ffff8000 	.word	0xffff8000
 8001268:	ffff8f0f 	.word	0xffff8f0f
 800126c:	ffffbf8f 	.word	0xffffbf8f

08001270 <HAL_PCD_EP_SetStall>:
{
 8001270:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8001272:	6843      	ldr	r3, [r0, #4]
 8001274:	f001 050f 	and.w	r5, r1, #15
 8001278:	429d      	cmp	r5, r3
{
 800127a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 800127c:	d82d      	bhi.n	80012da <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 800127e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001282:	f04f 0320 	mov.w	r3, #32
 8001286:	d01e      	beq.n	80012c6 <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 8001288:	eb00 1245 	add.w	r2, r0, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800128c:	fb03 0305 	mla	r3, r3, r5, r0
    ep->is_in = 1U;
 8001290:	2101      	movs	r1, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001292:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 8001294:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
  ep->is_stall = 1U;
 8001298:	2201      	movs	r2, #1
 800129a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 800129c:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 800129e:	f894 1428 	ldrb.w	r1, [r4, #1064]	; 0x428
 80012a2:	4291      	cmp	r1, r2
 80012a4:	d01b      	beq.n	80012de <HAL_PCD_EP_SetStall+0x6e>
 80012a6:	f884 2428 	strb.w	r2, [r4, #1064]	; 0x428
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80012aa:	4619      	mov	r1, r3
 80012ac:	6820      	ldr	r0, [r4, #0]
 80012ae:	f001 fa63 	bl	8002778 <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 80012b2:	b925      	cbnz	r5, 80012be <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80012b4:	f504 6186 	add.w	r1, r4, #1072	; 0x430
 80012b8:	6820      	ldr	r0, [r4, #0]
 80012ba:	f001 facf 	bl	800285c <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80012be:	2000      	movs	r0, #0
 80012c0:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80012c4:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80012c6:	fb03 0301 	mla	r3, r3, r1, r0
    ep->is_in = 0U;
 80012ca:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80012ce:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80012d0:	f503 730a 	add.w	r3, r3, #552	; 0x228
    ep->is_in = 0U;
 80012d4:	f881 2229 	strb.w	r2, [r1, #553]	; 0x229
 80012d8:	e7de      	b.n	8001298 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 80012da:	2001      	movs	r0, #1
 80012dc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80012de:	2002      	movs	r0, #2
}
 80012e0:	bd38      	pop	{r3, r4, r5, pc}

080012e2 <HAL_PCD_EP_ClrStall>:
{
 80012e2:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80012e4:	6843      	ldr	r3, [r0, #4]
 80012e6:	f001 020f 	and.w	r2, r1, #15
 80012ea:	429a      	cmp	r2, r3
{
 80012ec:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80012ee:	d827      	bhi.n	8001340 <HAL_PCD_EP_ClrStall+0x5e>
  if ((0x80U & ep_addr) == 0x80U)
 80012f0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80012f4:	f04f 0120 	mov.w	r1, #32
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80012f8:	fb01 0102 	mla	r1, r1, r2, r0
 80012fc:	ea4f 1342 	mov.w	r3, r2, lsl #5
    ep->is_in = 1U;
 8001300:	bf19      	ittee	ne
 8001302:	181b      	addne	r3, r3, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001304:	3128      	addne	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8001306:	f501 710a 	addeq.w	r1, r1, #552	; 0x228
    ep->is_in = 0U;
 800130a:	191b      	addeq	r3, r3, r4
    ep->is_in = 1U;
 800130c:	bf14      	ite	ne
 800130e:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8001310:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 8001312:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8001316:	bf14      	ite	ne
 8001318:	f883 0029 	strbne.w	r0, [r3, #41]	; 0x29
    ep->is_in = 0U;
 800131c:	f883 0229 	strbeq.w	r0, [r3, #553]	; 0x229
  ep->is_stall = 0U;
 8001320:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & 0xFU;
 8001322:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001324:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
 8001328:	2b01      	cmp	r3, #1
 800132a:	d00b      	beq.n	8001344 <HAL_PCD_EP_ClrStall+0x62>
 800132c:	2301      	movs	r3, #1
 800132e:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001332:	6820      	ldr	r0, [r4, #0]
 8001334:	f001 fa41 	bl	80027ba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001338:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
  return HAL_OK;
 800133c:	4628      	mov	r0, r5
 800133e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001340:	2001      	movs	r0, #1
 8001342:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001344:	2002      	movs	r0, #2
}
 8001346:	bd38      	pop	{r3, r4, r5, pc}

08001348 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 8001348:	4a02      	ldr	r2, [pc, #8]	; (8001354 <HAL_PWR_EnableBkUpAccess+0xc>)
 800134a:	6813      	ldr	r3, [r2, #0]
 800134c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4770      	bx	lr
 8001354:	40007000 	.word	0x40007000

08001358 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001358:	4b02      	ldr	r3, [pc, #8]	; (8001364 <HAL_PWREx_GetVoltageRange+0xc>)
 800135a:	6818      	ldr	r0, [r3, #0]
#endif  
}
 800135c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40007000 	.word	0x40007000

08001368 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800136a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800136c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001370:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001374:	d11a      	bne.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001376:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800137a:	d013      	beq.n	80013a4 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800137c:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 800137e:	4912      	ldr	r1, [pc, #72]	; (80013c8 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001380:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001388:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 800138a:	4a10      	ldr	r2, [pc, #64]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x64>)
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	fbb2 f1f1 	udiv	r1, r2, r1
 8001392:	2232      	movs	r2, #50	; 0x32
 8001394:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8001396:	b112      	cbz	r2, 800139e <HAL_PWREx_ControlVoltageScaling+0x36>
 8001398:	6959      	ldr	r1, [r3, #20]
 800139a:	0549      	lsls	r1, r1, #21
 800139c:	d404      	bmi.n	80013a8 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	055b      	lsls	r3, r3, #21
 80013a2:	d40d      	bmi.n	80013c0 <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 80013a4:	2000      	movs	r0, #0
 80013a6:	4770      	bx	lr
        wait_loop_index--;
 80013a8:	3a01      	subs	r2, #1
 80013aa:	e7f4      	b.n	8001396 <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ac:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013b0:	bf1f      	itttt	ne
 80013b2:	681a      	ldrne	r2, [r3, #0]
 80013b4:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80013b8:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80013bc:	601a      	strne	r2, [r3, #0]
 80013be:	e7f1      	b.n	80013a4 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 80013c0:	2003      	movs	r0, #3
}  
 80013c2:	4770      	bx	lr
 80013c4:	40007000 	.word	0x40007000
 80013c8:	000f4240 	.word	0x000f4240
 80013cc:	20000000 	.word	0x20000000

080013d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80013d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80013d2:	4d1e      	ldr	r5, [pc, #120]	; (800144c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80013d4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80013d6:	00da      	lsls	r2, r3, #3
{
 80013d8:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80013da:	d518      	bpl.n	800140e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80013dc:	f7ff ffbc 	bl	8001358 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013e0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80013e4:	d123      	bne.n	800142e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80013e6:	2c80      	cmp	r4, #128	; 0x80
 80013e8:	d929      	bls.n	800143e <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80013ea:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80013ec:	bf8c      	ite	hi
 80013ee:	2002      	movhi	r0, #2
 80013f0:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80013f2:	4a17      	ldr	r2, [pc, #92]	; (8001450 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80013f4:	6813      	ldr	r3, [r2, #0]
 80013f6:	f023 0307 	bic.w	r3, r3, #7
 80013fa:	4303      	orrs	r3, r0
 80013fc:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80013fe:	6813      	ldr	r3, [r2, #0]
 8001400:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001404:	1a18      	subs	r0, r3, r0
 8001406:	bf18      	it	ne
 8001408:	2001      	movne	r0, #1
 800140a:	b003      	add	sp, #12
 800140c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001414:	65ab      	str	r3, [r5, #88]	; 0x58
 8001416:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001420:	f7ff ff9a 	bl	8001358 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001424:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800142a:	65ab      	str	r3, [r5, #88]	; 0x58
 800142c:	e7d8      	b.n	80013e0 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800142e:	2c80      	cmp	r4, #128	; 0x80
 8001430:	d807      	bhi.n	8001442 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001432:	d008      	beq.n	8001446 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001434:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001438:	4258      	negs	r0, r3
 800143a:	4158      	adcs	r0, r3
 800143c:	e7d9      	b.n	80013f2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800143e:	2000      	movs	r0, #0
 8001440:	e7d7      	b.n	80013f2 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001442:	2003      	movs	r0, #3
 8001444:	e7d5      	b.n	80013f2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001446:	2002      	movs	r0, #2
 8001448:	e7d3      	b.n	80013f2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	40022000 	.word	0x40022000

08001454 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001454:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	f012 0f0c 	tst.w	r2, #12
{
 800145c:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800145e:	d009      	beq.n	8001474 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001466:	2a0c      	cmp	r2, #12
 8001468:	d12d      	bne.n	80014c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	f002 0203 	and.w	r2, r2, #3
 8001470:	2a01      	cmp	r2, #1
 8001472:	d128      	bne.n	80014c6 <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001474:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001476:	4928      	ldr	r1, [pc, #160]	; (8001518 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001478:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800147a:	bf55      	itete	pl
 800147c:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001480:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001482:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001486:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800148a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800148e:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8001490:	f011 0f0c 	tst.w	r1, #12
 8001494:	bf0c      	ite	eq
 8001496:	4610      	moveq	r0, r2
 8001498:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800149a:	6899      	ldr	r1, [r3, #8]
 800149c:	f001 010c 	and.w	r1, r1, #12
 80014a0:	290c      	cmp	r1, #12
 80014a2:	d130      	bne.n	8001506 <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80014a4:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014a6:	68d8      	ldr	r0, [r3, #12]
 80014a8:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80014ac:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80014ae:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 80014b2:	2802      	cmp	r0, #2
 80014b4:	d019      	beq.n	80014ea <HAL_RCC_GetSysClockFreq+0x96>
 80014b6:	2803      	cmp	r0, #3
 80014b8:	d026      	beq.n	8001508 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80014ba:	fbb2 f2f1 	udiv	r2, r2, r1
 80014be:	68d8      	ldr	r0, [r3, #12]
 80014c0:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80014c4:	e017      	b.n	80014f6 <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	f002 020c 	and.w	r2, r2, #12
 80014cc:	2a04      	cmp	r2, #4
 80014ce:	d007      	beq.n	80014e0 <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	f002 020c 	and.w	r2, r2, #12
 80014d6:	2a08      	cmp	r2, #8
 80014d8:	d104      	bne.n	80014e4 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 80014da:	4810      	ldr	r0, [pc, #64]	; (800151c <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80014dc:	2200      	movs	r2, #0
 80014de:	e7dc      	b.n	800149a <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 80014e0:	480f      	ldr	r0, [pc, #60]	; (8001520 <HAL_RCC_GetSysClockFreq+0xcc>)
 80014e2:	e7fb      	b.n	80014dc <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 80014e4:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80014e6:	4602      	mov	r2, r0
 80014e8:	e7d7      	b.n	800149a <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	480c      	ldr	r0, [pc, #48]	; (8001520 <HAL_RCC_GetSysClockFreq+0xcc>)
 80014ee:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80014f2:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80014fc:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80014fe:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001500:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001502:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001506:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	4804      	ldr	r0, [pc, #16]	; (800151c <HAL_RCC_GetSysClockFreq+0xc8>)
 800150c:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001510:	e7ef      	b.n	80014f2 <HAL_RCC_GetSysClockFreq+0x9e>
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000
 8001518:	08003f60 	.word	0x08003f60
 800151c:	007a1200 	.word	0x007a1200
 8001520:	00f42400 	.word	0x00f42400

08001524 <HAL_RCC_OscConfig>:
{
 8001524:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(RCC_OscInitStruct == NULL)
 8001528:	4605      	mov	r5, r0
 800152a:	b908      	cbnz	r0, 8001530 <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 800152c:	2001      	movs	r0, #1
 800152e:	e08d      	b.n	800164c <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001530:	6803      	ldr	r3, [r0, #0]
 8001532:	06d8      	lsls	r0, r3, #27
 8001534:	d538      	bpl.n	80015a8 <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001536:	4cab      	ldr	r4, [pc, #684]	; (80017e4 <HAL_RCC_OscConfig+0x2c0>)
 8001538:	68a3      	ldr	r3, [r4, #8]
 800153a:	f013 0f0c 	tst.w	r3, #12
 800153e:	d161      	bne.n	8001604 <HAL_RCC_OscConfig+0xe0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001540:	6823      	ldr	r3, [r4, #0]
 8001542:	0799      	lsls	r1, r3, #30
 8001544:	d502      	bpl.n	800154c <HAL_RCC_OscConfig+0x28>
 8001546:	69ab      	ldr	r3, [r5, #24]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0ef      	beq.n	800152c <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800154c:	6823      	ldr	r3, [r4, #0]
 800154e:	6a28      	ldr	r0, [r5, #32]
 8001550:	071a      	lsls	r2, r3, #28
 8001552:	bf56      	itet	pl
 8001554:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001558:	6823      	ldrmi	r3, [r4, #0]
 800155a:	091b      	lsrpl	r3, r3, #4
 800155c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001560:	4283      	cmp	r3, r0
 8001562:	d23a      	bcs.n	80015da <HAL_RCC_OscConfig+0xb6>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001564:	f7ff ff34 	bl	80013d0 <RCC_SetFlashLatencyFromMSIRange>
 8001568:	2800      	cmp	r0, #0
 800156a:	d1df      	bne.n	800152c <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800156c:	6823      	ldr	r3, [r4, #0]
 800156e:	f043 0308 	orr.w	r3, r3, #8
 8001572:	6023      	str	r3, [r4, #0]
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	6a2a      	ldr	r2, [r5, #32]
 8001578:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800157c:	4313      	orrs	r3, r2
 800157e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001580:	6863      	ldr	r3, [r4, #4]
 8001582:	69ea      	ldr	r2, [r5, #28]
 8001584:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001588:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800158c:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800158e:	f7ff ff61 	bl	8001454 <HAL_RCC_GetSysClockFreq>
 8001592:	68a3      	ldr	r3, [r4, #8]
 8001594:	4a94      	ldr	r2, [pc, #592]	; (80017e8 <HAL_RCC_OscConfig+0x2c4>)
 8001596:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800159a:	5cd3      	ldrb	r3, [r2, r3]
 800159c:	40d8      	lsrs	r0, r3
 800159e:	4b93      	ldr	r3, [pc, #588]	; (80017ec <HAL_RCC_OscConfig+0x2c8>)
 80015a0:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80015a2:	2000      	movs	r0, #0
 80015a4:	f7ff fa2e 	bl	8000a04 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a8:	682b      	ldr	r3, [r5, #0]
 80015aa:	07d8      	lsls	r0, r3, #31
 80015ac:	d461      	bmi.n	8001672 <HAL_RCC_OscConfig+0x14e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ae:	682b      	ldr	r3, [r5, #0]
 80015b0:	0799      	lsls	r1, r3, #30
 80015b2:	f100 80a9 	bmi.w	8001708 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b6:	682b      	ldr	r3, [r5, #0]
 80015b8:	071a      	lsls	r2, r3, #28
 80015ba:	f100 80e7 	bmi.w	800178c <HAL_RCC_OscConfig+0x268>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015be:	682b      	ldr	r3, [r5, #0]
 80015c0:	075b      	lsls	r3, r3, #29
 80015c2:	f100 8115 	bmi.w	80017f0 <HAL_RCC_OscConfig+0x2cc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015c6:	682b      	ldr	r3, [r5, #0]
 80015c8:	069a      	lsls	r2, r3, #26
 80015ca:	f100 817c 	bmi.w	80018c6 <HAL_RCC_OscConfig+0x3a2>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015ce:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80015d0:	2a00      	cmp	r2, #0
 80015d2:	f040 81a3 	bne.w	800191c <HAL_RCC_OscConfig+0x3f8>
  return HAL_OK;
 80015d6:	2000      	movs	r0, #0
 80015d8:	e038      	b.n	800164c <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015da:	6823      	ldr	r3, [r4, #0]
 80015dc:	f043 0308 	orr.w	r3, r3, #8
 80015e0:	6023      	str	r3, [r4, #0]
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015e8:	4303      	orrs	r3, r0
 80015ea:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ec:	6863      	ldr	r3, [r4, #4]
 80015ee:	69ea      	ldr	r2, [r5, #28]
 80015f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80015f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015f8:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015fa:	f7ff fee9 	bl	80013d0 <RCC_SetFlashLatencyFromMSIRange>
 80015fe:	2800      	cmp	r0, #0
 8001600:	d0c5      	beq.n	800158e <HAL_RCC_OscConfig+0x6a>
 8001602:	e793      	b.n	800152c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001604:	69ab      	ldr	r3, [r5, #24]
 8001606:	b323      	cbz	r3, 8001652 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_ENABLE();
 8001608:	6823      	ldr	r3, [r4, #0]
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001610:	f7ff fa20 	bl	8000a54 <HAL_GetTick>
 8001614:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	079b      	lsls	r3, r3, #30
 800161a:	d511      	bpl.n	8001640 <HAL_RCC_OscConfig+0x11c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800161c:	6823      	ldr	r3, [r4, #0]
 800161e:	f043 0308 	orr.w	r3, r3, #8
 8001622:	6023      	str	r3, [r4, #0]
 8001624:	6823      	ldr	r3, [r4, #0]
 8001626:	6a2a      	ldr	r2, [r5, #32]
 8001628:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800162c:	4313      	orrs	r3, r2
 800162e:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001630:	6863      	ldr	r3, [r4, #4]
 8001632:	69ea      	ldr	r2, [r5, #28]
 8001634:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001638:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800163c:	6063      	str	r3, [r4, #4]
 800163e:	e7b3      	b.n	80015a8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001640:	f7ff fa08 	bl	8000a54 <HAL_GetTick>
 8001644:	1b80      	subs	r0, r0, r6
 8001646:	2802      	cmp	r0, #2
 8001648:	d9e5      	bls.n	8001616 <HAL_RCC_OscConfig+0xf2>
            return HAL_TIMEOUT;
 800164a:	2003      	movs	r0, #3
}
 800164c:	b002      	add	sp, #8
 800164e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_MSI_DISABLE();
 8001652:	6823      	ldr	r3, [r4, #0]
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800165a:	f7ff f9fb 	bl	8000a54 <HAL_GetTick>
 800165e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001660:	6823      	ldr	r3, [r4, #0]
 8001662:	079f      	lsls	r7, r3, #30
 8001664:	d5a0      	bpl.n	80015a8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001666:	f7ff f9f5 	bl	8000a54 <HAL_GetTick>
 800166a:	1b80      	subs	r0, r0, r6
 800166c:	2802      	cmp	r0, #2
 800166e:	d9f7      	bls.n	8001660 <HAL_RCC_OscConfig+0x13c>
 8001670:	e7eb      	b.n	800164a <HAL_RCC_OscConfig+0x126>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001672:	4c5c      	ldr	r4, [pc, #368]	; (80017e4 <HAL_RCC_OscConfig+0x2c0>)
 8001674:	68a3      	ldr	r3, [r4, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b08      	cmp	r3, #8
 800167c:	d009      	beq.n	8001692 <HAL_RCC_OscConfig+0x16e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800167e:	68a3      	ldr	r3, [r4, #8]
 8001680:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001684:	2b0c      	cmp	r3, #12
 8001686:	d10b      	bne.n	80016a0 <HAL_RCC_OscConfig+0x17c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001688:	68e3      	ldr	r3, [r4, #12]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	2b03      	cmp	r3, #3
 8001690:	d106      	bne.n	80016a0 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001692:	6823      	ldr	r3, [r4, #0]
 8001694:	039a      	lsls	r2, r3, #14
 8001696:	d58a      	bpl.n	80015ae <HAL_RCC_OscConfig+0x8a>
 8001698:	686b      	ldr	r3, [r5, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d187      	bne.n	80015ae <HAL_RCC_OscConfig+0x8a>
 800169e:	e745      	b.n	800152c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a0:	686b      	ldr	r3, [r5, #4]
 80016a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a6:	d110      	bne.n	80016ca <HAL_RCC_OscConfig+0x1a6>
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016b0:	f7ff f9d0 	bl	8000a54 <HAL_GetTick>
 80016b4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	039b      	lsls	r3, r3, #14
 80016ba:	f53f af78 	bmi.w	80015ae <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016be:	f7ff f9c9 	bl	8000a54 <HAL_GetTick>
 80016c2:	1b80      	subs	r0, r0, r6
 80016c4:	2864      	cmp	r0, #100	; 0x64
 80016c6:	d9f6      	bls.n	80016b6 <HAL_RCC_OscConfig+0x192>
 80016c8:	e7bf      	b.n	800164a <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ce:	d104      	bne.n	80016da <HAL_RCC_OscConfig+0x1b6>
 80016d0:	6823      	ldr	r3, [r4, #0]
 80016d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d6:	6023      	str	r3, [r4, #0]
 80016d8:	e7e6      	b.n	80016a8 <HAL_RCC_OscConfig+0x184>
 80016da:	6822      	ldr	r2, [r4, #0]
 80016dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016e0:	6022      	str	r2, [r4, #0]
 80016e2:	6822      	ldr	r2, [r4, #0]
 80016e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016e8:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1e0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 80016ee:	f7ff f9b1 	bl	8000a54 <HAL_GetTick>
 80016f2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	039f      	lsls	r7, r3, #14
 80016f8:	f57f af59 	bpl.w	80015ae <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff f9aa 	bl	8000a54 <HAL_GetTick>
 8001700:	1b80      	subs	r0, r0, r6
 8001702:	2864      	cmp	r0, #100	; 0x64
 8001704:	d9f6      	bls.n	80016f4 <HAL_RCC_OscConfig+0x1d0>
 8001706:	e7a0      	b.n	800164a <HAL_RCC_OscConfig+0x126>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001708:	4c36      	ldr	r4, [pc, #216]	; (80017e4 <HAL_RCC_OscConfig+0x2c0>)
 800170a:	68a3      	ldr	r3, [r4, #8]
 800170c:	f003 030c 	and.w	r3, r3, #12
 8001710:	2b04      	cmp	r3, #4
 8001712:	d009      	beq.n	8001728 <HAL_RCC_OscConfig+0x204>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001714:	68a3      	ldr	r3, [r4, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800171a:	2b0c      	cmp	r3, #12
 800171c:	d113      	bne.n	8001746 <HAL_RCC_OscConfig+0x222>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800171e:	68e3      	ldr	r3, [r4, #12]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d10e      	bne.n	8001746 <HAL_RCC_OscConfig+0x222>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001728:	6823      	ldr	r3, [r4, #0]
 800172a:	055e      	lsls	r6, r3, #21
 800172c:	d503      	bpl.n	8001736 <HAL_RCC_OscConfig+0x212>
 800172e:	68eb      	ldr	r3, [r5, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	f43f aefb 	beq.w	800152c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001736:	6863      	ldr	r3, [r4, #4]
 8001738:	692a      	ldr	r2, [r5, #16]
 800173a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800173e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001742:	6063      	str	r3, [r4, #4]
 8001744:	e737      	b.n	80015b6 <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001746:	68eb      	ldr	r3, [r5, #12]
 8001748:	b17b      	cbz	r3, 800176a <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_HSI_ENABLE();
 800174a:	6823      	ldr	r3, [r4, #0]
 800174c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001750:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001752:	f7ff f97f 	bl	8000a54 <HAL_GetTick>
 8001756:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	0558      	lsls	r0, r3, #21
 800175c:	d4eb      	bmi.n	8001736 <HAL_RCC_OscConfig+0x212>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175e:	f7ff f979 	bl	8000a54 <HAL_GetTick>
 8001762:	1b80      	subs	r0, r0, r6
 8001764:	2802      	cmp	r0, #2
 8001766:	d9f7      	bls.n	8001758 <HAL_RCC_OscConfig+0x234>
 8001768:	e76f      	b.n	800164a <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_HSI_DISABLE();
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001770:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001772:	f7ff f96f 	bl	8000a54 <HAL_GetTick>
 8001776:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001778:	6823      	ldr	r3, [r4, #0]
 800177a:	0559      	lsls	r1, r3, #21
 800177c:	f57f af1b 	bpl.w	80015b6 <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001780:	f7ff f968 	bl	8000a54 <HAL_GetTick>
 8001784:	1b80      	subs	r0, r0, r6
 8001786:	2802      	cmp	r0, #2
 8001788:	d9f6      	bls.n	8001778 <HAL_RCC_OscConfig+0x254>
 800178a:	e75e      	b.n	800164a <HAL_RCC_OscConfig+0x126>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800178c:	696b      	ldr	r3, [r5, #20]
 800178e:	4c15      	ldr	r4, [pc, #84]	; (80017e4 <HAL_RCC_OscConfig+0x2c0>)
 8001790:	b19b      	cbz	r3, 80017ba <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 8001792:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800179e:	f7ff f959 	bl	8000a54 <HAL_GetTick>
 80017a2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80017a4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80017a8:	079f      	lsls	r7, r3, #30
 80017aa:	f53f af08 	bmi.w	80015be <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ae:	f7ff f951 	bl	8000a54 <HAL_GetTick>
 80017b2:	1b80      	subs	r0, r0, r6
 80017b4:	2802      	cmp	r0, #2
 80017b6:	d9f5      	bls.n	80017a4 <HAL_RCC_OscConfig+0x280>
 80017b8:	e747      	b.n	800164a <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_LSI_DISABLE();
 80017ba:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80017c6:	f7ff f945 	bl	8000a54 <HAL_GetTick>
 80017ca:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 80017cc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80017d0:	0798      	lsls	r0, r3, #30
 80017d2:	f57f aef4 	bpl.w	80015be <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d6:	f7ff f93d 	bl	8000a54 <HAL_GetTick>
 80017da:	1b80      	subs	r0, r0, r6
 80017dc:	2802      	cmp	r0, #2
 80017de:	d9f5      	bls.n	80017cc <HAL_RCC_OscConfig+0x2a8>
 80017e0:	e733      	b.n	800164a <HAL_RCC_OscConfig+0x126>
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000
 80017e8:	08003f50 	.word	0x08003f50
 80017ec:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017f0:	4c79      	ldr	r4, [pc, #484]	; (80019d8 <HAL_RCC_OscConfig+0x4b4>)
 80017f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017f4:	00d9      	lsls	r1, r3, #3
 80017f6:	d427      	bmi.n	8001848 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fe:	65a3      	str	r3, [r4, #88]	; 0x58
 8001800:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800180a:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800180c:	4e73      	ldr	r6, [pc, #460]	; (80019dc <HAL_RCC_OscConfig+0x4b8>)
 800180e:	6833      	ldr	r3, [r6, #0]
 8001810:	05da      	lsls	r2, r3, #23
 8001812:	d51b      	bpl.n	800184c <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001814:	68ab      	ldr	r3, [r5, #8]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d129      	bne.n	800186e <HAL_RCC_OscConfig+0x34a>
 800181a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001826:	f7ff f915 	bl	8000a54 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800182e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001830:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001834:	0798      	lsls	r0, r3, #30
 8001836:	d540      	bpl.n	80018ba <HAL_RCC_OscConfig+0x396>
    if(pwrclkchanged == SET)
 8001838:	2f00      	cmp	r7, #0
 800183a:	f43f aec4 	beq.w	80015c6 <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 800183e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001844:	65a3      	str	r3, [r4, #88]	; 0x58
 8001846:	e6be      	b.n	80015c6 <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 8001848:	2700      	movs	r7, #0
 800184a:	e7df      	b.n	800180c <HAL_RCC_OscConfig+0x2e8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800184c:	6833      	ldr	r3, [r6, #0]
 800184e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001852:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001854:	f7ff f8fe 	bl	8000a54 <HAL_GetTick>
 8001858:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185a:	6833      	ldr	r3, [r6, #0]
 800185c:	05db      	lsls	r3, r3, #23
 800185e:	d4d9      	bmi.n	8001814 <HAL_RCC_OscConfig+0x2f0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001860:	f7ff f8f8 	bl	8000a54 <HAL_GetTick>
 8001864:	eba0 0008 	sub.w	r0, r0, r8
 8001868:	2802      	cmp	r0, #2
 800186a:	d9f6      	bls.n	800185a <HAL_RCC_OscConfig+0x336>
 800186c:	e6ed      	b.n	800164a <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186e:	2b05      	cmp	r3, #5
 8001870:	d106      	bne.n	8001880 <HAL_RCC_OscConfig+0x35c>
 8001872:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800187e:	e7cc      	b.n	800181a <HAL_RCC_OscConfig+0x2f6>
 8001880:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001884:	f022 0201 	bic.w	r2, r2, #1
 8001888:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800188c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001890:	f022 0204 	bic.w	r2, r2, #4
 8001894:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1c4      	bne.n	8001826 <HAL_RCC_OscConfig+0x302>
      tickstart = HAL_GetTick();
 800189c:	f7ff f8da 	bl	8000a54 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80018a4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80018a6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80018aa:	0799      	lsls	r1, r3, #30
 80018ac:	d5c4      	bpl.n	8001838 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7ff f8d1 	bl	8000a54 <HAL_GetTick>
 80018b2:	1b80      	subs	r0, r0, r6
 80018b4:	4540      	cmp	r0, r8
 80018b6:	d9f6      	bls.n	80018a6 <HAL_RCC_OscConfig+0x382>
 80018b8:	e6c7      	b.n	800164a <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ba:	f7ff f8cb 	bl	8000a54 <HAL_GetTick>
 80018be:	1b80      	subs	r0, r0, r6
 80018c0:	4540      	cmp	r0, r8
 80018c2:	d9b5      	bls.n	8001830 <HAL_RCC_OscConfig+0x30c>
 80018c4:	e6c1      	b.n	800164a <HAL_RCC_OscConfig+0x126>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80018c8:	4c43      	ldr	r4, [pc, #268]	; (80019d8 <HAL_RCC_OscConfig+0x4b4>)
 80018ca:	b19b      	cbz	r3, 80018f4 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_HSI48_ENABLE();
 80018cc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80018d8:	f7ff f8bc 	bl	8000a54 <HAL_GetTick>
 80018dc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 80018de:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80018e2:	079b      	lsls	r3, r3, #30
 80018e4:	f53f ae73 	bmi.w	80015ce <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018e8:	f7ff f8b4 	bl	8000a54 <HAL_GetTick>
 80018ec:	1b80      	subs	r0, r0, r6
 80018ee:	2802      	cmp	r0, #2
 80018f0:	d9f5      	bls.n	80018de <HAL_RCC_OscConfig+0x3ba>
 80018f2:	e6aa      	b.n	800164a <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSI48_DISABLE();
 80018f4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80018f8:	f023 0301 	bic.w	r3, r3, #1
 80018fc:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001900:	f7ff f8a8 	bl	8000a54 <HAL_GetTick>
 8001904:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8001906:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800190a:	079f      	lsls	r7, r3, #30
 800190c:	f57f ae5f 	bpl.w	80015ce <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001910:	f7ff f8a0 	bl	8000a54 <HAL_GetTick>
 8001914:	1b80      	subs	r0, r0, r6
 8001916:	2802      	cmp	r0, #2
 8001918:	d9f5      	bls.n	8001906 <HAL_RCC_OscConfig+0x3e2>
 800191a:	e696      	b.n	800164a <HAL_RCC_OscConfig+0x126>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800191c:	4c2e      	ldr	r4, [pc, #184]	; (80019d8 <HAL_RCC_OscConfig+0x4b4>)
 800191e:	68a3      	ldr	r3, [r4, #8]
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	2b0c      	cmp	r3, #12
 8001926:	f43f ae01 	beq.w	800152c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 800192a:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800192c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800192e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001932:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001934:	d136      	bne.n	80019a4 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 8001936:	f7ff f88d 	bl	8000a54 <HAL_GetTick>
 800193a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800193c:	6823      	ldr	r3, [r4, #0]
 800193e:	0198      	lsls	r0, r3, #6
 8001940:	d42a      	bmi.n	8001998 <HAL_RCC_OscConfig+0x474>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001942:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001944:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001946:	06db      	lsls	r3, r3, #27
 8001948:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800194c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800194e:	4313      	orrs	r3, r2
 8001950:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001952:	3a01      	subs	r2, #1
 8001954:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001958:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800195a:	0852      	lsrs	r2, r2, #1
 800195c:	3a01      	subs	r2, #1
 800195e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001962:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001964:	0852      	lsrs	r2, r2, #1
 8001966:	3a01      	subs	r2, #1
 8001968:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800196c:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800196e:	6823      	ldr	r3, [r4, #0]
 8001970:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001974:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001976:	68e3      	ldr	r3, [r4, #12]
 8001978:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800197c:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800197e:	f7ff f869 	bl	8000a54 <HAL_GetTick>
 8001982:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001984:	6823      	ldr	r3, [r4, #0]
 8001986:	0199      	lsls	r1, r3, #6
 8001988:	f53f ae25 	bmi.w	80015d6 <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198c:	f7ff f862 	bl	8000a54 <HAL_GetTick>
 8001990:	1b40      	subs	r0, r0, r5
 8001992:	2802      	cmp	r0, #2
 8001994:	d9f6      	bls.n	8001984 <HAL_RCC_OscConfig+0x460>
 8001996:	e658      	b.n	800164a <HAL_RCC_OscConfig+0x126>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001998:	f7ff f85c 	bl	8000a54 <HAL_GetTick>
 800199c:	1b80      	subs	r0, r0, r6
 800199e:	2802      	cmp	r0, #2
 80019a0:	d9cc      	bls.n	800193c <HAL_RCC_OscConfig+0x418>
 80019a2:	e652      	b.n	800164a <HAL_RCC_OscConfig+0x126>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80019a8:	bf5e      	ittt	pl
 80019aa:	68e3      	ldrpl	r3, [r4, #12]
 80019ac:	f023 0303 	bicpl.w	r3, r3, #3
 80019b0:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80019b2:	68e3      	ldr	r3, [r4, #12]
 80019b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80019b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019bc:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80019be:	f7ff f849 	bl	8000a54 <HAL_GetTick>
 80019c2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80019c4:	6823      	ldr	r3, [r4, #0]
 80019c6:	019b      	lsls	r3, r3, #6
 80019c8:	f57f ae05 	bpl.w	80015d6 <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff f842 	bl	8000a54 <HAL_GetTick>
 80019d0:	1b40      	subs	r0, r0, r5
 80019d2:	2802      	cmp	r0, #2
 80019d4:	d9f6      	bls.n	80019c4 <HAL_RCC_OscConfig+0x4a0>
 80019d6:	e638      	b.n	800164a <HAL_RCC_OscConfig+0x126>
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40007000 	.word	0x40007000

080019e0 <HAL_RCC_ClockConfig>:
{
 80019e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019e4:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80019e6:	4604      	mov	r4, r0
 80019e8:	b910      	cbnz	r0, 80019f0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80019ea:	2001      	movs	r0, #1
 80019ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019f0:	4a40      	ldr	r2, [pc, #256]	; (8001af4 <HAL_RCC_ClockConfig+0x114>)
 80019f2:	6813      	ldr	r3, [r2, #0]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	428b      	cmp	r3, r1
 80019fa:	d328      	bcc.n	8001a4e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	07d9      	lsls	r1, r3, #31
 8001a00:	d430      	bmi.n	8001a64 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a02:	6821      	ldr	r1, [r4, #0]
 8001a04:	078a      	lsls	r2, r1, #30
 8001a06:	d45a      	bmi.n	8001abe <HAL_RCC_ClockConfig+0xde>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a08:	4a3a      	ldr	r2, [pc, #232]	; (8001af4 <HAL_RCC_ClockConfig+0x114>)
 8001a0a:	6813      	ldr	r3, [r2, #0]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	429e      	cmp	r6, r3
 8001a12:	d35c      	bcc.n	8001ace <HAL_RCC_ClockConfig+0xee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	f011 0f04 	tst.w	r1, #4
 8001a18:	4d37      	ldr	r5, [pc, #220]	; (8001af8 <HAL_RCC_ClockConfig+0x118>)
 8001a1a:	d163      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x104>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1c:	070b      	lsls	r3, r1, #28
 8001a1e:	d506      	bpl.n	8001a2e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a20:	68ab      	ldr	r3, [r5, #8]
 8001a22:	6922      	ldr	r2, [r4, #16]
 8001a24:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a28:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a2c:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a2e:	f7ff fd11 	bl	8001454 <HAL_RCC_GetSysClockFreq>
 8001a32:	68ab      	ldr	r3, [r5, #8]
 8001a34:	4a31      	ldr	r2, [pc, #196]	; (8001afc <HAL_RCC_ClockConfig+0x11c>)
 8001a36:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a3a:	5cd3      	ldrb	r3, [r2, r3]
 8001a3c:	40d8      	lsrs	r0, r3
 8001a3e:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <HAL_RCC_ClockConfig+0x120>)
 8001a40:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a42:	2000      	movs	r0, #0
 8001a44:	f7fe ffde 	bl	8000a04 <HAL_InitTick>
  return HAL_OK;
 8001a48:	2000      	movs	r0, #0
 8001a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	6813      	ldr	r3, [r2, #0]
 8001a50:	f023 0307 	bic.w	r3, r3, #7
 8001a54:	430b      	orrs	r3, r1
 8001a56:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a58:	6813      	ldr	r3, [r2, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	4299      	cmp	r1, r3
 8001a60:	d1c3      	bne.n	80019ea <HAL_RCC_ClockConfig+0xa>
 8001a62:	e7cb      	b.n	80019fc <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a64:	6862      	ldr	r2, [r4, #4]
 8001a66:	4d24      	ldr	r5, [pc, #144]	; (8001af8 <HAL_RCC_ClockConfig+0x118>)
 8001a68:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001a6a:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a6c:	d11b      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xc6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001a6e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001a72:	d0ba      	beq.n	80019ea <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a74:	68ab      	ldr	r3, [r5, #8]
 8001a76:	f023 0303 	bic.w	r3, r3, #3
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001a7e:	f7fe ffe9 	bl	8000a54 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a82:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001a86:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a88:	68ab      	ldr	r3, [r5, #8]
 8001a8a:	6862      	ldr	r2, [r4, #4]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a94:	d0b5      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a96:	f7fe ffdd 	bl	8000a54 <HAL_GetTick>
 8001a9a:	1bc0      	subs	r0, r0, r7
 8001a9c:	4540      	cmp	r0, r8
 8001a9e:	d9f3      	bls.n	8001a88 <HAL_RCC_ClockConfig+0xa8>
        return HAL_TIMEOUT;
 8001aa0:	2003      	movs	r0, #3
}
 8001aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	2a02      	cmp	r2, #2
 8001aa8:	d102      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xd0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001aaa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001aae:	e7e0      	b.n	8001a72 <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ab0:	b912      	cbnz	r2, 8001ab8 <HAL_RCC_ClockConfig+0xd8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001ab2:	f013 0f02 	tst.w	r3, #2
 8001ab6:	e7dc      	b.n	8001a72 <HAL_RCC_ClockConfig+0x92>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001ab8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001abc:	e7d9      	b.n	8001a72 <HAL_RCC_ClockConfig+0x92>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001abe:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <HAL_RCC_ClockConfig+0x118>)
 8001ac0:	68a0      	ldr	r0, [r4, #8]
 8001ac2:	6893      	ldr	r3, [r2, #8]
 8001ac4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ac8:	4303      	orrs	r3, r0
 8001aca:	6093      	str	r3, [r2, #8]
 8001acc:	e79c      	b.n	8001a08 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	6813      	ldr	r3, [r2, #0]
 8001ad0:	f023 0307 	bic.w	r3, r3, #7
 8001ad4:	4333      	orrs	r3, r6
 8001ad6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad8:	6813      	ldr	r3, [r2, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	429e      	cmp	r6, r3
 8001ae0:	d183      	bne.n	80019ea <HAL_RCC_ClockConfig+0xa>
 8001ae2:	e797      	b.n	8001a14 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae4:	68ab      	ldr	r3, [r5, #8]
 8001ae6:	68e2      	ldr	r2, [r4, #12]
 8001ae8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60ab      	str	r3, [r5, #8]
 8001af0:	e794      	b.n	8001a1c <HAL_RCC_ClockConfig+0x3c>
 8001af2:	bf00      	nop
 8001af4:	40022000 	.word	0x40022000
 8001af8:	40021000 	.word	0x40021000
 8001afc:	08003f50 	.word	0x08003f50
 8001b00:	20000000 	.word	0x20000000

08001b04 <HAL_RCC_GetHCLKFreq>:
}
 8001b04:	4b01      	ldr	r3, [pc, #4]	; (8001b0c <HAL_RCC_GetHCLKFreq+0x8>)
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000000 	.word	0x20000000

08001b10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001b12:	4b44      	ldr	r3, [pc, #272]	; (8001c24 <RCCEx_PLLSAI1_Config+0x114>)
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	f012 0f03 	tst.w	r2, #3
{
 8001b1a:	4605      	mov	r5, r0
 8001b1c:	460e      	mov	r6, r1
 8001b1e:	461c      	mov	r4, r3
 8001b20:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001b22:	d039      	beq.n	8001b98 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	f002 0203 	and.w	r2, r2, #3
 8001b2a:	4282      	cmp	r2, r0
 8001b2c:	d14b      	bne.n	8001bc6 <RCCEx_PLLSAI1_Config+0xb6>
       ||
 8001b2e:	2a00      	cmp	r2, #0
 8001b30:	d049      	beq.n	8001bc6 <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001b32:	68db      	ldr	r3, [r3, #12]
       ||
 8001b34:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001b36:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001b3a:	3301      	adds	r3, #1
       ||
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d142      	bne.n	8001bc6 <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001b46:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b48:	f7fe ff84 	bl	8000a54 <HAL_GetTick>
 8001b4c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8001b4e:	6823      	ldr	r3, [r4, #0]
 8001b50:	011a      	lsls	r2, r3, #4
 8001b52:	d441      	bmi.n	8001bd8 <RCCEx_PLLSAI1_Config+0xc8>
 8001b54:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001b56:	2e00      	cmp	r6, #0
 8001b58:	d045      	beq.n	8001be6 <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001b5a:	2e01      	cmp	r6, #1
 8001b5c:	d14f      	bne.n	8001bfe <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001b5e:	6922      	ldr	r2, [r4, #16]
 8001b60:	6928      	ldr	r0, [r5, #16]
 8001b62:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001b66:	0840      	lsrs	r0, r0, #1
 8001b68:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001b6c:	3801      	subs	r0, #1
 8001b6e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001b72:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001b76:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001b78:	6823      	ldr	r3, [r4, #0]
 8001b7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b7e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7fe ff68 	bl	8000a54 <HAL_GetTick>
 8001b84:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	011b      	lsls	r3, r3, #4
 8001b8a:	d545      	bpl.n	8001c18 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001b8c:	6923      	ldr	r3, [r4, #16]
 8001b8e:	69aa      	ldr	r2, [r5, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	6123      	str	r3, [r4, #16]
 8001b94:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8001b98:	2802      	cmp	r0, #2
 8001b9a:	d010      	beq.n	8001bbe <RCCEx_PLLSAI1_Config+0xae>
 8001b9c:	2803      	cmp	r0, #3
 8001b9e:	d014      	beq.n	8001bca <RCCEx_PLLSAI1_Config+0xba>
 8001ba0:	2801      	cmp	r0, #1
 8001ba2:	d110      	bne.n	8001bc6 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	079f      	lsls	r7, r3, #30
 8001ba8:	d5f5      	bpl.n	8001b96 <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001baa:	68e3      	ldr	r3, [r4, #12]
 8001bac:	686a      	ldr	r2, [r5, #4]
 8001bae:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001bb2:	3a01      	subs	r2, #1
 8001bb4:	4318      	orrs	r0, r3
 8001bb6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001bba:	60e0      	str	r0, [r4, #12]
 8001bbc:	e7c0      	b.n	8001b40 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001bc4:	d1f1      	bne.n	8001baa <RCCEx_PLLSAI1_Config+0x9a>
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	0391      	lsls	r1, r2, #14
 8001bce:	d4ec      	bmi.n	8001baa <RCCEx_PLLSAI1_Config+0x9a>
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001bd6:	e7f5      	b.n	8001bc4 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001bd8:	f7fe ff3c 	bl	8000a54 <HAL_GetTick>
 8001bdc:	1bc0      	subs	r0, r0, r7
 8001bde:	2802      	cmp	r0, #2
 8001be0:	d9b5      	bls.n	8001b4e <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001be2:	2003      	movs	r0, #3
 8001be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001be6:	6922      	ldr	r2, [r4, #16]
 8001be8:	68e9      	ldr	r1, [r5, #12]
 8001bea:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8001bee:	06c9      	lsls	r1, r1, #27
 8001bf0:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 8001bf4:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001bf8:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001bfa:	6123      	str	r3, [r4, #16]
 8001bfc:	e7bc      	b.n	8001b78 <RCCEx_PLLSAI1_Config+0x68>
 8001bfe:	6923      	ldr	r3, [r4, #16]
 8001c00:	6968      	ldr	r0, [r5, #20]
 8001c02:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001c06:	0840      	lsrs	r0, r0, #1
 8001c08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001c0c:	3801      	subs	r0, #1
 8001c0e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001c12:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001c16:	e7f0      	b.n	8001bfa <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001c18:	f7fe ff1c 	bl	8000a54 <HAL_GetTick>
 8001c1c:	1b80      	subs	r0, r0, r6
 8001c1e:	2802      	cmp	r0, #2
 8001c20:	d9b1      	bls.n	8001b86 <RCCEx_PLLSAI1_Config+0x76>
 8001c22:	e7de      	b.n	8001be2 <RCCEx_PLLSAI1_Config+0xd2>
 8001c24:	40021000 	.word	0x40021000

08001c28 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001c28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c2c:	6805      	ldr	r5, [r0, #0]
 8001c2e:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 8001c32:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c34:	d00e      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001c36:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001c38:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001c3c:	d05b      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8001c3e:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001c42:	d05d      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001c44:	2900      	cmp	r1, #0
 8001c46:	d166      	bne.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0xee>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c48:	3004      	adds	r0, #4
 8001c4a:	f7ff ff61 	bl	8001b10 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8001c4e:	4605      	mov	r5, r0
 8001c50:	2800      	cmp	r0, #0
 8001c52:	d055      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	039e      	lsls	r6, r3, #14
 8001c58:	d56d      	bpl.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5a:	4eac      	ldr	r6, [pc, #688]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001c5c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001c5e:	00d8      	lsls	r0, r3, #3
 8001c60:	d45b      	bmi.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c68:	65b3      	str	r3, [r6, #88]	; 0x58
 8001c6a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c74:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c76:	f8df 8298 	ldr.w	r8, [pc, #664]	; 8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8001c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8001c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c82:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8001c86:	f7fe fee5 	bl	8000a54 <HAL_GetTick>
 8001c8a:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8001c8c:	f8d8 3000 	ldr.w	r3, [r8]
 8001c90:	05d9      	lsls	r1, r3, #23
 8001c92:	d544      	bpl.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0xf6>
    if(ret == HAL_OK)
 8001c94:	2d00      	cmp	r5, #0
 8001c96:	d149      	bne.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x104>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c98:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c9c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001ca0:	d014      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001ca2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d011      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ca8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cac:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001cb0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001cb4:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cb8:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cc0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cc4:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001cc8:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ccc:	07da      	lsls	r2, r3, #31
 8001cce:	d509      	bpl.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001cd0:	f7fe fec0 	bl	8000a54 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001cd8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001cda:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001cde:	079b      	lsls	r3, r3, #30
 8001ce0:	f140 80eb 	bpl.w	8001eba <HAL_RCCEx_PeriphCLKConfig+0x292>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ce4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001ce8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8001cf4:	e01a      	b.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001cf6:	4a85      	ldr	r2, [pc, #532]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001cf8:	68d3      	ldr	r3, [r2, #12]
 8001cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfe:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d00:	4a82      	ldr	r2, [pc, #520]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d02:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001d04:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d08:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001d12:	2500      	movs	r5, #0
 8001d14:	e79e      	b.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 8001d16:	2501      	movs	r5, #1
 8001d18:	e79c      	b.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001d1a:	2700      	movs	r7, #0
 8001d1c:	e7ab      	b.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d1e:	f7fe fe99 	bl	8000a54 <HAL_GetTick>
 8001d22:	eba0 0009 	sub.w	r0, r0, r9
 8001d26:	2802      	cmp	r0, #2
 8001d28:	d9b0      	bls.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x64>
        ret = HAL_TIMEOUT;
 8001d2a:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001d2c:	b11f      	cbz	r7, 8001d36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2e:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d34:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	07d8      	lsls	r0, r3, #31
 8001d3a:	d508      	bpl.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d3c:	4973      	ldr	r1, [pc, #460]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d3e:	6a20      	ldr	r0, [r4, #32]
 8001d40:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d44:	f022 0203 	bic.w	r2, r2, #3
 8001d48:	4302      	orrs	r2, r0
 8001d4a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d4e:	0799      	lsls	r1, r3, #30
 8001d50:	d508      	bpl.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d52:	496e      	ldr	r1, [pc, #440]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d54:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001d56:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d5a:	f022 020c 	bic.w	r2, r2, #12
 8001d5e:	4302      	orrs	r2, r0
 8001d60:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d64:	075a      	lsls	r2, r3, #29
 8001d66:	d508      	bpl.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d68:	4968      	ldr	r1, [pc, #416]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d6a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001d6c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d70:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001d74:	4302      	orrs	r2, r0
 8001d76:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d7a:	069f      	lsls	r7, r3, #26
 8001d7c:	d508      	bpl.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d7e:	4963      	ldr	r1, [pc, #396]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d80:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001d82:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d86:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001d8a:	4302      	orrs	r2, r0
 8001d8c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d90:	059e      	lsls	r6, r3, #22
 8001d92:	d508      	bpl.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d94:	495d      	ldr	r1, [pc, #372]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d96:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001d98:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d9c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001da0:	4302      	orrs	r2, r0
 8001da2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001da6:	0558      	lsls	r0, r3, #21
 8001da8:	d508      	bpl.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001daa:	4958      	ldr	r1, [pc, #352]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001dac:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001dae:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001db2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001db6:	4302      	orrs	r2, r0
 8001db8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dbc:	0659      	lsls	r1, r3, #25
 8001dbe:	d508      	bpl.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dc0:	4952      	ldr	r1, [pc, #328]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001dc2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001dc4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001dc8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001dcc:	4302      	orrs	r2, r0
 8001dce:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001dd2:	061a      	lsls	r2, r3, #24
 8001dd4:	d508      	bpl.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001dd6:	494d      	ldr	r1, [pc, #308]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001dd8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001dda:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001dde:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001de2:	4302      	orrs	r2, r0
 8001de4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001de8:	05df      	lsls	r7, r3, #23
 8001dea:	d508      	bpl.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001dec:	4947      	ldr	r1, [pc, #284]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001dee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001df0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001df4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001df8:	4302      	orrs	r2, r0
 8001dfa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001dfe:	049e      	lsls	r6, r3, #18
 8001e00:	d50f      	bpl.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e02:	4a42      	ldr	r2, [pc, #264]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e04:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001e06:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e0a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001e0e:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001e10:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001e18:	d157      	bne.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e1a:	68d3      	ldr	r3, [r2, #12]
 8001e1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e20:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	0318      	lsls	r0, r3, #12
 8001e26:	d50f      	bpl.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e28:	4a38      	ldr	r2, [pc, #224]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e2a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001e2c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e30:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001e34:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001e36:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001e3e:	d14f      	bne.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e40:	68d3      	ldr	r3, [r2, #12]
 8001e42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e46:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001e48:	6823      	ldr	r3, [r4, #0]
 8001e4a:	0359      	lsls	r1, r3, #13
 8001e4c:	d50f      	bpl.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x246>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001e4e:	4a2f      	ldr	r2, [pc, #188]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e50:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001e52:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e56:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001e5a:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001e5c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001e64:	d147      	bne.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e66:	68d3      	ldr	r3, [r2, #12]
 8001e68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e6c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e6e:	6823      	ldr	r3, [r4, #0]
 8001e70:	045a      	lsls	r2, r3, #17
 8001e72:	d512      	bpl.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x272>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e74:	4925      	ldr	r1, [pc, #148]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e76:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001e78:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001e7c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001e80:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001e82:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001e8a:	d106      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x272>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001e8c:	2102      	movs	r1, #2
 8001e8e:	1d20      	adds	r0, r4, #4
 8001e90:	f7ff fe3e 	bl	8001b10 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001e94:	2800      	cmp	r0, #0
 8001e96:	bf18      	it	ne
 8001e98:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	041b      	lsls	r3, r3, #16
 8001e9e:	d508      	bpl.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001ea0:	4a1a      	ldr	r2, [pc, #104]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ea2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001ea4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ea8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001eac:	430b      	orrs	r3, r1
 8001eae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001eb2:	4628      	mov	r0, r5
 8001eb4:	b003      	add	sp, #12
 8001eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7fe fdcb 	bl	8000a54 <HAL_GetTick>
 8001ebe:	eba0 0008 	sub.w	r0, r0, r8
 8001ec2:	4548      	cmp	r0, r9
 8001ec4:	f67f af09 	bls.w	8001cda <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8001ec8:	e72f      	b.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x102>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001eca:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001ece:	d1a8      	bne.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	1d20      	adds	r0, r4, #4
 8001ed4:	f7ff fe1c 	bl	8001b10 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	bf18      	it	ne
 8001edc:	4605      	movne	r5, r0
 8001ede:	e7a0      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001ee0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001ee4:	d1b0      	bne.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x220>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	1d20      	adds	r0, r4, #4
 8001eea:	f7ff fe11 	bl	8001b10 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001eee:	2800      	cmp	r0, #0
 8001ef0:	bf18      	it	ne
 8001ef2:	4605      	movne	r5, r0
 8001ef4:	e7a8      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x220>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001ef6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001efa:	d1b8      	bne.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x246>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001efc:	2101      	movs	r1, #1
 8001efe:	1d20      	adds	r0, r4, #4
 8001f00:	f7ff fe06 	bl	8001b10 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001f04:	2800      	cmp	r0, #0
 8001f06:	bf18      	it	ne
 8001f08:	4605      	movne	r5, r0
 8001f0a:	e7b0      	b.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x246>
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40007000 	.word	0x40007000

08001f14 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001f14:	4a02      	ldr	r2, [pc, #8]	; (8001f20 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8001f16:	6813      	ldr	r3, [r2, #0]
 8001f18:	f043 0304 	orr.w	r3, r3, #4
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	4770      	bx	lr
 8001f20:	40021000 	.word	0x40021000

08001f24 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f24:	6803      	ldr	r3, [r0, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f2e:	6842      	ldr	r2, [r0, #4]
 8001f30:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001f34:	d10a      	bne.n	8001f4c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8001f36:	6882      	ldr	r2, [r0, #8]
 8001f38:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001f3c:	d002      	beq.n	8001f44 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f3e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001f42:	d103      	bne.n	8001f4c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f4c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001f4e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001f52:	d107      	bne.n	8001f64 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f64:	2301      	movs	r3, #1
 8001f66:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8001f70:	2003      	movs	r0, #3
 8001f72:	4770      	bx	lr

08001f74 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8001f74:	b570      	push	{r4, r5, r6, lr}
 8001f76:	4605      	mov	r5, r0
 8001f78:	460c      	mov	r4, r1
 8001f7a:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f7c:	682b      	ldr	r3, [r5, #0]
 8001f7e:	6898      	ldr	r0, [r3, #8]
 8001f80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001f84:	d00d      	beq.n	8001fa2 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 8001f86:	1c62      	adds	r2, r4, #1
 8001f88:	d0f9      	beq.n	8001f7e <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001f8a:	b924      	cbnz	r4, 8001f96 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x22>
 8001f8c:	4628      	mov	r0, r5
}
 8001f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001f92:	f7ff bfc7 	b.w	8001f24 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001f96:	f7fe fd5d 	bl	8000a54 <HAL_GetTick>
 8001f9a:	1b80      	subs	r0, r0, r6
 8001f9c:	4284      	cmp	r4, r0
 8001f9e:	d8ed      	bhi.n	8001f7c <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8001fa0:	e7f4      	b.n	8001f8c <SPI_WaitFlagStateUntilTimeout.constprop.10+0x18>
}
 8001fa2:	bd70      	pop	{r4, r5, r6, pc}

08001fa4 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fa6:	4606      	mov	r6, r0
 8001fa8:	460c      	mov	r4, r1
 8001faa:	4615      	mov	r5, r2
 8001fac:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8001fae:	6831      	ldr	r1, [r6, #0]
 8001fb0:	6888      	ldr	r0, [r1, #8]
 8001fb2:	4020      	ands	r0, r4
 8001fb4:	d00e      	beq.n	8001fd4 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001fb6:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8001fba:	bf01      	itttt	eq
 8001fbc:	7b0a      	ldrbeq	r2, [r1, #12]
 8001fbe:	b2d2      	uxtbeq	r2, r2
 8001fc0:	f88d 2007 	strbeq.w	r2, [sp, #7]
      UNUSED(tmpreg);
 8001fc4:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 8001fc8:	1c6b      	adds	r3, r5, #1
 8001fca:	d0f1      	beq.n	8001fb0 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001fcc:	b925      	cbnz	r5, 8001fd8 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x34>
 8001fce:	4630      	mov	r0, r6
 8001fd0:	f7ff ffa8 	bl	8001f24 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8001fd4:	b003      	add	sp, #12
 8001fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001fd8:	f7fe fd3c 	bl	8000a54 <HAL_GetTick>
 8001fdc:	1bc0      	subs	r0, r0, r7
 8001fde:	4285      	cmp	r5, r0
 8001fe0:	d8e5      	bhi.n	8001fae <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8001fe2:	e7f4      	b.n	8001fce <SPI_WaitFifoStateUntilTimeout.constprop.11+0x2a>

08001fe4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe4:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001fe6:	4613      	mov	r3, r2
{
 8001fe8:	460d      	mov	r5, r1
 8001fea:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001fec:	460a      	mov	r2, r1
 8001fee:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8001ff2:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001ff4:	f7ff ffd6 	bl	8001fa4 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001ff8:	b128      	cbz	r0, 8002006 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ffa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001ffc:	f043 0320 	orr.w	r3, r3, #32
 8002000:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8002002:	2003      	movs	r0, #3
 8002004:	e00f      	b.n	8002026 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002006:	4632      	mov	r2, r6
 8002008:	4629      	mov	r1, r5
 800200a:	4620      	mov	r0, r4
 800200c:	f7ff ffb2 	bl	8001f74 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8002010:	2800      	cmp	r0, #0
 8002012:	d1f2      	bne.n	8001ffa <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002014:	4633      	mov	r3, r6
 8002016:	462a      	mov	r2, r5
 8002018:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800201c:	4620      	mov	r0, r4
 800201e:	f7ff ffc1 	bl	8001fa4 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8002022:	2800      	cmp	r0, #0
 8002024:	d1e9      	bne.n	8001ffa <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8002026:	bd70      	pop	{r4, r5, r6, pc}

08002028 <HAL_SPI_Init>:
{
 8002028:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 800202a:	4604      	mov	r4, r0
 800202c:	2800      	cmp	r0, #0
 800202e:	d04a      	beq.n	80020c6 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002034:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002038:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800203c:	b91b      	cbnz	r3, 8002046 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 800203e:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002042:	f001 fbfb 	bl	800383c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002046:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002048:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800204a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800204e:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002050:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8002052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002056:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800205a:	600b      	str	r3, [r1, #0]
 800205c:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002060:	d92e      	bls.n	80020c0 <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002062:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002064:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002068:	bf18      	it	ne
 800206a:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800206c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800206e:	b92b      	cbnz	r3, 800207c <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002070:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002074:	bf8c      	ite	hi
 8002076:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002078:	2301      	movls	r3, #1
 800207a:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800207c:	68a6      	ldr	r6, [r4, #8]
 800207e:	6863      	ldr	r3, [r4, #4]
 8002080:	69a5      	ldr	r5, [r4, #24]
 8002082:	4333      	orrs	r3, r6
 8002084:	6926      	ldr	r6, [r4, #16]
 8002086:	4333      	orrs	r3, r6
 8002088:	6966      	ldr	r6, [r4, #20]
 800208a:	4333      	orrs	r3, r6
 800208c:	69e6      	ldr	r6, [r4, #28]
 800208e:	4333      	orrs	r3, r6
 8002090:	6a26      	ldr	r6, [r4, #32]
 8002092:	4333      	orrs	r3, r6
 8002094:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002096:	4333      	orrs	r3, r6
 8002098:	f405 7600 	and.w	r6, r5, #512	; 0x200
 800209c:	4333      	orrs	r3, r6
 800209e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80020a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020a2:	431a      	orrs	r2, r3
 80020a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020a6:	0c2d      	lsrs	r5, r5, #16
 80020a8:	431a      	orrs	r2, r3
 80020aa:	f005 0504 	and.w	r5, r5, #4
 80020ae:	432a      	orrs	r2, r5
 80020b0:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 80020b2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020b4:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80020b6:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020b8:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80020ba:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 80020be:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80020c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80020c4:	e7d0      	b.n	8002068 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 80020c6:	2001      	movs	r0, #1
}
 80020c8:	bd70      	pop	{r4, r5, r6, pc}

080020ca <HAL_SPI_Transmit>:
{
 80020ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80020ce:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80020d0:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80020d4:	2b01      	cmp	r3, #1
{
 80020d6:	4604      	mov	r4, r0
 80020d8:	460d      	mov	r5, r1
 80020da:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80020dc:	f000 80b1 	beq.w	8002242 <HAL_SPI_Transmit+0x178>
 80020e0:	2301      	movs	r3, #1
 80020e2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80020e6:	f7fe fcb5 	bl	8000a54 <HAL_GetTick>
 80020ea:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80020ec:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80020f0:	b2c0      	uxtb	r0, r0
 80020f2:	2801      	cmp	r0, #1
 80020f4:	f040 80a3 	bne.w	800223e <HAL_SPI_Transmit+0x174>
  if ((pData == NULL) || (Size == 0U))
 80020f8:	2d00      	cmp	r5, #0
 80020fa:	d057      	beq.n	80021ac <HAL_SPI_Transmit+0xe2>
 80020fc:	f1b8 0f00 	cmp.w	r8, #0
 8002100:	d054      	beq.n	80021ac <HAL_SPI_Transmit+0xe2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002102:	2303      	movs	r3, #3
 8002104:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002108:	2300      	movs	r3, #0
 800210a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800210c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800210e:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8002112:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002116:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 800211a:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800211c:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800211e:	68a3      	ldr	r3, [r4, #8]
 8002120:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002122:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8002128:	bf08      	it	eq
 800212a:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 800212c:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 8002130:	bf04      	itt	eq
 8002132:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8002136:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002138:	6803      	ldr	r3, [r0, #0]
 800213a:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800213c:	bf5e      	ittt	pl
 800213e:	6803      	ldrpl	r3, [r0, #0]
 8002140:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002144:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002146:	68e3      	ldr	r3, [r4, #12]
 8002148:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800214c:	6863      	ldr	r3, [r4, #4]
 800214e:	d93e      	bls.n	80021ce <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002150:	b11b      	cbz	r3, 800215a <HAL_SPI_Transmit+0x90>
 8002152:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002154:	b29b      	uxth	r3, r3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d106      	bne.n	8002168 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)pData);
 800215a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800215e:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8002160:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002162:	3b01      	subs	r3, #1
 8002164:	b29b      	uxth	r3, r3
 8002166:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8002168:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800216a:	b29b      	uxth	r3, r3
 800216c:	b9a3      	cbnz	r3, 8002198 <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800216e:	463a      	mov	r2, r7
 8002170:	4631      	mov	r1, r6
 8002172:	4620      	mov	r0, r4
 8002174:	f7ff ff36 	bl	8001fe4 <SPI_EndRxTxTransaction>
 8002178:	2800      	cmp	r0, #0
 800217a:	d15d      	bne.n	8002238 <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800217c:	68a3      	ldr	r3, [r4, #8]
 800217e:	b933      	cbnz	r3, 800218e <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002180:	9301      	str	r3, [sp, #4]
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	9201      	str	r2, [sp, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800218e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8002190:	3000      	adds	r0, #0
 8002192:	bf18      	it	ne
 8002194:	2001      	movne	r0, #1
 8002196:	e009      	b.n	80021ac <HAL_SPI_Transmit+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002198:	6823      	ldr	r3, [r4, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	0790      	lsls	r0, r2, #30
 800219e:	d503      	bpl.n	80021a8 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)pData);
 80021a0:	f835 2b02 	ldrh.w	r2, [r5], #2
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	e7db      	b.n	8002160 <HAL_SPI_Transmit+0x96>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80021a8:	b94e      	cbnz	r6, 80021be <HAL_SPI_Transmit+0xf4>
          errorcode = HAL_TIMEOUT;
 80021aa:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80021ac:	2301      	movs	r3, #1
 80021ae:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80021b2:	2300      	movs	r3, #0
 80021b4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80021b8:	b002      	add	sp, #8
 80021ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80021be:	1c71      	adds	r1, r6, #1
 80021c0:	d0d2      	beq.n	8002168 <HAL_SPI_Transmit+0x9e>
 80021c2:	f7fe fc47 	bl	8000a54 <HAL_GetTick>
 80021c6:	1bc0      	subs	r0, r0, r7
 80021c8:	4286      	cmp	r6, r0
 80021ca:	d8cd      	bhi.n	8002168 <HAL_SPI_Transmit+0x9e>
 80021cc:	e7ed      	b.n	80021aa <HAL_SPI_Transmit+0xe0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80021ce:	b11b      	cbz	r3, 80021d8 <HAL_SPI_Transmit+0x10e>
 80021d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d10a      	bne.n	80021ee <HAL_SPI_Transmit+0x124>
      if (hspi->TxXferCount > 1U)
 80021d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80021da:	b29b      	uxth	r3, r3
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d916      	bls.n	800220e <HAL_SPI_Transmit+0x144>
        hspi->Instance->DR = *((uint16_t *)pData);
 80021e0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80021e4:	60c3      	str	r3, [r0, #12]
          hspi->TxXferCount -= 2U;
 80021e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80021e8:	3b02      	subs	r3, #2
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80021ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0bb      	beq.n	800216e <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021f6:	6823      	ldr	r3, [r4, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	0792      	lsls	r2, r2, #30
 80021fc:	d512      	bpl.n	8002224 <HAL_SPI_Transmit+0x15a>
        if (hspi->TxXferCount > 1U)
 80021fe:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002200:	b292      	uxth	r2, r2
 8002202:	2a01      	cmp	r2, #1
 8002204:	d90b      	bls.n	800221e <HAL_SPI_Transmit+0x154>
          hspi->Instance->DR = *((uint16_t *)pData);
 8002206:	f835 2b02 	ldrh.w	r2, [r5], #2
 800220a:	60da      	str	r2, [r3, #12]
 800220c:	e7eb      	b.n	80021e6 <HAL_SPI_Transmit+0x11c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800220e:	782b      	ldrb	r3, [r5, #0]
 8002210:	7303      	strb	r3, [r0, #12]
          hspi->TxXferCount--;
 8002212:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002214:	3b01      	subs	r3, #1
 8002216:	b29b      	uxth	r3, r3
 8002218:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800221a:	3501      	adds	r5, #1
 800221c:	e7e7      	b.n	80021ee <HAL_SPI_Transmit+0x124>
 800221e:	782a      	ldrb	r2, [r5, #0]
 8002220:	731a      	strb	r2, [r3, #12]
 8002222:	e7f6      	b.n	8002212 <HAL_SPI_Transmit+0x148>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002224:	2e00      	cmp	r6, #0
 8002226:	d0c0      	beq.n	80021aa <HAL_SPI_Transmit+0xe0>
 8002228:	1c73      	adds	r3, r6, #1
 800222a:	d0e0      	beq.n	80021ee <HAL_SPI_Transmit+0x124>
 800222c:	f7fe fc12 	bl	8000a54 <HAL_GetTick>
 8002230:	1bc0      	subs	r0, r0, r7
 8002232:	4286      	cmp	r6, r0
 8002234:	d8db      	bhi.n	80021ee <HAL_SPI_Transmit+0x124>
 8002236:	e7b8      	b.n	80021aa <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002238:	2320      	movs	r3, #32
 800223a:	6623      	str	r3, [r4, #96]	; 0x60
 800223c:	e79e      	b.n	800217c <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 800223e:	2002      	movs	r0, #2
 8002240:	e7b4      	b.n	80021ac <HAL_SPI_Transmit+0xe2>
  __HAL_LOCK(hspi);
 8002242:	2002      	movs	r0, #2
 8002244:	e7b8      	b.n	80021b8 <HAL_SPI_Transmit+0xee>

08002246 <HAL_SPI_TransmitReceive>:
{
 8002246:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800224a:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 800224c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8002250:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8002254:	2b01      	cmp	r3, #1
{
 8002256:	4604      	mov	r4, r0
 8002258:	460d      	mov	r5, r1
 800225a:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 800225c:	f000 8112 	beq.w	8002484 <HAL_SPI_TransmitReceive+0x23e>
 8002260:	2301      	movs	r3, #1
 8002262:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002266:	f7fe fbf5 	bl	8000a54 <HAL_GetTick>
  tmp  = hspi->State;
 800226a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp1 = hspi->Init.Mode;
 800226e:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8002270:	b2db      	uxtb	r3, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8002272:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002274:	4681      	mov	r9, r0
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8002276:	d00a      	beq.n	800228e <HAL_SPI_TransmitReceive+0x48>
 8002278:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800227c:	f040 8100 	bne.w	8002480 <HAL_SPI_TransmitReceive+0x23a>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002280:	68a2      	ldr	r2, [r4, #8]
 8002282:	2a00      	cmp	r2, #0
 8002284:	f040 80fc 	bne.w	8002480 <HAL_SPI_TransmitReceive+0x23a>
 8002288:	2b04      	cmp	r3, #4
 800228a:	f040 80f9 	bne.w	8002480 <HAL_SPI_TransmitReceive+0x23a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800228e:	2d00      	cmp	r5, #0
 8002290:	d04b      	beq.n	800232a <HAL_SPI_TransmitReceive+0xe4>
 8002292:	2e00      	cmp	r6, #0
 8002294:	d049      	beq.n	800232a <HAL_SPI_TransmitReceive+0xe4>
 8002296:	2f00      	cmp	r7, #0
 8002298:	d047      	beq.n	800232a <HAL_SPI_TransmitReceive+0xe4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800229a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 800229e:	68e0      	ldr	r0, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022a0:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022a2:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022a4:	bf1c      	itt	ne
 80022a6:	2305      	movne	r3, #5
 80022a8:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022ac:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80022ae:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022b2:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 80022b4:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 80022b6:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80022ba:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 80022bc:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022c0:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80022c2:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80022c4:	87a7      	strh	r7, [r4, #60]	; 0x3c
 80022c6:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80022c8:	d804      	bhi.n	80022d4 <HAL_SPI_TransmitReceive+0x8e>
 80022ca:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80022ce:	b292      	uxth	r2, r2
 80022d0:	2a01      	cmp	r2, #1
 80022d2:	d92c      	bls.n	800232e <HAL_SPI_TransmitReceive+0xe8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022da:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80022e0:	bf5e      	ittt	pl
 80022e2:	681a      	ldrpl	r2, [r3, #0]
 80022e4:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80022e8:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022ea:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80022ee:	d956      	bls.n	800239e <HAL_SPI_TransmitReceive+0x158>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80022f0:	b119      	cbz	r1, 80022fa <HAL_SPI_TransmitReceive+0xb4>
 80022f2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80022f4:	b292      	uxth	r2, r2
 80022f6:	2a01      	cmp	r2, #1
 80022f8:	d106      	bne.n	8002308 <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80022fa:	f835 2b02 	ldrh.w	r2, [r5], #2
 80022fe:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002300:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002302:	3b01      	subs	r3, #1
 8002304:	b29b      	uxth	r3, r3
 8002306:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002308:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800230a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800230c:	b29b      	uxth	r3, r3
 800230e:	b993      	cbnz	r3, 8002336 <HAL_SPI_TransmitReceive+0xf0>
 8002310:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002314:	b29b      	uxth	r3, r3
 8002316:	b973      	cbnz	r3, 8002336 <HAL_SPI_TransmitReceive+0xf0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002318:	464a      	mov	r2, r9
 800231a:	4641      	mov	r1, r8
 800231c:	4620      	mov	r0, r4
 800231e:	f7ff fe61 	bl	8001fe4 <SPI_EndRxTxTransaction>
 8002322:	2800      	cmp	r0, #0
 8002324:	d033      	beq.n	800238e <HAL_SPI_TransmitReceive+0x148>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002326:	2320      	movs	r3, #32
 8002328:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800232a:	2001      	movs	r0, #1
 800232c:	e02f      	b.n	800238e <HAL_SPI_TransmitReceive+0x148>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002334:	e7d1      	b.n	80022da <HAL_SPI_TransmitReceive+0x94>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002336:	b177      	cbz	r7, 8002356 <HAL_SPI_TransmitReceive+0x110>
 8002338:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800233a:	b29b      	uxth	r3, r3
 800233c:	b15b      	cbz	r3, 8002356 <HAL_SPI_TransmitReceive+0x110>
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	0792      	lsls	r2, r2, #30
 8002344:	d507      	bpl.n	8002356 <HAL_SPI_TransmitReceive+0x110>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002346:	f835 2b02 	ldrh.w	r2, [r5], #2
 800234a:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800234c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800234e:	3b01      	subs	r3, #1
 8002350:	b29b      	uxth	r3, r3
 8002352:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002354:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002356:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800235a:	b29b      	uxth	r3, r3
 800235c:	b16b      	cbz	r3, 800237a <HAL_SPI_TransmitReceive+0x134>
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	07d0      	lsls	r0, r2, #31
 8002364:	d509      	bpl.n	800237a <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 800236c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002370:	3b01      	subs	r3, #1
 8002372:	b29b      	uxth	r3, r3
 8002374:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8002378:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800237a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800237e:	d0c4      	beq.n	800230a <HAL_SPI_TransmitReceive+0xc4>
 8002380:	f7fe fb68 	bl	8000a54 <HAL_GetTick>
 8002384:	eba0 0009 	sub.w	r0, r0, r9
 8002388:	4580      	cmp	r8, r0
 800238a:	d8be      	bhi.n	800230a <HAL_SPI_TransmitReceive+0xc4>
        errorcode = HAL_TIMEOUT;
 800238c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800238e:	2301      	movs	r3, #1
 8002390:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002394:	2300      	movs	r3, #0
 8002396:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800239a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800239e:	b119      	cbz	r1, 80023a8 <HAL_SPI_TransmitReceive+0x162>
 80023a0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80023a2:	b292      	uxth	r2, r2
 80023a4:	2a01      	cmp	r2, #1
 80023a6:	d10a      	bne.n	80023be <HAL_SPI_TransmitReceive+0x178>
      if (hspi->TxXferCount > 1U)
 80023a8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80023aa:	b292      	uxth	r2, r2
 80023ac:	2a01      	cmp	r2, #1
 80023ae:	d94d      	bls.n	800244c <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80023b0:	f835 2b02 	ldrh.w	r2, [r5], #2
 80023b4:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80023b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023b8:	3b02      	subs	r3, #2
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80023be:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	b923      	cbnz	r3, 80023d0 <HAL_SPI_TransmitReceive+0x18a>
 80023c6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0a3      	beq.n	8002318 <HAL_SPI_TransmitReceive+0xd2>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80023d0:	b197      	cbz	r7, 80023f8 <HAL_SPI_TransmitReceive+0x1b2>
 80023d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	b17b      	cbz	r3, 80023f8 <HAL_SPI_TransmitReceive+0x1b2>
 80023d8:	6823      	ldr	r3, [r4, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	0791      	lsls	r1, r2, #30
 80023de:	d50b      	bpl.n	80023f8 <HAL_SPI_TransmitReceive+0x1b2>
        if (hspi->TxXferCount > 1U)
 80023e0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80023e2:	b292      	uxth	r2, r2
 80023e4:	2a01      	cmp	r2, #1
 80023e6:	d939      	bls.n	800245c <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 80023e8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80023ec:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 80023ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023f0:	3b02      	subs	r3, #2
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80023f6:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80023f8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	b1db      	cbz	r3, 8002438 <HAL_SPI_TransmitReceive+0x1f2>
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	07d2      	lsls	r2, r2, #31
 8002406:	d517      	bpl.n	8002438 <HAL_SPI_TransmitReceive+0x1f2>
        if (hspi->RxXferCount > 1U)
 8002408:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800240c:	b292      	uxth	r2, r2
 800240e:	2a01      	cmp	r2, #1
 8002410:	d92c      	bls.n	800246c <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	f826 2b02 	strh.w	r2, [r6], #2
          hspi->RxXferCount -= 2U;
 8002418:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800241c:	3a02      	subs	r2, #2
 800241e:	b292      	uxth	r2, r2
 8002420:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002424:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002428:	b292      	uxth	r2, r2
 800242a:	2a01      	cmp	r2, #1
 800242c:	d803      	bhi.n	8002436 <HAL_SPI_TransmitReceive+0x1f0>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002434:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 8002436:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002438:	f1b8 3fff 	cmp.w	r8, #4294967295
 800243c:	d0c0      	beq.n	80023c0 <HAL_SPI_TransmitReceive+0x17a>
 800243e:	f7fe fb09 	bl	8000a54 <HAL_GetTick>
 8002442:	eba0 0009 	sub.w	r0, r0, r9
 8002446:	4580      	cmp	r8, r0
 8002448:	d8ba      	bhi.n	80023c0 <HAL_SPI_TransmitReceive+0x17a>
 800244a:	e79f      	b.n	800238c <HAL_SPI_TransmitReceive+0x146>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800244c:	782a      	ldrb	r2, [r5, #0]
 800244e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002450:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002452:	3b01      	subs	r3, #1
 8002454:	b29b      	uxth	r3, r3
 8002456:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002458:	3501      	adds	r5, #1
 800245a:	e7b0      	b.n	80023be <HAL_SPI_TransmitReceive+0x178>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800245c:	782a      	ldrb	r2, [r5, #0]
 800245e:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8002460:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002462:	3b01      	subs	r3, #1
 8002464:	b29b      	uxth	r3, r3
 8002466:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002468:	3501      	adds	r5, #1
 800246a:	e7c4      	b.n	80023f6 <HAL_SPI_TransmitReceive+0x1b0>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800246c:	7b1b      	ldrb	r3, [r3, #12]
 800246e:	7033      	strb	r3, [r6, #0]
          hspi->RxXferCount--;
 8002470:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002474:	3b01      	subs	r3, #1
 8002476:	b29b      	uxth	r3, r3
 8002478:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800247c:	3601      	adds	r6, #1
 800247e:	e7da      	b.n	8002436 <HAL_SPI_TransmitReceive+0x1f0>
    errorcode = HAL_BUSY;
 8002480:	2002      	movs	r0, #2
 8002482:	e784      	b.n	800238e <HAL_SPI_TransmitReceive+0x148>
  __HAL_LOCK(hspi);
 8002484:	2002      	movs	r0, #2
}
 8002486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800248c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800248c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800248e:	780c      	ldrb	r4, [r1, #0]
 8002490:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002494:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
{
 8002498:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800249a:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800249e:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80024a0:	0412      	lsls	r2, r2, #16
 80024a2:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 80024a4:	2803      	cmp	r0, #3
 80024a6:	d850      	bhi.n	800254a <USB_ActivateEndpoint+0xbe>
 80024a8:	e8df f000 	tbb	[pc, r0]
 80024ac:	49044c02 	.word	0x49044c02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80024b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80024b4:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal);
 80024b6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80024ba:	780e      	ldrb	r6, [r1, #0]
 80024bc:	4cab      	ldr	r4, [pc, #684]	; (800276c <USB_ActivateEndpoint+0x2e0>)
 80024be:	b235      	sxth	r5, r6
 80024c0:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80024c4:	b292      	uxth	r2, r2
 80024c6:	4022      	ands	r2, r4
 80024c8:	4332      	orrs	r2, r6
 80024ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024d2:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  if (ep->doublebuffer == 0U)
 80024d6:	7b0d      	ldrb	r5, [r1, #12]
 80024d8:	780a      	ldrb	r2, [r1, #0]
 80024da:	2d00      	cmp	r5, #0
 80024dc:	f040 8082 	bne.w	80025e4 <USB_ActivateEndpoint+0x158>
  {
    if (ep->is_in != 0U)
 80024e0:	784f      	ldrb	r7, [r1, #1]
 80024e2:	88ce      	ldrh	r6, [r1, #6]
 80024e4:	2508      	movs	r5, #8
 80024e6:	b397      	cbz	r7, 800254e <USB_ActivateEndpoint+0xc2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80024e8:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 80024ec:	fb15 3202 	smlabb	r2, r5, r2, r3
 80024f0:	fa12 f287 	uxtah	r2, r2, r7
 80024f4:	f026 0601 	bic.w	r6, r6, #1
 80024f8:	f8a2 6400 	strh.w	r6, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80024fc:	780d      	ldrb	r5, [r1, #0]
 80024fe:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8002502:	0656      	lsls	r6, r2, #25
 8002504:	d509      	bpl.n	800251a <USB_ActivateEndpoint+0x8e>
 8002506:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800250a:	b292      	uxth	r2, r2
 800250c:	4014      	ands	r4, r2
 800250e:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8002512:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8002516:	f823 4025 	strh.w	r4, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800251a:	78ca      	ldrb	r2, [r1, #3]
 800251c:	7809      	ldrb	r1, [r1, #0]
 800251e:	4c94      	ldr	r4, [pc, #592]	; (8002770 <USB_ActivateEndpoint+0x2e4>)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002520:	b209      	sxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8002522:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002524:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002528:	b292      	uxth	r2, r2
 800252a:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 800252e:	d001      	beq.n	8002534 <USB_ActivateEndpoint+0xa8>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002530:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002534:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002538:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800253c:	e0c5      	b.n	80026ca <USB_ActivateEndpoint+0x23e>
      wEpRegVal |= USB_EP_INTERRUPT;
 800253e:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8002542:	e7b7      	b.n	80024b4 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002544:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002548:	e7b4      	b.n	80024b4 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 800254a:	2001      	movs	r0, #1
 800254c:	e7b3      	b.n	80024b6 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800254e:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8002552:	fb15 3202 	smlabb	r2, r5, r2, r3
 8002556:	fa12 f284 	uxtah	r2, r2, r4
 800255a:	f026 0601 	bic.w	r6, r6, #1
 800255e:	f8a2 6404 	strh.w	r6, [r2, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002562:	780a      	ldrb	r2, [r1, #0]
 8002564:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002568:	690c      	ldr	r4, [r1, #16]
 800256a:	fb15 3202 	smlabb	r2, r5, r2, r3
 800256e:	b2b6      	uxth	r6, r6
 8002570:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8002574:	b954      	cbnz	r4, 800258c <USB_ActivateEndpoint+0x100>
 8002576:	5b94      	ldrh	r4, [r2, r6]
 8002578:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 800257c:	04a4      	lsls	r4, r4, #18
 800257e:	0ca4      	lsrs	r4, r4, #18
 8002580:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8002584:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002588:	5394      	strh	r4, [r2, r6]
 800258a:	e007      	b.n	800259c <USB_ActivateEndpoint+0x110>
 800258c:	2c3d      	cmp	r4, #61	; 0x3d
 800258e:	d824      	bhi.n	80025da <USB_ActivateEndpoint+0x14e>
 8002590:	0865      	lsrs	r5, r4, #1
 8002592:	07e4      	lsls	r4, r4, #31
 8002594:	bf48      	it	mi
 8002596:	3501      	addmi	r5, #1
 8002598:	02ad      	lsls	r5, r5, #10
 800259a:	5395      	strh	r5, [r2, r6]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800259c:	780c      	ldrb	r4, [r1, #0]
 800259e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80025a2:	0452      	lsls	r2, r2, #17
 80025a4:	d50d      	bpl.n	80025c2 <USB_ActivateEndpoint+0x136>
 80025a6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80025aa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80025ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025b2:	0412      	lsls	r2, r2, #16
 80025b4:	0c12      	lsrs	r2, r2, #16
 80025b6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80025ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025be:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80025c2:	7809      	ldrb	r1, [r1, #0]
 80025c4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80025c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80025cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025d0:	0412      	lsls	r2, r2, #16
 80025d2:	0c12      	lsrs	r2, r2, #16
 80025d4:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80025d8:	e7ac      	b.n	8002534 <USB_ActivateEndpoint+0xa8>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80025da:	4d66      	ldr	r5, [pc, #408]	; (8002774 <USB_ActivateEndpoint+0x2e8>)
 80025dc:	0964      	lsrs	r4, r4, #5
 80025de:	ea45 2484 	orr.w	r4, r5, r4, lsl #10
 80025e2:	e7d1      	b.n	8002588 <USB_ActivateEndpoint+0xfc>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80025e4:	b212      	sxth	r2, r2
 80025e6:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 80025ea:	b2ad      	uxth	r5, r5
 80025ec:	4025      	ands	r5, r4
 80025ee:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 80025f2:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80025f6:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80025fa:	780e      	ldrb	r6, [r1, #0]
 80025fc:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8002600:	2208      	movs	r2, #8
 8002602:	fb12 3606 	smlabb	r6, r2, r6, r3
 8002606:	fa16 f585 	uxtah	r5, r6, r5
 800260a:	890e      	ldrh	r6, [r1, #8]
 800260c:	f026 0601 	bic.w	r6, r6, #1
 8002610:	f8a5 6400 	strh.w	r6, [r5, #1024]	; 0x400
 8002614:	780e      	ldrb	r6, [r1, #0]
 8002616:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800261a:	fb12 3206 	smlabb	r2, r2, r6, r3
 800261e:	fa12 f285 	uxtah	r2, r2, r5
 8002622:	894d      	ldrh	r5, [r1, #10]
 8002624:	f025 0501 	bic.w	r5, r5, #1
 8002628:	f8a2 5404 	strh.w	r5, [r2, #1028]	; 0x404
 800262c:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 800262e:	784d      	ldrb	r5, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002630:	b212      	sxth	r2, r2
    if (ep->is_in == 0U)
 8002632:	2d00      	cmp	r5, #0
 8002634:	d14c      	bne.n	80026d0 <USB_ActivateEndpoint+0x244>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002636:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 800263a:	046f      	lsls	r7, r5, #17
 800263c:	d509      	bpl.n	8002652 <USB_ActivateEndpoint+0x1c6>
 800263e:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8002642:	b2ad      	uxth	r5, r5
 8002644:	402c      	ands	r4, r5
 8002646:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800264a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800264e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002652:	780c      	ldrb	r4, [r1, #0]
 8002654:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002658:	0656      	lsls	r6, r2, #25
 800265a:	d50d      	bpl.n	8002678 <USB_ActivateEndpoint+0x1ec>
 800265c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002660:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002664:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002668:	0412      	lsls	r2, r2, #16
 800266a:	0c12      	lsrs	r2, r2, #16
 800266c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002670:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002674:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002678:	780c      	ldrb	r4, [r1, #0]
 800267a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800267e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002682:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002686:	0412      	lsls	r2, r2, #16
 8002688:	0c12      	lsrs	r2, r2, #16
 800268a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800268e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002692:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002696:	780d      	ldrb	r5, [r1, #0]
 8002698:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800269c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80026a4:	0412      	lsls	r2, r2, #16
 80026a6:	0c12      	lsrs	r2, r2, #16
 80026a8:	f248 0480 	movw	r4, #32896	; 0x8080
 80026ac:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80026b0:	4322      	orrs	r2, r4
 80026b2:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80026b6:	7809      	ldrb	r1, [r1, #0]
 80026b8:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80026bc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80026c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026c4:	0412      	lsls	r2, r2, #16
 80026c6:	0c12      	lsrs	r2, r2, #16
 80026c8:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80026ca:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 80026ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80026d0:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 80026d4:	046d      	lsls	r5, r5, #17
 80026d6:	d509      	bpl.n	80026ec <USB_ActivateEndpoint+0x260>
 80026d8:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 80026dc:	b2ad      	uxth	r5, r5
 80026de:	402c      	ands	r4, r5
 80026e0:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 80026e4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80026e8:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80026ec:	780c      	ldrb	r4, [r1, #0]
 80026ee:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80026f2:	0652      	lsls	r2, r2, #25
 80026f4:	d50d      	bpl.n	8002712 <USB_ActivateEndpoint+0x286>
 80026f6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80026fa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80026fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002702:	0412      	lsls	r2, r2, #16
 8002704:	0c12      	lsrs	r2, r2, #16
 8002706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800270a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800270e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002712:	780c      	ldrb	r4, [r1, #0]
 8002714:	4d16      	ldr	r5, [pc, #88]	; (8002770 <USB_ActivateEndpoint+0x2e4>)
 8002716:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800271a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800271e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002722:	0412      	lsls	r2, r2, #16
 8002724:	0c12      	lsrs	r2, r2, #16
 8002726:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800272a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800272e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8002732:	780c      	ldrb	r4, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 8002734:	78ca      	ldrb	r2, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002736:	b224      	sxth	r4, r4
      if (ep->type != EP_TYPE_ISOC)
 8002738:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800273a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800273e:	b292      	uxth	r2, r2
 8002740:	ea02 0205 	and.w	r2, r2, r5
 8002744:	bf18      	it	ne
 8002746:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800274a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800274e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002752:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002756:	7809      	ldrb	r1, [r1, #0]
 8002758:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800275c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002760:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002764:	0412      	lsls	r2, r2, #16
 8002766:	0c12      	lsrs	r2, r2, #16
 8002768:	e6e4      	b.n	8002534 <USB_ActivateEndpoint+0xa8>
 800276a:	bf00      	nop
 800276c:	ffff8f8f 	.word	0xffff8f8f
 8002770:	ffff8fbf 	.word	0xffff8fbf
 8002774:	ffff8000 	.word	0xffff8000

08002778 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002778:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800277a:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800277c:	b212      	sxth	r2, r2
  if (ep->is_in != 0U)
 800277e:	b18b      	cbz	r3, 80027a4 <USB_EPSetStall+0x2c>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002780:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800278c:	041b      	lsls	r3, r3, #16
 800278e:	0c1b      	lsrs	r3, r3, #16
 8002790:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800279c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80027a0:	2000      	movs	r0, #0
 80027a2:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80027a4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b0:	041b      	lsls	r3, r3, #16
 80027b2:	0c1b      	lsrs	r3, r3, #16
 80027b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80027b8:	e7ec      	b.n	8002794 <USB_EPSetStall+0x1c>

080027ba <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80027ba:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 80027bc:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80027be:	b212      	sxth	r2, r2
  if (ep->is_in != 0U)
 80027c0:	b323      	cbz	r3, 800280c <USB_EPClearStall+0x52>
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80027c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027c6:	065b      	lsls	r3, r3, #25
 80027c8:	d50d      	bpl.n	80027e6 <USB_EPClearStall+0x2c>
 80027ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d6:	041b      	lsls	r3, r3, #16
 80027d8:	0c1b      	lsrs	r3, r3, #16
 80027da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027e2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80027e6:	780a      	ldrb	r2, [r1, #0]
 80027e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027f4:	041b      	lsls	r3, r3, #16
 80027f6:	0c1b      	lsrs	r3, r3, #16
 80027f8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80027fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002804:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8002808:	2000      	movs	r0, #0
 800280a:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800280c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002810:	045b      	lsls	r3, r3, #17
 8002812:	d50d      	bpl.n	8002830 <USB_EPClearStall+0x76>
 8002814:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800281c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002820:	041b      	lsls	r3, r3, #16
 8002822:	0c1b      	lsrs	r3, r3, #16
 8002824:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002830:	780a      	ldrb	r2, [r1, #0]
 8002832:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002836:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800283a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800283e:	041b      	lsls	r3, r3, #16
 8002840:	0c1b      	lsrs	r3, r3, #16
 8002842:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002846:	e7d9      	b.n	80027fc <USB_EPClearStall+0x42>

08002848 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002848:	b911      	cbnz	r1, 8002850 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8002850:	2000      	movs	r0, #0
 8002852:	4770      	bx	lr

08002854 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8002854:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002858:	b280      	uxth	r0, r0
 800285a:	4770      	bx	lr

0800285c <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800285c:	2000      	movs	r0, #0
 800285e:	4770      	bx	lr

08002860 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002860:	b510      	push	{r4, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002862:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002866:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002868:	4410      	add	r0, r2
 800286a:	f023 0301 	bic.w	r3, r3, #1
 800286e:	4602      	mov	r2, r0
 8002870:	4403      	add	r3, r0
 8002872:	1a14      	subs	r4, r2, r0

  for (i = n; i != 0U; i--)
 8002874:	429a      	cmp	r2, r3
 8002876:	440c      	add	r4, r1
 8002878:	d100      	bne.n	800287c <USB_WritePMA+0x1c>
    {
      pdwVal++;
    }
    pBuf++;
  }
}
 800287a:	bd10      	pop	{r4, pc}
 800287c:	8824      	ldrh	r4, [r4, #0]
    *pdwVal = (uint16_t)temp2;
 800287e:	f822 4b02 	strh.w	r4, [r2], #2
 8002882:	e7f6      	b.n	8002872 <USB_WritePMA+0x12>

08002884 <USB_EPStartXfer>:
{
 8002884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002886:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8002888:	7848      	ldrb	r0, [r1, #1]
  uint32_t len = ep->xfer_len;
 800288a:	698a      	ldr	r2, [r1, #24]
 800288c:	690b      	ldr	r3, [r1, #16]
 800288e:	7b0f      	ldrb	r7, [r1, #12]
  if (ep->is_in == 1U)
 8002890:	2801      	cmp	r0, #1
{
 8002892:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8002894:	d16b      	bne.n	800296e <USB_EPStartXfer+0xea>
    if (ep->xfer_len > ep->maxpacket)
 8002896:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8002898:	bf97      	itett	ls
 800289a:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 800289c:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 800289e:	618b      	strls	r3, [r1, #24]
 80028a0:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 80028a2:	bf88      	it	hi
 80028a4:	618a      	strhi	r2, [r1, #24]
 80028a6:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 80028a8:	bb0f      	cbnz	r7, 80028ee <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80028aa:	88ca      	ldrh	r2, [r1, #6]
 80028ac:	6949      	ldr	r1, [r1, #20]
 80028ae:	4633      	mov	r3, r6
 80028b0:	4620      	mov	r0, r4
 80028b2:	f7ff ffd5 	bl	8002860 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80028b6:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80028ba:	782a      	ldrb	r2, [r5, #0]
 80028bc:	f204 4102 	addw	r1, r4, #1026	; 0x402
 80028c0:	fa11 f383 	uxtah	r3, r1, r3
 80028c4:	f823 6032 	strh.w	r6, [r3, r2, lsl #3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80028c8:	782a      	ldrb	r2, [r5, #0]
 80028ca:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80028ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028d6:	041b      	lsls	r3, r3, #16
 80028d8:	0c1b      	lsrs	r3, r3, #16
 80028da:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80028de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e6:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 80028ea:	2000      	movs	r0, #0
 80028ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80028ee:	7809      	ldrb	r1, [r1, #0]
 80028f0:	b20a      	sxth	r2, r1
 80028f2:	f834 2022 	ldrh.w	r2, [r4, r2, lsl #2]
 80028f6:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80028fa:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80028fe:	bf15      	itete	ne
 8002900:	f204 4006 	addwne	r0, r4, #1030	; 0x406
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002904:	f204 4002 	addweq	r0, r4, #1026	; 0x402
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002908:	fa10 f282 	uxtahne	r2, r0, r2
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800290c:	fa10 f282 	uxtaheq	r2, r0, r2
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002910:	bf15      	itete	ne
 8002912:	f822 3031 	strhne.w	r3, [r2, r1, lsl #3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002916:	f822 3031 	strheq.w	r3, [r2, r1, lsl #3]
        pmabuffer = ep->pmaaddr1;
 800291a:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 800291c:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800291e:	6969      	ldr	r1, [r5, #20]
 8002920:	4633      	mov	r3, r6
 8002922:	4620      	mov	r0, r4
 8002924:	f7ff ff9c 	bl	8002860 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002928:	786b      	ldrb	r3, [r5, #1]
 800292a:	782a      	ldrb	r2, [r5, #0]
 800292c:	b97b      	cbnz	r3, 800294e <USB_EPStartXfer+0xca>
 800292e:	b212      	sxth	r2, r2
 8002930:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293c:	041b      	lsls	r3, r3, #16
 800293e:	0c1b      	lsrs	r3, r3, #16
 8002940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002944:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002948:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 800294c:	e7bc      	b.n	80028c8 <USB_EPStartXfer+0x44>
 800294e:	2b01      	cmp	r3, #1
 8002950:	d1ba      	bne.n	80028c8 <USB_EPStartXfer+0x44>
 8002952:	b212      	sxth	r2, r2
 8002954:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800295c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002960:	041b      	lsls	r3, r3, #16
 8002962:	0c1b      	lsrs	r3, r3, #16
 8002964:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800296c:	e7ec      	b.n	8002948 <USB_EPStartXfer+0xc4>
    if (ep->xfer_len > ep->maxpacket)
 800296e:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8002970:	bf95      	itete	ls
 8002972:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8002974:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 8002976:	618b      	strls	r3, [r1, #24]
      ep->xfer_len -= len;
 8002978:	618a      	strhi	r2, [r1, #24]
      ep->xfer_len = 0U;
 800297a:	bf98      	it	ls
 800297c:	4613      	movls	r3, r2
 800297e:	7809      	ldrb	r1, [r1, #0]
    if (ep->doublebuffer == 0U)
 8002980:	b9a7      	cbnz	r7, 80029ac <USB_EPStartXfer+0x128>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002982:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002986:	f204 4006 	addw	r0, r4, #1030	; 0x406
 800298a:	fa10 f282 	uxtah	r2, r0, r2
 800298e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002992:	2b00      	cmp	r3, #0
 8002994:	d137      	bne.n	8002a06 <USB_EPStartXfer+0x182>
 8002996:	8813      	ldrh	r3, [r2, #0]
 8002998:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800299c:	049b      	lsls	r3, r3, #18
 800299e:	0c9b      	lsrs	r3, r3, #18
 80029a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029a8:	8013      	strh	r3, [r2, #0]
 80029aa:	e034      	b.n	8002a16 <USB_EPStartXfer+0x192>
 80029ac:	b990      	cbnz	r0, 80029d4 <USB_EPStartXfer+0x150>
 80029ae:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80029b2:	f204 4002 	addw	r0, r4, #1026	; 0x402
 80029b6:	fa10 f282 	uxtah	r2, r0, r2
 80029ba:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80029be:	b9ab      	cbnz	r3, 80029ec <USB_EPStartXfer+0x168>
 80029c0:	8811      	ldrh	r1, [r2, #0]
 80029c2:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 80029c6:	0489      	lsls	r1, r1, #18
 80029c8:	0c89      	lsrs	r1, r1, #18
 80029ca:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80029ce:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80029d2:	8011      	strh	r1, [r2, #0]
 80029d4:	786a      	ldrb	r2, [r5, #1]
 80029d6:	7828      	ldrb	r0, [r5, #0]
 80029d8:	bb72      	cbnz	r2, 8002a38 <USB_EPStartXfer+0x1b4>
 80029da:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80029de:	f204 4106 	addw	r1, r4, #1030	; 0x406
 80029e2:	fa11 f282 	uxtah	r2, r1, r2
 80029e6:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80029ea:	e7d2      	b.n	8002992 <USB_EPStartXfer+0x10e>
 80029ec:	2b3d      	cmp	r3, #61	; 0x3d
 80029ee:	d805      	bhi.n	80029fc <USB_EPStartXfer+0x178>
 80029f0:	0859      	lsrs	r1, r3, #1
 80029f2:	07d8      	lsls	r0, r3, #31
 80029f4:	bf48      	it	mi
 80029f6:	3101      	addmi	r1, #1
 80029f8:	0289      	lsls	r1, r1, #10
 80029fa:	e7ea      	b.n	80029d2 <USB_EPStartXfer+0x14e>
 80029fc:	4814      	ldr	r0, [pc, #80]	; (8002a50 <USB_EPStartXfer+0x1cc>)
 80029fe:	0959      	lsrs	r1, r3, #5
 8002a00:	ea40 2181 	orr.w	r1, r0, r1, lsl #10
 8002a04:	e7e5      	b.n	80029d2 <USB_EPStartXfer+0x14e>
 8002a06:	2b3d      	cmp	r3, #61	; 0x3d
 8002a08:	d811      	bhi.n	8002a2e <USB_EPStartXfer+0x1aa>
 8002a0a:	0859      	lsrs	r1, r3, #1
 8002a0c:	07db      	lsls	r3, r3, #31
 8002a0e:	bf48      	it	mi
 8002a10:	3101      	addmi	r1, #1
 8002a12:	0289      	lsls	r1, r1, #10
 8002a14:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002a16:	782a      	ldrb	r2, [r5, #0]
 8002a18:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002a1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a24:	041b      	lsls	r3, r3, #16
 8002a26:	0c1b      	lsrs	r3, r3, #16
 8002a28:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002a2c:	e757      	b.n	80028de <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002a2e:	0959      	lsrs	r1, r3, #5
 8002a30:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <USB_EPStartXfer+0x1cc>)
 8002a32:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002a36:	e7b7      	b.n	80029a8 <USB_EPStartXfer+0x124>
 8002a38:	2a01      	cmp	r2, #1
 8002a3a:	bf01      	itttt	eq
 8002a3c:	f8b4 1050 	ldrheq.w	r1, [r4, #80]	; 0x50
 8002a40:	f204 4206 	addweq	r2, r4, #1030	; 0x406
 8002a44:	fa12 f181 	uxtaheq	r1, r2, r1
 8002a48:	f821 3030 	strheq.w	r3, [r1, r0, lsl #3]
 8002a4c:	e7e3      	b.n	8002a16 <USB_EPStartXfer+0x192>
 8002a4e:	bf00      	nop
 8002a50:	ffff8000 	.word	0xffff8000

08002a54 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002a54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 8002a58:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002a5a:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002a5c:	085d      	lsrs	r5, r3, #1
 8002a5e:	460a      	mov	r2, r1
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002a60:	4607      	mov	r7, r0

  for (i = n; i != 0U; i--)
 8002a62:	462e      	mov	r6, r5
 8002a64:	3202      	adds	r2, #2
 8002a66:	b936      	cbnz	r6, 8002a76 <USB_ReadPMA+0x22>
    {
      pdwVal++;
    }
  }

  if ((wNBytes % 2U) != 0U)
 8002a68:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002a6a:	bf44      	itt	mi
 8002a6c:	f830 3015 	ldrhmi.w	r3, [r0, r5, lsl #1]
 8002a70:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
 8002a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *pdwVal;
 8002a76:	f837 4b02 	ldrh.w	r4, [r7], #2
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002a7a:	f802 4c02 	strb.w	r4, [r2, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8002a7e:	0a24      	lsrs	r4, r4, #8
 8002a80:	f802 4c01 	strb.w	r4, [r2, #-1]
  for (i = n; i != 0U; i--)
 8002a84:	3e01      	subs	r6, #1
 8002a86:	e7ed      	b.n	8002a64 <USB_ReadPMA+0x10>

08002a88 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002a88:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8002a8a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002a8e:	b90b      	cbnz	r3, 8002a94 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002a90:	2002      	movs	r0, #2
 8002a92:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4798      	blx	r3
 8002a98:	2800      	cmp	r0, #0
 8002a9a:	d1f9      	bne.n	8002a90 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002a9c:	bd08      	pop	{r3, pc}

08002a9e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002a9e:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8002aa0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4798      	blx	r3
  return USBD_OK;
}
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	bd08      	pop	{r3, pc}

08002aac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002aac:	b538      	push	{r3, r4, r5, lr}
 8002aae:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002ab0:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8002ab4:	4628      	mov	r0, r5
 8002ab6:	f000 fada 	bl	800306e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002aba:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8002abc:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 8002ac0:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8002ac4:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8002ac8:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 8002acc:	f001 031f 	and.w	r3, r1, #31
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d00e      	beq.n	8002af2 <USBD_LL_SetupStage+0x46>
 8002ad4:	d307      	bcc.n	8002ae6 <USBD_LL_SetupStage+0x3a>
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d010      	beq.n	8002afc <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002ada:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f000 ff86 	bl	80039f0 <USBD_LL_StallEP>
    break;
 8002ae4:	e003      	b.n	8002aee <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002ae6:	4629      	mov	r1, r5
 8002ae8:	4620      	mov	r0, r4
 8002aea:	f000 f8f1 	bl	8002cd0 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8002aee:	2000      	movs	r0, #0
 8002af0:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002af2:	4629      	mov	r1, r5
 8002af4:	4620      	mov	r0, r4
 8002af6:	f000 fa0d 	bl	8002f14 <USBD_StdItfReq>
    break;
 8002afa:	e7f8      	b.n	8002aee <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8002afc:	4629      	mov	r1, r5
 8002afe:	4620      	mov	r0, r4
 8002b00:	f000 fa2d 	bl	8002f5e <USBD_StdEPReq>
    break;
 8002b04:	e7f3      	b.n	8002aee <USBD_LL_SetupStage+0x42>

08002b06 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002b06:	b570      	push	{r4, r5, r6, lr}
 8002b08:	4605      	mov	r5, r0
 8002b0a:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8002b0c:	bb39      	cbnz	r1, 8002b5e <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002b0e:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d11e      	bne.n	8002b54 <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 8002b16:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8002b1a:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d90b      	bls.n	8002b3a <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002b22:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 8002b24:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8002b26:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 8002b2a:	bf8c      	ite	hi
 8002b2c:	b29a      	uxthhi	r2, r3
 8002b2e:	b292      	uxthls	r2, r2
 8002b30:	4631      	mov	r1, r6
 8002b32:	f000 fac5 	bl	80030c0 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002b36:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8002b38:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002b3a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	b123      	cbz	r3, 8002b4c <USBD_LL_DataOutStage+0x46>
 8002b42:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002b46:	2a03      	cmp	r2, #3
 8002b48:	d100      	bne.n	8002b4c <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8002b4a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002b4c:	4628      	mov	r0, r5
 8002b4e:	f000 fabf 	bl	80030d0 <USBD_CtlSendStatus>
 8002b52:	e7f0      	b.n	8002b36 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8002b54:	2b05      	cmp	r3, #5
 8002b56:	d1ee      	bne.n	8002b36 <USBD_LL_DataOutStage+0x30>
        USBD_LL_StallEP(pdev, 0U);
 8002b58:	f000 ff4a 	bl	80039f0 <USBD_LL_StallEP>
 8002b5c:	e7eb      	b.n	8002b36 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 8002b5e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	b12b      	cbz	r3, 8002b72 <USBD_LL_DataOutStage+0x6c>
 8002b66:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002b6a:	2a03      	cmp	r2, #3
 8002b6c:	d101      	bne.n	8002b72 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8002b6e:	4798      	blx	r3
 8002b70:	e7e1      	b.n	8002b36 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8002b72:	2002      	movs	r0, #2
}
 8002b74:	bd70      	pop	{r4, r5, r6, pc}

08002b76 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8002b76:	b570      	push	{r4, r5, r6, lr}
 8002b78:	4613      	mov	r3, r2
 8002b7a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8002b7c:	460e      	mov	r6, r1
 8002b7e:	2900      	cmp	r1, #0
 8002b80:	d148      	bne.n	8002c14 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002b82:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8002b86:	2a02      	cmp	r2, #2
 8002b88:	d13d      	bne.n	8002c06 <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8002b8a:	6a05      	ldr	r5, [r0, #32]
 8002b8c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002b8e:	4295      	cmp	r5, r2
 8002b90:	d914      	bls.n	8002bbc <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8002b92:	1aaa      	subs	r2, r5, r2
 8002b94:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8002b96:	4619      	mov	r1, r3
 8002b98:	b292      	uxth	r2, r2
 8002b9a:	f000 fa89 	bl	80030b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002b9e:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	f000 ff6b 	bl	8003a80 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8002baa:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	f04f 0000 	mov.w	r0, #0
 8002bb4:	d13a      	bne.n	8002c2c <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8002bb6:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8002bba:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8002bbc:	69c3      	ldr	r3, [r0, #28]
 8002bbe:	fbb3 f5f2 	udiv	r5, r3, r2
 8002bc2:	fb02 3515 	mls	r5, r2, r5, r3
 8002bc6:	b965      	cbnz	r5, 8002be2 <USBD_LL_DataInStage+0x6c>
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d80a      	bhi.n	8002be2 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002bcc:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d206      	bcs.n	8002be2 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8002bd4:	462a      	mov	r2, r5
 8002bd6:	f000 fa6b 	bl	80030b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8002bda:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002bde:	462b      	mov	r3, r5
 8002be0:	e7de      	b.n	8002ba0 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002be2:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	b12b      	cbz	r3, 8002bf6 <USBD_LL_DataInStage+0x80>
 8002bea:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8002bee:	2a03      	cmp	r2, #3
 8002bf0:	d101      	bne.n	8002bf6 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8002bf6:	2180      	movs	r1, #128	; 0x80
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f000 fef9 	bl	80039f0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8002bfe:	4620      	mov	r0, r4
 8002c00:	f000 fa71 	bl	80030e6 <USBD_CtlReceiveStatus>
 8002c04:	e7d1      	b.n	8002baa <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8002c06:	f032 0304 	bics.w	r3, r2, #4
 8002c0a:	d1ce      	bne.n	8002baa <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8002c0c:	2180      	movs	r1, #128	; 0x80
 8002c0e:	f000 feef 	bl	80039f0 <USBD_LL_StallEP>
 8002c12:	e7ca      	b.n	8002baa <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8002c14:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	b133      	cbz	r3, 8002c2a <USBD_LL_DataInStage+0xb4>
 8002c1c:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002c20:	2a03      	cmp	r2, #3
 8002c22:	d102      	bne.n	8002c2a <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8002c24:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002c26:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8002c28:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8002c2a:	2002      	movs	r0, #2
}
 8002c2c:	bd70      	pop	{r4, r5, r6, pc}

08002c2e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8002c2e:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002c30:	2200      	movs	r2, #0
{
 8002c32:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002c34:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002c36:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002c38:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002c3a:	2340      	movs	r3, #64	; 0x40
 8002c3c:	f000 fec8 	bl	80039d0 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002c40:	4633      	mov	r3, r6
 8002c42:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002c44:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002c48:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	4620      	mov	r0, r4
 8002c50:	f000 febe 	bl	80039d0 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8002c54:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8002c58:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 8002c5a:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002c5c:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002c5e:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8002c62:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8002c66:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8002c68:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 8002c6c:	b123      	cbz	r3, 8002c78 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002c6e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8002c72:	4620      	mov	r0, r4
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	4798      	blx	r3
  }

  return USBD_OK;
}
 8002c78:	2000      	movs	r0, #0
 8002c7a:	bd70      	pop	{r4, r5, r6, pc}

08002c7c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002c7c:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002c7e:	2000      	movs	r0, #0
 8002c80:	4770      	bx	lr

08002c82 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002c82:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002c86:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8002c90:	2000      	movs	r0, #0
 8002c92:	4770      	bx	lr

08002c94 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8002c94:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8002c98:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	4770      	bx	lr

08002ca0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002ca0:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002ca2:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002ca6:	2a03      	cmp	r2, #3
 8002ca8:	d104      	bne.n	8002cb4 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002caa:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	b103      	cbz	r3, 8002cb4 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002cb2:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	bd08      	pop	{r3, pc}

08002cb8 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002cb8:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8002cba:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002cbc:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8002cbe:	f000 fe97 	bl	80039f0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	2100      	movs	r1, #0
}
 8002cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8002cca:	f000 be91 	b.w	80039f0 <USBD_LL_StallEP>
	...

08002cd0 <USBD_StdDevReq>:
{
 8002cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002cd2:	780b      	ldrb	r3, [r1, #0]
 8002cd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002cd8:	2b20      	cmp	r3, #32
{
 8002cda:	4604      	mov	r4, r0
 8002cdc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002cde:	d014      	beq.n	8002d0a <USBD_StdDevReq+0x3a>
 8002ce0:	2b40      	cmp	r3, #64	; 0x40
 8002ce2:	d012      	beq.n	8002d0a <USBD_StdDevReq+0x3a>
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f040 8095 	bne.w	8002e14 <USBD_StdDevReq+0x144>
    switch (req->bRequest)
 8002cea:	784b      	ldrb	r3, [r1, #1]
 8002cec:	2b09      	cmp	r3, #9
 8002cee:	f200 8090 	bhi.w	8002e12 <USBD_StdDevReq+0x142>
 8002cf2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002cf6:	00e7      	.short	0x00e7
 8002cf8:	008e0101 	.word	0x008e0101
 8002cfc:	008e00fa 	.word	0x008e00fa
 8002d00:	00130082 	.word	0x00130082
 8002d04:	00d2008e 	.word	0x00d2008e
 8002d08:	00a0      	.short	0x00a0
    pdev->pClass->Setup(pdev, req);
 8002d0a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8002d0e:	4629      	mov	r1, r5
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	4620      	mov	r0, r4
 8002d14:	4798      	blx	r3
}
 8002d16:	2000      	movs	r0, #0
 8002d18:	b003      	add	sp, #12
 8002d1a:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 8002d1c:	884b      	ldrh	r3, [r1, #2]
 8002d1e:	0a1a      	lsrs	r2, r3, #8
 8002d20:	3a01      	subs	r2, #1
 8002d22:	2a0e      	cmp	r2, #14
 8002d24:	d875      	bhi.n	8002e12 <USBD_StdDevReq+0x142>
 8002d26:	e8df f002 	tbb	[pc, r2]
 8002d2a:	2824      	.short	0x2824
 8002d2c:	55747435 	.word	0x55747435
 8002d30:	7474745e 	.word	0x7474745e
 8002d34:	74747474 	.word	0x74747474
 8002d38:	08          	.byte	0x08
 8002d39:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8002d3a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002d3e:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002d40:	7c20      	ldrb	r0, [r4, #16]
 8002d42:	f10d 0106 	add.w	r1, sp, #6
 8002d46:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 8002d48:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002d4c:	b152      	cbz	r2, 8002d64 <USBD_StdDevReq+0x94>
 8002d4e:	88eb      	ldrh	r3, [r5, #6]
 8002d50:	b143      	cbz	r3, 8002d64 <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 8002d52:	429a      	cmp	r2, r3
 8002d54:	bf28      	it	cs
 8002d56:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8002d58:	4601      	mov	r1, r0
 8002d5a:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8002d5c:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8002d60:	f000 f999 	bl	8003096 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8002d64:	88eb      	ldrh	r3, [r5, #6]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1d5      	bne.n	8002d16 <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	f000 f9b0 	bl	80030d0 <USBD_CtlSendStatus>
 8002d70:	e7d1      	b.n	8002d16 <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002d72:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	e7e2      	b.n	8002d40 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8002d7a:	7c02      	ldrb	r2, [r0, #16]
 8002d7c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002d80:	b932      	cbnz	r2, 8002d90 <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002d84:	f10d 0006 	add.w	r0, sp, #6
 8002d88:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002d8a:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002d8c:	7043      	strb	r3, [r0, #1]
 8002d8e:	e7db      	b.n	8002d48 <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	e7f7      	b.n	8002d84 <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b05      	cmp	r3, #5
 8002d98:	d83b      	bhi.n	8002e12 <USBD_StdDevReq+0x142>
 8002d9a:	e8df f003 	tbb	[pc, r3]
 8002d9e:	0703      	.short	0x0703
 8002da0:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8002da4:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	e7c9      	b.n	8002d40 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002dac:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	e7c5      	b.n	8002d40 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002db4:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	e7c1      	b.n	8002d40 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002dbc:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	e7bd      	b.n	8002d40 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002dc4:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	e7b9      	b.n	8002d40 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002dcc:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	e7b5      	b.n	8002d40 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8002dd4:	7c03      	ldrb	r3, [r0, #16]
 8002dd6:	b9e3      	cbnz	r3, 8002e12 <USBD_StdDevReq+0x142>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002dd8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002ddc:	f10d 0006 	add.w	r0, sp, #6
 8002de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de2:	4798      	blx	r3
 8002de4:	e7b0      	b.n	8002d48 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8002de6:	7c03      	ldrb	r3, [r0, #16]
 8002de8:	b99b      	cbnz	r3, 8002e12 <USBD_StdDevReq+0x142>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002dea:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002dee:	f10d 0006 	add.w	r0, sp, #6
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002df6:	2307      	movs	r3, #7
 8002df8:	e7c8      	b.n	8002d8c <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8002dfa:	888b      	ldrh	r3, [r1, #4]
 8002dfc:	b94b      	cbnz	r3, 8002e12 <USBD_StdDevReq+0x142>
 8002dfe:	88cb      	ldrh	r3, [r1, #6]
 8002e00:	b93b      	cbnz	r3, 8002e12 <USBD_StdDevReq+0x142>
 8002e02:	884d      	ldrh	r5, [r1, #2]
 8002e04:	2d7f      	cmp	r5, #127	; 0x7f
 8002e06:	d804      	bhi.n	8002e12 <USBD_StdDevReq+0x142>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002e08:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002e0c:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8002e0e:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002e10:	d103      	bne.n	8002e1a <USBD_StdDevReq+0x14a>
      USBD_CtlError(pdev, req);
 8002e12:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8002e14:	f7ff ff50 	bl	8002cb8 <USBD_CtlError.constprop.1>
    break;
 8002e18:	e77d      	b.n	8002d16 <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 8002e1a:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8002e1e:	f000 fe13 	bl	8003a48 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8002e22:	4620      	mov	r0, r4
 8002e24:	f000 f954 	bl	80030d0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8002e28:	b11d      	cbz	r5, 8002e32 <USBD_StdDevReq+0x162>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002e2a:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8002e2c:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8002e30:	e771      	b.n	8002d16 <USBD_StdDevReq+0x46>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e7fa      	b.n	8002e2c <USBD_StdDevReq+0x15c>
  cfgidx = (uint8_t)(req->wValue);
 8002e36:	7889      	ldrb	r1, [r1, #2]
 8002e38:	4d35      	ldr	r5, [pc, #212]	; (8002f10 <USBD_StdDevReq+0x240>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002e3a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8002e3c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002e3e:	d8e8      	bhi.n	8002e12 <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 8002e40:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d008      	beq.n	8002e5a <USBD_StdDevReq+0x18a>
 8002e48:	2b03      	cmp	r3, #3
 8002e4a:	d014      	beq.n	8002e76 <USBD_StdDevReq+0x1a6>
      USBD_CtlError(pdev, req);
 8002e4c:	f7ff ff34 	bl	8002cb8 <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 8002e50:	7829      	ldrb	r1, [r5, #0]
 8002e52:	4620      	mov	r0, r4
 8002e54:	f7ff fe23 	bl	8002a9e <USBD_ClrClassConfig>
 8002e58:	e75d      	b.n	8002d16 <USBD_StdDevReq+0x46>
      if (cfgidx)
 8002e5a:	2900      	cmp	r1, #0
 8002e5c:	d085      	beq.n	8002d6a <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 8002e5e:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002e60:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8002e62:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002e64:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8002e68:	4620      	mov	r0, r4
 8002e6a:	f7ff fe0d 	bl	8002a88 <USBD_SetClassConfig>
 8002e6e:	2802      	cmp	r0, #2
 8002e70:	f47f af7b 	bne.w	8002d6a <USBD_StdDevReq+0x9a>
 8002e74:	e7cd      	b.n	8002e12 <USBD_StdDevReq+0x142>
      if (cfgidx == 0U)
 8002e76:	b931      	cbnz	r1, 8002e86 <USBD_StdDevReq+0x1b6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8002e7e:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8002e80:	f7ff fe0d 	bl	8002a9e <USBD_ClrClassConfig>
 8002e84:	e771      	b.n	8002d6a <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 8002e86:	6841      	ldr	r1, [r0, #4]
 8002e88:	2901      	cmp	r1, #1
 8002e8a:	f43f af6e 	beq.w	8002d6a <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8002e8e:	b2c9      	uxtb	r1, r1
 8002e90:	f7ff fe05 	bl	8002a9e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002e94:	7829      	ldrb	r1, [r5, #0]
 8002e96:	6061      	str	r1, [r4, #4]
 8002e98:	e7e6      	b.n	8002e68 <USBD_StdDevReq+0x198>
  if (req->wLength != 1U)
 8002e9a:	88ca      	ldrh	r2, [r1, #6]
 8002e9c:	2a01      	cmp	r2, #1
 8002e9e:	d1b8      	bne.n	8002e12 <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 8002ea0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0b4      	beq.n	8002e12 <USBD_StdDevReq+0x142>
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d903      	bls.n	8002eb4 <USBD_StdDevReq+0x1e4>
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d1b0      	bne.n	8002e12 <USBD_StdDevReq+0x142>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8002eb0:	1d01      	adds	r1, r0, #4
 8002eb2:	e003      	b.n	8002ebc <USBD_StdDevReq+0x1ec>
      pdev->dev_default_config = 0U;
 8002eb4:	4601      	mov	r1, r0
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	f000 f8ea 	bl	8003096 <USBD_CtlSendData>
 8002ec2:	e728      	b.n	8002d16 <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8002ec4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d8a1      	bhi.n	8002e12 <USBD_StdDevReq+0x142>
    if(req->wLength != 0x2U)
 8002ece:	88cb      	ldrh	r3, [r1, #6]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d19e      	bne.n	8002e12 <USBD_StdDevReq+0x142>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8002ed8:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8002edc:	b10b      	cbz	r3, 8002ee2 <USBD_StdDevReq+0x212>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f104 010c 	add.w	r1, r4, #12
 8002ee8:	e7e8      	b.n	8002ebc <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002eea:	884b      	ldrh	r3, [r1, #2]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	f47f af12 	bne.w	8002d16 <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 8002ef2:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 8002ef6:	e738      	b.n	8002d6a <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 8002ef8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002efc:	3b01      	subs	r3, #1
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d887      	bhi.n	8002e12 <USBD_StdDevReq+0x142>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002f02:	884b      	ldrh	r3, [r1, #2]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	f47f af06 	bne.w	8002d16 <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e7f1      	b.n	8002ef2 <USBD_StdDevReq+0x222>
 8002f0e:	bf00      	nop
 8002f10:	20000084 	.word	0x20000084

08002f14 <USBD_StdItfReq>:
{
 8002f14:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002f16:	780b      	ldrb	r3, [r1, #0]
 8002f18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002f1c:	2b20      	cmp	r3, #32
{
 8002f1e:	4604      	mov	r4, r0
 8002f20:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002f22:	d002      	beq.n	8002f2a <USBD_StdItfReq+0x16>
 8002f24:	2b40      	cmp	r3, #64	; 0x40
 8002f26:	d000      	beq.n	8002f2a <USBD_StdItfReq+0x16>
 8002f28:	b9b3      	cbnz	r3, 8002f58 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 8002f2a:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d810      	bhi.n	8002f56 <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8002f34:	792b      	ldrb	r3, [r5, #4]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d80d      	bhi.n	8002f56 <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8002f3a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8002f3e:	4629      	mov	r1, r5
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	4620      	mov	r0, r4
 8002f44:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8002f46:	88eb      	ldrh	r3, [r5, #6]
 8002f48:	b91b      	cbnz	r3, 8002f52 <USBD_StdItfReq+0x3e>
 8002f4a:	b910      	cbnz	r0, 8002f52 <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	f000 f8bf 	bl	80030d0 <USBD_CtlSendStatus>
}
 8002f52:	2000      	movs	r0, #0
 8002f54:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 8002f56:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8002f58:	f7ff feae 	bl	8002cb8 <USBD_CtlError.constprop.1>
    break;
 8002f5c:	e7f9      	b.n	8002f52 <USBD_StdItfReq+0x3e>

08002f5e <USBD_StdEPReq>:
{
 8002f5e:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002f60:	780a      	ldrb	r2, [r1, #0]
 8002f62:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002f66:	2a20      	cmp	r2, #32
{
 8002f68:	4604      	mov	r4, r0
 8002f6a:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002f6c:	d013      	beq.n	8002f96 <USBD_StdEPReq+0x38>
 8002f6e:	2a40      	cmp	r2, #64	; 0x40
 8002f70:	d011      	beq.n	8002f96 <USBD_StdEPReq+0x38>
 8002f72:	b96a      	cbnz	r2, 8002f90 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8002f74:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8002f76:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8002f78:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8002f7a:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8002f7c:	d01f      	beq.n	8002fbe <USBD_StdEPReq+0x60>
 8002f7e:	d335      	bcc.n	8002fec <USBD_StdEPReq+0x8e>
 8002f80:	2d03      	cmp	r5, #3
 8002f82:	d105      	bne.n	8002f90 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8002f84:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002f88:	2a02      	cmp	r2, #2
 8002f8a:	d026      	beq.n	8002fda <USBD_StdEPReq+0x7c>
 8002f8c:	2a03      	cmp	r2, #3
 8002f8e:	d00a      	beq.n	8002fa6 <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 8002f90:	f7ff fe92 	bl	8002cb8 <USBD_CtlError.constprop.1>
    break;
 8002f94:	e005      	b.n	8002fa2 <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 8002f96:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	6892      	ldr	r2, [r2, #8]
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	4790      	blx	r2
}
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 8002fa6:	885a      	ldrh	r2, [r3, #2]
 8002fa8:	b92a      	cbnz	r2, 8002fb6 <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8002faa:	064a      	lsls	r2, r1, #25
 8002fac:	d003      	beq.n	8002fb6 <USBD_StdEPReq+0x58>
 8002fae:	88db      	ldrh	r3, [r3, #6]
 8002fb0:	b90b      	cbnz	r3, 8002fb6 <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 8002fb2:	f000 fd1d 	bl	80039f0 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f000 f88a 	bl	80030d0 <USBD_CtlSendStatus>
        break;
 8002fbc:	e7f1      	b.n	8002fa2 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8002fbe:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002fc2:	2a02      	cmp	r2, #2
 8002fc4:	d009      	beq.n	8002fda <USBD_StdEPReq+0x7c>
 8002fc6:	2a03      	cmp	r2, #3
 8002fc8:	d1e2      	bne.n	8002f90 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8002fca:	885b      	ldrh	r3, [r3, #2]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1e8      	bne.n	8002fa2 <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 8002fd0:	064d      	lsls	r5, r1, #25
 8002fd2:	d0f0      	beq.n	8002fb6 <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8002fd4:	f000 fd1a 	bl	8003a0c <USBD_LL_ClearStallEP>
 8002fd8:	e7ed      	b.n	8002fb6 <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8002fda:	064b      	lsls	r3, r1, #25
 8002fdc:	d017      	beq.n	800300e <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 8002fde:	f000 fd07 	bl	80039f0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8002fe2:	2180      	movs	r1, #128	; 0x80
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	f000 fd03 	bl	80039f0 <USBD_LL_StallEP>
 8002fea:	e7da      	b.n	8002fa2 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8002fec:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d00e      	beq.n	8003012 <USBD_StdEPReq+0xb4>
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d1cb      	bne.n	8002f90 <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 8002ff8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002ffc:	f04f 0314 	mov.w	r3, #20
 8003000:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003004:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 8003008:	d012      	beq.n	8003030 <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800300a:	6992      	ldr	r2, [r2, #24]
 800300c:	b9da      	cbnz	r2, 8003046 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 800300e:	4620      	mov	r0, r4
 8003010:	e7be      	b.n	8002f90 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003012:	0649      	lsls	r1, r1, #25
 8003014:	d1fb      	bne.n	800300e <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003016:	0613      	lsls	r3, r2, #24
 8003018:	bf4c      	ite	mi
 800301a:	f100 0114 	addmi.w	r1, r0, #20
 800301e:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 8003022:	2300      	movs	r3, #0
 8003024:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003026:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003028:	4620      	mov	r0, r4
 800302a:	f000 f834 	bl	8003096 <USBD_CtlSendData>
          break;
 800302e:	e7b8      	b.n	8002fa2 <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003030:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 8003034:	2a00      	cmp	r2, #0
 8003036:	d0ea      	beq.n	800300e <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003038:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800303c:	fb03 0505 	mla	r5, r3, r5, r0
 8003040:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 8003044:	e004      	b.n	8003050 <USBD_StdEPReq+0xf2>
 8003046:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800304a:	fb05 3503 	mla	r5, r5, r3, r3
 800304e:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003050:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8003054:	d103      	bne.n	800305e <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 8003056:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003058:	2202      	movs	r2, #2
 800305a:	4629      	mov	r1, r5
 800305c:	e7e4      	b.n	8003028 <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800305e:	4620      	mov	r0, r4
 8003060:	f000 fce2 	bl	8003a28 <USBD_LL_IsStallEP>
 8003064:	b108      	cbz	r0, 800306a <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 8003066:	2301      	movs	r3, #1
 8003068:	e7f5      	b.n	8003056 <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 800306a:	6028      	str	r0, [r5, #0]
 800306c:	e7f4      	b.n	8003058 <USBD_StdEPReq+0xfa>

0800306e <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800306e:	780b      	ldrb	r3, [r1, #0]
 8003070:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003072:	784b      	ldrb	r3, [r1, #1]
 8003074:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003076:	78ca      	ldrb	r2, [r1, #3]
 8003078:	788b      	ldrb	r3, [r1, #2]
 800307a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800307e:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003080:	794a      	ldrb	r2, [r1, #5]
 8003082:	790b      	ldrb	r3, [r1, #4]
 8003084:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003088:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800308a:	79ca      	ldrb	r2, [r1, #7]
 800308c:	798b      	ldrb	r3, [r1, #6]
 800308e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003092:	80c3      	strh	r3, [r0, #6]
 8003094:	4770      	bx	lr

08003096 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8003096:	b510      	push	{r4, lr}
 8003098:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800309a:	2202      	movs	r2, #2
 800309c:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80030a0:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80030a2:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80030a4:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80030a6:	2100      	movs	r1, #0
 80030a8:	f000 fcdc 	bl	8003a64 <USBD_LL_Transmit>

  return USBD_OK;
}
 80030ac:	2000      	movs	r0, #0
 80030ae:	bd10      	pop	{r4, pc}

080030b0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80030b0:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80030b2:	4613      	mov	r3, r2
 80030b4:	460a      	mov	r2, r1
 80030b6:	2100      	movs	r1, #0
 80030b8:	f000 fcd4 	bl	8003a64 <USBD_LL_Transmit>

  return USBD_OK;
}
 80030bc:	2000      	movs	r0, #0
 80030be:	bd08      	pop	{r3, pc}

080030c0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80030c0:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80030c2:	4613      	mov	r3, r2
 80030c4:	460a      	mov	r2, r1
 80030c6:	2100      	movs	r1, #0
 80030c8:	f000 fcda 	bl	8003a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80030cc:	2000      	movs	r0, #0
 80030ce:	bd08      	pop	{r3, pc}

080030d0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80030d0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80030d2:	2304      	movs	r3, #4
 80030d4:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80030d8:	2300      	movs	r3, #0
 80030da:	461a      	mov	r2, r3
 80030dc:	4619      	mov	r1, r3
 80030de:	f000 fcc1 	bl	8003a64 <USBD_LL_Transmit>

  return USBD_OK;
}
 80030e2:	2000      	movs	r0, #0
 80030e4:	bd08      	pop	{r3, pc}

080030e6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80030e6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80030e8:	2305      	movs	r3, #5
 80030ea:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80030ee:	2300      	movs	r3, #0
 80030f0:	461a      	mov	r2, r3
 80030f2:	4619      	mov	r1, r3
 80030f4:	f000 fcc4 	bl	8003a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80030f8:	2000      	movs	r0, #0
 80030fa:	bd08      	pop	{r3, pc}

080030fc <LTC_wake>:

  }
}

void LTC_wake(uint16_t numChips)
{
 80030fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	for(int i=0; i<numChips; i++)
 80030fe:	2400      	movs	r4, #0
		//HAL_Delay(1);
		uint8_t cmd[]={0x00, 0x00};
		//for(int x=0;x<10;x++)
		//{
			HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
			HAL_SPI_Transmit(&hspi1, (uint8_t*)cmd, 1, 100);
 8003100:	4f12      	ldr	r7, [pc, #72]	; (800314c <LTC_wake+0x50>)
{
 8003102:	4606      	mov	r6, r0
		HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 8003104:	4625      	mov	r5, r4
	for(int i=0; i<numChips; i++)
 8003106:	42b4      	cmp	r4, r6
 8003108:	db01      	blt.n	800310e <LTC_wake+0x12>
			HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, HIGH);
	//}
	}
}
 800310a:	b003      	add	sp, #12
 800310c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 800310e:	2200      	movs	r2, #0
 8003110:	2110      	movs	r1, #16
 8003112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003116:	f7fd fde1 	bl	8000cdc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 800311a:	2200      	movs	r2, #0
 800311c:	2110      	movs	r1, #16
 800311e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		uint8_t cmd[]={0x00, 0x00};
 8003122:	f88d 5004 	strb.w	r5, [sp, #4]
 8003126:	f88d 5005 	strb.w	r5, [sp, #5]
			HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 800312a:	f7fd fdd7 	bl	8000cdc <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, (uint8_t*)cmd, 1, 100);
 800312e:	2364      	movs	r3, #100	; 0x64
 8003130:	2201      	movs	r2, #1
 8003132:	a901      	add	r1, sp, #4
 8003134:	4638      	mov	r0, r7
 8003136:	f7fe ffc8 	bl	80020ca <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, HIGH);
 800313a:	2201      	movs	r2, #1
 800313c:	2110      	movs	r1, #16
 800313e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003142:	f7fd fdcb 	bl	8000cdc <HAL_GPIO_WritePin>
	for(int i=0; i<numChips; i++)
 8003146:	3401      	adds	r4, #1
 8003148:	e7dd      	b.n	8003106 <LTC_wake+0xa>
 800314a:	bf00      	nop
 800314c:	20000264 	.word	0x20000264

08003150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003150:	b570      	push	{r4, r5, r6, lr}
 8003152:	b0ae      	sub	sp, #184	; 0xb8
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability
    */
  HAL_PWR_EnableBkUpAccess();
 8003154:	f7fe f8f8 	bl	8001348 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003158:	4a3a      	ldr	r2, [pc, #232]	; (8003244 <SystemClock_Config+0xf4>)
 800315a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800315e:	f023 0318 	bic.w	r3, r3, #24
 8003162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003166:	2314      	movs	r3, #20
 8003168:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800316a:	2300      	movs	r3, #0
 800316c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800316e:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003170:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003172:	2502      	movs	r5, #2
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003174:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003176:	2607      	movs	r6, #7
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003178:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800317a:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800317c:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800317e:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003180:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003182:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003184:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003186:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003188:	9613      	str	r6, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800318a:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800318c:	9515      	str	r5, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800318e:	f7fe f9c9 	bl	8001524 <HAL_RCC_OscConfig>
 8003192:	b128      	cbz	r0, 80031a0 <SystemClock_Config+0x50>
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
	 HAL_GPIO_TogglePin(LED3_GPIO_PORT, LED3_PIN);
 8003194:	4c2c      	ldr	r4, [pc, #176]	; (8003248 <SystemClock_Config+0xf8>)
 8003196:	2110      	movs	r1, #16
 8003198:	4620      	mov	r0, r4
 800319a:	f7fd fda4 	bl	8000ce6 <HAL_GPIO_TogglePin>
 800319e:	e7fa      	b.n	8003196 <SystemClock_Config+0x46>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031a0:	220f      	movs	r2, #15
 80031a2:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031a4:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031a6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031a8:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80031aa:	2104      	movs	r1, #4
 80031ac:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031ae:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80031b2:	f7fe fc15 	bl	80019e0 <HAL_RCC_ClockConfig>
 80031b6:	b128      	cbz	r0, 80031c4 <SystemClock_Config+0x74>
	 HAL_GPIO_TogglePin(LED3_GPIO_PORT, LED3_PIN);
 80031b8:	4c23      	ldr	r4, [pc, #140]	; (8003248 <SystemClock_Config+0xf8>)
 80031ba:	2110      	movs	r1, #16
 80031bc:	4620      	mov	r0, r4
 80031be:	f7fd fd92 	bl	8000ce6 <HAL_GPIO_TogglePin>
 80031c2:	e7fa      	b.n	80031ba <SystemClock_Config+0x6a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 80031c4:	4b21      	ldr	r3, [pc, #132]	; (800324c <SystemClock_Config+0xfc>)
 80031c6:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80031c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031cc:	932d      	str	r3, [sp, #180]	; 0xb4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80031ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80031d2:	9328      	str	r3, [sp, #160]	; 0xa0
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80031d4:	2318      	movs	r3, #24
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80031d6:	901e      	str	r0, [sp, #120]	; 0x78
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80031d8:	9025      	str	r0, [sp, #148]	; 0x94
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80031da:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031dc:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80031de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80031e2:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80031e4:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80031e6:	961a      	str	r6, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80031e8:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80031ea:	951c      	str	r5, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80031ec:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031ee:	f7fe fd1b 	bl	8001c28 <HAL_RCCEx_PeriphCLKConfig>
 80031f2:	b128      	cbz	r0, 8003200 <SystemClock_Config+0xb0>
	 HAL_GPIO_TogglePin(LED3_GPIO_PORT, LED3_PIN);
 80031f4:	4c14      	ldr	r4, [pc, #80]	; (8003248 <SystemClock_Config+0xf8>)
 80031f6:	2110      	movs	r1, #16
 80031f8:	4620      	mov	r0, r4
 80031fa:	f7fd fd74 	bl	8000ce6 <HAL_GPIO_TogglePin>
 80031fe:	e7fa      	b.n	80031f6 <SystemClock_Config+0xa6>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003200:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003204:	f7fe f8b0 	bl	8001368 <HAL_PWREx_ControlVoltageScaling>
 8003208:	4604      	mov	r4, r0
 800320a:	b128      	cbz	r0, 8003218 <SystemClock_Config+0xc8>
	 HAL_GPIO_TogglePin(LED3_GPIO_PORT, LED3_PIN);
 800320c:	4c0e      	ldr	r4, [pc, #56]	; (8003248 <SystemClock_Config+0xf8>)
 800320e:	2110      	movs	r1, #16
 8003210:	4620      	mov	r0, r4
 8003212:	f7fd fd68 	bl	8000ce6 <HAL_GPIO_TogglePin>
 8003216:	e7fa      	b.n	800320e <SystemClock_Config+0xbe>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/10000);//100us
 8003218:	f7fe fc74 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 800321c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003220:	fbb0 f0f3 	udiv	r0, r0, r3
 8003224:	f7fd fc70 	bl	8000b08 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003228:	2004      	movs	r0, #4
 800322a:	f7fd fc83 	bl	8000b34 <HAL_SYSTICK_CLKSourceConfig>
  HAL_RCCEx_EnableMSIPLLMode();
 800322e:	f7fe fe71 	bl	8001f14 <HAL_RCCEx_EnableMSIPLLMode>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003232:	4622      	mov	r2, r4
 8003234:	4621      	mov	r1, r4
 8003236:	f04f 30ff 	mov.w	r0, #4294967295
 800323a:	f7fd fc31 	bl	8000aa0 <HAL_NVIC_SetPriority>
}
 800323e:	b02e      	add	sp, #184	; 0xb8
 8003240:	bd70      	pop	{r4, r5, r6, pc}
 8003242:	bf00      	nop
 8003244:	40021000 	.word	0x40021000
 8003248:	48000400 	.word	0x48000400
 800324c:	00022201 	.word	0x00022201

08003250 <MX_SPI1_Init>:
  hspi1.Instance = SPI1;
 8003250:	4812      	ldr	r0, [pc, #72]	; (800329c <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003252:	4a13      	ldr	r2, [pc, #76]	; (80032a0 <MX_SPI1_Init+0x50>)
 8003254:	f44f 7382 	mov.w	r3, #260	; 0x104
{
 8003258:	b510      	push	{r4, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800325a:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;//SPI_DATASIZE_4BIT;
 800325e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003262:	60c2      	str	r2, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003264:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003268:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800326a:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;//SPI_BAUDRATEPRESCALER_2;
 800326c:	2238      	movs	r2, #56	; 0x38
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800326e:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003270:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003272:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;//SPI_BAUDRATEPRESCALER_2;
 8003274:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003276:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003278:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800327a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800327c:	2207      	movs	r2, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800327e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003280:	2308      	movs	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 8003282:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003284:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003286:	f7fe fecf 	bl	8002028 <HAL_SPI_Init>
 800328a:	b128      	cbz	r0, 8003298 <MX_SPI1_Init+0x48>
	 HAL_GPIO_TogglePin(LED3_GPIO_PORT, LED3_PIN);
 800328c:	4c05      	ldr	r4, [pc, #20]	; (80032a4 <MX_SPI1_Init+0x54>)
 800328e:	2110      	movs	r1, #16
 8003290:	4620      	mov	r0, r4
 8003292:	f7fd fd28 	bl	8000ce6 <HAL_GPIO_TogglePin>
 8003296:	e7fa      	b.n	800328e <MX_SPI1_Init+0x3e>
 8003298:	bd10      	pop	{r4, pc}
 800329a:	bf00      	nop
 800329c:	20000264 	.word	0x20000264
 80032a0:	40013000 	.word	0x40013000
 80032a4:	48000400 	.word	0x48000400

080032a8 <MX_GPIO_Init>:
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a8:	4b38      	ldr	r3, [pc, #224]	; (800338c <MX_GPIO_Init+0xe4>)
{
 80032aa:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80032ae:	4f38      	ldr	r7, [pc, #224]	; (8003390 <MX_GPIO_Init+0xe8>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3 
 80032b0:	4d38      	ldr	r5, [pc, #224]	; (8003394 <MX_GPIO_Init+0xec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032b2:	f042 0204 	orr.w	r2, r2, #4
 80032b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80032b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 80032ba:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032bc:	f002 0204 	and.w	r2, r2, #4
 80032c0:	9201      	str	r2, [sp, #4]
 80032c2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80032cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032ce:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80032d2:	9202      	str	r2, [sp, #8]
 80032d4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032d8:	f042 0201 	orr.w	r2, r2, #1
 80032dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80032de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032e0:	f002 0201 	and.w	r2, r2, #1
 80032e4:	9203      	str	r2, [sp, #12]
 80032e6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032ea:	f042 0202 	orr.w	r2, r2, #2
 80032ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80032f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80032f8:	4638      	mov	r0, r7
 80032fa:	2200      	movs	r2, #0
 80032fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003300:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003302:	f7fd fceb 	bl	8000cdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 8003306:	2200      	movs	r2, #0
 8003308:	f248 0118 	movw	r1, #32792	; 0x8018
 800330c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003310:	f7fd fce4 	bl	8000cdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3 
 8003314:	2200      	movs	r2, #0
 8003316:	4628      	mov	r0, r5
 8003318:	f241 41fc 	movw	r1, #5372	; 0x14fc
 800331c:	f7fd fcde 	bl	8000cdc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003320:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003322:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003328:	a905      	add	r1, sp, #20
 800332a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800332c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800332e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003330:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003332:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003334:	f7fd fc10 	bl	8000b58 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8;
 8003338:	f240 1307 	movw	r3, #263	; 0x107
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333c:	a905      	add	r1, sp, #20
 800333e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8;
 8003342:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003344:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003348:	f7fd fc06 	bl	8000b58 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15;
 800334c:	f248 0318 	movw	r3, #32792	; 0x8018
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003350:	a905      	add	r1, sp, #20
 8003352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15;
 8003356:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003358:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335e:	f7fd fbfb 	bl	8000b58 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11;
 8003362:	f640 0303 	movw	r3, #2051	; 0x803
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003366:	a905      	add	r1, sp, #20
 8003368:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11;
 800336a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800336c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003370:	f7fd fbf2 	bl	8000b58 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3 
 8003374:	f241 43fc 	movw	r3, #5372	; 0x14fc
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003378:	a905      	add	r1, sp, #20
 800337a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3 
 800337c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800337e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003382:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003384:	f7fd fbe8 	bl	8000b58 <HAL_GPIO_Init>
}
 8003388:	b00b      	add	sp, #44	; 0x2c
 800338a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800338c:	40021000 	.word	0x40021000
 8003390:	48000800 	.word	0x48000800
 8003394:	48000400 	.word	0x48000400

08003398 <pec15_calc>:
{
 8003398:	b530      	push	{r4, r5, lr}
    remainder = (remainder<<8)^crc15Table[addr];
 800339a:	4d0a      	ldr	r5, [pc, #40]	; (80033c4 <pec15_calc+0x2c>)
  for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 800339c:	460c      	mov	r4, r1
  remainder = 16;//initialize the PEC
 800339e:	2310      	movs	r3, #16
  for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 80033a0:	1a62      	subs	r2, r4, r1
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	4290      	cmp	r0, r2
 80033a6:	d802      	bhi.n	80033ae <pec15_calc+0x16>
  return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80033a8:	0058      	lsls	r0, r3, #1
 80033aa:	b280      	uxth	r0, r0
}
 80033ac:	bd30      	pop	{r4, r5, pc}
    addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 80033ae:	f814 2b01 	ldrb.w	r2, [r4], #1
 80033b2:	ea82 12d3 	eor.w	r2, r2, r3, lsr #7
    remainder = (remainder<<8)^crc15Table[addr];
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 80033bc:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	e7ed      	b.n	80033a0 <pec15_calc+0x8>
 80033c4:	08003d50 	.word	0x08003d50

080033c8 <LTC_Send>:
{
 80033c8:	b530      	push	{r4, r5, lr}
 80033ca:	b085      	sub	sp, #20
	cmd[0] = (uint8_t)(cmd16 >> 8);
 80033cc:	0a03      	lsrs	r3, r0, #8
	cmd[1] = (uint8_t)(cmd16);
 80033ce:	f88d 000d 	strb.w	r0, [sp, #13]
	uint16_t cmd_pec = pec15_calc(2, cmd);
 80033d2:	a903      	add	r1, sp, #12
 80033d4:	2002      	movs	r0, #2
	cmd[0] = (uint8_t)(cmd16 >> 8);
 80033d6:	f88d 300c 	strb.w	r3, [sp, #12]
	uint16_t cmd_pec = pec15_calc(2, cmd);
 80033da:	f7ff ffdd 	bl	8003398 <pec15_calc>
    uint8_t pRxData[]={0x00, 0x00};
 80033de:	2200      	movs	r2, #0
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80033e0:	0a03      	lsrs	r3, r0, #8
	cmd[3] = (uint8_t)(cmd_pec);
 80033e2:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 80033e6:	2110      	movs	r1, #16
 80033e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80033ec:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t pRxData[]={0x00, 0x00};
 80033f0:	f88d 2008 	strb.w	r2, [sp, #8]
 80033f4:	f88d 2009 	strb.w	r2, [sp, #9]
	HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 80033f8:	f7fd fc70 	bl	8000cdc <HAL_GPIO_WritePin>
	switch(HAL_SPI_Transmit(&hspi1, (uint8_t*)cmd, 4, 100))
 80033fc:	2364      	movs	r3, #100	; 0x64
 80033fe:	2204      	movs	r2, #4
 8003400:	a903      	add	r1, sp, #12
 8003402:	481b      	ldr	r0, [pc, #108]	; (8003470 <LTC_Send+0xa8>)
 8003404:	f7fe fe61 	bl	80020ca <HAL_SPI_Transmit>
 8003408:	2801      	cmp	r0, #1
 800340a:	d002      	beq.n	8003412 <LTC_Send+0x4a>
 800340c:	d307      	bcc.n	800341e <LTC_Send+0x56>
 800340e:	2803      	cmp	r0, #3
 8003410:	d109      	bne.n	8003426 <LTC_Send+0x5e>
	 HAL_GPIO_TogglePin(LED3_GPIO_PORT, LED3_PIN);
 8003412:	4c18      	ldr	r4, [pc, #96]	; (8003474 <LTC_Send+0xac>)
 8003414:	2110      	movs	r1, #16
 8003416:	4620      	mov	r0, r4
 8003418:	f7fd fc65 	bl	8000ce6 <HAL_GPIO_TogglePin>
 800341c:	e7fa      	b.n	8003414 <LTC_Send+0x4c>
	      HAL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);
 800341e:	2104      	movs	r1, #4
 8003420:	4814      	ldr	r0, [pc, #80]	; (8003474 <LTC_Send+0xac>)
 8003422:	f7fd fc60 	bl	8000ce6 <HAL_GPIO_TogglePin>
	cmd[0] = 0x00;
 8003426:	2300      	movs	r3, #0
	  switch(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)cmd, (uint8_t*)pRxData, 1, 100))
 8003428:	4d11      	ldr	r5, [pc, #68]	; (8003470 <LTC_Send+0xa8>)
	cmd[0] = 0x00;
 800342a:	f88d 300c 	strb.w	r3, [sp, #12]
	  switch(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)cmd, (uint8_t*)pRxData, 1, 100))
 800342e:	2464      	movs	r4, #100	; 0x64
	while(pRxData[0]==0x00)// & poll)
 8003430:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003434:	b13b      	cbz	r3, 8003446 <LTC_Send+0x7e>
	HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, HIGH);
 8003436:	2201      	movs	r2, #1
 8003438:	2110      	movs	r1, #16
 800343a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800343e:	f7fd fc4d 	bl	8000cdc <HAL_GPIO_WritePin>
}
 8003442:	b005      	add	sp, #20
 8003444:	bd30      	pop	{r4, r5, pc}
	  switch(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)cmd, (uint8_t*)pRxData, 1, 100))
 8003446:	9400      	str	r4, [sp, #0]
 8003448:	2301      	movs	r3, #1
 800344a:	aa02      	add	r2, sp, #8
 800344c:	a903      	add	r1, sp, #12
 800344e:	4628      	mov	r0, r5
 8003450:	f7fe fef9 	bl	8002246 <HAL_SPI_TransmitReceive>
 8003454:	b128      	cbz	r0, 8003462 <LTC_Send+0x9a>
	 HAL_GPIO_TogglePin(LED3_GPIO_PORT, LED3_PIN);
 8003456:	4c07      	ldr	r4, [pc, #28]	; (8003474 <LTC_Send+0xac>)
 8003458:	2110      	movs	r1, #16
 800345a:	4620      	mov	r0, r4
 800345c:	f7fd fc43 	bl	8000ce6 <HAL_GPIO_TogglePin>
 8003460:	e7fa      	b.n	8003458 <LTC_Send+0x90>
				HAL_GPIO_TogglePin(busContactor_GPIO_PORT, busContactor_PIN);
 8003462:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800346a:	f7fd fc3c 	bl	8000ce6 <HAL_GPIO_TogglePin>
			break;
 800346e:	e7df      	b.n	8003430 <LTC_Send+0x68>
 8003470:	20000264 	.word	0x20000264
 8003474:	48000400 	.word	0x48000400

08003478 <LTC_Write>:
{
 8003478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint8_t CMD_LEN = 4+(8*total_ic);
 800347c:	00ce      	lsls	r6, r1, #3
 800347e:	3604      	adds	r6, #4
 8003480:	b2f6      	uxtb	r6, r6
{
 8003482:	4607      	mov	r7, r0
	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8003484:	4630      	mov	r0, r6
{
 8003486:	4690      	mov	r8, r2
 8003488:	460d      	mov	r5, r1
	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 800348a:	f000 fb79 	bl	8003b80 <malloc>
	cmd[0] = (uint8_t)(cmd16 >> 8);
 800348e:	0a3b      	lsrs	r3, r7, #8
	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8003490:	4604      	mov	r4, r0
	cmd[0] = (uint8_t)(cmd16 >> 8);
 8003492:	7003      	strb	r3, [r0, #0]
	cmd[1] = (uint8_t)(cmd16);
 8003494:	7047      	strb	r7, [r0, #1]
	cmd_pec = pec15_calc(2, cmd);
 8003496:	4601      	mov	r1, r0
 8003498:	2002      	movs	r0, #2
 800349a:	f7ff ff7d 	bl	8003398 <pec15_calc>
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800349e:	0a03      	lsrs	r3, r0, #8
 80034a0:	70a3      	strb	r3, [r4, #2]
 80034a2:	3d01      	subs	r5, #1
 80034a4:	2306      	movs	r3, #6
 80034a6:	fb03 8505 	mla	r5, r3, r5, r8
	cmd[3] = (uint8_t)(cmd_pec);
 80034aa:	70e0      	strb	r0, [r4, #3]
 80034ac:	f1a8 0806 	sub.w	r8, r8, #6
	cmd_index = 4;
 80034b0:	2704      	movs	r7, #4
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)       // executes for each LTC681x in daisy chain, this loops starts with
 80034b2:	4545      	cmp	r5, r8
 80034b4:	d116      	bne.n	80034e4 <LTC_Write+0x6c>
	cs_low();
 80034b6:	2200      	movs	r2, #0
 80034b8:	2110      	movs	r1, #16
 80034ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034be:	f7fd fc0d 	bl	8000cdc <HAL_GPIO_WritePin>
	switch(HAL_SPI_Transmit(&hspi1, (uint8_t*)cmd, CMD_LEN, 100))
 80034c2:	2364      	movs	r3, #100	; 0x64
 80034c4:	4632      	mov	r2, r6
 80034c6:	4621      	mov	r1, r4
 80034c8:	4818      	ldr	r0, [pc, #96]	; (800352c <LTC_Write+0xb4>)
 80034ca:	f7fe fdfe 	bl	80020ca <HAL_SPI_Transmit>
 80034ce:	2801      	cmp	r0, #1
 80034d0:	d002      	beq.n	80034d8 <LTC_Write+0x60>
 80034d2:	d31c      	bcc.n	800350e <LTC_Write+0x96>
 80034d4:	2803      	cmp	r0, #3
 80034d6:	d11e      	bne.n	8003516 <LTC_Write+0x9e>
	 HAL_GPIO_TogglePin(LED3_GPIO_PORT, LED3_PIN);
 80034d8:	4c15      	ldr	r4, [pc, #84]	; (8003530 <LTC_Write+0xb8>)
 80034da:	2110      	movs	r1, #16
 80034dc:	4620      	mov	r0, r4
 80034de:	f7fd fc02 	bl	8000ce6 <HAL_GPIO_TogglePin>
 80034e2:	e7fa      	b.n	80034da <LTC_Write+0x62>
 80034e4:	2000      	movs	r0, #0
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 80034e6:	183b      	adds	r3, r7, r0
 80034e8:	5c2a      	ldrb	r2, [r5, r0]
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	3001      	adds	r0, #1
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80034ee:	2806      	cmp	r0, #6
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 80034f0:	54e2      	strb	r2, [r4, r3]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80034f2:	d1f8      	bne.n	80034e6 <LTC_Write+0x6e>
		data_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // calculating the PEC for each Iss configuration register data
 80034f4:	4629      	mov	r1, r5
 80034f6:	f7ff ff4f 	bl	8003398 <pec15_calc>
		cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 80034fa:	1dbb      	adds	r3, r7, #6
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	0a02      	lsrs	r2, r0, #8
 8003500:	54e2      	strb	r2, [r4, r3]
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 8003502:	4423      	add	r3, r4
		cmd_index = cmd_index + 2;
 8003504:	3708      	adds	r7, #8
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 8003506:	7058      	strb	r0, [r3, #1]
		cmd_index = cmd_index + 2;
 8003508:	b2ff      	uxtb	r7, r7
 800350a:	3d06      	subs	r5, #6
 800350c:	e7d1      	b.n	80034b2 <LTC_Write+0x3a>
	      HAL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);
 800350e:	2104      	movs	r1, #4
 8003510:	4807      	ldr	r0, [pc, #28]	; (8003530 <LTC_Write+0xb8>)
 8003512:	f7fd fbe8 	bl	8000ce6 <HAL_GPIO_TogglePin>
	cs_high();
 8003516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800351a:	2201      	movs	r2, #1
 800351c:	2110      	movs	r1, #16
 800351e:	f7fd fbdd 	bl	8000cdc <HAL_GPIO_WritePin>
	free(cmd);
 8003522:	4620      	mov	r0, r4
}
 8003524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free(cmd);
 8003528:	f000 bb32 	b.w	8003b90 <free>
 800352c:	20000264 	.word	0x20000264
 8003530:	48000400 	.word	0x48000400

08003534 <LTC_Send_Recieve>:
{
 8003534:	b570      	push	{r4, r5, r6, lr}
 8003536:	b088      	sub	sp, #32
	uint16_t cmd_pec = pec15_calc(2, cmd);
 8003538:	ac05      	add	r4, sp, #20
	cmd[0] = (uint8_t)(cmd16 >> 8);
 800353a:	0a03      	lsrs	r3, r0, #8
	cmd[1] = (uint8_t)(cmd16);
 800353c:	f88d 0015 	strb.w	r0, [sp, #21]
{
 8003540:	460e      	mov	r6, r1
	uint16_t cmd_pec = pec15_calc(2, cmd);
 8003542:	2002      	movs	r0, #2
 8003544:	4621      	mov	r1, r4
{
 8003546:	4615      	mov	r5, r2
	cmd[0] = (uint8_t)(cmd16 >> 8);
 8003548:	f88d 3014 	strb.w	r3, [sp, #20]
	uint16_t cmd_pec = pec15_calc(2, cmd);
 800354c:	f7ff ff24 	bl	8003398 <pec15_calc>
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003550:	0a03      	lsrs	r3, r0, #8
 8003552:	f88d 3016 	strb.w	r3, [sp, #22]
	cmd[3] = (uint8_t)(cmd_pec);
 8003556:	f88d 0017 	strb.w	r0, [sp, #23]
	for(int i=4;i<12;i++)
 800355a:	2304      	movs	r3, #4
		cmd[i]=0x00;
 800355c:	2200      	movs	r2, #0
 800355e:	54e2      	strb	r2, [r4, r3]
	for(int i=4;i<12;i++)
 8003560:	3301      	adds	r3, #1
 8003562:	2b0c      	cmp	r3, #12
 8003564:	d1fb      	bne.n	800355e <LTC_Send_Recieve+0x2a>
	HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 8003566:	2200      	movs	r2, #0
 8003568:	2110      	movs	r1, #16
 800356a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800356e:	f7fd fbb5 	bl	8000cdc <HAL_GPIO_WritePin>
	switch(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)cmd, (uint8_t*)pRxData, rxBytes+6, 100))
 8003572:	2264      	movs	r2, #100	; 0x64
 8003574:	1dab      	adds	r3, r5, #6
 8003576:	9200      	str	r2, [sp, #0]
 8003578:	b29b      	uxth	r3, r3
 800357a:	aa02      	add	r2, sp, #8
 800357c:	4621      	mov	r1, r4
 800357e:	4811      	ldr	r0, [pc, #68]	; (80035c4 <LTC_Send_Recieve+0x90>)
 8003580:	f7fe fe61 	bl	8002246 <HAL_SPI_TransmitReceive>
 8003584:	2801      	cmp	r0, #1
 8003586:	d002      	beq.n	800358e <LTC_Send_Recieve+0x5a>
 8003588:	d307      	bcc.n	800359a <LTC_Send_Recieve+0x66>
 800358a:	2803      	cmp	r0, #3
 800358c:	d10c      	bne.n	80035a8 <LTC_Send_Recieve+0x74>
	 HAL_GPIO_TogglePin(LED3_GPIO_PORT, LED3_PIN);
 800358e:	4c0e      	ldr	r4, [pc, #56]	; (80035c8 <LTC_Send_Recieve+0x94>)
 8003590:	2110      	movs	r1, #16
 8003592:	4620      	mov	r0, r4
 8003594:	f7fd fba7 	bl	8000ce6 <HAL_GPIO_TogglePin>
 8003598:	e7fa      	b.n	8003590 <LTC_Send_Recieve+0x5c>
	      HAL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);
 800359a:	2104      	movs	r1, #4
 800359c:	480a      	ldr	r0, [pc, #40]	; (80035c8 <LTC_Send_Recieve+0x94>)
 800359e:	f7fd fba2 	bl	8000ce6 <HAL_GPIO_TogglePin>
	      for(int i=0; i<rxBytes; i++)
 80035a2:	2300      	movs	r3, #0
 80035a4:	42ab      	cmp	r3, r5
 80035a6:	db07      	blt.n	80035b8 <LTC_Send_Recieve+0x84>
	HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, HIGH);
 80035a8:	2201      	movs	r2, #1
 80035aa:	2110      	movs	r1, #16
 80035ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035b0:	f7fd fb94 	bl	8000cdc <HAL_GPIO_WritePin>
}
 80035b4:	b008      	add	sp, #32
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
	    	  outputRxData[i]=pRxData[i+4];
 80035b8:	aa02      	add	r2, sp, #8
 80035ba:	441a      	add	r2, r3
 80035bc:	7912      	ldrb	r2, [r2, #4]
 80035be:	54f2      	strb	r2, [r6, r3]
	      for(int i=0; i<rxBytes; i++)
 80035c0:	3301      	adds	r3, #1
 80035c2:	e7ef      	b.n	80035a4 <LTC_Send_Recieve+0x70>
 80035c4:	20000264 	.word	0x20000264
 80035c8:	48000400 	.word	0x48000400
 80035cc:	00000000 	.word	0x00000000

080035d0 <main>:
 {
 80035d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035d4:	b087      	sub	sp, #28
    HAL_Init();
 80035d6:	f7fd fa29 	bl	8000a2c <HAL_Init>
  SystemClock_Config();
 80035da:	f7ff fdb9 	bl	8003150 <SystemClock_Config>
  MX_GPIO_Init();
 80035de:	f7ff fe63 	bl	80032a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80035e2:	f7ff fe35 	bl	8003250 <MX_SPI1_Init>
  HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, HIGH);
 80035e6:	2201      	movs	r2, #1
 80035e8:	2110      	movs	r1, #16
 80035ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035ee:	f7fd fb75 	bl	8000cdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAN_STBY_GPIO_PORT, CAN_STBY_PIN, HIGH);
 80035f2:	2201      	movs	r2, #1
 80035f4:	2180      	movs	r1, #128	; 0x80
 80035f6:	4868      	ldr	r0, [pc, #416]	; (8003798 <main+0x1c8>)
		  LTC_Send_Recieve(RDCVAcmds[c], (uint8_t *)aRxBuffer, rxBytes);
 80035f8:	4d68      	ldr	r5, [pc, #416]	; (800379c <main+0x1cc>)
  HAL_GPIO_WritePin(CAN_STBY_GPIO_PORT, CAN_STBY_PIN, HIGH);
 80035fa:	f7fd fb6f 	bl	8000cdc <HAL_GPIO_WritePin>
  LTC_wake(1);
 80035fe:	2001      	movs	r0, #1
 8003600:	f7ff fd7c 	bl	80030fc <LTC_wake>
  delay_u(300);
 8003604:	2003      	movs	r0, #3
 8003606:	f7fd fa2b 	bl	8000a60 <HAL_Delay>
  LTC_wake(1);
 800360a:	2001      	movs	r0, #1
 800360c:	f7ff fd76 	bl	80030fc <LTC_wake>
  uint8_t CRGA[] = {0xFC, 0x00, 0x00, 0x00, 0x00, 0x00};
 8003610:	23fc      	movs	r3, #252	; 0xfc
  LTC_Write(WRCFGA, 1, (uint8_t *) CRGA);
 8003612:	2101      	movs	r1, #1
  uint8_t CRGA[] = {0xFC, 0x00, 0x00, 0x00, 0x00, 0x00};
 8003614:	f88d 3008 	strb.w	r3, [sp, #8]
  LTC_Write(WRCFGA, 1, (uint8_t *) CRGA);
 8003618:	aa02      	add	r2, sp, #8
  uint8_t CRGA[] = {0xFC, 0x00, 0x00, 0x00, 0x00, 0x00};
 800361a:	2300      	movs	r3, #0
  LTC_Write(WRCFGA, 1, (uint8_t *) CRGA);
 800361c:	4608      	mov	r0, r1
  uint8_t CRGA[] = {0xFC, 0x00, 0x00, 0x00, 0x00, 0x00};
 800361e:	f88d 3009 	strb.w	r3, [sp, #9]
 8003622:	f88d 300a 	strb.w	r3, [sp, #10]
 8003626:	f88d 300b 	strb.w	r3, [sp, #11]
 800362a:	f88d 300c 	strb.w	r3, [sp, #12]
 800362e:	f88d 300d 	strb.w	r3, [sp, #13]
  LTC_Write(WRCFGA, 1, (uint8_t *) CRGA);
 8003632:	f7ff ff21 	bl	8003478 <LTC_Write>
 8003636:	462e      	mov	r6, r5
	  LTC_wake(1);
 8003638:	2001      	movs	r0, #1
 800363a:	f7ff fd5f 	bl	80030fc <LTC_wake>
	  delay_u(1000);
 800363e:	200a      	movs	r0, #10
 8003640:	f7fd fa0e 	bl	8000a60 <HAL_Delay>
      HAL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 8003644:	2108      	movs	r1, #8
 8003646:	4854      	ldr	r0, [pc, #336]	; (8003798 <main+0x1c8>)
 8003648:	f7fd fb4d 	bl	8000ce6 <HAL_GPIO_TogglePin>
	  LTC_wake(1);
 800364c:	2001      	movs	r0, #1
 800364e:	f7ff fd55 	bl	80030fc <LTC_wake>
	  LTC_Send(cmd, 1);
 8003652:	2101      	movs	r1, #1
 8003654:	f240 5077 	movw	r0, #1399	; 0x577
 8003658:	f7ff feb6 	bl	80033c8 <LTC_Send>
	  LTC_Send(cmd, 1);
 800365c:	2101      	movs	r1, #1
 800365e:	f44f 60ac 	mov.w	r0, #1376	; 0x560
 8003662:	f7ff feb1 	bl	80033c8 <LTC_Send>
	  uint8_t RDCVAcmds[6]={RDCVA,RDCVB,RDCVC,RDCVD,RDCVE,RDCVF}; //read all cell voltage register groups
 8003666:	2208      	movs	r2, #8
 8003668:	f88d 2012 	strb.w	r2, [sp, #18]
 800366c:	220a      	movs	r2, #10
 800366e:	2304      	movs	r3, #4
 8003670:	f88d 2013 	strb.w	r2, [sp, #19]
 8003674:	2209      	movs	r2, #9
 8003676:	f88d 3010 	strb.w	r3, [sp, #16]
 800367a:	f88d 2014 	strb.w	r2, [sp, #20]
 800367e:	2306      	movs	r3, #6
 8003680:	220b      	movs	r2, #11
 8003682:	f88d 3011 	strb.w	r3, [sp, #17]
 8003686:	f88d 2015 	strb.w	r2, [sp, #21]
	  for(int c=0;c<6;c++)
 800368a:	2400      	movs	r4, #0
		  LTC_Send_Recieve(RDCVAcmds[c], (uint8_t *)aRxBuffer, rxBytes);
 800368c:	4698      	mov	r8, r3
 800368e:	ab04      	add	r3, sp, #16
 8003690:	4631      	mov	r1, r6
 8003692:	5d18      	ldrb	r0, [r3, r4]
 8003694:	2206      	movs	r2, #6
 8003696:	f7ff ff4d 	bl	8003534 <LTC_Send_Recieve>
			  voltages[i+c*3] = (aRxBuffer[(i<<1)+1] << 8) | aRxBuffer[(i<<1)];
 800369a:	4941      	ldr	r1, [pc, #260]	; (80037a0 <main+0x1d0>)
 800369c:	fb08 f004 	mul.w	r0, r8, r4
		  LTC_Send_Recieve(RDCVAcmds[c], (uint8_t *)aRxBuffer, rxBytes);
 80036a0:	2300      	movs	r3, #0
 80036a2:	460f      	mov	r7, r1
			  voltages[i+c*3] = (aRxBuffer[(i<<1)+1] << 8) | aRxBuffer[(i<<1)];
 80036a4:	195a      	adds	r2, r3, r5
 80036a6:	eb03 0e01 	add.w	lr, r3, r1
 80036aa:	f892 c001 	ldrb.w	ip, [r2, #1]
 80036ae:	5d5a      	ldrb	r2, [r3, r5]
 80036b0:	3302      	adds	r3, #2
 80036b2:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
		  for(int i=0;i<3;i++)
 80036b6:	2b06      	cmp	r3, #6
			  voltages[i+c*3] = (aRxBuffer[(i<<1)+1] << 8) | aRxBuffer[(i<<1)];
 80036b8:	f82e 2000 	strh.w	r2, [lr, r0]
		  for(int i=0;i<3;i++)
 80036bc:	d1f2      	bne.n	80036a4 <main+0xd4>
	  for(int c=0;c<6;c++)
 80036be:	3401      	adds	r4, #1
 80036c0:	2c06      	cmp	r4, #6
 80036c2:	d1e4      	bne.n	800368e <main+0xbe>
	  uint8_t RDAUXcmds[4]={RDAUXA,RDAUXB,RDAUXC,RDAUXD}; //read all cell voltage register groups
 80036c4:	230c      	movs	r3, #12
 80036c6:	f88d 3004 	strb.w	r3, [sp, #4]
 80036ca:	230e      	movs	r3, #14
 80036cc:	f88d 3005 	strb.w	r3, [sp, #5]
			  auxVoltages[i+c*3] = (aRxBuffer[(i<<1)+1] << 8) | aRxBuffer[(i<<1)];
 80036d0:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 80037a8 <main+0x1d8>
	  uint8_t RDAUXcmds[4]={RDAUXA,RDAUXB,RDAUXC,RDAUXD}; //read all cell voltage register groups
 80036d4:	230d      	movs	r3, #13
 80036d6:	f88d 3006 	strb.w	r3, [sp, #6]
 80036da:	230f      	movs	r3, #15
 80036dc:	f88d 3007 	strb.w	r3, [sp, #7]
	  for(int c=0;c<4;c++)
 80036e0:	f04f 0800 	mov.w	r8, #0
 80036e4:	46ca      	mov	sl, r9
		  LTC_Send_Recieve(RDAUXcmds[c], (uint8_t *)aRxBuffer, rxBytes);
 80036e6:	ab01      	add	r3, sp, #4
 80036e8:	4629      	mov	r1, r5
 80036ea:	f813 0008 	ldrb.w	r0, [r3, r8]
 80036ee:	2206      	movs	r2, #6
 80036f0:	f7ff ff20 	bl	8003534 <LTC_Send_Recieve>
 80036f4:	fb04 f108 	mul.w	r1, r4, r8
 80036f8:	2300      	movs	r3, #0
			  auxVoltages[i+c*3] = (aRxBuffer[(i<<1)+1] << 8) | aRxBuffer[(i<<1)];
 80036fa:	18f2      	adds	r2, r6, r3
 80036fc:	eb03 0009 	add.w	r0, r3, r9
 8003700:	f892 e001 	ldrb.w	lr, [r2, #1]
 8003704:	5cf2      	ldrb	r2, [r6, r3]
 8003706:	3302      	adds	r3, #2
 8003708:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
		  for(int i=0;i<3;i++)
 800370c:	2b06      	cmp	r3, #6
			  auxVoltages[i+c*3] = (aRxBuffer[(i<<1)+1] << 8) | aRxBuffer[(i<<1)];
 800370e:	5242      	strh	r2, [r0, r1]
		  for(int i=0;i<3;i++)
 8003710:	d1f3      	bne.n	80036fa <main+0x12a>
	  for(int c=0;c<4;c++)
 8003712:	f108 0801 	add.w	r8, r8, #1
 8003716:	f1b8 0f04 	cmp.w	r8, #4
 800371a:	d1e4      	bne.n	80036e6 <main+0x116>
		  voltagesFloat[i]=(float)(voltages[i])*0.0001;
 800371c:	f20f 0970 	addw	r9, pc, #112	; 0x70
 8003720:	e9d9 8900 	ldrd	r8, r9, [r9]
 8003724:	f8df b084 	ldr.w	fp, [pc, #132]	; 80037ac <main+0x1dc>
	  for(int c=0;c<4;c++)
 8003728:	2400      	movs	r4, #0
		  voltagesFloat[i]=(float)(voltages[i])*0.0001;
 800372a:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800372e:	ee07 0a90 	vmov	s15, r0
 8003732:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  for(int i=0; i<18; i++)
 8003736:	3401      	adds	r4, #1
		  voltagesFloat[i]=(float)(voltages[i])*0.0001;
 8003738:	ee17 0a90 	vmov	r0, s15
 800373c:	f7fc feac 	bl	8000498 <__aeabi_f2d>
 8003740:	4642      	mov	r2, r8
 8003742:	464b      	mov	r3, r9
 8003744:	f7fc fefc 	bl	8000540 <__aeabi_dmul>
 8003748:	f7fd f90c 	bl	8000964 <__aeabi_d2f>
	  for(int i=0; i<18; i++)
 800374c:	2c12      	cmp	r4, #18
		  voltagesFloat[i]=(float)(voltages[i])*0.0001;
 800374e:	f84b 0b04 	str.w	r0, [fp], #4
	  for(int i=0; i<18; i++)
 8003752:	d1ea      	bne.n	800372a <main+0x15a>
		  auxVoltagesFloat[i]=(float)(auxVoltages[i])*0.0001;
 8003754:	f20f 0938 	addw	r9, pc, #56	; 0x38
 8003758:	e9d9 8900 	ldrd	r8, r9, [r9]
 800375c:	4f11      	ldr	r7, [pc, #68]	; (80037a4 <main+0x1d4>)
	  for(int i=0; i<18; i++)
 800375e:	2400      	movs	r4, #0
		  auxVoltagesFloat[i]=(float)(auxVoltages[i])*0.0001;
 8003760:	f83a 0014 	ldrh.w	r0, [sl, r4, lsl #1]
 8003764:	ee07 0a90 	vmov	s15, r0
 8003768:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  for(int i=0; i<12; i++)
 800376c:	3401      	adds	r4, #1
		  auxVoltagesFloat[i]=(float)(auxVoltages[i])*0.0001;
 800376e:	ee17 0a90 	vmov	r0, s15
 8003772:	f7fc fe91 	bl	8000498 <__aeabi_f2d>
 8003776:	4642      	mov	r2, r8
 8003778:	464b      	mov	r3, r9
 800377a:	f7fc fee1 	bl	8000540 <__aeabi_dmul>
 800377e:	f7fd f8f1 	bl	8000964 <__aeabi_d2f>
	  for(int i=0; i<12; i++)
 8003782:	2c0c      	cmp	r4, #12
		  auxVoltagesFloat[i]=(float)(auxVoltages[i])*0.0001;
 8003784:	f847 0b04 	str.w	r0, [r7], #4
	  for(int i=0; i<12; i++)
 8003788:	d1ea      	bne.n	8003760 <main+0x190>
 800378a:	e755      	b.n	8003638 <main+0x68>
 800378c:	f3af 8000 	nop.w
 8003790:	eb1c432d 	.word	0xeb1c432d
 8003794:	3f1a36e2 	.word	0x3f1a36e2
 8003798:	48000400 	.word	0x48000400
 800379c:	20000254 	.word	0x20000254
 80037a0:	20000098 	.word	0x20000098
 80037a4:	200002c8 	.word	0x200002c8
 80037a8:	2000023c 	.word	0x2000023c
 80037ac:	200001f4 	.word	0x200001f4

080037b0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b0:	4b21      	ldr	r3, [pc, #132]	; (8003838 <HAL_MspInit+0x88>)
{
 80037b2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	661a      	str	r2, [r3, #96]	; 0x60
 80037bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037be:	f002 0201 	and.w	r2, r2, #1
 80037c2:	9200      	str	r2, [sp, #0]
 80037c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80037cc:	659a      	str	r2, [r3, #88]	; 0x58
 80037ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d4:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037d6:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80037d8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037da:	f7fd f94f 	bl	8000a7c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80037de:	2200      	movs	r2, #0
 80037e0:	4611      	mov	r1, r2
 80037e2:	f06f 000b 	mvn.w	r0, #11
 80037e6:	f7fd f95b 	bl	8000aa0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80037ea:	2200      	movs	r2, #0
 80037ec:	4611      	mov	r1, r2
 80037ee:	f06f 000a 	mvn.w	r0, #10
 80037f2:	f7fd f955 	bl	8000aa0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80037f6:	2200      	movs	r2, #0
 80037f8:	4611      	mov	r1, r2
 80037fa:	f06f 0009 	mvn.w	r0, #9
 80037fe:	f7fd f94f 	bl	8000aa0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003802:	2200      	movs	r2, #0
 8003804:	4611      	mov	r1, r2
 8003806:	f06f 0004 	mvn.w	r0, #4
 800380a:	f7fd f949 	bl	8000aa0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800380e:	2200      	movs	r2, #0
 8003810:	4611      	mov	r1, r2
 8003812:	f06f 0003 	mvn.w	r0, #3
 8003816:	f7fd f943 	bl	8000aa0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800381a:	2200      	movs	r2, #0
 800381c:	4611      	mov	r1, r2
 800381e:	f06f 0001 	mvn.w	r0, #1
 8003822:	f7fd f93d 	bl	8000aa0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003826:	2200      	movs	r2, #0
 8003828:	4611      	mov	r1, r2
 800382a:	f04f 30ff 	mov.w	r0, #4294967295
 800382e:	f7fd f937 	bl	8000aa0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003832:	b003      	add	sp, #12
 8003834:	f85d fb04 	ldr.w	pc, [sp], #4
 8003838:	40021000 	.word	0x40021000

0800383c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800383c:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800383e:	6803      	ldr	r3, [r0, #0]
 8003840:	4a1d      	ldr	r2, [pc, #116]	; (80038b8 <HAL_SPI_MspInit+0x7c>)
 8003842:	4293      	cmp	r3, r2
{
 8003844:	b089      	sub	sp, #36	; 0x24
  if(hspi->Instance==SPI1)
 8003846:	d11b      	bne.n	8003880 <HAL_SPI_MspInit+0x44>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003848:	4b1c      	ldr	r3, [pc, #112]	; (80038bc <HAL_SPI_MspInit+0x80>)
 800384a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800384c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003850:	661a      	str	r2, [r3, #96]	; 0x60
 8003852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003858:	9301      	str	r3, [sp, #4]
 800385a:	9b01      	ldr	r3, [sp, #4]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800385c:	23e0      	movs	r3, #224	; 0xe0
 800385e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003860:	2302      	movs	r3, #2
 8003862:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003864:	2300      	movs	r3, #0
 8003866:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003868:	2303      	movs	r3, #3
 800386a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800386c:	2305      	movs	r3, #5
 800386e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003870:	a903      	add	r1, sp, #12
 8003872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003876:	f7fd f96f 	bl	8000b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800387a:	b009      	add	sp, #36	; 0x24
 800387c:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(hspi->Instance==SPI2)
 8003880:	4a0f      	ldr	r2, [pc, #60]	; (80038c0 <HAL_SPI_MspInit+0x84>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d1f9      	bne.n	800387a <HAL_SPI_MspInit+0x3e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003886:	4b0d      	ldr	r3, [pc, #52]	; (80038bc <HAL_SPI_MspInit+0x80>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003888:	480e      	ldr	r0, [pc, #56]	; (80038c4 <HAL_SPI_MspInit+0x88>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800388a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800388c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003890:	659a      	str	r2, [r3, #88]	; 0x58
 8003892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003898:	9302      	str	r3, [sp, #8]
 800389a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800389c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80038a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a2:	2302      	movs	r3, #2
 80038a4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038aa:	2303      	movs	r3, #3
 80038ac:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038ae:	2305      	movs	r3, #5
 80038b0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b2:	a903      	add	r1, sp, #12
 80038b4:	e7df      	b.n	8003876 <HAL_SPI_MspInit+0x3a>
 80038b6:	bf00      	nop
 80038b8:	40013000 	.word	0x40013000
 80038bc:	40021000 	.word	0x40021000
 80038c0:	40003800 	.word	0x40003800
 80038c4:	48000400 	.word	0x48000400

080038c8 <NMI_Handler>:
 80038c8:	4770      	bx	lr

080038ca <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80038ca:	e7fe      	b.n	80038ca <HardFault_Handler>

080038cc <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80038cc:	e7fe      	b.n	80038cc <MemManage_Handler>

080038ce <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80038ce:	e7fe      	b.n	80038ce <BusFault_Handler>

080038d0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80038d0:	e7fe      	b.n	80038d0 <UsageFault_Handler>

080038d2 <SVC_Handler>:
 80038d2:	4770      	bx	lr

080038d4 <DebugMon_Handler>:
 80038d4:	4770      	bx	lr

080038d6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80038d6:	4770      	bx	lr

080038d8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80038d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038da:	f7fd f8b3 	bl	8000a44 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80038e2:	f7fd b934 	b.w	8000b4e <HAL_SYSTICK_IRQHandler>
	...

080038e8 <USB_IRQHandler>:
void USB_IRQHandler(void)
{
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80038e8:	4801      	ldr	r0, [pc, #4]	; (80038f0 <USB_IRQHandler+0x8>)
 80038ea:	f7fd ba79 	b.w	8000de0 <HAL_PCD_IRQHandler>
 80038ee:	bf00      	nop
 80038f0:	20000330 	.word	0x20000330

080038f4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038f4:	490f      	ldr	r1, [pc, #60]	; (8003934 <SystemInit+0x40>)
 80038f6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80038fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003902:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <SystemInit+0x44>)
 8003904:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003906:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8003908:	f042 0201 	orr.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 800390e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003916:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800391a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800391c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003920:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003928:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800392a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800392c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003930:	608b      	str	r3, [r1, #8]
 8003932:	4770      	bx	lr
 8003934:	e000ed00 	.word	0xe000ed00
 8003938:	40021000 	.word	0x40021000

0800393c <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800393c:	f500 6186 	add.w	r1, r0, #1072	; 0x430
 8003940:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003944:	f7ff b8b2 	b.w	8002aac <USBD_LL_SetupStage>

08003948 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003948:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800394c:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003950:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8003954:	f7ff b8d7 	b.w	8002b06 <USBD_LL_DataOutStage>

08003958 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003958:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800395c:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003960:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003962:	f7ff b908 	b.w	8002b76 <USBD_LL_DataInStage>

08003966 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003966:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 800396a:	f7ff b999 	b.w	8002ca0 <USBD_LL_SOF>

0800396e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800396e:	b510      	push	{r4, lr}
 8003970:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003972:	2101      	movs	r1, #1
 8003974:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003978:	f7ff f980 	bl	8002c7c <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800397c:	f8d4 0470 	ldr.w	r0, [r4, #1136]	; 0x470
}
 8003980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003984:	f7ff b953 	b.w	8002c2e <USBD_LL_Reset>

08003988 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003988:	b510      	push	{r4, lr}
 800398a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800398c:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003990:	f7ff f977 	bl	8002c82 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003994:	69a3      	ldr	r3, [r4, #24]
 8003996:	b123      	cbz	r3, 80039a2 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003998:	4a02      	ldr	r2, [pc, #8]	; (80039a4 <HAL_PCD_SuspendCallback+0x1c>)
 800399a:	6913      	ldr	r3, [r2, #16]
 800399c:	f043 0306 	orr.w	r3, r3, #6
 80039a0:	6113      	str	r3, [r2, #16]
 80039a2:	bd10      	pop	{r4, pc}
 80039a4:	e000ed00 	.word	0xe000ed00

080039a8 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80039a8:	6983      	ldr	r3, [r0, #24]
{
 80039aa:	b510      	push	{r4, lr}
 80039ac:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 80039ae:	b133      	cbz	r3, 80039be <HAL_PCD_ResumeCallback+0x16>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80039b0:	4a06      	ldr	r2, [pc, #24]	; (80039cc <HAL_PCD_ResumeCallback+0x24>)
 80039b2:	6913      	ldr	r3, [r2, #16]
 80039b4:	f023 0306 	bic.w	r3, r3, #6
 80039b8:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 80039ba:	f7ff fbc9 	bl	8003150 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80039be:	f8d4 0470 	ldr.w	r0, [r4, #1136]	; 0x470
}
 80039c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80039c6:	f7ff b965 	b.w	8002c94 <USBD_LL_Resume>
 80039ca:	bf00      	nop
 80039cc:	e000ed00 	.word	0xe000ed00

080039d0 <USBD_LL_OpenEP>:
{
 80039d0:	b510      	push	{r4, lr}
 80039d2:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80039d4:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80039d8:	4613      	mov	r3, r2
 80039da:	4622      	mov	r2, r4
 80039dc:	f7fd f99b 	bl	8000d16 <HAL_PCD_EP_Open>
 80039e0:	2803      	cmp	r0, #3
 80039e2:	bf9a      	itte	ls
 80039e4:	4b01      	ldrls	r3, [pc, #4]	; (80039ec <USBD_LL_OpenEP+0x1c>)
 80039e6:	5c18      	ldrbls	r0, [r3, r0]
 80039e8:	2002      	movhi	r0, #2
}
 80039ea:	bd10      	pop	{r4, pc}
 80039ec:	08003f90 	.word	0x08003f90

080039f0 <USBD_LL_StallEP>:
{
 80039f0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80039f2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80039f6:	f7fd fc3b 	bl	8001270 <HAL_PCD_EP_SetStall>
 80039fa:	2803      	cmp	r0, #3
 80039fc:	bf9a      	itte	ls
 80039fe:	4b02      	ldrls	r3, [pc, #8]	; (8003a08 <USBD_LL_StallEP+0x18>)
 8003a00:	5c18      	ldrbls	r0, [r3, r0]
 8003a02:	2002      	movhi	r0, #2
}
 8003a04:	bd08      	pop	{r3, pc}
 8003a06:	bf00      	nop
 8003a08:	08003f90 	.word	0x08003f90

08003a0c <USBD_LL_ClearStallEP>:
{
 8003a0c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003a0e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003a12:	f7fd fc66 	bl	80012e2 <HAL_PCD_EP_ClrStall>
 8003a16:	2803      	cmp	r0, #3
 8003a18:	bf9a      	itte	ls
 8003a1a:	4b02      	ldrls	r3, [pc, #8]	; (8003a24 <USBD_LL_ClearStallEP+0x18>)
 8003a1c:	5c18      	ldrbls	r0, [r3, r0]
 8003a1e:	2002      	movhi	r0, #2
}
 8003a20:	bd08      	pop	{r3, pc}
 8003a22:	bf00      	nop
 8003a24:	08003f90 	.word	0x08003f90

08003a28 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8003a28:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003a2a:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003a2e:	bf45      	ittet	mi
 8003a30:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8003a34:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003a38:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003a3c:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003a40:	bf58      	it	pl
 8003a42:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
}
 8003a46:	4770      	bx	lr

08003a48 <USBD_LL_SetUSBAddress>:
{
 8003a48:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003a4a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003a4e:	f7fd f94e 	bl	8000cee <HAL_PCD_SetAddress>
 8003a52:	2803      	cmp	r0, #3
 8003a54:	bf9a      	itte	ls
 8003a56:	4b02      	ldrls	r3, [pc, #8]	; (8003a60 <USBD_LL_SetUSBAddress+0x18>)
 8003a58:	5c18      	ldrbls	r0, [r3, r0]
 8003a5a:	2002      	movhi	r0, #2
}
 8003a5c:	bd08      	pop	{r3, pc}
 8003a5e:	bf00      	nop
 8003a60:	08003f90 	.word	0x08003f90

08003a64 <USBD_LL_Transmit>:
{
 8003a64:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003a66:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003a6a:	f7fd f9a2 	bl	8000db2 <HAL_PCD_EP_Transmit>
 8003a6e:	2803      	cmp	r0, #3
 8003a70:	bf9a      	itte	ls
 8003a72:	4b02      	ldrls	r3, [pc, #8]	; (8003a7c <USBD_LL_Transmit+0x18>)
 8003a74:	5c18      	ldrbls	r0, [r3, r0]
 8003a76:	2002      	movhi	r0, #2
}
 8003a78:	bd08      	pop	{r3, pc}
 8003a7a:	bf00      	nop
 8003a7c:	08003f90 	.word	0x08003f90

08003a80 <USBD_LL_PrepareReceive>:
{
 8003a80:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003a82:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003a86:	f7fd f97b 	bl	8000d80 <HAL_PCD_EP_Receive>
 8003a8a:	2803      	cmp	r0, #3
 8003a8c:	bf9a      	itte	ls
 8003a8e:	4b02      	ldrls	r3, [pc, #8]	; (8003a98 <USBD_LL_PrepareReceive+0x18>)
 8003a90:	5c18      	ldrbls	r0, [r3, r0]
 8003a92:	2002      	movhi	r0, #2
}
 8003a94:	bd08      	pop	{r3, pc}
 8003a96:	bf00      	nop
 8003a98:	08003f90 	.word	0x08003f90

08003a9c <HAL_PCDEx_LPM_Callback>:
{
 8003a9c:	b510      	push	{r4, lr}
 8003a9e:	4604      	mov	r4, r0
  switch (msg)
 8003aa0:	b111      	cbz	r1, 8003aa8 <HAL_PCDEx_LPM_Callback+0xc>
 8003aa2:	2901      	cmp	r1, #1
 8003aa4:	d00f      	beq.n	8003ac6 <HAL_PCDEx_LPM_Callback+0x2a>
 8003aa6:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8003aa8:	6983      	ldr	r3, [r0, #24]
 8003aaa:	b133      	cbz	r3, 8003aba <HAL_PCDEx_LPM_Callback+0x1e>
      SystemClock_Config();
 8003aac:	f7ff fb50 	bl	8003150 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003ab0:	4a0b      	ldr	r2, [pc, #44]	; (8003ae0 <HAL_PCDEx_LPM_Callback+0x44>)
 8003ab2:	6913      	ldr	r3, [r2, #16]
 8003ab4:	f023 0306 	bic.w	r3, r3, #6
 8003ab8:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8003aba:	f8d4 0470 	ldr.w	r0, [r4, #1136]	; 0x470
}
 8003abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8003ac2:	f7ff b8e7 	b.w	8002c94 <USBD_LL_Resume>
    USBD_LL_Suspend(hpcd->pData);
 8003ac6:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003aca:	f7ff f8da 	bl	8002c82 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8003ace:	69a3      	ldr	r3, [r4, #24]
 8003ad0:	b123      	cbz	r3, 8003adc <HAL_PCDEx_LPM_Callback+0x40>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003ad2:	4a03      	ldr	r2, [pc, #12]	; (8003ae0 <HAL_PCDEx_LPM_Callback+0x44>)
 8003ad4:	6913      	ldr	r3, [r2, #16]
 8003ad6:	f043 0306 	orr.w	r3, r3, #6
 8003ada:	6113      	str	r3, [r2, #16]
 8003adc:	bd10      	pop	{r4, pc}
 8003ade:	bf00      	nop
 8003ae0:	e000ed00 	.word	0xe000ed00

08003ae4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b1c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003ae8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003aea:	e003      	b.n	8003af4 <LoopCopyDataInit>

08003aec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003aec:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003aee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003af0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003af2:	3104      	adds	r1, #4

08003af4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003af4:	480b      	ldr	r0, [pc, #44]	; (8003b24 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003af6:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003af8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003afa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003afc:	d3f6      	bcc.n	8003aec <CopyDataInit>
	ldr	r2, =_sbss
 8003afe:	4a0b      	ldr	r2, [pc, #44]	; (8003b2c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003b00:	e002      	b.n	8003b08 <LoopFillZerobss>

08003b02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003b02:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003b04:	f842 3b04 	str.w	r3, [r2], #4

08003b08 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003b08:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <LoopForever+0x16>)
	cmp	r2, r3
 8003b0a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003b0c:	d3f9      	bcc.n	8003b02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b0e:	f7ff fef1 	bl	80038f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b12:	f000 f811 	bl	8003b38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b16:	f7ff fd5b 	bl	80035d0 <main>

08003b1a <LoopForever>:

LoopForever:
    b LoopForever
 8003b1a:	e7fe      	b.n	8003b1a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003b1c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003b20:	08003f9c 	.word	0x08003f9c
	ldr	r0, =_sdata
 8003b24:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003b28:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8003b2c:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8003b30:	200007a8 	.word	0x200007a8

08003b34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b34:	e7fe      	b.n	8003b34 <ADC1_IRQHandler>
	...

08003b38 <__libc_init_array>:
 8003b38:	b570      	push	{r4, r5, r6, lr}
 8003b3a:	4e0d      	ldr	r6, [pc, #52]	; (8003b70 <__libc_init_array+0x38>)
 8003b3c:	4c0d      	ldr	r4, [pc, #52]	; (8003b74 <__libc_init_array+0x3c>)
 8003b3e:	1ba4      	subs	r4, r4, r6
 8003b40:	10a4      	asrs	r4, r4, #2
 8003b42:	2500      	movs	r5, #0
 8003b44:	42a5      	cmp	r5, r4
 8003b46:	d109      	bne.n	8003b5c <__libc_init_array+0x24>
 8003b48:	4e0b      	ldr	r6, [pc, #44]	; (8003b78 <__libc_init_array+0x40>)
 8003b4a:	4c0c      	ldr	r4, [pc, #48]	; (8003b7c <__libc_init_array+0x44>)
 8003b4c:	f000 f8f4 	bl	8003d38 <_init>
 8003b50:	1ba4      	subs	r4, r4, r6
 8003b52:	10a4      	asrs	r4, r4, #2
 8003b54:	2500      	movs	r5, #0
 8003b56:	42a5      	cmp	r5, r4
 8003b58:	d105      	bne.n	8003b66 <__libc_init_array+0x2e>
 8003b5a:	bd70      	pop	{r4, r5, r6, pc}
 8003b5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b60:	4798      	blx	r3
 8003b62:	3501      	adds	r5, #1
 8003b64:	e7ee      	b.n	8003b44 <__libc_init_array+0xc>
 8003b66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b6a:	4798      	blx	r3
 8003b6c:	3501      	adds	r5, #1
 8003b6e:	e7f2      	b.n	8003b56 <__libc_init_array+0x1e>
 8003b70:	08003f94 	.word	0x08003f94
 8003b74:	08003f94 	.word	0x08003f94
 8003b78:	08003f94 	.word	0x08003f94
 8003b7c:	08003f98 	.word	0x08003f98

08003b80 <malloc>:
 8003b80:	4b02      	ldr	r3, [pc, #8]	; (8003b8c <malloc+0xc>)
 8003b82:	4601      	mov	r1, r0
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	f000 b859 	b.w	8003c3c <_malloc_r>
 8003b8a:	bf00      	nop
 8003b8c:	20000004 	.word	0x20000004

08003b90 <free>:
 8003b90:	4b02      	ldr	r3, [pc, #8]	; (8003b9c <free+0xc>)
 8003b92:	4601      	mov	r1, r0
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	f000 b803 	b.w	8003ba0 <_free_r>
 8003b9a:	bf00      	nop
 8003b9c:	20000004 	.word	0x20000004

08003ba0 <_free_r>:
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	4605      	mov	r5, r0
 8003ba4:	2900      	cmp	r1, #0
 8003ba6:	d045      	beq.n	8003c34 <_free_r+0x94>
 8003ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bac:	1f0c      	subs	r4, r1, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	bfb8      	it	lt
 8003bb2:	18e4      	addlt	r4, r4, r3
 8003bb4:	f000 f8b0 	bl	8003d18 <__malloc_lock>
 8003bb8:	4a1f      	ldr	r2, [pc, #124]	; (8003c38 <_free_r+0x98>)
 8003bba:	6813      	ldr	r3, [r2, #0]
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	b933      	cbnz	r3, 8003bce <_free_r+0x2e>
 8003bc0:	6063      	str	r3, [r4, #4]
 8003bc2:	6014      	str	r4, [r2, #0]
 8003bc4:	4628      	mov	r0, r5
 8003bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bca:	f000 b8a6 	b.w	8003d1a <__malloc_unlock>
 8003bce:	42a3      	cmp	r3, r4
 8003bd0:	d90c      	bls.n	8003bec <_free_r+0x4c>
 8003bd2:	6821      	ldr	r1, [r4, #0]
 8003bd4:	1862      	adds	r2, r4, r1
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	bf04      	itt	eq
 8003bda:	681a      	ldreq	r2, [r3, #0]
 8003bdc:	685b      	ldreq	r3, [r3, #4]
 8003bde:	6063      	str	r3, [r4, #4]
 8003be0:	bf04      	itt	eq
 8003be2:	1852      	addeq	r2, r2, r1
 8003be4:	6022      	streq	r2, [r4, #0]
 8003be6:	6004      	str	r4, [r0, #0]
 8003be8:	e7ec      	b.n	8003bc4 <_free_r+0x24>
 8003bea:	4613      	mov	r3, r2
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	b10a      	cbz	r2, 8003bf4 <_free_r+0x54>
 8003bf0:	42a2      	cmp	r2, r4
 8003bf2:	d9fa      	bls.n	8003bea <_free_r+0x4a>
 8003bf4:	6819      	ldr	r1, [r3, #0]
 8003bf6:	1858      	adds	r0, r3, r1
 8003bf8:	42a0      	cmp	r0, r4
 8003bfa:	d10b      	bne.n	8003c14 <_free_r+0x74>
 8003bfc:	6820      	ldr	r0, [r4, #0]
 8003bfe:	4401      	add	r1, r0
 8003c00:	1858      	adds	r0, r3, r1
 8003c02:	4282      	cmp	r2, r0
 8003c04:	6019      	str	r1, [r3, #0]
 8003c06:	d1dd      	bne.n	8003bc4 <_free_r+0x24>
 8003c08:	6810      	ldr	r0, [r2, #0]
 8003c0a:	6852      	ldr	r2, [r2, #4]
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	4401      	add	r1, r0
 8003c10:	6019      	str	r1, [r3, #0]
 8003c12:	e7d7      	b.n	8003bc4 <_free_r+0x24>
 8003c14:	d902      	bls.n	8003c1c <_free_r+0x7c>
 8003c16:	230c      	movs	r3, #12
 8003c18:	602b      	str	r3, [r5, #0]
 8003c1a:	e7d3      	b.n	8003bc4 <_free_r+0x24>
 8003c1c:	6820      	ldr	r0, [r4, #0]
 8003c1e:	1821      	adds	r1, r4, r0
 8003c20:	428a      	cmp	r2, r1
 8003c22:	bf04      	itt	eq
 8003c24:	6811      	ldreq	r1, [r2, #0]
 8003c26:	6852      	ldreq	r2, [r2, #4]
 8003c28:	6062      	str	r2, [r4, #4]
 8003c2a:	bf04      	itt	eq
 8003c2c:	1809      	addeq	r1, r1, r0
 8003c2e:	6021      	streq	r1, [r4, #0]
 8003c30:	605c      	str	r4, [r3, #4]
 8003c32:	e7c7      	b.n	8003bc4 <_free_r+0x24>
 8003c34:	bd38      	pop	{r3, r4, r5, pc}
 8003c36:	bf00      	nop
 8003c38:	20000088 	.word	0x20000088

08003c3c <_malloc_r>:
 8003c3c:	b570      	push	{r4, r5, r6, lr}
 8003c3e:	1ccd      	adds	r5, r1, #3
 8003c40:	f025 0503 	bic.w	r5, r5, #3
 8003c44:	3508      	adds	r5, #8
 8003c46:	2d0c      	cmp	r5, #12
 8003c48:	bf38      	it	cc
 8003c4a:	250c      	movcc	r5, #12
 8003c4c:	2d00      	cmp	r5, #0
 8003c4e:	4606      	mov	r6, r0
 8003c50:	db01      	blt.n	8003c56 <_malloc_r+0x1a>
 8003c52:	42a9      	cmp	r1, r5
 8003c54:	d903      	bls.n	8003c5e <_malloc_r+0x22>
 8003c56:	230c      	movs	r3, #12
 8003c58:	6033      	str	r3, [r6, #0]
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	bd70      	pop	{r4, r5, r6, pc}
 8003c5e:	f000 f85b 	bl	8003d18 <__malloc_lock>
 8003c62:	4a23      	ldr	r2, [pc, #140]	; (8003cf0 <_malloc_r+0xb4>)
 8003c64:	6814      	ldr	r4, [r2, #0]
 8003c66:	4621      	mov	r1, r4
 8003c68:	b991      	cbnz	r1, 8003c90 <_malloc_r+0x54>
 8003c6a:	4c22      	ldr	r4, [pc, #136]	; (8003cf4 <_malloc_r+0xb8>)
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	b91b      	cbnz	r3, 8003c78 <_malloc_r+0x3c>
 8003c70:	4630      	mov	r0, r6
 8003c72:	f000 f841 	bl	8003cf8 <_sbrk_r>
 8003c76:	6020      	str	r0, [r4, #0]
 8003c78:	4629      	mov	r1, r5
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	f000 f83c 	bl	8003cf8 <_sbrk_r>
 8003c80:	1c43      	adds	r3, r0, #1
 8003c82:	d126      	bne.n	8003cd2 <_malloc_r+0x96>
 8003c84:	230c      	movs	r3, #12
 8003c86:	6033      	str	r3, [r6, #0]
 8003c88:	4630      	mov	r0, r6
 8003c8a:	f000 f846 	bl	8003d1a <__malloc_unlock>
 8003c8e:	e7e4      	b.n	8003c5a <_malloc_r+0x1e>
 8003c90:	680b      	ldr	r3, [r1, #0]
 8003c92:	1b5b      	subs	r3, r3, r5
 8003c94:	d41a      	bmi.n	8003ccc <_malloc_r+0x90>
 8003c96:	2b0b      	cmp	r3, #11
 8003c98:	d90f      	bls.n	8003cba <_malloc_r+0x7e>
 8003c9a:	600b      	str	r3, [r1, #0]
 8003c9c:	50cd      	str	r5, [r1, r3]
 8003c9e:	18cc      	adds	r4, r1, r3
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	f000 f83a 	bl	8003d1a <__malloc_unlock>
 8003ca6:	f104 000b 	add.w	r0, r4, #11
 8003caa:	1d23      	adds	r3, r4, #4
 8003cac:	f020 0007 	bic.w	r0, r0, #7
 8003cb0:	1ac3      	subs	r3, r0, r3
 8003cb2:	d01b      	beq.n	8003cec <_malloc_r+0xb0>
 8003cb4:	425a      	negs	r2, r3
 8003cb6:	50e2      	str	r2, [r4, r3]
 8003cb8:	bd70      	pop	{r4, r5, r6, pc}
 8003cba:	428c      	cmp	r4, r1
 8003cbc:	bf0d      	iteet	eq
 8003cbe:	6863      	ldreq	r3, [r4, #4]
 8003cc0:	684b      	ldrne	r3, [r1, #4]
 8003cc2:	6063      	strne	r3, [r4, #4]
 8003cc4:	6013      	streq	r3, [r2, #0]
 8003cc6:	bf18      	it	ne
 8003cc8:	460c      	movne	r4, r1
 8003cca:	e7e9      	b.n	8003ca0 <_malloc_r+0x64>
 8003ccc:	460c      	mov	r4, r1
 8003cce:	6849      	ldr	r1, [r1, #4]
 8003cd0:	e7ca      	b.n	8003c68 <_malloc_r+0x2c>
 8003cd2:	1cc4      	adds	r4, r0, #3
 8003cd4:	f024 0403 	bic.w	r4, r4, #3
 8003cd8:	42a0      	cmp	r0, r4
 8003cda:	d005      	beq.n	8003ce8 <_malloc_r+0xac>
 8003cdc:	1a21      	subs	r1, r4, r0
 8003cde:	4630      	mov	r0, r6
 8003ce0:	f000 f80a 	bl	8003cf8 <_sbrk_r>
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	d0cd      	beq.n	8003c84 <_malloc_r+0x48>
 8003ce8:	6025      	str	r5, [r4, #0]
 8003cea:	e7d9      	b.n	8003ca0 <_malloc_r+0x64>
 8003cec:	bd70      	pop	{r4, r5, r6, pc}
 8003cee:	bf00      	nop
 8003cf0:	20000088 	.word	0x20000088
 8003cf4:	2000008c 	.word	0x2000008c

08003cf8 <_sbrk_r>:
 8003cf8:	b538      	push	{r3, r4, r5, lr}
 8003cfa:	4c06      	ldr	r4, [pc, #24]	; (8003d14 <_sbrk_r+0x1c>)
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	4605      	mov	r5, r0
 8003d00:	4608      	mov	r0, r1
 8003d02:	6023      	str	r3, [r4, #0]
 8003d04:	f000 f80a 	bl	8003d1c <_sbrk>
 8003d08:	1c43      	adds	r3, r0, #1
 8003d0a:	d102      	bne.n	8003d12 <_sbrk_r+0x1a>
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	b103      	cbz	r3, 8003d12 <_sbrk_r+0x1a>
 8003d10:	602b      	str	r3, [r5, #0]
 8003d12:	bd38      	pop	{r3, r4, r5, pc}
 8003d14:	200007a4 	.word	0x200007a4

08003d18 <__malloc_lock>:
 8003d18:	4770      	bx	lr

08003d1a <__malloc_unlock>:
 8003d1a:	4770      	bx	lr

08003d1c <_sbrk>:
 8003d1c:	4b04      	ldr	r3, [pc, #16]	; (8003d30 <_sbrk+0x14>)
 8003d1e:	6819      	ldr	r1, [r3, #0]
 8003d20:	4602      	mov	r2, r0
 8003d22:	b909      	cbnz	r1, 8003d28 <_sbrk+0xc>
 8003d24:	4903      	ldr	r1, [pc, #12]	; (8003d34 <_sbrk+0x18>)
 8003d26:	6019      	str	r1, [r3, #0]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	4402      	add	r2, r0
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	4770      	bx	lr
 8003d30:	20000090 	.word	0x20000090
 8003d34:	200007a8 	.word	0x200007a8

08003d38 <_init>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	bf00      	nop
 8003d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3e:	bc08      	pop	{r3}
 8003d40:	469e      	mov	lr, r3
 8003d42:	4770      	bx	lr

08003d44 <_fini>:
 8003d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d46:	bf00      	nop
 8003d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4a:	bc08      	pop	{r3}
 8003d4c:	469e      	mov	lr, r3
 8003d4e:	4770      	bx	lr
