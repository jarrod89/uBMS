
uBMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e7c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08004008  08004008  00014008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080042b0  080042b0  000142b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080042b4  080042b4  000142b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000066c  20000000  080042b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000016ac  2000066c  08004924  0002066c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001d18  08004924  00021d18  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002066c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00022b5b  00000000  00000000  0002069c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000041e5  00000000  00000000  000431f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008240  00000000  00000000  000473dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e28  00000000  00000000  0004f620  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001388  00000000  00000000  00050448  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007c60  00000000  00000000  000517d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000547e  00000000  00000000  00059430  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005e8ae  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000263c  00000000  00000000  0005e92c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000066c 	.word	0x2000066c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003ff0 	.word	0x08003ff0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000670 	.word	0x20000670
 80001c8:	08003ff0 	.word	0x08003ff0

080001cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001cc:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80001ce:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_InitTick+0x24>)
{
 80001d0:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80001d2:	6818      	ldr	r0, [r3, #0]
 80001d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80001dc:	f000 f884 	bl	80002e8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80001e0:	2200      	movs	r2, #0
 80001e2:	4621      	mov	r1, r4
 80001e4:	f04f 30ff 	mov.w	r0, #4294967295
 80001e8:	f000 f83e 	bl	8000268 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80001ec:	2000      	movs	r0, #0
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000110 	.word	0x20000110

080001f4 <HAL_Init>:
{
 80001f4:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001f6:	2003      	movs	r0, #3
 80001f8:	f000 f824 	bl	8000244 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001fc:	2000      	movs	r0, #0
 80001fe:	f7ff ffe5 	bl	80001cc <HAL_InitTick>
  HAL_MspInit();
 8000202:	f003 f879 	bl	80032f8 <HAL_MspInit>
}
 8000206:	2000      	movs	r0, #0
 8000208:	bd08      	pop	{r3, pc}
	...

0800020c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800020c:	4a02      	ldr	r2, [pc, #8]	; (8000218 <HAL_IncTick+0xc>)
 800020e:	6813      	ldr	r3, [r2, #0]
 8000210:	3301      	adds	r3, #1
 8000212:	6013      	str	r3, [r2, #0]
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	200008e4 	.word	0x200008e4

0800021c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800021c:	4b01      	ldr	r3, [pc, #4]	; (8000224 <HAL_GetTick+0x8>)
 800021e:	6818      	ldr	r0, [r3, #0]
}
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	200008e4 	.word	0x200008e4

08000228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000228:	b538      	push	{r3, r4, r5, lr}
 800022a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800022c:	f7ff fff6 	bl	800021c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000230:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000232:	4605      	mov	r5, r0
  {
    wait++;
 8000234:	bf18      	it	ne
 8000236:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000238:	f7ff fff0 	bl	800021c <HAL_GetTick>
 800023c:	1b40      	subs	r0, r0, r5
 800023e:	4284      	cmp	r4, r0
 8000240:	d8fa      	bhi.n	8000238 <HAL_Delay+0x10>
  {
  }
}
 8000242:	bd38      	pop	{r3, r4, r5, pc}

08000244 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000246:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000248:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800024c:	041b      	lsls	r3, r3, #16
 800024e:	0c1b      	lsrs	r3, r3, #16
 8000250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000254:	0200      	lsls	r0, r0, #8
 8000256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800025a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800025e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000260:	60d3      	str	r3, [r2, #12]
 8000262:	4770      	bx	lr
 8000264:	e000ed00 	.word	0xe000ed00

08000268 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000268:	4b17      	ldr	r3, [pc, #92]	; (80002c8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800026a:	b530      	push	{r4, r5, lr}
 800026c:	68dc      	ldr	r4, [r3, #12]
 800026e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000272:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000276:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000278:	2b04      	cmp	r3, #4
 800027a:	bf28      	it	cs
 800027c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800027e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000280:	f04f 0501 	mov.w	r5, #1
 8000284:	fa05 f303 	lsl.w	r3, r5, r3
 8000288:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800028c:	bf8c      	ite	hi
 800028e:	3c03      	subhi	r4, #3
 8000290:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000292:	4019      	ands	r1, r3
 8000294:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000296:	fa05 f404 	lsl.w	r4, r5, r4
 800029a:	3c01      	subs	r4, #1
 800029c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800029e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a0:	ea42 0201 	orr.w	r2, r2, r1
 80002a4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a8:	bfaf      	iteee	ge
 80002aa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ae:	f000 000f 	andlt.w	r0, r0, #15
 80002b2:	4b06      	ldrlt	r3, [pc, #24]	; (80002cc <HAL_NVIC_SetPriority+0x64>)
 80002b4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b6:	bfa5      	ittet	ge
 80002b8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002bc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002be:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002c4:	bd30      	pop	{r4, r5, pc}
 80002c6:	bf00      	nop
 80002c8:	e000ed00 	.word	0xe000ed00
 80002cc:	e000ed14 	.word	0xe000ed14

080002d0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002d0:	0942      	lsrs	r2, r0, #5
 80002d2:	2301      	movs	r3, #1
 80002d4:	f000 001f 	and.w	r0, r0, #31
 80002d8:	fa03 f000 	lsl.w	r0, r3, r0
 80002dc:	4b01      	ldr	r3, [pc, #4]	; (80002e4 <HAL_NVIC_EnableIRQ+0x14>)
 80002de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002e2:	4770      	bx	lr
 80002e4:	e000e100 	.word	0xe000e100

080002e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002e8:	3801      	subs	r0, #1
 80002ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ee:	d20a      	bcs.n	8000306 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	4a07      	ldr	r2, [pc, #28]	; (8000310 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002f4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f6:	21f0      	movs	r1, #240	; 0xf0
 80002f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002fe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000300:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000306:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	e000e010 	.word	0xe000e010
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000314:	4b04      	ldr	r3, [pc, #16]	; (8000328 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000316:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000318:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800031a:	bf0c      	ite	eq
 800031c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000320:	f022 0204 	bicne.w	r2, r2, #4
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	4770      	bx	lr
 8000328:	e000e010 	.word	0xe000e010

0800032c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800032c:	4770      	bx	lr

0800032e <HAL_SYSTICK_IRQHandler>:
{
 800032e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000330:	f7ff fffc 	bl	800032c <HAL_SYSTICK_Callback>
 8000334:	bd08      	pop	{r3, pc}
	...

08000338 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800033c:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000340:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80004b8 <HAL_GPIO_Init+0x180>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000344:	4a5a      	ldr	r2, [pc, #360]	; (80004b0 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00;
 8000346:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000348:	fa38 f403 	lsrs.w	r4, r8, r3
 800034c:	d102      	bne.n	8000354 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 800034e:	b003      	add	sp, #12
 8000350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000354:	2401      	movs	r4, #1
 8000356:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 800035a:	ea18 050a 	ands.w	r5, r8, sl
 800035e:	f000 809c 	beq.w	800049a <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000362:	684c      	ldr	r4, [r1, #4]
 8000364:	f024 0b10 	bic.w	fp, r4, #16
 8000368:	f1bb 0f02 	cmp.w	fp, #2
 800036c:	d114      	bne.n	8000398 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 800036e:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000372:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000376:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800037a:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800037e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000382:	270f      	movs	r7, #15
 8000384:	fa07 f70c 	lsl.w	r7, r7, ip
 8000388:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800038c:	690e      	ldr	r6, [r1, #16]
 800038e:	fa06 f60c 	lsl.w	r6, r6, ip
 8000392:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8000394:	f8ce 6020 	str.w	r6, [lr, #32]
 8000398:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800039c:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 800039e:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80003a0:	fa07 f70c 	lsl.w	r7, r7, ip
 80003a4:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80003a6:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80003aa:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80003ac:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b0:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80003b4:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b8:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80003bc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003be:	d811      	bhi.n	80003e4 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80003c0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80003c2:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 80003c6:	68ce      	ldr	r6, [r1, #12]
 80003c8:	fa06 fe0c 	lsl.w	lr, r6, ip
 80003cc:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80003d0:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80003d2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80003d4:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80003d8:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80003dc:	409e      	lsls	r6, r3
 80003de:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80003e2:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80003e4:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80003e6:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80003e8:	688e      	ldr	r6, [r1, #8]
 80003ea:	fa06 f60c 	lsl.w	r6, r6, ip
 80003ee:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003f0:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80003f2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003f4:	d551      	bpl.n	800049a <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f6:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80003fa:	f046 0601 	orr.w	r6, r6, #1
 80003fe:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8000402:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8000406:	f023 0703 	bic.w	r7, r3, #3
 800040a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800040e:	f006 0601 	and.w	r6, r6, #1
 8000412:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000416:	9601      	str	r6, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000418:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041c:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800041e:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000420:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000424:	f04f 0e0f 	mov.w	lr, #15
 8000428:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800042c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000430:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000434:	d033      	beq.n	800049e <HAL_GPIO_Init+0x166>
 8000436:	4e1f      	ldr	r6, [pc, #124]	; (80004b4 <HAL_GPIO_Init+0x17c>)
 8000438:	42b0      	cmp	r0, r6
 800043a:	d032      	beq.n	80004a2 <HAL_GPIO_Init+0x16a>
 800043c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000440:	42b0      	cmp	r0, r6
 8000442:	d030      	beq.n	80004a6 <HAL_GPIO_Init+0x16e>
 8000444:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000448:	42b0      	cmp	r0, r6
 800044a:	d02e      	beq.n	80004aa <HAL_GPIO_Init+0x172>
 800044c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000450:	42b0      	cmp	r0, r6
 8000452:	bf14      	ite	ne
 8000454:	2607      	movne	r6, #7
 8000456:	2604      	moveq	r6, #4
 8000458:	fa06 f60c 	lsl.w	r6, r6, ip
 800045c:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000460:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8000462:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000464:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000466:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800046a:	bf0c      	ite	eq
 800046c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800046e:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8000470:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 8000472:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000474:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000478:	bf0c      	ite	eq
 800047a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800047c:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 800047e:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 8000480:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000482:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000486:	bf0c      	ite	eq
 8000488:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800048a:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 800048c:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 800048e:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000490:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000492:	bf54      	ite	pl
 8000494:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000496:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000498:	60d6      	str	r6, [r2, #12]
    position++;
 800049a:	3301      	adds	r3, #1
 800049c:	e754      	b.n	8000348 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800049e:	2600      	movs	r6, #0
 80004a0:	e7da      	b.n	8000458 <HAL_GPIO_Init+0x120>
 80004a2:	2601      	movs	r6, #1
 80004a4:	e7d8      	b.n	8000458 <HAL_GPIO_Init+0x120>
 80004a6:	2602      	movs	r6, #2
 80004a8:	e7d6      	b.n	8000458 <HAL_GPIO_Init+0x120>
 80004aa:	2603      	movs	r6, #3
 80004ac:	e7d4      	b.n	8000458 <HAL_GPIO_Init+0x120>
 80004ae:	bf00      	nop
 80004b0:	40010400 	.word	0x40010400
 80004b4:	48000400 	.word	0x48000400
 80004b8:	40021000 	.word	0x40021000

080004bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004bc:	b10a      	cbz	r2, 80004c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004be:	6181      	str	r1, [r0, #24]
 80004c0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004c2:	6281      	str	r1, [r0, #40]	; 0x28
 80004c4:	4770      	bx	lr

080004c6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004c6:	6943      	ldr	r3, [r0, #20]
 80004c8:	4059      	eors	r1, r3
 80004ca:	6141      	str	r1, [r0, #20]
 80004cc:	4770      	bx	lr

080004ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80004ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80004d2:	4604      	mov	r4, r0
{
 80004d4:	b086      	sub	sp, #24
  if (hpcd == NULL)
 80004d6:	2800      	cmp	r0, #0
 80004d8:	d06b      	beq.n	80005b2 <HAL_PCD_Init+0xe4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80004da:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 80004de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80004e2:	b91b      	cbnz	r3, 80004ec <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80004e4:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80004e8:	f003 f812 	bl	8003510 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80004ec:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004ee:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 80004f0:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004f4:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 80004f8:	f001 fbad 	bl	8001c56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 80004fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004fe:	466e      	mov	r6, sp
 8000500:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000502:	682b      	ldr	r3, [r5, #0]
 8000504:	6033      	str	r3, [r6, #0]
 8000506:	f104 0804 	add.w	r8, r4, #4
 800050a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800050e:	6820      	ldr	r0, [r4, #0]
 8000510:	f001 fb8f 	bl	8001c32 <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000514:	2100      	movs	r1, #0
 8000516:	6820      	ldr	r0, [r4, #0]
 8000518:	f001 fba7 	bl	8001c6a <USB_SetCurrentMode>
 800051c:	2100      	movs	r1, #0
 800051e:	4622      	mov	r2, r4
 8000520:	4623      	mov	r3, r4
 8000522:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000526:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000528:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 800052a:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 800052e:	86d9      	strh	r1, [r3, #54]	; 0x36
 8000530:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 8000532:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 8000534:	f883 6029 	strb.w	r6, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000538:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 800053c:	6398      	str	r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 800053e:	63d8      	str	r0, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000540:	6418      	str	r0, [r3, #64]	; 0x40
 8000542:	f103 0320 	add.w	r3, r3, #32
  for (i = 0U; i < 15U; i++)
 8000546:	d1f0      	bne.n	800052a <HAL_PCD_Init+0x5c>
 8000548:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800054a:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 800054c:	f882 3228 	strb.w	r3, [r2, #552]	; 0x228
 8000550:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 8000552:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 8000554:	f882 7229 	strb.w	r7, [r2, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000558:	f882 722b 	strb.w	r7, [r2, #555]	; 0x22b
    hpcd->OUT_ep[i].maxpacket = 0U;
 800055c:	f8c2 7238 	str.w	r7, [r2, #568]	; 0x238
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000560:	f8c2 723c 	str.w	r7, [r2, #572]	; 0x23c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000564:	f8c2 7240 	str.w	r7, [r2, #576]	; 0x240
 8000568:	f102 0220 	add.w	r2, r2, #32
  for (i = 0U; i < 15U; i++)
 800056c:	d1ee      	bne.n	800054c <HAL_PCD_Init+0x7e>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800056e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000570:	466e      	mov	r6, sp
 8000572:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000574:	682b      	ldr	r3, [r5, #0]
 8000576:	6033      	str	r3, [r6, #0]
 8000578:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800057c:	6820      	ldr	r0, [r4, #0]
 800057e:	f001 fb76 	bl	8001c6e <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 8000582:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000584:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000588:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800058c:	69e3      	ldr	r3, [r4, #28]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d102      	bne.n	8000598 <HAL_PCD_Init+0xca>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000592:	4620      	mov	r0, r4
 8000594:	f000 fbb0 	bl	8000cf8 <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8000598:	6a23      	ldr	r3, [r4, #32]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d102      	bne.n	80005a4 <HAL_PCD_Init+0xd6>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 800059e:	4620      	mov	r0, r4
 80005a0:	f000 fb96 	bl	8000cd0 <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80005a4:	6820      	ldr	r0, [r4, #0]
 80005a6:	f001 fe4e 	bl	8002246 <USB_DevDisconnect>

  return HAL_OK;
 80005aa:	2000      	movs	r0, #0
}
 80005ac:	b006      	add	sp, #24
 80005ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80005b2:	2001      	movs	r0, #1
 80005b4:	e7fa      	b.n	80005ac <HAL_PCD_Init+0xde>

080005b6 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80005b6:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 80005ba:	2b01      	cmp	r3, #1
{
 80005bc:	b510      	push	{r4, lr}
 80005be:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80005c0:	d00c      	beq.n	80005dc <HAL_PCD_Start+0x26>
 80005c2:	2301      	movs	r3, #1
 80005c4:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  (void)USB_DevConnect(hpcd->Instance);
 80005c8:	6800      	ldr	r0, [r0, #0]
 80005ca:	f001 fe31 	bl	8002230 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80005ce:	6820      	ldr	r0, [r4, #0]
 80005d0:	f001 fb36 	bl	8001c40 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80005d4:	2000      	movs	r0, #0
 80005d6:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80005da:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005dc:	2002      	movs	r0, #2
}
 80005de:	bd10      	pop	{r4, pc}

080005e0 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80005e0:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 80005e4:	2a01      	cmp	r2, #1
{
 80005e6:	b510      	push	{r4, lr}
 80005e8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80005ea:	d00b      	beq.n	8000604 <HAL_PCD_SetAddress+0x24>
 80005ec:	2201      	movs	r2, #1
 80005ee:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 80005f2:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80005f6:	6800      	ldr	r0, [r0, #0]
 80005f8:	f001 fe14 	bl	8002224 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 8000602:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000604:	2002      	movs	r0, #2
  return HAL_OK;
}
 8000606:	bd10      	pop	{r4, pc}

08000608 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	4604      	mov	r4, r0
 800060c:	f001 000f 	and.w	r0, r1, #15
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000610:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000614:	b2c5      	uxtb	r5, r0
 8000616:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800061a:	fb01 4105 	mla	r1, r1, r5, r4
    ep->is_in = 1U;
 800061e:	bf15      	itete	ne
 8000620:	eb04 1545 	addne.w	r5, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
    ep->is_in = 0U;
 8000624:	eb04 1545 	addeq.w	r5, r4, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8000628:	3128      	addne	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 800062a:	f501 710a 	addeq.w	r1, r1, #552	; 0x228
    ep->is_in = 1U;
 800062e:	bf15      	itete	ne
 8000630:	2601      	movne	r6, #1
    ep->is_in = 0U;
 8000632:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 8000634:	f885 6029 	strbne.w	r6, [r5, #41]	; 0x29
    ep->is_in = 0U;
 8000638:	f885 6229 	strbeq.w	r6, [r5, #553]	; 0x229
  }

  ep->num = ep_addr & 0xFU;
  ep->maxpacket = ep_mps;
 800063c:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 800063e:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 8000640:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & 0xFU;
 8000642:	b2c0      	uxtb	r0, r0
 8000644:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 8000646:	b102      	cbz	r2, 800064a <HAL_PCD_EP_Open+0x42>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000648:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800064a:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 800064c:	bf04      	itt	eq
 800064e:	2300      	moveq	r3, #0
 8000650:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8000652:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
 8000656:	2b01      	cmp	r3, #1
 8000658:	d009      	beq.n	800066e <HAL_PCD_EP_Open+0x66>
 800065a:	2301      	movs	r3, #1
 800065c:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000660:	6820      	ldr	r0, [r4, #0]
 8000662:	f001 fb21 	bl	8001ca8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000666:	2000      	movs	r0, #0
 8000668:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428

  return ret;
 800066c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 800066e:	2002      	movs	r0, #2
}
 8000670:	bd70      	pop	{r4, r5, r6, pc}

08000672 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000672:	f001 030f 	and.w	r3, r1, #15
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000676:	f011 0f80 	tst.w	r1, #128	; 0x80
 800067a:	b2da      	uxtb	r2, r3
 800067c:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8000680:	fb01 0102 	mla	r1, r1, r2, r0
{
 8000684:	b510      	push	{r4, lr}
 8000686:	4604      	mov	r4, r0
    ep->is_in = 1U;
 8000688:	bf19      	ittee	ne
 800068a:	eb00 1242 	addne.w	r2, r0, r2, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800068e:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8000690:	f501 710a 	addeq.w	r1, r1, #552	; 0x228
    ep->is_in = 0U;
 8000694:	eb04 1242 	addeq.w	r2, r4, r2, lsl #5
    ep->is_in = 1U;
 8000698:	bf15      	itete	ne
 800069a:	2001      	movne	r0, #1
    ep->is_in = 0U;
 800069c:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 800069e:	f882 0029 	strbne.w	r0, [r2, #41]	; 0x29
    ep->is_in = 0U;
 80006a2:	f882 0229 	strbeq.w	r0, [r2, #553]	; 0x229
  }
  ep->num   = ep_addr & 0xFU;
 80006a6:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 80006a8:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d009      	beq.n	80006c4 <HAL_PCD_EP_Close+0x52>
 80006b0:	2301      	movs	r3, #1
 80006b2:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80006b6:	6820      	ldr	r0, [r4, #0]
 80006b8:	f001 fc6c 	bl	8001f94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80006bc:	2000      	movs	r0, #0
 80006be:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80006c2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80006c4:	2002      	movs	r0, #2
}
 80006c6:	bd10      	pop	{r4, pc}

080006c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80006c8:	b570      	push	{r4, r5, r6, lr}
 80006ca:	f001 010f 	and.w	r1, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0xFU];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80006ce:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 80006d2:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80006d4:	2500      	movs	r5, #0
  ep->is_in = 0U;
  ep->num = ep_addr & 0xFU;
 80006d6:	f886 1228 	strb.w	r1, [r6, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80006da:	f504 710a 	add.w	r1, r4, #552	; 0x228
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80006de:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80006e0:	f8c6 223c 	str.w	r2, [r6, #572]	; 0x23c
  ep->xfer_len = len;
 80006e4:	f8c6 3240 	str.w	r3, [r6, #576]	; 0x240
  ep->xfer_count = 0U;
 80006e8:	f8c6 5244 	str.w	r5, [r6, #580]	; 0x244
  ep->is_in = 0U;
 80006ec:	f886 5229 	strb.w	r5, [r6, #553]	; 0x229
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80006f0:	6800      	ldr	r0, [r0, #0]
 80006f2:	f001 fdc9 	bl	8002288 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80006f6:	4628      	mov	r0, r5
 80006f8:	bd70      	pop	{r4, r5, r6, pc}

080006fa <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return (uint16_t)hpcd->OUT_ep[ep_addr & 0xFU].xfer_count;
 80006fa:	f001 010f 	and.w	r1, r1, #15
 80006fe:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8000702:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 8000706:	4770      	bx	lr

08000708 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	f001 010f 	and.w	r1, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0xFU];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800070e:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8000712:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
 8000714:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_count = 0U;
 8000716:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000718:	2301      	movs	r3, #1
  ep->num = ep_addr & 0xFU;
 800071a:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800071e:	f104 0128 	add.w	r1, r4, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000722:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8000724:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_count = 0U;
 8000726:	646e      	str	r6, [r5, #68]	; 0x44
  ep->is_in = 1U;
 8000728:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800072c:	6800      	ldr	r0, [r0, #0]
 800072e:	f001 fdab 	bl	8002288 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000732:	4630      	mov	r0, r6
 8000734:	bd70      	pop	{r4, r5, r6, pc}
	...

08000738 <HAL_PCD_IRQHandler>:
{
 8000738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800073c:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800073e:	6800      	ldr	r0, [r0, #0]
 8000740:	f001 fd89 	bl	8002256 <USB_ReadInterrupts>
 8000744:	0400      	lsls	r0, r0, #16
 8000746:	f100 8230 	bmi.w	8000baa <HAL_PCD_IRQHandler+0x472>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800074a:	6820      	ldr	r0, [r4, #0]
 800074c:	f001 fd83 	bl	8002256 <USB_ReadInterrupts>
 8000750:	0541      	lsls	r1, r0, #21
 8000752:	d50f      	bpl.n	8000774 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000754:	6822      	ldr	r2, [r4, #0]
 8000756:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800075a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800075e:	041b      	lsls	r3, r3, #16
 8000760:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 8000762:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000764:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000768:	f002 ff09 	bl	800357e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800076c:	2100      	movs	r1, #0
 800076e:	4620      	mov	r0, r4
 8000770:	f7ff ff36 	bl	80005e0 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000774:	6820      	ldr	r0, [r4, #0]
 8000776:	f001 fd6e 	bl	8002256 <USB_ReadInterrupts>
 800077a:	0443      	lsls	r3, r0, #17
 800077c:	d508      	bpl.n	8000790 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800077e:	6822      	ldr	r2, [r4, #0]
 8000780:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000784:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000788:	041b      	lsls	r3, r3, #16
 800078a:	0c1b      	lsrs	r3, r3, #16
 800078c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000790:	6820      	ldr	r0, [r4, #0]
 8000792:	f001 fd60 	bl	8002256 <USB_ReadInterrupts>
 8000796:	0487      	lsls	r7, r0, #18
 8000798:	d508      	bpl.n	80007ac <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800079a:	6822      	ldr	r2, [r4, #0]
 800079c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80007a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80007a4:	041b      	lsls	r3, r3, #16
 80007a6:	0c1b      	lsrs	r3, r3, #16
 80007a8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80007ac:	6820      	ldr	r0, [r4, #0]
 80007ae:	f001 fd52 	bl	8002256 <USB_ReadInterrupts>
 80007b2:	04c6      	lsls	r6, r0, #19
 80007b4:	d526      	bpl.n	8000804 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80007b6:	6822      	ldr	r2, [r4, #0]
 80007b8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80007bc:	f023 0304 	bic.w	r3, r3, #4
 80007c0:	041b      	lsls	r3, r3, #16
 80007c2:	0c1b      	lsrs	r3, r3, #16
 80007c4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80007c8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80007cc:	f023 0308 	bic.w	r3, r3, #8
 80007d0:	041b      	lsls	r3, r3, #16
 80007d2:	0c1b      	lsrs	r3, r3, #16
 80007d4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 80007d8:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d105      	bne.n	80007ec <HAL_PCD_IRQHandler+0xb4>
      hpcd->LPM_State = LPM_L0;
 80007e0:	2100      	movs	r1, #0
 80007e2:	f884 1460 	strb.w	r1, [r4, #1120]	; 0x460
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80007e6:	4620      	mov	r0, r4
 80007e8:	f002 ffce 	bl	8003788 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 80007ec:	4620      	mov	r0, r4
 80007ee:	f002 fee3 	bl	80035b8 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80007f2:	6822      	ldr	r2, [r4, #0]
 80007f4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80007f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007fc:	041b      	lsls	r3, r3, #16
 80007fe:	0c1b      	lsrs	r3, r3, #16
 8000800:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000804:	6820      	ldr	r0, [r4, #0]
 8000806:	f001 fd26 	bl	8002256 <USB_ReadInterrupts>
 800080a:	0505      	lsls	r5, r0, #20
 800080c:	d51d      	bpl.n	800084a <HAL_PCD_IRQHandler+0x112>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800080e:	6820      	ldr	r0, [r4, #0]
 8000810:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000814:	b29b      	uxth	r3, r3
 8000816:	f043 0308 	orr.w	r3, r3, #8
 800081a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800081e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000822:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000826:	041b      	lsls	r3, r3, #16
 8000828:	0c1b      	lsrs	r3, r3, #16
 800082a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800082e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000832:	b29b      	uxth	r3, r3
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 800083c:	f001 fd0b 	bl	8002256 <USB_ReadInterrupts>
 8000840:	04c0      	lsls	r0, r0, #19
 8000842:	d402      	bmi.n	800084a <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_SuspendCallback(hpcd);
 8000844:	4620      	mov	r0, r4
 8000846:	f002 fea7 	bl	8003598 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800084a:	6820      	ldr	r0, [r4, #0]
 800084c:	f001 fd03 	bl	8002256 <USB_ReadInterrupts>
 8000850:	0601      	lsls	r1, r0, #24
 8000852:	d529      	bpl.n	80008a8 <HAL_PCD_IRQHandler+0x170>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000854:	6823      	ldr	r3, [r4, #0]
 8000856:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800085a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800085e:	0412      	lsls	r2, r2, #16
 8000860:	0c12      	lsrs	r2, r2, #16
 8000862:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8000866:	f894 2460 	ldrb.w	r2, [r4, #1120]	; 0x460
 800086a:	2a00      	cmp	r2, #0
 800086c:	f040 81a2 	bne.w	8000bb4 <HAL_PCD_IRQHandler+0x47c>
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000870:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000874:	b292      	uxth	r2, r2
 8000876:	f042 0204 	orr.w	r2, r2, #4
 800087a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800087e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000882:	b292      	uxth	r2, r2
 8000884:	f042 0208 	orr.w	r2, r2, #8
 8000888:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800088c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000890:	f3c3 038d 	ubfx	r3, r3, #2, #14
      hpcd->LPM_State = LPM_L1;
 8000894:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000896:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 800089a:	f884 1460 	strb.w	r1, [r4, #1120]	; 0x460
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800089e:	f8c4 3464 	str.w	r3, [r4, #1124]	; 0x464
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80008a2:	4620      	mov	r0, r4
 80008a4:	f002 ff70 	bl	8003788 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80008a8:	6820      	ldr	r0, [r4, #0]
 80008aa:	f001 fcd4 	bl	8002256 <USB_ReadInterrupts>
 80008ae:	0582      	lsls	r2, r0, #22
 80008b0:	d50b      	bpl.n	80008ca <HAL_PCD_IRQHandler+0x192>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80008b2:	6822      	ldr	r2, [r4, #0]
 80008b4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80008b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80008bc:	041b      	lsls	r3, r3, #16
 80008be:	0c1b      	lsrs	r3, r3, #16
 80008c0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80008c4:	4620      	mov	r0, r4
 80008c6:	f002 fe56 	bl	8003576 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80008ca:	6820      	ldr	r0, [r4, #0]
 80008cc:	f001 fcc3 	bl	8002256 <USB_ReadInterrupts>
 80008d0:	05c3      	lsls	r3, r0, #23
 80008d2:	d508      	bpl.n	80008e6 <HAL_PCD_IRQHandler+0x1ae>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80008d4:	6822      	ldr	r2, [r4, #0]
 80008d6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80008da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008de:	041b      	lsls	r3, r3, #16
 80008e0:	0c1b      	lsrs	r3, r3, #16
 80008e2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 80008e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 80008ea:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 80008ee:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 80008f0:	f011 070f 	ands.w	r7, r1, #15
 80008f4:	f040 80a5 	bne.w	8000a42 <HAL_PCD_IRQHandler+0x30a>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80008f8:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80008fa:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80008fe:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000900:	d129      	bne.n	8000956 <HAL_PCD_IRQHandler+0x21e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000902:	ea03 030a 	and.w	r3, r3, sl
 8000906:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000908:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800090c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000910:	f200 4002 	addw	r0, r0, #1026	; 0x402
 8000914:	fa10 f083 	uxtah	r0, r0, r3
 8000918:	f830 3032 	ldrh.w	r3, [r0, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 800091c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800091e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000922:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000924:	4413      	add	r3, r2
 8000926:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000928:	4620      	mov	r0, r4
 800092a:	f002 fe1d 	bl	8003568 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800092e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000932:	b153      	cbz	r3, 800094a <HAL_PCD_IRQHandler+0x212>
 8000934:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000936:	b942      	cbnz	r2, 800094a <HAL_PCD_IRQHandler+0x212>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000938:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800093c:	6821      	ldr	r1, [r4, #0]
 800093e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000942:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000946:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800094a:	6820      	ldr	r0, [r4, #0]
 800094c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000950:	041a      	lsls	r2, r3, #16
 8000952:	d4ca      	bmi.n	80008ea <HAL_PCD_IRQHandler+0x1b2>
 8000954:	e6f9      	b.n	800074a <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000956:	051a      	lsls	r2, r3, #20
 8000958:	d51e      	bpl.n	8000998 <HAL_PCD_IRQHandler+0x260>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800095a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800095e:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000962:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8000966:	fa11 f383 	uxtah	r3, r1, r3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 800096a:	f504 6186 	add.w	r1, r4, #1072	; 0x430
 800096e:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8000972:	f8b4 222e 	ldrh.w	r2, [r4, #558]	; 0x22e
 8000976:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800097a:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 800097e:	f001 fd6b 	bl	8002458 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000982:	6822      	ldr	r2, [r4, #0]
 8000984:	8813      	ldrh	r3, [r2, #0]
 8000986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800098a:	051b      	lsls	r3, r3, #20
 800098c:	0d1b      	lsrs	r3, r3, #20
 800098e:	8013      	strh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8000990:	4620      	mov	r0, r4
 8000992:	f002 fddb 	bl	800354c <HAL_PCD_SetupStageCallback>
 8000996:	e7d8      	b.n	800094a <HAL_PCD_IRQHandler+0x212>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000998:	041f      	lsls	r7, r3, #16
 800099a:	d5d6      	bpl.n	800094a <HAL_PCD_IRQHandler+0x212>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800099c:	8803      	ldrh	r3, [r0, #0]
 800099e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009a2:	051b      	lsls	r3, r3, #20
 80009a4:	0d1b      	lsrs	r3, r3, #20
 80009a6:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80009a8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80009ac:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80009b0:	f200 4106 	addw	r1, r0, #1030	; 0x406
 80009b4:	fa11 f383 	uxtah	r3, r1, r3
 80009b8:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 80009bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009c0:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244

          if (ep->xfer_count != 0U)
 80009c4:	b163      	cbz	r3, 80009e0 <HAL_PCD_IRQHandler+0x2a8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 80009c6:	f8b4 222e 	ldrh.w	r2, [r4, #558]	; 0x22e
 80009ca:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 80009ce:	f001 fd43 	bl	8002458 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80009d2:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 80009d6:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 80009da:	4413      	add	r3, r2
 80009dc:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80009e0:	2100      	movs	r1, #0
 80009e2:	4620      	mov	r0, r4
 80009e4:	f002 fdb8 	bl	8003558 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80009e8:	6822      	ldr	r2, [r4, #0]
 80009ea:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
 80009ee:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80009f2:	f202 4506 	addw	r5, r2, #1030	; 0x406
 80009f6:	b289      	uxth	r1, r1
 80009f8:	b953      	cbnz	r3, 8000a10 <HAL_PCD_IRQHandler+0x2d8>
 80009fa:	5a6b      	ldrh	r3, [r5, r1]
 80009fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000a00:	049b      	lsls	r3, r3, #18
 8000a02:	0c9b      	lsrs	r3, r3, #18
 8000a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000a0c:	526b      	strh	r3, [r5, r1]
 8000a0e:	e007      	b.n	8000a20 <HAL_PCD_IRQHandler+0x2e8>
 8000a10:	2b3d      	cmp	r3, #61	; 0x3d
 8000a12:	d811      	bhi.n	8000a38 <HAL_PCD_IRQHandler+0x300>
 8000a14:	0858      	lsrs	r0, r3, #1
 8000a16:	07de      	lsls	r6, r3, #31
 8000a18:	bf48      	it	mi
 8000a1a:	3001      	addmi	r0, #1
 8000a1c:	0280      	lsls	r0, r0, #10
 8000a1e:	5268      	strh	r0, [r5, r1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000a20:	8813      	ldrh	r3, [r2, #0]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	ea03 030b 	and.w	r3, r3, fp
 8000a28:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a34:	8013      	strh	r3, [r2, #0]
 8000a36:	e788      	b.n	800094a <HAL_PCD_IRQHandler+0x212>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000a38:	4860      	ldr	r0, [pc, #384]	; (8000bbc <HAL_PCD_IRQHandler+0x484>)
 8000a3a:	095b      	lsrs	r3, r3, #5
 8000a3c:	ea40 2383 	orr.w	r3, r0, r3, lsl #10
 8000a40:	e7e4      	b.n	8000a0c <HAL_PCD_IRQHandler+0x2d4>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000a42:	b23e      	sxth	r6, r7
 8000a44:	f830 9026 	ldrh.w	r9, [r0, r6, lsl #2]
 8000a48:	fa1f f989 	uxth.w	r9, r9
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000a4c:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 8000a50:	d03e      	beq.n	8000ad0 <HAL_PCD_IRQHandler+0x398>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000a52:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8000a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a5a:	051b      	lsls	r3, r3, #20
 8000a5c:	0d1b      	lsrs	r3, r3, #20
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8000a5e:	ea4f 1847 	mov.w	r8, r7, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000a62:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8000a66:	eb04 0108 	add.w	r1, r4, r8
 8000a6a:	f891 3234 	ldrb.w	r3, [r1, #564]	; 0x234
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d157      	bne.n	8000b22 <HAL_PCD_IRQHandler+0x3ea>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000a72:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a76:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 8000a7a:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8000a7e:	fa15 f383 	uxtah	r3, r5, r3
 8000a82:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8000a86:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8000a8a:	b135      	cbz	r5, 8000a9a <HAL_PCD_IRQHandler+0x362>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000a8c:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
 8000a90:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000a94:	462b      	mov	r3, r5
 8000a96:	f001 fcdf 	bl	8002458 <USB_ReadPMA>
 8000a9a:	eb04 1346 	add.w	r3, r4, r6, lsl #5
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
        ep->xfer_buff += count;
 8000a9e:	eb04 0108 	add.w	r1, r4, r8
        ep->xfer_count += count;
 8000aa2:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8000aa6:	442a      	add	r2, r5
 8000aa8:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
        ep->xfer_buff += count;
 8000aac:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
 8000ab0:	442a      	add	r2, r5
 8000ab2:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000ab6:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8000aba:	b11b      	cbz	r3, 8000ac4 <HAL_PCD_IRQHandler+0x38c>
 8000abc:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8000ac0:	4285      	cmp	r5, r0
 8000ac2:	d269      	bcs.n	8000b98 <HAL_PCD_IRQHandler+0x460>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000ac4:	44a0      	add	r8, r4
 8000ac6:	4620      	mov	r0, r4
 8000ac8:	f898 1228 	ldrb.w	r1, [r8, #552]	; 0x228
 8000acc:	f002 fd44 	bl	8003558 <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000ad0:	f019 0f80 	tst.w	r9, #128	; 0x80
 8000ad4:	f43f af39 	beq.w	800094a <HAL_PCD_IRQHandler+0x212>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000ad8:	6823      	ldr	r3, [r4, #0]
 8000ada:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8000ade:	b292      	uxth	r2, r2
 8000ae0:	ea02 020a 	and.w	r2, r2, sl
 8000ae4:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ae8:	eb04 1747 	add.w	r7, r4, r7, lsl #5
 8000aec:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8000af0:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8000af4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8000af8:	fa13 f382 	uxtah	r3, r3, r2
 8000afc:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8000b00:	f833 2031 	ldrh.w	r2, [r3, r1, lsl #3]
 8000b04:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000b08:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b0c:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8000b10:	441a      	add	r2, r3
 8000b12:	63fa      	str	r2, [r7, #60]	; 0x3c

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000b14:	6c33      	ldr	r3, [r6, #64]	; 0x40
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000b16:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d143      	bne.n	8000ba4 <HAL_PCD_IRQHandler+0x46c>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000b1c:	f002 fd24 	bl	8003568 <HAL_PCD_DataInStageCallback>
 8000b20:	e713      	b.n	800094a <HAL_PCD_IRQHandler+0x212>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000b22:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 8000b26:	b213      	sxth	r3, r2
 8000b28:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 8000b2c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b30:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000b34:	d022      	beq.n	8000b7c <HAL_PCD_IRQHandler+0x444>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b36:	f200 4502 	addw	r5, r0, #1026	; 0x402
 8000b3a:	fa15 f383 	uxtah	r3, r5, r3
 8000b3e:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8000b42:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8000b46:	b135      	cbz	r5, 8000b56 <HAL_PCD_IRQHandler+0x41e>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000b48:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8000b4c:	462b      	mov	r3, r5
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000b4e:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000b52:	f001 fc81 	bl	8002458 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);
 8000b56:	eb04 0308 	add.w	r3, r4, r8
 8000b5a:	6822      	ldr	r2, [r4, #0]
 8000b5c:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000b60:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000b76:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000b7a:	e78e      	b.n	8000a9a <HAL_PCD_IRQHandler+0x362>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000b7c:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8000b80:	fa15 f383 	uxtah	r3, r5, r3
 8000b84:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8000b88:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8000b8c:	2d00      	cmp	r5, #0
 8000b8e:	d0e2      	beq.n	8000b56 <HAL_PCD_IRQHandler+0x41e>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000b90:	462b      	mov	r3, r5
 8000b92:	f8b1 2232 	ldrh.w	r2, [r1, #562]	; 0x232
 8000b96:	e7da      	b.n	8000b4e <HAL_PCD_IRQHandler+0x416>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000b98:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8000b9c:	4620      	mov	r0, r4
 8000b9e:	f7ff fd93 	bl	80006c8 <HAL_PCD_EP_Receive>
 8000ba2:	e795      	b.n	8000ad0 <HAL_PCD_IRQHandler+0x398>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000ba4:	f7ff fdb0 	bl	8000708 <HAL_PCD_EP_Transmit>
 8000ba8:	e6cf      	b.n	800094a <HAL_PCD_IRQHandler+0x212>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000baa:	f8df a014 	ldr.w	sl, [pc, #20]	; 8000bc0 <HAL_PCD_IRQHandler+0x488>
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000bae:	f8df b014 	ldr.w	fp, [pc, #20]	; 8000bc4 <HAL_PCD_IRQHandler+0x48c>
 8000bb2:	e6ca      	b.n	800094a <HAL_PCD_IRQHandler+0x212>
      HAL_PCD_SuspendCallback(hpcd);
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f002 fcef 	bl	8003598 <HAL_PCD_SuspendCallback>
 8000bba:	e675      	b.n	80008a8 <HAL_PCD_IRQHandler+0x170>
 8000bbc:	ffff8000 	.word	0xffff8000
 8000bc0:	ffff8f0f 	.word	0xffff8f0f
 8000bc4:	ffffbf8f 	.word	0xffffbf8f

08000bc8 <HAL_PCD_EP_SetStall>:
{
 8000bc8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8000bca:	6843      	ldr	r3, [r0, #4]
 8000bcc:	f001 050f 	and.w	r5, r1, #15
 8000bd0:	429d      	cmp	r5, r3
{
 8000bd2:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8000bd4:	d82d      	bhi.n	8000c32 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8000bd6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000bda:	f04f 0320 	mov.w	r3, #32
 8000bde:	d01e      	beq.n	8000c1e <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 8000be0:	eb00 1245 	add.w	r2, r0, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8000be4:	fb03 0305 	mla	r3, r3, r5, r0
    ep->is_in = 1U;
 8000be8:	2101      	movs	r1, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8000bea:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 8000bec:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
  ep->is_stall = 1U;
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 8000bf4:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8000bf6:	f894 1428 	ldrb.w	r1, [r4, #1064]	; 0x428
 8000bfa:	4291      	cmp	r1, r2
 8000bfc:	d01b      	beq.n	8000c36 <HAL_PCD_EP_SetStall+0x6e>
 8000bfe:	f884 2428 	strb.w	r2, [r4, #1064]	; 0x428
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000c02:	4619      	mov	r1, r3
 8000c04:	6820      	ldr	r0, [r4, #0]
 8000c06:	f001 faa5 	bl	8002154 <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 8000c0a:	b925      	cbnz	r5, 8000c16 <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000c0c:	f504 6186 	add.w	r1, r4, #1072	; 0x430
 8000c10:	6820      	ldr	r0, [r4, #0]
 8000c12:	f001 fb24 	bl	800225e <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000c1c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8000c1e:	fb03 0301 	mla	r3, r3, r1, r0
    ep->is_in = 0U;
 8000c22:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8000c26:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8000c28:	f503 730a 	add.w	r3, r3, #552	; 0x228
    ep->is_in = 0U;
 8000c2c:	f881 2229 	strb.w	r2, [r1, #553]	; 0x229
 8000c30:	e7de      	b.n	8000bf0 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8000c32:	2001      	movs	r0, #1
 8000c34:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000c36:	2002      	movs	r0, #2
}
 8000c38:	bd38      	pop	{r3, r4, r5, pc}

08000c3a <HAL_PCD_EP_ClrStall>:
{
 8000c3a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000c3c:	6843      	ldr	r3, [r0, #4]
 8000c3e:	f001 020f 	and.w	r2, r1, #15
 8000c42:	429a      	cmp	r2, r3
{
 8000c44:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000c46:	d827      	bhi.n	8000c98 <HAL_PCD_EP_ClrStall+0x5e>
  if ((0x80U & ep_addr) == 0x80U)
 8000c48:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000c4c:	f04f 0120 	mov.w	r1, #32
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8000c50:	fb01 0102 	mla	r1, r1, r2, r0
 8000c54:	ea4f 1342 	mov.w	r3, r2, lsl #5
    ep->is_in = 1U;
 8000c58:	bf19      	ittee	ne
 8000c5a:	181b      	addne	r3, r3, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8000c5c:	3128      	addne	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8000c5e:	f501 710a 	addeq.w	r1, r1, #552	; 0x228
    ep->is_in = 0U;
 8000c62:	191b      	addeq	r3, r3, r4
    ep->is_in = 1U;
 8000c64:	bf14      	ite	ne
 8000c66:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8000c68:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 8000c6a:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8000c6e:	bf14      	ite	ne
 8000c70:	f883 0029 	strbne.w	r0, [r3, #41]	; 0x29
    ep->is_in = 0U;
 8000c74:	f883 0229 	strbeq.w	r0, [r3, #553]	; 0x229
  ep->is_stall = 0U;
 8000c78:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & 0xFU;
 8000c7a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8000c7c:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d00b      	beq.n	8000c9c <HAL_PCD_EP_ClrStall+0x62>
 8000c84:	2301      	movs	r3, #1
 8000c86:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000c8a:	6820      	ldr	r0, [r4, #0]
 8000c8c:	f001 fa83 	bl	8002196 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000c90:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
  return HAL_OK;
 8000c94:	4628      	mov	r0, r5
 8000c96:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000c98:	2001      	movs	r0, #1
 8000c9a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000c9c:	2002      	movs	r0, #2
}
 8000c9e:	bd38      	pop	{r3, r4, r5, pc}

08000ca0 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8000ca0:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8000ca4:	bf1b      	ittet	ne
 8000ca6:	f001 010f 	andne.w	r1, r1, #15
 8000caa:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000cae:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8000cb2:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000cb4:	bf08      	it	eq
 8000cb6:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000cba:	b91a      	cbnz	r2, 8000cc4 <HAL_PCDEx_PMAConfig+0x24>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8000cbc:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8000cbe:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8000cc4:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8000cc6:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8000cc8:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8000cca:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8000ccc:	8143      	strh	r3, [r0, #10]
 8000cce:	e7f7      	b.n	8000cc0 <HAL_PCDEx_PMAConfig+0x20>

08000cd0 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_TypeDef *USBx = hpcd->Instance;
 8000cd0:	6802      	ldr	r2, [r0, #0]
  hpcd->battery_charging_active = 1U;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	f8c0 346c 	str.w	r3, [r0, #1132]	; 0x46c

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8000cd8:	f8b2 3058 	ldrh.w	r3, [r2, #88]	; 0x58
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 8000ce6:	f8b2 3058 	ldrh.w	r3, [r2, #88]	; 0x58
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58

  return HAL_OK;
}
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	4770      	bx	lr

08000cf8 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8000cf8:	6802      	ldr	r2, [r0, #0]
{
 8000cfa:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	f8c0 1468 	str.w	r1, [r0, #1128]	; 0x468
  hpcd->LPM_State = LPM_L0;
 8000d02:	2000      	movs	r0, #0
 8000d04:	f883 0460 	strb.w	r0, [r3, #1120]	; 0x460

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8000d08:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	430b      	orrs	r3, r1
 8000d10:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8000d14:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	f043 0302 	orr.w	r3, r3, #2
 8000d1e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8000d22:	4770      	bx	lr

08000d24 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 8000d24:	4a02      	ldr	r2, [pc, #8]	; (8000d30 <HAL_PWR_EnableBkUpAccess+0xc>)
 8000d26:	6813      	ldr	r3, [r2, #0]
 8000d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	4770      	bx	lr
 8000d30:	40007000 	.word	0x40007000

08000d34 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d34:	4b02      	ldr	r3, [pc, #8]	; (8000d40 <HAL_PWREx_GetVoltageRange+0xc>)
 8000d36:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8000d38:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	40007000 	.word	0x40007000

08000d44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d46:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d48:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d4c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d50:	d11a      	bne.n	8000d88 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d52:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000d56:	d013      	beq.n	8000d80 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d58:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000d5a:	4912      	ldr	r1, [pc, #72]	; (8000da4 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d5c:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d64:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000d66:	4a10      	ldr	r2, [pc, #64]	; (8000da8 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000d68:	6812      	ldr	r2, [r2, #0]
 8000d6a:	fbb2 f1f1 	udiv	r1, r2, r1
 8000d6e:	2232      	movs	r2, #50	; 0x32
 8000d70:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000d72:	b112      	cbz	r2, 8000d7a <HAL_PWREx_ControlVoltageScaling+0x36>
 8000d74:	6959      	ldr	r1, [r3, #20]
 8000d76:	0549      	lsls	r1, r1, #21
 8000d78:	d404      	bmi.n	8000d84 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	055b      	lsls	r3, r3, #21
 8000d7e:	d40d      	bmi.n	8000d9c <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8000d80:	2000      	movs	r0, #0
 8000d82:	4770      	bx	lr
        wait_loop_index--;
 8000d84:	3a01      	subs	r2, #1
 8000d86:	e7f4      	b.n	8000d72 <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d88:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d8c:	bf1f      	itttt	ne
 8000d8e:	681a      	ldrne	r2, [r3, #0]
 8000d90:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000d94:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000d98:	601a      	strne	r2, [r3, #0]
 8000d9a:	e7f1      	b.n	8000d80 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8000d9c:	2003      	movs	r0, #3
}  
 8000d9e:	4770      	bx	lr
 8000da0:	40007000 	.word	0x40007000
 8000da4:	000f4240 	.word	0x000f4240
 8000da8:	20000110 	.word	0x20000110

08000dac <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.  
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8000dac:	4a02      	ldr	r2, [pc, #8]	; (8000db8 <HAL_PWREx_EnableVddUSB+0xc>)
 8000dae:	6853      	ldr	r3, [r2, #4]
 8000db0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db4:	6053      	str	r3, [r2, #4]
 8000db6:	4770      	bx	lr
 8000db8:	40007000 	.word	0x40007000

08000dbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000dbe:	4d1e      	ldr	r5, [pc, #120]	; (8000e38 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000dc0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000dc2:	00da      	lsls	r2, r3, #3
{
 8000dc4:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000dc6:	d518      	bpl.n	8000dfa <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000dc8:	f7ff ffb4 	bl	8000d34 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dcc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000dd0:	d123      	bne.n	8000e1a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000dd2:	2c80      	cmp	r4, #128	; 0x80
 8000dd4:	d929      	bls.n	8000e2a <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000dd6:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000dd8:	bf8c      	ite	hi
 8000dda:	2002      	movhi	r0, #2
 8000ddc:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000dde:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000de0:	6813      	ldr	r3, [r2, #0]
 8000de2:	f023 0307 	bic.w	r3, r3, #7
 8000de6:	4303      	orrs	r3, r0
 8000de8:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000dea:	6813      	ldr	r3, [r2, #0]
 8000dec:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000df0:	1a18      	subs	r0, r3, r0
 8000df2:	bf18      	it	ne
 8000df4:	2001      	movne	r0, #1
 8000df6:	b003      	add	sp, #12
 8000df8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	65ab      	str	r3, [r5, #88]	; 0x58
 8000e02:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e08:	9301      	str	r3, [sp, #4]
 8000e0a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000e0c:	f7ff ff92 	bl	8000d34 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000e10:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e16:	65ab      	str	r3, [r5, #88]	; 0x58
 8000e18:	e7d8      	b.n	8000dcc <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8000e1a:	2c80      	cmp	r4, #128	; 0x80
 8000e1c:	d807      	bhi.n	8000e2e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8000e1e:	d008      	beq.n	8000e32 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8000e20:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000e24:	4258      	negs	r0, r3
 8000e26:	4158      	adcs	r0, r3
 8000e28:	e7d9      	b.n	8000dde <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	e7d7      	b.n	8000dde <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000e2e:	2003      	movs	r0, #3
 8000e30:	e7d5      	b.n	8000dde <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000e32:	2002      	movs	r0, #2
 8000e34:	e7d3      	b.n	8000dde <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40022000 	.word	0x40022000

08000e40 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000e40:	4b2f      	ldr	r3, [pc, #188]	; (8000f00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	f012 0f0c 	tst.w	r2, #12
{
 8000e48:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000e4a:	d009      	beq.n	8000e60 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000e52:	2a0c      	cmp	r2, #12
 8000e54:	d12d      	bne.n	8000eb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	f002 0203 	and.w	r2, r2, #3
 8000e5c:	2a01      	cmp	r2, #1
 8000e5e:	d128      	bne.n	8000eb2 <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000e60:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000e62:	4928      	ldr	r1, [pc, #160]	; (8000f04 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000e64:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000e66:	bf55      	itete	pl
 8000e68:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000e6c:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000e6e:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000e72:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8000e76:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8000e7a:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8000e7c:	f011 0f0c 	tst.w	r1, #12
 8000e80:	bf0c      	ite	eq
 8000e82:	4610      	moveq	r0, r2
 8000e84:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000e86:	6899      	ldr	r1, [r3, #8]
 8000e88:	f001 010c 	and.w	r1, r1, #12
 8000e8c:	290c      	cmp	r1, #12
 8000e8e:	d130      	bne.n	8000ef2 <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000e90:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000e92:	68d8      	ldr	r0, [r3, #12]
 8000e94:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8000e98:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000e9a:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 8000e9e:	2802      	cmp	r0, #2
 8000ea0:	d019      	beq.n	8000ed6 <HAL_RCC_GetSysClockFreq+0x96>
 8000ea2:	2803      	cmp	r0, #3
 8000ea4:	d026      	beq.n	8000ef4 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000ea6:	fbb2 f2f1 	udiv	r2, r2, r1
 8000eaa:	68d8      	ldr	r0, [r3, #12]
 8000eac:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8000eb0:	e017      	b.n	8000ee2 <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	f002 020c 	and.w	r2, r2, #12
 8000eb8:	2a04      	cmp	r2, #4
 8000eba:	d007      	beq.n	8000ecc <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	f002 020c 	and.w	r2, r2, #12
 8000ec2:	2a08      	cmp	r2, #8
 8000ec4:	d104      	bne.n	8000ed0 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8000ec6:	4810      	ldr	r0, [pc, #64]	; (8000f08 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000ec8:	2200      	movs	r2, #0
 8000eca:	e7dc      	b.n	8000e86 <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8000ecc:	480f      	ldr	r0, [pc, #60]	; (8000f0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8000ece:	e7fb      	b.n	8000ec8 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8000ed0:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	e7d7      	b.n	8000e86 <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000ed6:	68da      	ldr	r2, [r3, #12]
 8000ed8:	480c      	ldr	r0, [pc, #48]	; (8000f0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8000eda:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000ede:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000ee8:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000eea:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000eec:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8000eee:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000ef2:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	4804      	ldr	r0, [pc, #16]	; (8000f08 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000ef8:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8000efc:	e7ef      	b.n	8000ede <HAL_RCC_GetSysClockFreq+0x9e>
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000
 8000f04:	08004218 	.word	0x08004218
 8000f08:	007a1200 	.word	0x007a1200
 8000f0c:	00f42400 	.word	0x00f42400

08000f10 <HAL_RCC_OscConfig>:
{
 8000f10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(RCC_OscInitStruct == NULL)
 8000f14:	4605      	mov	r5, r0
 8000f16:	b908      	cbnz	r0, 8000f1c <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8000f18:	2001      	movs	r0, #1
 8000f1a:	e08d      	b.n	8001038 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f1c:	6803      	ldr	r3, [r0, #0]
 8000f1e:	06d8      	lsls	r0, r3, #27
 8000f20:	d538      	bpl.n	8000f94 <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000f22:	4cab      	ldr	r4, [pc, #684]	; (80011d0 <HAL_RCC_OscConfig+0x2c0>)
 8000f24:	68a3      	ldr	r3, [r4, #8]
 8000f26:	f013 0f0c 	tst.w	r3, #12
 8000f2a:	d161      	bne.n	8000ff0 <HAL_RCC_OscConfig+0xe0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f2c:	6823      	ldr	r3, [r4, #0]
 8000f2e:	0799      	lsls	r1, r3, #30
 8000f30:	d502      	bpl.n	8000f38 <HAL_RCC_OscConfig+0x28>
 8000f32:	69ab      	ldr	r3, [r5, #24]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d0ef      	beq.n	8000f18 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f38:	6823      	ldr	r3, [r4, #0]
 8000f3a:	6a28      	ldr	r0, [r5, #32]
 8000f3c:	071a      	lsls	r2, r3, #28
 8000f3e:	bf56      	itet	pl
 8000f40:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000f44:	6823      	ldrmi	r3, [r4, #0]
 8000f46:	091b      	lsrpl	r3, r3, #4
 8000f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f4c:	4283      	cmp	r3, r0
 8000f4e:	d23a      	bcs.n	8000fc6 <HAL_RCC_OscConfig+0xb6>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f50:	f7ff ff34 	bl	8000dbc <RCC_SetFlashLatencyFromMSIRange>
 8000f54:	2800      	cmp	r0, #0
 8000f56:	d1df      	bne.n	8000f18 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	f043 0308 	orr.w	r3, r3, #8
 8000f5e:	6023      	str	r3, [r4, #0]
 8000f60:	6823      	ldr	r3, [r4, #0]
 8000f62:	6a2a      	ldr	r2, [r5, #32]
 8000f64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f6c:	6863      	ldr	r3, [r4, #4]
 8000f6e:	69ea      	ldr	r2, [r5, #28]
 8000f70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000f74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000f78:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f7a:	f7ff ff61 	bl	8000e40 <HAL_RCC_GetSysClockFreq>
 8000f7e:	68a3      	ldr	r3, [r4, #8]
 8000f80:	4a94      	ldr	r2, [pc, #592]	; (80011d4 <HAL_RCC_OscConfig+0x2c4>)
 8000f82:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f86:	5cd3      	ldrb	r3, [r2, r3]
 8000f88:	40d8      	lsrs	r0, r3
 8000f8a:	4b93      	ldr	r3, [pc, #588]	; (80011d8 <HAL_RCC_OscConfig+0x2c8>)
 8000f8c:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f7ff f91c 	bl	80001cc <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f94:	682b      	ldr	r3, [r5, #0]
 8000f96:	07d8      	lsls	r0, r3, #31
 8000f98:	d461      	bmi.n	800105e <HAL_RCC_OscConfig+0x14e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f9a:	682b      	ldr	r3, [r5, #0]
 8000f9c:	0799      	lsls	r1, r3, #30
 8000f9e:	f100 80a9 	bmi.w	80010f4 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fa2:	682b      	ldr	r3, [r5, #0]
 8000fa4:	071a      	lsls	r2, r3, #28
 8000fa6:	f100 80e7 	bmi.w	8001178 <HAL_RCC_OscConfig+0x268>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000faa:	682b      	ldr	r3, [r5, #0]
 8000fac:	075b      	lsls	r3, r3, #29
 8000fae:	f100 8115 	bmi.w	80011dc <HAL_RCC_OscConfig+0x2cc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000fb2:	682b      	ldr	r3, [r5, #0]
 8000fb4:	069a      	lsls	r2, r3, #26
 8000fb6:	f100 817c 	bmi.w	80012b2 <HAL_RCC_OscConfig+0x3a2>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000fba:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000fbc:	2a00      	cmp	r2, #0
 8000fbe:	f040 81a3 	bne.w	8001308 <HAL_RCC_OscConfig+0x3f8>
  return HAL_OK;
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	e038      	b.n	8001038 <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fc6:	6823      	ldr	r3, [r4, #0]
 8000fc8:	f043 0308 	orr.w	r3, r3, #8
 8000fcc:	6023      	str	r3, [r4, #0]
 8000fce:	6823      	ldr	r3, [r4, #0]
 8000fd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fd4:	4303      	orrs	r3, r0
 8000fd6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fd8:	6863      	ldr	r3, [r4, #4]
 8000fda:	69ea      	ldr	r2, [r5, #28]
 8000fdc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000fe0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000fe4:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fe6:	f7ff fee9 	bl	8000dbc <RCC_SetFlashLatencyFromMSIRange>
 8000fea:	2800      	cmp	r0, #0
 8000fec:	d0c5      	beq.n	8000f7a <HAL_RCC_OscConfig+0x6a>
 8000fee:	e793      	b.n	8000f18 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ff0:	69ab      	ldr	r3, [r5, #24]
 8000ff2:	b323      	cbz	r3, 800103e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_ENABLE();
 8000ff4:	6823      	ldr	r3, [r4, #0]
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ffc:	f7ff f90e 	bl	800021c <HAL_GetTick>
 8001000:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001002:	6823      	ldr	r3, [r4, #0]
 8001004:	079b      	lsls	r3, r3, #30
 8001006:	d511      	bpl.n	800102c <HAL_RCC_OscConfig+0x11c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	f043 0308 	orr.w	r3, r3, #8
 800100e:	6023      	str	r3, [r4, #0]
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	6a2a      	ldr	r2, [r5, #32]
 8001014:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001018:	4313      	orrs	r3, r2
 800101a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800101c:	6863      	ldr	r3, [r4, #4]
 800101e:	69ea      	ldr	r2, [r5, #28]
 8001020:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001024:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001028:	6063      	str	r3, [r4, #4]
 800102a:	e7b3      	b.n	8000f94 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800102c:	f7ff f8f6 	bl	800021c <HAL_GetTick>
 8001030:	1b80      	subs	r0, r0, r6
 8001032:	2802      	cmp	r0, #2
 8001034:	d9e5      	bls.n	8001002 <HAL_RCC_OscConfig+0xf2>
            return HAL_TIMEOUT;
 8001036:	2003      	movs	r0, #3
}
 8001038:	b002      	add	sp, #8
 800103a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_MSI_DISABLE();
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	f023 0301 	bic.w	r3, r3, #1
 8001044:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001046:	f7ff f8e9 	bl	800021c <HAL_GetTick>
 800104a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	079f      	lsls	r7, r3, #30
 8001050:	d5a0      	bpl.n	8000f94 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001052:	f7ff f8e3 	bl	800021c <HAL_GetTick>
 8001056:	1b80      	subs	r0, r0, r6
 8001058:	2802      	cmp	r0, #2
 800105a:	d9f7      	bls.n	800104c <HAL_RCC_OscConfig+0x13c>
 800105c:	e7eb      	b.n	8001036 <HAL_RCC_OscConfig+0x126>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 800105e:	4c5c      	ldr	r4, [pc, #368]	; (80011d0 <HAL_RCC_OscConfig+0x2c0>)
 8001060:	68a3      	ldr	r3, [r4, #8]
 8001062:	f003 030c 	and.w	r3, r3, #12
 8001066:	2b08      	cmp	r3, #8
 8001068:	d009      	beq.n	800107e <HAL_RCC_OscConfig+0x16e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800106a:	68a3      	ldr	r3, [r4, #8]
 800106c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001070:	2b0c      	cmp	r3, #12
 8001072:	d10b      	bne.n	800108c <HAL_RCC_OscConfig+0x17c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001074:	68e3      	ldr	r3, [r4, #12]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	2b03      	cmp	r3, #3
 800107c:	d106      	bne.n	800108c <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107e:	6823      	ldr	r3, [r4, #0]
 8001080:	039a      	lsls	r2, r3, #14
 8001082:	d58a      	bpl.n	8000f9a <HAL_RCC_OscConfig+0x8a>
 8001084:	686b      	ldr	r3, [r5, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d187      	bne.n	8000f9a <HAL_RCC_OscConfig+0x8a>
 800108a:	e745      	b.n	8000f18 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108c:	686b      	ldr	r3, [r5, #4]
 800108e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001092:	d110      	bne.n	80010b6 <HAL_RCC_OscConfig+0x1a6>
 8001094:	6823      	ldr	r3, [r4, #0]
 8001096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800109c:	f7ff f8be 	bl	800021c <HAL_GetTick>
 80010a0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80010a2:	6823      	ldr	r3, [r4, #0]
 80010a4:	039b      	lsls	r3, r3, #14
 80010a6:	f53f af78 	bmi.w	8000f9a <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010aa:	f7ff f8b7 	bl	800021c <HAL_GetTick>
 80010ae:	1b80      	subs	r0, r0, r6
 80010b0:	2864      	cmp	r0, #100	; 0x64
 80010b2:	d9f6      	bls.n	80010a2 <HAL_RCC_OscConfig+0x192>
 80010b4:	e7bf      	b.n	8001036 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ba:	d104      	bne.n	80010c6 <HAL_RCC_OscConfig+0x1b6>
 80010bc:	6823      	ldr	r3, [r4, #0]
 80010be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c2:	6023      	str	r3, [r4, #0]
 80010c4:	e7e6      	b.n	8001094 <HAL_RCC_OscConfig+0x184>
 80010c6:	6822      	ldr	r2, [r4, #0]
 80010c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010cc:	6022      	str	r2, [r4, #0]
 80010ce:	6822      	ldr	r2, [r4, #0]
 80010d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010d4:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1e0      	bne.n	800109c <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 80010da:	f7ff f89f 	bl	800021c <HAL_GetTick>
 80010de:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80010e0:	6823      	ldr	r3, [r4, #0]
 80010e2:	039f      	lsls	r7, r3, #14
 80010e4:	f57f af59 	bpl.w	8000f9a <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e8:	f7ff f898 	bl	800021c <HAL_GetTick>
 80010ec:	1b80      	subs	r0, r0, r6
 80010ee:	2864      	cmp	r0, #100	; 0x64
 80010f0:	d9f6      	bls.n	80010e0 <HAL_RCC_OscConfig+0x1d0>
 80010f2:	e7a0      	b.n	8001036 <HAL_RCC_OscConfig+0x126>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80010f4:	4c36      	ldr	r4, [pc, #216]	; (80011d0 <HAL_RCC_OscConfig+0x2c0>)
 80010f6:	68a3      	ldr	r3, [r4, #8]
 80010f8:	f003 030c 	and.w	r3, r3, #12
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d009      	beq.n	8001114 <HAL_RCC_OscConfig+0x204>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001100:	68a3      	ldr	r3, [r4, #8]
 8001102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001106:	2b0c      	cmp	r3, #12
 8001108:	d113      	bne.n	8001132 <HAL_RCC_OscConfig+0x222>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800110a:	68e3      	ldr	r3, [r4, #12]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d10e      	bne.n	8001132 <HAL_RCC_OscConfig+0x222>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	055e      	lsls	r6, r3, #21
 8001118:	d503      	bpl.n	8001122 <HAL_RCC_OscConfig+0x212>
 800111a:	68eb      	ldr	r3, [r5, #12]
 800111c:	2b00      	cmp	r3, #0
 800111e:	f43f aefb 	beq.w	8000f18 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001122:	6863      	ldr	r3, [r4, #4]
 8001124:	692a      	ldr	r2, [r5, #16]
 8001126:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800112a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800112e:	6063      	str	r3, [r4, #4]
 8001130:	e737      	b.n	8000fa2 <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001132:	68eb      	ldr	r3, [r5, #12]
 8001134:	b17b      	cbz	r3, 8001156 <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_HSI_ENABLE();
 8001136:	6823      	ldr	r3, [r4, #0]
 8001138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800113c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800113e:	f7ff f86d 	bl	800021c <HAL_GetTick>
 8001142:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001144:	6823      	ldr	r3, [r4, #0]
 8001146:	0558      	lsls	r0, r3, #21
 8001148:	d4eb      	bmi.n	8001122 <HAL_RCC_OscConfig+0x212>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800114a:	f7ff f867 	bl	800021c <HAL_GetTick>
 800114e:	1b80      	subs	r0, r0, r6
 8001150:	2802      	cmp	r0, #2
 8001152:	d9f7      	bls.n	8001144 <HAL_RCC_OscConfig+0x234>
 8001154:	e76f      	b.n	8001036 <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_HSI_DISABLE();
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800115c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800115e:	f7ff f85d 	bl	800021c <HAL_GetTick>
 8001162:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	0559      	lsls	r1, r3, #21
 8001168:	f57f af1b 	bpl.w	8000fa2 <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800116c:	f7ff f856 	bl	800021c <HAL_GetTick>
 8001170:	1b80      	subs	r0, r0, r6
 8001172:	2802      	cmp	r0, #2
 8001174:	d9f6      	bls.n	8001164 <HAL_RCC_OscConfig+0x254>
 8001176:	e75e      	b.n	8001036 <HAL_RCC_OscConfig+0x126>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001178:	696b      	ldr	r3, [r5, #20]
 800117a:	4c15      	ldr	r4, [pc, #84]	; (80011d0 <HAL_RCC_OscConfig+0x2c0>)
 800117c:	b19b      	cbz	r3, 80011a6 <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 800117e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800118a:	f7ff f847 	bl	800021c <HAL_GetTick>
 800118e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001190:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001194:	079f      	lsls	r7, r3, #30
 8001196:	f53f af08 	bmi.w	8000faa <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800119a:	f7ff f83f 	bl	800021c <HAL_GetTick>
 800119e:	1b80      	subs	r0, r0, r6
 80011a0:	2802      	cmp	r0, #2
 80011a2:	d9f5      	bls.n	8001190 <HAL_RCC_OscConfig+0x280>
 80011a4:	e747      	b.n	8001036 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_LSI_DISABLE();
 80011a6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80011aa:	f023 0301 	bic.w	r3, r3, #1
 80011ae:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80011b2:	f7ff f833 	bl	800021c <HAL_GetTick>
 80011b6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 80011b8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80011bc:	0798      	lsls	r0, r3, #30
 80011be:	f57f aef4 	bpl.w	8000faa <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c2:	f7ff f82b 	bl	800021c <HAL_GetTick>
 80011c6:	1b80      	subs	r0, r0, r6
 80011c8:	2802      	cmp	r0, #2
 80011ca:	d9f5      	bls.n	80011b8 <HAL_RCC_OscConfig+0x2a8>
 80011cc:	e733      	b.n	8001036 <HAL_RCC_OscConfig+0x126>
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000
 80011d4:	08004208 	.word	0x08004208
 80011d8:	20000110 	.word	0x20000110
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011dc:	4c79      	ldr	r4, [pc, #484]	; (80013c4 <HAL_RCC_OscConfig+0x4b4>)
 80011de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011e0:	00d9      	lsls	r1, r3, #3
 80011e2:	d427      	bmi.n	8001234 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ea:	65a3      	str	r3, [r4, #88]	; 0x58
 80011ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80011f6:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011f8:	4e73      	ldr	r6, [pc, #460]	; (80013c8 <HAL_RCC_OscConfig+0x4b8>)
 80011fa:	6833      	ldr	r3, [r6, #0]
 80011fc:	05da      	lsls	r2, r3, #23
 80011fe:	d51b      	bpl.n	8001238 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001200:	68ab      	ldr	r3, [r5, #8]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d129      	bne.n	800125a <HAL_RCC_OscConfig+0x34a>
 8001206:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001212:	f7ff f803 	bl	800021c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001216:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800121a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800121c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001220:	0798      	lsls	r0, r3, #30
 8001222:	d540      	bpl.n	80012a6 <HAL_RCC_OscConfig+0x396>
    if(pwrclkchanged == SET)
 8001224:	2f00      	cmp	r7, #0
 8001226:	f43f aec4 	beq.w	8000fb2 <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 800122a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800122c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001230:	65a3      	str	r3, [r4, #88]	; 0x58
 8001232:	e6be      	b.n	8000fb2 <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 8001234:	2700      	movs	r7, #0
 8001236:	e7df      	b.n	80011f8 <HAL_RCC_OscConfig+0x2e8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001238:	6833      	ldr	r3, [r6, #0]
 800123a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001240:	f7fe ffec 	bl	800021c <HAL_GetTick>
 8001244:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001246:	6833      	ldr	r3, [r6, #0]
 8001248:	05db      	lsls	r3, r3, #23
 800124a:	d4d9      	bmi.n	8001200 <HAL_RCC_OscConfig+0x2f0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124c:	f7fe ffe6 	bl	800021c <HAL_GetTick>
 8001250:	eba0 0008 	sub.w	r0, r0, r8
 8001254:	2802      	cmp	r0, #2
 8001256:	d9f6      	bls.n	8001246 <HAL_RCC_OscConfig+0x336>
 8001258:	e6ed      	b.n	8001036 <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800125a:	2b05      	cmp	r3, #5
 800125c:	d106      	bne.n	800126c <HAL_RCC_OscConfig+0x35c>
 800125e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001262:	f043 0304 	orr.w	r3, r3, #4
 8001266:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800126a:	e7cc      	b.n	8001206 <HAL_RCC_OscConfig+0x2f6>
 800126c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001270:	f022 0201 	bic.w	r2, r2, #1
 8001274:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001278:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800127c:	f022 0204 	bic.w	r2, r2, #4
 8001280:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1c4      	bne.n	8001212 <HAL_RCC_OscConfig+0x302>
      tickstart = HAL_GetTick();
 8001288:	f7fe ffc8 	bl	800021c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800128c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001290:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8001292:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001296:	0799      	lsls	r1, r3, #30
 8001298:	d5c4      	bpl.n	8001224 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129a:	f7fe ffbf 	bl	800021c <HAL_GetTick>
 800129e:	1b80      	subs	r0, r0, r6
 80012a0:	4540      	cmp	r0, r8
 80012a2:	d9f6      	bls.n	8001292 <HAL_RCC_OscConfig+0x382>
 80012a4:	e6c7      	b.n	8001036 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a6:	f7fe ffb9 	bl	800021c <HAL_GetTick>
 80012aa:	1b80      	subs	r0, r0, r6
 80012ac:	4540      	cmp	r0, r8
 80012ae:	d9b5      	bls.n	800121c <HAL_RCC_OscConfig+0x30c>
 80012b0:	e6c1      	b.n	8001036 <HAL_RCC_OscConfig+0x126>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80012b4:	4c43      	ldr	r4, [pc, #268]	; (80013c4 <HAL_RCC_OscConfig+0x4b4>)
 80012b6:	b19b      	cbz	r3, 80012e0 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_HSI48_ENABLE();
 80012b8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80012c4:	f7fe ffaa 	bl	800021c <HAL_GetTick>
 80012c8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 80012ca:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80012ce:	079b      	lsls	r3, r3, #30
 80012d0:	f53f ae73 	bmi.w	8000fba <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012d4:	f7fe ffa2 	bl	800021c <HAL_GetTick>
 80012d8:	1b80      	subs	r0, r0, r6
 80012da:	2802      	cmp	r0, #2
 80012dc:	d9f5      	bls.n	80012ca <HAL_RCC_OscConfig+0x3ba>
 80012de:	e6aa      	b.n	8001036 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSI48_DISABLE();
 80012e0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80012e4:	f023 0301 	bic.w	r3, r3, #1
 80012e8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80012ec:	f7fe ff96 	bl	800021c <HAL_GetTick>
 80012f0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 80012f2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80012f6:	079f      	lsls	r7, r3, #30
 80012f8:	f57f ae5f 	bpl.w	8000fba <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012fc:	f7fe ff8e 	bl	800021c <HAL_GetTick>
 8001300:	1b80      	subs	r0, r0, r6
 8001302:	2802      	cmp	r0, #2
 8001304:	d9f5      	bls.n	80012f2 <HAL_RCC_OscConfig+0x3e2>
 8001306:	e696      	b.n	8001036 <HAL_RCC_OscConfig+0x126>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001308:	4c2e      	ldr	r4, [pc, #184]	; (80013c4 <HAL_RCC_OscConfig+0x4b4>)
 800130a:	68a3      	ldr	r3, [r4, #8]
 800130c:	f003 030c 	and.w	r3, r3, #12
 8001310:	2b0c      	cmp	r3, #12
 8001312:	f43f ae01 	beq.w	8000f18 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001316:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001318:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800131a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800131e:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001320:	d136      	bne.n	8001390 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 8001322:	f7fe ff7b 	bl	800021c <HAL_GetTick>
 8001326:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	0198      	lsls	r0, r3, #6
 800132c:	d42a      	bmi.n	8001384 <HAL_RCC_OscConfig+0x474>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800132e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001330:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001332:	06db      	lsls	r3, r3, #27
 8001334:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001338:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800133a:	4313      	orrs	r3, r2
 800133c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800133e:	3a01      	subs	r2, #1
 8001340:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001344:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001346:	0852      	lsrs	r2, r2, #1
 8001348:	3a01      	subs	r2, #1
 800134a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800134e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001350:	0852      	lsrs	r2, r2, #1
 8001352:	3a01      	subs	r2, #1
 8001354:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001358:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001360:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001362:	68e3      	ldr	r3, [r4, #12]
 8001364:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001368:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800136a:	f7fe ff57 	bl	800021c <HAL_GetTick>
 800136e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001370:	6823      	ldr	r3, [r4, #0]
 8001372:	0199      	lsls	r1, r3, #6
 8001374:	f53f ae25 	bmi.w	8000fc2 <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001378:	f7fe ff50 	bl	800021c <HAL_GetTick>
 800137c:	1b40      	subs	r0, r0, r5
 800137e:	2802      	cmp	r0, #2
 8001380:	d9f6      	bls.n	8001370 <HAL_RCC_OscConfig+0x460>
 8001382:	e658      	b.n	8001036 <HAL_RCC_OscConfig+0x126>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001384:	f7fe ff4a 	bl	800021c <HAL_GetTick>
 8001388:	1b80      	subs	r0, r0, r6
 800138a:	2802      	cmp	r0, #2
 800138c:	d9cc      	bls.n	8001328 <HAL_RCC_OscConfig+0x418>
 800138e:	e652      	b.n	8001036 <HAL_RCC_OscConfig+0x126>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001394:	bf5e      	ittt	pl
 8001396:	68e3      	ldrpl	r3, [r4, #12]
 8001398:	f023 0303 	bicpl.w	r3, r3, #3
 800139c:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800139e:	68e3      	ldr	r3, [r4, #12]
 80013a0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80013a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a8:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80013aa:	f7fe ff37 	bl	800021c <HAL_GetTick>
 80013ae:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	019b      	lsls	r3, r3, #6
 80013b4:	f57f ae05 	bpl.w	8000fc2 <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b8:	f7fe ff30 	bl	800021c <HAL_GetTick>
 80013bc:	1b40      	subs	r0, r0, r5
 80013be:	2802      	cmp	r0, #2
 80013c0:	d9f6      	bls.n	80013b0 <HAL_RCC_OscConfig+0x4a0>
 80013c2:	e638      	b.n	8001036 <HAL_RCC_OscConfig+0x126>
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40007000 	.word	0x40007000

080013cc <HAL_RCC_ClockConfig>:
{
 80013cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013d0:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80013d2:	4604      	mov	r4, r0
 80013d4:	b910      	cbnz	r0, 80013dc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80013d6:	2001      	movs	r0, #1
 80013d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013dc:	4a40      	ldr	r2, [pc, #256]	; (80014e0 <HAL_RCC_ClockConfig+0x114>)
 80013de:	6813      	ldr	r3, [r2, #0]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	428b      	cmp	r3, r1
 80013e6:	d328      	bcc.n	800143a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013e8:	6823      	ldr	r3, [r4, #0]
 80013ea:	07d9      	lsls	r1, r3, #31
 80013ec:	d430      	bmi.n	8001450 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013ee:	6821      	ldr	r1, [r4, #0]
 80013f0:	078a      	lsls	r2, r1, #30
 80013f2:	d45a      	bmi.n	80014aa <HAL_RCC_ClockConfig+0xde>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013f4:	4a3a      	ldr	r2, [pc, #232]	; (80014e0 <HAL_RCC_ClockConfig+0x114>)
 80013f6:	6813      	ldr	r3, [r2, #0]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	429e      	cmp	r6, r3
 80013fe:	d35c      	bcc.n	80014ba <HAL_RCC_ClockConfig+0xee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001400:	f011 0f04 	tst.w	r1, #4
 8001404:	4d37      	ldr	r5, [pc, #220]	; (80014e4 <HAL_RCC_ClockConfig+0x118>)
 8001406:	d163      	bne.n	80014d0 <HAL_RCC_ClockConfig+0x104>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001408:	070b      	lsls	r3, r1, #28
 800140a:	d506      	bpl.n	800141a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800140c:	68ab      	ldr	r3, [r5, #8]
 800140e:	6922      	ldr	r2, [r4, #16]
 8001410:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001414:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001418:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800141a:	f7ff fd11 	bl	8000e40 <HAL_RCC_GetSysClockFreq>
 800141e:	68ab      	ldr	r3, [r5, #8]
 8001420:	4a31      	ldr	r2, [pc, #196]	; (80014e8 <HAL_RCC_ClockConfig+0x11c>)
 8001422:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001426:	5cd3      	ldrb	r3, [r2, r3]
 8001428:	40d8      	lsrs	r0, r3
 800142a:	4b30      	ldr	r3, [pc, #192]	; (80014ec <HAL_RCC_ClockConfig+0x120>)
 800142c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800142e:	2000      	movs	r0, #0
 8001430:	f7fe fecc 	bl	80001cc <HAL_InitTick>
  return HAL_OK;
 8001434:	2000      	movs	r0, #0
 8001436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143a:	6813      	ldr	r3, [r2, #0]
 800143c:	f023 0307 	bic.w	r3, r3, #7
 8001440:	430b      	orrs	r3, r1
 8001442:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001444:	6813      	ldr	r3, [r2, #0]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	4299      	cmp	r1, r3
 800144c:	d1c3      	bne.n	80013d6 <HAL_RCC_ClockConfig+0xa>
 800144e:	e7cb      	b.n	80013e8 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001450:	6862      	ldr	r2, [r4, #4]
 8001452:	4d24      	ldr	r5, [pc, #144]	; (80014e4 <HAL_RCC_ClockConfig+0x118>)
 8001454:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001456:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001458:	d11b      	bne.n	8001492 <HAL_RCC_ClockConfig+0xc6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800145a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800145e:	d0ba      	beq.n	80013d6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001460:	68ab      	ldr	r3, [r5, #8]
 8001462:	f023 0303 	bic.w	r3, r3, #3
 8001466:	4313      	orrs	r3, r2
 8001468:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 800146a:	f7fe fed7 	bl	800021c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800146e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001472:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001474:	68ab      	ldr	r3, [r5, #8]
 8001476:	6862      	ldr	r2, [r4, #4]
 8001478:	f003 030c 	and.w	r3, r3, #12
 800147c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001480:	d0b5      	beq.n	80013ee <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001482:	f7fe fecb 	bl	800021c <HAL_GetTick>
 8001486:	1bc0      	subs	r0, r0, r7
 8001488:	4540      	cmp	r0, r8
 800148a:	d9f3      	bls.n	8001474 <HAL_RCC_ClockConfig+0xa8>
        return HAL_TIMEOUT;
 800148c:	2003      	movs	r0, #3
}
 800148e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001492:	2a02      	cmp	r2, #2
 8001494:	d102      	bne.n	800149c <HAL_RCC_ClockConfig+0xd0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001496:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800149a:	e7e0      	b.n	800145e <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800149c:	b912      	cbnz	r2, 80014a4 <HAL_RCC_ClockConfig+0xd8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800149e:	f013 0f02 	tst.w	r3, #2
 80014a2:	e7dc      	b.n	800145e <HAL_RCC_ClockConfig+0x92>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80014a4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80014a8:	e7d9      	b.n	800145e <HAL_RCC_ClockConfig+0x92>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014aa:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <HAL_RCC_ClockConfig+0x118>)
 80014ac:	68a0      	ldr	r0, [r4, #8]
 80014ae:	6893      	ldr	r3, [r2, #8]
 80014b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014b4:	4303      	orrs	r3, r0
 80014b6:	6093      	str	r3, [r2, #8]
 80014b8:	e79c      	b.n	80013f4 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ba:	6813      	ldr	r3, [r2, #0]
 80014bc:	f023 0307 	bic.w	r3, r3, #7
 80014c0:	4333      	orrs	r3, r6
 80014c2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c4:	6813      	ldr	r3, [r2, #0]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	429e      	cmp	r6, r3
 80014cc:	d183      	bne.n	80013d6 <HAL_RCC_ClockConfig+0xa>
 80014ce:	e797      	b.n	8001400 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d0:	68ab      	ldr	r3, [r5, #8]
 80014d2:	68e2      	ldr	r2, [r4, #12]
 80014d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014d8:	4313      	orrs	r3, r2
 80014da:	60ab      	str	r3, [r5, #8]
 80014dc:	e794      	b.n	8001408 <HAL_RCC_ClockConfig+0x3c>
 80014de:	bf00      	nop
 80014e0:	40022000 	.word	0x40022000
 80014e4:	40021000 	.word	0x40021000
 80014e8:	08004208 	.word	0x08004208
 80014ec:	20000110 	.word	0x20000110

080014f0 <HAL_RCC_GetHCLKFreq>:
}
 80014f0:	4b01      	ldr	r3, [pc, #4]	; (80014f8 <HAL_RCC_GetHCLKFreq+0x8>)
 80014f2:	6818      	ldr	r0, [r3, #0]
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000110 	.word	0x20000110

080014fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80014fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80014fe:	4b44      	ldr	r3, [pc, #272]	; (8001610 <RCCEx_PLLSAI1_Config+0x114>)
 8001500:	68da      	ldr	r2, [r3, #12]
 8001502:	f012 0f03 	tst.w	r2, #3
{
 8001506:	4605      	mov	r5, r0
 8001508:	460e      	mov	r6, r1
 800150a:	461c      	mov	r4, r3
 800150c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800150e:	d039      	beq.n	8001584 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	f002 0203 	and.w	r2, r2, #3
 8001516:	4282      	cmp	r2, r0
 8001518:	d14b      	bne.n	80015b2 <RCCEx_PLLSAI1_Config+0xb6>
       ||
 800151a:	2a00      	cmp	r2, #0
 800151c:	d049      	beq.n	80015b2 <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800151e:	68db      	ldr	r3, [r3, #12]
       ||
 8001520:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001522:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001526:	3301      	adds	r3, #1
       ||
 8001528:	4293      	cmp	r3, r2
 800152a:	d142      	bne.n	80015b2 <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800152c:	6823      	ldr	r3, [r4, #0]
 800152e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001532:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001534:	f7fe fe72 	bl	800021c <HAL_GetTick>
 8001538:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	011a      	lsls	r2, r3, #4
 800153e:	d441      	bmi.n	80015c4 <RCCEx_PLLSAI1_Config+0xc8>
 8001540:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001542:	2e00      	cmp	r6, #0
 8001544:	d045      	beq.n	80015d2 <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001546:	2e01      	cmp	r6, #1
 8001548:	d14f      	bne.n	80015ea <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800154a:	6922      	ldr	r2, [r4, #16]
 800154c:	6928      	ldr	r0, [r5, #16]
 800154e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001552:	0840      	lsrs	r0, r0, #1
 8001554:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001558:	3801      	subs	r0, #1
 800155a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800155e:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001562:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800156a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156c:	f7fe fe56 	bl	800021c <HAL_GetTick>
 8001570:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	d545      	bpl.n	8001604 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001578:	6923      	ldr	r3, [r4, #16]
 800157a:	69aa      	ldr	r2, [r5, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	6123      	str	r3, [r4, #16]
 8001580:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8001584:	2802      	cmp	r0, #2
 8001586:	d010      	beq.n	80015aa <RCCEx_PLLSAI1_Config+0xae>
 8001588:	2803      	cmp	r0, #3
 800158a:	d014      	beq.n	80015b6 <RCCEx_PLLSAI1_Config+0xba>
 800158c:	2801      	cmp	r0, #1
 800158e:	d110      	bne.n	80015b2 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	079f      	lsls	r7, r3, #30
 8001594:	d5f5      	bpl.n	8001582 <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001596:	68e3      	ldr	r3, [r4, #12]
 8001598:	686a      	ldr	r2, [r5, #4]
 800159a:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800159e:	3a01      	subs	r2, #1
 80015a0:	4318      	orrs	r0, r3
 80015a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80015a6:	60e0      	str	r0, [r4, #12]
 80015a8:	e7c0      	b.n	800152c <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80015b0:	d1f1      	bne.n	8001596 <RCCEx_PLLSAI1_Config+0x9a>
 80015b2:	2001      	movs	r0, #1
 80015b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	0391      	lsls	r1, r2, #14
 80015ba:	d4ec      	bmi.n	8001596 <RCCEx_PLLSAI1_Config+0x9a>
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80015c2:	e7f5      	b.n	80015b0 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80015c4:	f7fe fe2a 	bl	800021c <HAL_GetTick>
 80015c8:	1bc0      	subs	r0, r0, r7
 80015ca:	2802      	cmp	r0, #2
 80015cc:	d9b5      	bls.n	800153a <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80015ce:	2003      	movs	r0, #3
 80015d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80015d2:	6922      	ldr	r2, [r4, #16]
 80015d4:	68e9      	ldr	r1, [r5, #12]
 80015d6:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 80015da:	06c9      	lsls	r1, r1, #27
 80015dc:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 80015e0:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80015e4:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80015e6:	6123      	str	r3, [r4, #16]
 80015e8:	e7bc      	b.n	8001564 <RCCEx_PLLSAI1_Config+0x68>
 80015ea:	6923      	ldr	r3, [r4, #16]
 80015ec:	6968      	ldr	r0, [r5, #20]
 80015ee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80015f2:	0840      	lsrs	r0, r0, #1
 80015f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80015f8:	3801      	subs	r0, #1
 80015fa:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80015fe:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001602:	e7f0      	b.n	80015e6 <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001604:	f7fe fe0a 	bl	800021c <HAL_GetTick>
 8001608:	1b80      	subs	r0, r0, r6
 800160a:	2802      	cmp	r0, #2
 800160c:	d9b1      	bls.n	8001572 <RCCEx_PLLSAI1_Config+0x76>
 800160e:	e7de      	b.n	80015ce <RCCEx_PLLSAI1_Config+0xd2>
 8001610:	40021000 	.word	0x40021000

08001614 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001614:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001618:	6805      	ldr	r5, [r0, #0]
 800161a:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 800161e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001620:	d00e      	beq.n	8001640 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001622:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001624:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001628:	d05b      	beq.n	80016e2 <HAL_RCCEx_PeriphCLKConfig+0xce>
 800162a:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800162e:	d05d      	beq.n	80016ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001630:	2900      	cmp	r1, #0
 8001632:	d166      	bne.n	8001702 <HAL_RCCEx_PeriphCLKConfig+0xee>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001634:	3004      	adds	r0, #4
 8001636:	f7ff ff61 	bl	80014fc <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800163a:	4605      	mov	r5, r0
 800163c:	2800      	cmp	r0, #0
 800163e:	d055      	beq.n	80016ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	039e      	lsls	r6, r3, #14
 8001644:	d56d      	bpl.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001646:	4eac      	ldr	r6, [pc, #688]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001648:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800164a:	00d8      	lsls	r0, r3, #3
 800164c:	d45b      	bmi.n	8001706 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	65b3      	str	r3, [r6, #88]	; 0x58
 8001656:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165c:	9301      	str	r3, [sp, #4]
 800165e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001660:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001662:	f8df 8298 	ldr.w	r8, [pc, #664]	; 80018fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8001666:	f8d8 3000 	ldr.w	r3, [r8]
 800166a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166e:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8001672:	f7fe fdd3 	bl	800021c <HAL_GetTick>
 8001676:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8001678:	f8d8 3000 	ldr.w	r3, [r8]
 800167c:	05d9      	lsls	r1, r3, #23
 800167e:	d544      	bpl.n	800170a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    if(ret == HAL_OK)
 8001680:	2d00      	cmp	r5, #0
 8001682:	d149      	bne.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0x104>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001684:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001688:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800168c:	d014      	beq.n	80016b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800168e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001690:	4293      	cmp	r3, r2
 8001692:	d011      	beq.n	80016b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001694:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001698:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800169c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016a0:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80016a4:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80016a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80016ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016b0:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80016b4:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80016b8:	07da      	lsls	r2, r3, #31
 80016ba:	d509      	bpl.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80016bc:	f7fe fdae 	bl	800021c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c0:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80016c4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80016c6:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80016ca:	079b      	lsls	r3, r3, #30
 80016cc:	f140 80eb 	bpl.w	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016d0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80016d4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80016d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016da:	4313      	orrs	r3, r2
 80016dc:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 80016e0:	e01a      	b.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80016e2:	4a85      	ldr	r2, [pc, #532]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80016e4:	68d3      	ldr	r3, [r2, #12]
 80016e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ea:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016ec:	4a82      	ldr	r2, [pc, #520]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80016ee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80016f0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80016f4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80016f8:	430b      	orrs	r3, r1
 80016fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80016fe:	2500      	movs	r5, #0
 8001700:	e79e      	b.n	8001640 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 8001702:	2501      	movs	r5, #1
 8001704:	e79c      	b.n	8001640 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001706:	2700      	movs	r7, #0
 8001708:	e7ab      	b.n	8001662 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800170a:	f7fe fd87 	bl	800021c <HAL_GetTick>
 800170e:	eba0 0009 	sub.w	r0, r0, r9
 8001712:	2802      	cmp	r0, #2
 8001714:	d9b0      	bls.n	8001678 <HAL_RCCEx_PeriphCLKConfig+0x64>
        ret = HAL_TIMEOUT;
 8001716:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001718:	b11f      	cbz	r7, 8001722 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800171a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800171c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001720:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001722:	6823      	ldr	r3, [r4, #0]
 8001724:	07d8      	lsls	r0, r3, #31
 8001726:	d508      	bpl.n	800173a <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001728:	4973      	ldr	r1, [pc, #460]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800172a:	6a20      	ldr	r0, [r4, #32]
 800172c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001730:	f022 0203 	bic.w	r2, r2, #3
 8001734:	4302      	orrs	r2, r0
 8001736:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800173a:	0799      	lsls	r1, r3, #30
 800173c:	d508      	bpl.n	8001750 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800173e:	496e      	ldr	r1, [pc, #440]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001740:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001742:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001746:	f022 020c 	bic.w	r2, r2, #12
 800174a:	4302      	orrs	r2, r0
 800174c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001750:	075a      	lsls	r2, r3, #29
 8001752:	d508      	bpl.n	8001766 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001754:	4968      	ldr	r1, [pc, #416]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001756:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001758:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800175c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001760:	4302      	orrs	r2, r0
 8001762:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001766:	069f      	lsls	r7, r3, #26
 8001768:	d508      	bpl.n	800177c <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800176a:	4963      	ldr	r1, [pc, #396]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800176c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800176e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001772:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001776:	4302      	orrs	r2, r0
 8001778:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800177c:	059e      	lsls	r6, r3, #22
 800177e:	d508      	bpl.n	8001792 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001780:	495d      	ldr	r1, [pc, #372]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001782:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001784:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001788:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800178c:	4302      	orrs	r2, r0
 800178e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001792:	0558      	lsls	r0, r3, #21
 8001794:	d508      	bpl.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001796:	4958      	ldr	r1, [pc, #352]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001798:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800179a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800179e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80017a2:	4302      	orrs	r2, r0
 80017a4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017a8:	0659      	lsls	r1, r3, #25
 80017aa:	d508      	bpl.n	80017be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017ac:	4952      	ldr	r1, [pc, #328]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80017ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80017b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80017b4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80017b8:	4302      	orrs	r2, r0
 80017ba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80017be:	061a      	lsls	r2, r3, #24
 80017c0:	d508      	bpl.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80017c2:	494d      	ldr	r1, [pc, #308]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80017c4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80017c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80017ca:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80017ce:	4302      	orrs	r2, r0
 80017d0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80017d4:	05df      	lsls	r7, r3, #23
 80017d6:	d508      	bpl.n	80017ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80017d8:	4947      	ldr	r1, [pc, #284]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80017da:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80017dc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80017e0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80017e4:	4302      	orrs	r2, r0
 80017e6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80017ea:	049e      	lsls	r6, r3, #18
 80017ec:	d50f      	bpl.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80017ee:	4a42      	ldr	r2, [pc, #264]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80017f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80017f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80017f6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80017fa:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80017fc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001804:	d157      	bne.n	80018b6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001806:	68d3      	ldr	r3, [r2, #12]
 8001808:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800180c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	0318      	lsls	r0, r3, #12
 8001812:	d50f      	bpl.n	8001834 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001814:	4a38      	ldr	r2, [pc, #224]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001816:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001818:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800181c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001820:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001822:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001826:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800182a:	d14f      	bne.n	80018cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800182c:	68d3      	ldr	r3, [r2, #12]
 800182e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001832:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001834:	6823      	ldr	r3, [r4, #0]
 8001836:	0359      	lsls	r1, r3, #13
 8001838:	d50f      	bpl.n	800185a <HAL_RCCEx_PeriphCLKConfig+0x246>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800183a:	4a2f      	ldr	r2, [pc, #188]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800183c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800183e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001842:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001846:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001848:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800184c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001850:	d147      	bne.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001852:	68d3      	ldr	r3, [r2, #12]
 8001854:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001858:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800185a:	6823      	ldr	r3, [r4, #0]
 800185c:	045a      	lsls	r2, r3, #17
 800185e:	d512      	bpl.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x272>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001860:	4925      	ldr	r1, [pc, #148]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001862:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001864:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001868:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800186c:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800186e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001876:	d106      	bne.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x272>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001878:	2102      	movs	r1, #2
 800187a:	1d20      	adds	r0, r4, #4
 800187c:	f7ff fe3e 	bl	80014fc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001880:	2800      	cmp	r0, #0
 8001882:	bf18      	it	ne
 8001884:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	041b      	lsls	r3, r3, #16
 800188a:	d508      	bpl.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800188c:	4a1a      	ldr	r2, [pc, #104]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800188e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001890:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001894:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001898:	430b      	orrs	r3, r1
 800189a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800189e:	4628      	mov	r0, r5
 80018a0:	b003      	add	sp, #12
 80018a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a6:	f7fe fcb9 	bl	800021c <HAL_GetTick>
 80018aa:	eba0 0008 	sub.w	r0, r0, r8
 80018ae:	4548      	cmp	r0, r9
 80018b0:	f67f af09 	bls.w	80016c6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 80018b4:	e72f      	b.n	8001716 <HAL_RCCEx_PeriphCLKConfig+0x102>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80018b6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80018ba:	d1a8      	bne.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80018bc:	2101      	movs	r1, #1
 80018be:	1d20      	adds	r0, r4, #4
 80018c0:	f7ff fe1c 	bl	80014fc <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80018c4:	2800      	cmp	r0, #0
 80018c6:	bf18      	it	ne
 80018c8:	4605      	movne	r5, r0
 80018ca:	e7a0      	b.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80018cc:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80018d0:	d1b0      	bne.n	8001834 <HAL_RCCEx_PeriphCLKConfig+0x220>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80018d2:	2101      	movs	r1, #1
 80018d4:	1d20      	adds	r0, r4, #4
 80018d6:	f7ff fe11 	bl	80014fc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80018da:	2800      	cmp	r0, #0
 80018dc:	bf18      	it	ne
 80018de:	4605      	movne	r5, r0
 80018e0:	e7a8      	b.n	8001834 <HAL_RCCEx_PeriphCLKConfig+0x220>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80018e2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80018e6:	d1b8      	bne.n	800185a <HAL_RCCEx_PeriphCLKConfig+0x246>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80018e8:	2101      	movs	r1, #1
 80018ea:	1d20      	adds	r0, r4, #4
 80018ec:	f7ff fe06 	bl	80014fc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80018f0:	2800      	cmp	r0, #0
 80018f2:	bf18      	it	ne
 80018f4:	4605      	movne	r5, r0
 80018f6:	e7b0      	b.n	800185a <HAL_RCCEx_PeriphCLKConfig+0x246>
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40007000 	.word	0x40007000

08001900 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001900:	4a02      	ldr	r2, [pc, #8]	; (800190c <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8001902:	6813      	ldr	r3, [r2, #0]
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	4770      	bx	lr
 800190c:	40021000 	.word	0x40021000

08001910 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001910:	6803      	ldr	r3, [r0, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001918:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800191a:	6842      	ldr	r2, [r0, #4]
 800191c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001920:	d10a      	bne.n	8001938 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8001922:	6882      	ldr	r2, [r0, #8]
 8001924:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001928:	d002      	beq.n	8001930 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800192a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800192e:	d103      	bne.n	8001938 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001936:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001938:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800193a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800193e:	d107      	bne.n	8001950 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800194e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001950:	2301      	movs	r3, #1
 8001952:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001956:	2300      	movs	r3, #0
 8001958:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 800195c:	2003      	movs	r0, #3
 800195e:	4770      	bx	lr

08001960 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8001960:	b570      	push	{r4, r5, r6, lr}
 8001962:	4605      	mov	r5, r0
 8001964:	460c      	mov	r4, r1
 8001966:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001968:	682b      	ldr	r3, [r5, #0]
 800196a:	6898      	ldr	r0, [r3, #8]
 800196c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001970:	d00d      	beq.n	800198e <SPI_WaitFlagStateUntilTimeout.constprop.10+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 8001972:	1c62      	adds	r2, r4, #1
 8001974:	d0f9      	beq.n	800196a <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001976:	b924      	cbnz	r4, 8001982 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x22>
 8001978:	4628      	mov	r0, r5
}
 800197a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800197e:	f7ff bfc7 	b.w	8001910 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001982:	f7fe fc4b 	bl	800021c <HAL_GetTick>
 8001986:	1b80      	subs	r0, r0, r6
 8001988:	4284      	cmp	r4, r0
 800198a:	d8ed      	bhi.n	8001968 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 800198c:	e7f4      	b.n	8001978 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x18>
}
 800198e:	bd70      	pop	{r4, r5, r6, pc}

08001990 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001992:	4606      	mov	r6, r0
 8001994:	460c      	mov	r4, r1
 8001996:	4615      	mov	r5, r2
 8001998:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 800199a:	6831      	ldr	r1, [r6, #0]
 800199c:	6888      	ldr	r0, [r1, #8]
 800199e:	4020      	ands	r0, r4
 80019a0:	d00e      	beq.n	80019c0 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80019a2:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80019a6:	bf01      	itttt	eq
 80019a8:	7b0a      	ldrbeq	r2, [r1, #12]
 80019aa:	b2d2      	uxtbeq	r2, r2
 80019ac:	f88d 2007 	strbeq.w	r2, [sp, #7]
      UNUSED(tmpreg);
 80019b0:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 80019b4:	1c6b      	adds	r3, r5, #1
 80019b6:	d0f1      	beq.n	800199c <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80019b8:	b925      	cbnz	r5, 80019c4 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x34>
 80019ba:	4630      	mov	r0, r6
 80019bc:	f7ff ffa8 	bl	8001910 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 80019c0:	b003      	add	sp, #12
 80019c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80019c4:	f7fe fc2a 	bl	800021c <HAL_GetTick>
 80019c8:	1bc0      	subs	r0, r0, r7
 80019ca:	4285      	cmp	r5, r0
 80019cc:	d8e5      	bhi.n	800199a <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 80019ce:	e7f4      	b.n	80019ba <SPI_WaitFifoStateUntilTimeout.constprop.11+0x2a>

080019d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80019d0:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80019d2:	4613      	mov	r3, r2
{
 80019d4:	460d      	mov	r5, r1
 80019d6:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80019d8:	460a      	mov	r2, r1
 80019da:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 80019de:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80019e0:	f7ff ffd6 	bl	8001990 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80019e4:	b128      	cbz	r0, 80019f2 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80019e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80019e8:	f043 0320 	orr.w	r3, r3, #32
 80019ec:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80019ee:	2003      	movs	r0, #3
 80019f0:	e00f      	b.n	8001a12 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80019f2:	4632      	mov	r2, r6
 80019f4:	4629      	mov	r1, r5
 80019f6:	4620      	mov	r0, r4
 80019f8:	f7ff ffb2 	bl	8001960 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 80019fc:	2800      	cmp	r0, #0
 80019fe:	d1f2      	bne.n	80019e6 <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001a00:	4633      	mov	r3, r6
 8001a02:	462a      	mov	r2, r5
 8001a04:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f7ff ffc1 	bl	8001990 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001a0e:	2800      	cmp	r0, #0
 8001a10:	d1e9      	bne.n	80019e6 <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8001a12:	bd70      	pop	{r4, r5, r6, pc}

08001a14 <HAL_SPI_Init>:
{
 8001a14:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8001a16:	4604      	mov	r4, r0
 8001a18:	2800      	cmp	r0, #0
 8001a1a:	d04a      	beq.n	8001ab2 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a20:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001a24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a28:	b91b      	cbnz	r3, 8001a32 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001a2a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8001a2e:	f001 fca9 	bl	8003384 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001a32:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001a34:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001a36:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001a3a:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a3c:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8001a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a42:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001a46:	600b      	str	r3, [r1, #0]
 8001a48:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a4c:	d92e      	bls.n	8001aac <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a4e:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a50:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a54:	bf18      	it	ne
 8001a56:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001a58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a5a:	b92b      	cbnz	r3, 8001a68 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a5c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001a60:	bf8c      	ite	hi
 8001a62:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001a64:	2301      	movls	r3, #1
 8001a66:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001a68:	68a6      	ldr	r6, [r4, #8]
 8001a6a:	6863      	ldr	r3, [r4, #4]
 8001a6c:	69a5      	ldr	r5, [r4, #24]
 8001a6e:	4333      	orrs	r3, r6
 8001a70:	6926      	ldr	r6, [r4, #16]
 8001a72:	4333      	orrs	r3, r6
 8001a74:	6966      	ldr	r6, [r4, #20]
 8001a76:	4333      	orrs	r3, r6
 8001a78:	69e6      	ldr	r6, [r4, #28]
 8001a7a:	4333      	orrs	r3, r6
 8001a7c:	6a26      	ldr	r6, [r4, #32]
 8001a7e:	4333      	orrs	r3, r6
 8001a80:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001a82:	4333      	orrs	r3, r6
 8001a84:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8001a88:	4333      	orrs	r3, r6
 8001a8a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001a8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a92:	0c2d      	lsrs	r5, r5, #16
 8001a94:	431a      	orrs	r2, r3
 8001a96:	f005 0504 	and.w	r5, r5, #4
 8001a9a:	432a      	orrs	r2, r5
 8001a9c:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 8001a9e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001aa0:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001aa2:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001aa4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001aa6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8001aaa:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001aac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ab0:	e7d0      	b.n	8001a54 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8001ab2:	2001      	movs	r0, #1
}
 8001ab4:	bd70      	pop	{r4, r5, r6, pc}

08001ab6 <HAL_SPI_Transmit>:
{
 8001ab6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001aba:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001abc:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8001ac0:	2b01      	cmp	r3, #1
{
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	460d      	mov	r5, r1
 8001ac6:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001ac8:	f000 80b1 	beq.w	8001c2e <HAL_SPI_Transmit+0x178>
 8001acc:	2301      	movs	r3, #1
 8001ace:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8001ad2:	f7fe fba3 	bl	800021c <HAL_GetTick>
 8001ad6:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001ad8:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8001adc:	b2c0      	uxtb	r0, r0
 8001ade:	2801      	cmp	r0, #1
 8001ae0:	f040 80a3 	bne.w	8001c2a <HAL_SPI_Transmit+0x174>
  if ((pData == NULL) || (Size == 0U))
 8001ae4:	2d00      	cmp	r5, #0
 8001ae6:	d057      	beq.n	8001b98 <HAL_SPI_Transmit+0xe2>
 8001ae8:	f1b8 0f00 	cmp.w	r8, #0
 8001aec:	d054      	beq.n	8001b98 <HAL_SPI_Transmit+0xe2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001aee:	2303      	movs	r3, #3
 8001af0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001af8:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8001afa:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8001afe:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001b02:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001b06:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001b08:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b0a:	68a3      	ldr	r3, [r4, #8]
 8001b0c:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b0e:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001b14:	bf08      	it	eq
 8001b16:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8001b18:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 8001b1c:	bf04      	itt	eq
 8001b1e:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8001b22:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b24:	6803      	ldr	r3, [r0, #0]
 8001b26:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001b28:	bf5e      	ittt	pl
 8001b2a:	6803      	ldrpl	r3, [r0, #0]
 8001b2c:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001b30:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b32:	68e3      	ldr	r3, [r4, #12]
 8001b34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b38:	6863      	ldr	r3, [r4, #4]
 8001b3a:	d93e      	bls.n	8001bba <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001b3c:	b11b      	cbz	r3, 8001b46 <HAL_SPI_Transmit+0x90>
 8001b3e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d106      	bne.n	8001b54 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)pData);
 8001b46:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001b4a:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8001b4c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8001b54:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	b9a3      	cbnz	r3, 8001b84 <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b5a:	463a      	mov	r2, r7
 8001b5c:	4631      	mov	r1, r6
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f7ff ff36 	bl	80019d0 <SPI_EndRxTxTransaction>
 8001b64:	2800      	cmp	r0, #0
 8001b66:	d15d      	bne.n	8001c24 <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b68:	68a3      	ldr	r3, [r4, #8]
 8001b6a:	b933      	cbnz	r3, 8001b7a <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b6c:	9301      	str	r3, [sp, #4]
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	9201      	str	r2, [sp, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b7a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8001b7c:	3000      	adds	r0, #0
 8001b7e:	bf18      	it	ne
 8001b80:	2001      	movne	r0, #1
 8001b82:	e009      	b.n	8001b98 <HAL_SPI_Transmit+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	0790      	lsls	r0, r2, #30
 8001b8a:	d503      	bpl.n	8001b94 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)pData);
 8001b8c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	e7db      	b.n	8001b4c <HAL_SPI_Transmit+0x96>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001b94:	b94e      	cbnz	r6, 8001baa <HAL_SPI_Transmit+0xf4>
          errorcode = HAL_TIMEOUT;
 8001b96:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8001ba4:	b002      	add	sp, #8
 8001ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001baa:	1c71      	adds	r1, r6, #1
 8001bac:	d0d2      	beq.n	8001b54 <HAL_SPI_Transmit+0x9e>
 8001bae:	f7fe fb35 	bl	800021c <HAL_GetTick>
 8001bb2:	1bc0      	subs	r0, r0, r7
 8001bb4:	4286      	cmp	r6, r0
 8001bb6:	d8cd      	bhi.n	8001b54 <HAL_SPI_Transmit+0x9e>
 8001bb8:	e7ed      	b.n	8001b96 <HAL_SPI_Transmit+0xe0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001bba:	b11b      	cbz	r3, 8001bc4 <HAL_SPI_Transmit+0x10e>
 8001bbc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d10a      	bne.n	8001bda <HAL_SPI_Transmit+0x124>
      if (hspi->TxXferCount > 1U)
 8001bc4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d916      	bls.n	8001bfa <HAL_SPI_Transmit+0x144>
        hspi->Instance->DR = *((uint16_t *)pData);
 8001bcc:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001bd0:	60c3      	str	r3, [r0, #12]
          hspi->TxXferCount -= 2U;
 8001bd2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001bd4:	3b02      	subs	r3, #2
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8001bda:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0bb      	beq.n	8001b5a <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001be2:	6823      	ldr	r3, [r4, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	0792      	lsls	r2, r2, #30
 8001be8:	d512      	bpl.n	8001c10 <HAL_SPI_Transmit+0x15a>
        if (hspi->TxXferCount > 1U)
 8001bea:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001bec:	b292      	uxth	r2, r2
 8001bee:	2a01      	cmp	r2, #1
 8001bf0:	d90b      	bls.n	8001c0a <HAL_SPI_Transmit+0x154>
          hspi->Instance->DR = *((uint16_t *)pData);
 8001bf2:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001bf6:	60da      	str	r2, [r3, #12]
 8001bf8:	e7eb      	b.n	8001bd2 <HAL_SPI_Transmit+0x11c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001bfa:	782b      	ldrb	r3, [r5, #0]
 8001bfc:	7303      	strb	r3, [r0, #12]
          hspi->TxXferCount--;
 8001bfe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001c06:	3501      	adds	r5, #1
 8001c08:	e7e7      	b.n	8001bda <HAL_SPI_Transmit+0x124>
 8001c0a:	782a      	ldrb	r2, [r5, #0]
 8001c0c:	731a      	strb	r2, [r3, #12]
 8001c0e:	e7f6      	b.n	8001bfe <HAL_SPI_Transmit+0x148>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001c10:	2e00      	cmp	r6, #0
 8001c12:	d0c0      	beq.n	8001b96 <HAL_SPI_Transmit+0xe0>
 8001c14:	1c73      	adds	r3, r6, #1
 8001c16:	d0e0      	beq.n	8001bda <HAL_SPI_Transmit+0x124>
 8001c18:	f7fe fb00 	bl	800021c <HAL_GetTick>
 8001c1c:	1bc0      	subs	r0, r0, r7
 8001c1e:	4286      	cmp	r6, r0
 8001c20:	d8db      	bhi.n	8001bda <HAL_SPI_Transmit+0x124>
 8001c22:	e7b8      	b.n	8001b96 <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c24:	2320      	movs	r3, #32
 8001c26:	6623      	str	r3, [r4, #96]	; 0x60
 8001c28:	e79e      	b.n	8001b68 <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 8001c2a:	2002      	movs	r0, #2
 8001c2c:	e7b4      	b.n	8001b98 <HAL_SPI_Transmit+0xe2>
  __HAL_LOCK(hspi);
 8001c2e:	2002      	movs	r0, #2
 8001c30:	e7b8      	b.n	8001ba4 <HAL_SPI_Transmit+0xee>

08001c32 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001c32:	b084      	sub	sp, #16
 8001c34:	a801      	add	r0, sp, #4
 8001c36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8001c3a:	b004      	add	sp, #16
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	4770      	bx	lr

08001c40 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001c40:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c4e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8001c52:	2000      	movs	r0, #0
 8001c54:	4770      	bx	lr

08001c56 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001c56:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001c5a:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8001c5e:	045b      	lsls	r3, r3, #17
 8001c60:	0c5b      	lsrs	r3, r3, #17
 8001c62:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8001c66:	2000      	movs	r0, #0
 8001c68:	4770      	bx	lr

08001c6a <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	4770      	bx	lr

08001c6e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001c6e:	b084      	sub	sp, #16
 8001c70:	b510      	push	{r4, lr}
 8001c72:	ac03      	add	r4, sp, #12
 8001c74:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8001c78:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8001c80:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8001c84:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001c88:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8001c8c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8001c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR |= winterruptmask;
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c9e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8001ca2:	b004      	add	sp, #16
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4770      	bx	lr

08001ca8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001caa:	780c      	ldrb	r4, [r1, #0]
 8001cac:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001cb0:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
{
 8001cb4:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001cb6:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8001cba:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001cbc:	0412      	lsls	r2, r2, #16
 8001cbe:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8001cc0:	2803      	cmp	r0, #3
 8001cc2:	d850      	bhi.n	8001d66 <USB_ActivateEndpoint+0xbe>
 8001cc4:	e8df f000 	tbb	[pc, r0]
 8001cc8:	49044c02 	.word	0x49044c02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8001ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8001cd0:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal);
 8001cd2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001cd6:	780e      	ldrb	r6, [r1, #0]
 8001cd8:	4cab      	ldr	r4, [pc, #684]	; (8001f88 <USB_ActivateEndpoint+0x2e0>)
 8001cda:	b235      	sxth	r5, r6
 8001cdc:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8001ce0:	b292      	uxth	r2, r2
 8001ce2:	4022      	ands	r2, r4
 8001ce4:	4332      	orrs	r2, r6
 8001ce6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cee:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  if (ep->doublebuffer == 0U)
 8001cf2:	7b0d      	ldrb	r5, [r1, #12]
 8001cf4:	780a      	ldrb	r2, [r1, #0]
 8001cf6:	2d00      	cmp	r5, #0
 8001cf8:	f040 8082 	bne.w	8001e00 <USB_ActivateEndpoint+0x158>
  {
    if (ep->is_in != 0U)
 8001cfc:	784f      	ldrb	r7, [r1, #1]
 8001cfe:	88ce      	ldrh	r6, [r1, #6]
 8001d00:	2508      	movs	r5, #8
 8001d02:	b397      	cbz	r7, 8001d6a <USB_ActivateEndpoint+0xc2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001d04:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8001d08:	fb15 3202 	smlabb	r2, r5, r2, r3
 8001d0c:	fa12 f287 	uxtah	r2, r2, r7
 8001d10:	f026 0601 	bic.w	r6, r6, #1
 8001d14:	f8a2 6400 	strh.w	r6, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001d18:	780d      	ldrb	r5, [r1, #0]
 8001d1a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8001d1e:	0656      	lsls	r6, r2, #25
 8001d20:	d509      	bpl.n	8001d36 <USB_ActivateEndpoint+0x8e>
 8001d22:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8001d26:	b292      	uxth	r2, r2
 8001d28:	4014      	ands	r4, r2
 8001d2a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8001d2e:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8001d32:	f823 4025 	strh.w	r4, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8001d36:	78ca      	ldrb	r2, [r1, #3]
 8001d38:	7809      	ldrb	r1, [r1, #0]
 8001d3a:	4c94      	ldr	r4, [pc, #592]	; (8001f8c <USB_ActivateEndpoint+0x2e4>)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001d3c:	b209      	sxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8001d3e:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001d40:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8001d44:	b292      	uxth	r2, r2
 8001d46:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 8001d4a:	d001      	beq.n	8001d50 <USB_ActivateEndpoint+0xa8>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001d4c:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001d50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d58:	e0c5      	b.n	8001ee6 <USB_ActivateEndpoint+0x23e>
      wEpRegVal |= USB_EP_INTERRUPT;
 8001d5a:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8001d5e:	e7b7      	b.n	8001cd0 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8001d60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d64:	e7b4      	b.n	8001cd0 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8001d66:	2001      	movs	r0, #1
 8001d68:	e7b3      	b.n	8001cd2 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001d6a:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8001d6e:	fb15 3202 	smlabb	r2, r5, r2, r3
 8001d72:	fa12 f284 	uxtah	r2, r2, r4
 8001d76:	f026 0601 	bic.w	r6, r6, #1
 8001d7a:	f8a2 6404 	strh.w	r6, [r2, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001d7e:	780a      	ldrb	r2, [r1, #0]
 8001d80:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8001d84:	690c      	ldr	r4, [r1, #16]
 8001d86:	fb15 3202 	smlabb	r2, r5, r2, r3
 8001d8a:	b2b6      	uxth	r6, r6
 8001d8c:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8001d90:	b954      	cbnz	r4, 8001da8 <USB_ActivateEndpoint+0x100>
 8001d92:	5b94      	ldrh	r4, [r2, r6]
 8001d94:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 8001d98:	04a4      	lsls	r4, r4, #18
 8001d9a:	0ca4      	lsrs	r4, r4, #18
 8001d9c:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8001da0:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8001da4:	5394      	strh	r4, [r2, r6]
 8001da6:	e007      	b.n	8001db8 <USB_ActivateEndpoint+0x110>
 8001da8:	2c3d      	cmp	r4, #61	; 0x3d
 8001daa:	d824      	bhi.n	8001df6 <USB_ActivateEndpoint+0x14e>
 8001dac:	0865      	lsrs	r5, r4, #1
 8001dae:	07e4      	lsls	r4, r4, #31
 8001db0:	bf48      	it	mi
 8001db2:	3501      	addmi	r5, #1
 8001db4:	02ad      	lsls	r5, r5, #10
 8001db6:	5395      	strh	r5, [r2, r6]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001db8:	780c      	ldrb	r4, [r1, #0]
 8001dba:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001dbe:	0452      	lsls	r2, r2, #17
 8001dc0:	d50d      	bpl.n	8001dde <USB_ActivateEndpoint+0x136>
 8001dc2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001dc6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001dca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001dce:	0412      	lsls	r2, r2, #16
 8001dd0:	0c12      	lsrs	r2, r2, #16
 8001dd2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001dd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dda:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001dde:	7809      	ldrb	r1, [r1, #0]
 8001de0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8001de4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001de8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001dec:	0412      	lsls	r2, r2, #16
 8001dee:	0c12      	lsrs	r2, r2, #16
 8001df0:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8001df4:	e7ac      	b.n	8001d50 <USB_ActivateEndpoint+0xa8>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001df6:	4d66      	ldr	r5, [pc, #408]	; (8001f90 <USB_ActivateEndpoint+0x2e8>)
 8001df8:	0964      	lsrs	r4, r4, #5
 8001dfa:	ea45 2484 	orr.w	r4, r5, r4, lsl #10
 8001dfe:	e7d1      	b.n	8001da4 <USB_ActivateEndpoint+0xfc>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8001e00:	b212      	sxth	r2, r2
 8001e02:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8001e06:	b2ad      	uxth	r5, r5
 8001e08:	4025      	ands	r5, r4
 8001e0a:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 8001e0e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8001e12:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8001e16:	780e      	ldrb	r6, [r1, #0]
 8001e18:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8001e1c:	2208      	movs	r2, #8
 8001e1e:	fb12 3606 	smlabb	r6, r2, r6, r3
 8001e22:	fa16 f585 	uxtah	r5, r6, r5
 8001e26:	890e      	ldrh	r6, [r1, #8]
 8001e28:	f026 0601 	bic.w	r6, r6, #1
 8001e2c:	f8a5 6400 	strh.w	r6, [r5, #1024]	; 0x400
 8001e30:	780e      	ldrb	r6, [r1, #0]
 8001e32:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8001e36:	fb12 3206 	smlabb	r2, r2, r6, r3
 8001e3a:	fa12 f285 	uxtah	r2, r2, r5
 8001e3e:	894d      	ldrh	r5, [r1, #10]
 8001e40:	f025 0501 	bic.w	r5, r5, #1
 8001e44:	f8a2 5404 	strh.w	r5, [r2, #1028]	; 0x404
 8001e48:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 8001e4a:	784d      	ldrb	r5, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001e4c:	b212      	sxth	r2, r2
    if (ep->is_in == 0U)
 8001e4e:	2d00      	cmp	r5, #0
 8001e50:	d14c      	bne.n	8001eec <USB_ActivateEndpoint+0x244>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001e52:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8001e56:	046f      	lsls	r7, r5, #17
 8001e58:	d509      	bpl.n	8001e6e <USB_ActivateEndpoint+0x1c6>
 8001e5a:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8001e5e:	b2ad      	uxth	r5, r5
 8001e60:	402c      	ands	r4, r5
 8001e62:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8001e66:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8001e6a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001e6e:	780c      	ldrb	r4, [r1, #0]
 8001e70:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001e74:	0656      	lsls	r6, r2, #25
 8001e76:	d50d      	bpl.n	8001e94 <USB_ActivateEndpoint+0x1ec>
 8001e78:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001e7c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001e80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e84:	0412      	lsls	r2, r2, #16
 8001e86:	0c12      	lsrs	r2, r2, #16
 8001e88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e8c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001e90:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001e94:	780c      	ldrb	r4, [r1, #0]
 8001e96:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001e9a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001e9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ea2:	0412      	lsls	r2, r2, #16
 8001ea4:	0c12      	lsrs	r2, r2, #16
 8001ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eaa:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001eae:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001eb2:	780d      	ldrb	r5, [r1, #0]
 8001eb4:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8001eb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ebc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ec0:	0412      	lsls	r2, r2, #16
 8001ec2:	0c12      	lsrs	r2, r2, #16
 8001ec4:	f248 0480 	movw	r4, #32896	; 0x8080
 8001ec8:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8001ecc:	4322      	orrs	r2, r4
 8001ece:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001ed2:	7809      	ldrb	r1, [r1, #0]
 8001ed4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8001ed8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001edc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ee0:	0412      	lsls	r2, r2, #16
 8001ee2:	0c12      	lsrs	r2, r2, #16
 8001ee4:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001ee6:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 8001eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001eec:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8001ef0:	046d      	lsls	r5, r5, #17
 8001ef2:	d509      	bpl.n	8001f08 <USB_ActivateEndpoint+0x260>
 8001ef4:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8001ef8:	b2ad      	uxth	r5, r5
 8001efa:	402c      	ands	r4, r5
 8001efc:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8001f00:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8001f04:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001f08:	780c      	ldrb	r4, [r1, #0]
 8001f0a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001f0e:	0652      	lsls	r2, r2, #25
 8001f10:	d50d      	bpl.n	8001f2e <USB_ActivateEndpoint+0x286>
 8001f12:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001f16:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001f1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f1e:	0412      	lsls	r2, r2, #16
 8001f20:	0c12      	lsrs	r2, r2, #16
 8001f22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f26:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001f2a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001f2e:	780c      	ldrb	r4, [r1, #0]
 8001f30:	4d16      	ldr	r5, [pc, #88]	; (8001f8c <USB_ActivateEndpoint+0x2e4>)
 8001f32:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001f36:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001f3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f3e:	0412      	lsls	r2, r2, #16
 8001f40:	0c12      	lsrs	r2, r2, #16
 8001f42:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001f46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f4a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8001f4e:	780c      	ldrb	r4, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 8001f50:	78ca      	ldrb	r2, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001f52:	b224      	sxth	r4, r4
      if (ep->type != EP_TYPE_ISOC)
 8001f54:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001f56:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001f5a:	b292      	uxth	r2, r2
 8001f5c:	ea02 0205 	and.w	r2, r2, r5
 8001f60:	bf18      	it	ne
 8001f62:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001f66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f6e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001f72:	7809      	ldrb	r1, [r1, #0]
 8001f74:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8001f78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f7c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f80:	0412      	lsls	r2, r2, #16
 8001f82:	0c12      	lsrs	r2, r2, #16
 8001f84:	e6e4      	b.n	8001d50 <USB_ActivateEndpoint+0xa8>
 8001f86:	bf00      	nop
 8001f88:	ffff8f8f 	.word	0xffff8f8f
 8001f8c:	ffff8fbf 	.word	0xffff8fbf
 8001f90:	ffff8000 	.word	0xffff8000

08001f94 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001f94:	b510      	push	{r4, lr}
 8001f96:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8001f98:	7b0c      	ldrb	r4, [r1, #12]
 8001f9a:	784a      	ldrb	r2, [r1, #1]
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001f9c:	b21b      	sxth	r3, r3
  if (ep->doublebuffer == 0U)
 8001f9e:	2c00      	cmp	r4, #0
 8001fa0:	d13d      	bne.n	800201e <USB_DeactivateEndpoint+0x8a>
    if (ep->is_in != 0U)
 8001fa2:	b312      	cbz	r2, 8001fea <USB_DeactivateEndpoint+0x56>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001fa4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001fa8:	0652      	lsls	r2, r2, #25
 8001faa:	d50d      	bpl.n	8001fc8 <USB_DeactivateEndpoint+0x34>
 8001fac:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001fb0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001fb4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001fb8:	0412      	lsls	r2, r2, #16
 8001fba:	0c12      	lsrs	r2, r2, #16
 8001fbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fc0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001fc4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001fc8:	780a      	ldrb	r2, [r1, #0]
 8001fca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001fd6:	041b      	lsls	r3, r3, #16
 8001fd8:	0c1b      	lsrs	r3, r3, #16
 8001fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001fea:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001fee:	0454      	lsls	r4, r2, #17
 8001ff0:	d50d      	bpl.n	800200e <USB_DeactivateEndpoint+0x7a>
 8001ff2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001ff6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001ffa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ffe:	0412      	lsls	r2, r2, #16
 8002000:	0c12      	lsrs	r2, r2, #16
 8002002:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002006:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800200a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800200e:	780a      	ldrb	r2, [r1, #0]
 8002010:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002014:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800201c:	e7db      	b.n	8001fd6 <USB_DeactivateEndpoint+0x42>
    if (ep->is_in == 0U)
 800201e:	2a00      	cmp	r2, #0
 8002020:	d14e      	bne.n	80020c0 <USB_DeactivateEndpoint+0x12c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002022:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002026:	0452      	lsls	r2, r2, #17
 8002028:	d50d      	bpl.n	8002046 <USB_DeactivateEndpoint+0xb2>
 800202a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800202e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002032:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002036:	0412      	lsls	r2, r2, #16
 8002038:	0c12      	lsrs	r2, r2, #16
 800203a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800203e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002042:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002046:	780a      	ldrb	r2, [r1, #0]
 8002048:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800204c:	065c      	lsls	r4, r3, #25
 800204e:	d50d      	bpl.n	800206c <USB_DeactivateEndpoint+0xd8>
 8002050:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205c:	041b      	lsls	r3, r3, #16
 800205e:	0c1b      	lsrs	r3, r3, #16
 8002060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002064:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002068:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800206c:	780a      	ldrb	r2, [r1, #0]
 800206e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800207a:	041b      	lsls	r3, r3, #16
 800207c:	0c1b      	lsrs	r3, r3, #16
 800207e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002082:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002086:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800208a:	780c      	ldrb	r4, [r1, #0]
 800208c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002090:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002098:	041b      	lsls	r3, r3, #16
 800209a:	0c1b      	lsrs	r3, r3, #16
 800209c:	f248 0280 	movw	r2, #32896	; 0x8080
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80020a6:	7809      	ldrb	r1, [r1, #0]
 80020a8:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80020ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80020b4:	041b      	lsls	r3, r3, #16
 80020b6:	0c1b      	lsrs	r3, r3, #16
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80020be:	e792      	b.n	8001fe6 <USB_DeactivateEndpoint+0x52>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80020c0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80020c4:	0452      	lsls	r2, r2, #17
 80020c6:	d50d      	bpl.n	80020e4 <USB_DeactivateEndpoint+0x150>
 80020c8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80020cc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80020d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80020d4:	0412      	lsls	r2, r2, #16
 80020d6:	0c12      	lsrs	r2, r2, #16
 80020d8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80020dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020e0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80020e4:	780a      	ldrb	r2, [r1, #0]
 80020e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020ea:	065b      	lsls	r3, r3, #25
 80020ec:	d50d      	bpl.n	800210a <USB_DeactivateEndpoint+0x176>
 80020ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020fa:	041b      	lsls	r3, r3, #16
 80020fc:	0c1b      	lsrs	r3, r3, #16
 80020fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002102:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002106:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800210a:	780a      	ldrb	r2, [r1, #0]
 800210c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	0c1b      	lsrs	r3, r3, #16
 800211c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002124:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002128:	780c      	ldrb	r4, [r1, #0]
 800212a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800212e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002136:	041b      	lsls	r3, r3, #16
 8002138:	0c1b      	lsrs	r3, r3, #16
 800213a:	f248 0280 	movw	r2, #32896	; 0x8080
 800213e:	4313      	orrs	r3, r2
 8002140:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002144:	7809      	ldrb	r1, [r1, #0]
 8002146:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800214a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800214e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002152:	e7af      	b.n	80020b4 <USB_DeactivateEndpoint+0x120>

08002154 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002154:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8002156:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002158:	b212      	sxth	r2, r2
  if (ep->is_in != 0U)
 800215a:	b18b      	cbz	r3, 8002180 <USB_EPSetStall+0x2c>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800215c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002168:	041b      	lsls	r3, r3, #16
 800216a:	0c1b      	lsrs	r3, r3, #16
 800216c:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002178:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800217c:	2000      	movs	r0, #0
 800217e:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002180:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002184:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218c:	041b      	lsls	r3, r3, #16
 800218e:	0c1b      	lsrs	r3, r3, #16
 8002190:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002194:	e7ec      	b.n	8002170 <USB_EPSetStall+0x1c>

08002196 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002196:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8002198:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800219a:	b212      	sxth	r2, r2
  if (ep->is_in != 0U)
 800219c:	b323      	cbz	r3, 80021e8 <USB_EPClearStall+0x52>
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800219e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80021a2:	065b      	lsls	r3, r3, #25
 80021a4:	d50d      	bpl.n	80021c2 <USB_EPClearStall+0x2c>
 80021a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80021aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b2:	041b      	lsls	r3, r3, #16
 80021b4:	0c1b      	lsrs	r3, r3, #16
 80021b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021be:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80021c2:	780a      	ldrb	r2, [r1, #0]
 80021c4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80021c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021d0:	041b      	lsls	r3, r3, #16
 80021d2:	0c1b      	lsrs	r3, r3, #16
 80021d4:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80021d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 80021e4:	2000      	movs	r0, #0
 80021e6:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80021e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80021ec:	045b      	lsls	r3, r3, #17
 80021ee:	d50d      	bpl.n	800220c <USB_EPClearStall+0x76>
 80021f0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80021f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fc:	041b      	lsls	r3, r3, #16
 80021fe:	0c1b      	lsrs	r3, r3, #16
 8002200:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002208:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800220c:	780a      	ldrb	r2, [r1, #0]
 800220e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800221a:	041b      	lsls	r3, r3, #16
 800221c:	0c1b      	lsrs	r3, r3, #16
 800221e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002222:	e7d9      	b.n	80021d8 <USB_EPClearStall+0x42>

08002224 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002224:	b911      	cbnz	r1, 800222c <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800222c:	2000      	movs	r0, #0
 800222e:	4770      	bx	lr

08002230 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8002230:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8002234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800223c:	b29b      	uxth	r3, r3
 800223e:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8002242:	2000      	movs	r0, #0
 8002244:	4770      	bx	lr

08002246 <USB_DevDisconnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8002246:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 800224a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800224e:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8002252:	2000      	movs	r0, #0
 8002254:	4770      	bx	lr

08002256 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8002256:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800225a:	b280      	uxth	r0, r0
 800225c:	4770      	bx	lr

0800225e <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800225e:	2000      	movs	r0, #0
 8002260:	4770      	bx	lr

08002262 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002262:	b510      	push	{r4, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002264:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002268:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800226a:	4410      	add	r0, r2
 800226c:	f023 0301 	bic.w	r3, r3, #1
 8002270:	4602      	mov	r2, r0
 8002272:	4403      	add	r3, r0
 8002274:	1a14      	subs	r4, r2, r0

  for (i = n; i != 0U; i--)
 8002276:	429a      	cmp	r2, r3
 8002278:	440c      	add	r4, r1
 800227a:	d100      	bne.n	800227e <USB_WritePMA+0x1c>
    {
      pdwVal++;
    }
    pBuf++;
  }
}
 800227c:	bd10      	pop	{r4, pc}
 800227e:	8824      	ldrh	r4, [r4, #0]
    *pdwVal = (uint16_t)temp2;
 8002280:	f822 4b02 	strh.w	r4, [r2], #2
 8002284:	e7f6      	b.n	8002274 <USB_WritePMA+0x12>
	...

08002288 <USB_EPStartXfer>:
{
 8002288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228a:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 800228c:	7848      	ldrb	r0, [r1, #1]
  uint32_t len = ep->xfer_len;
 800228e:	698a      	ldr	r2, [r1, #24]
 8002290:	690b      	ldr	r3, [r1, #16]
 8002292:	7b0f      	ldrb	r7, [r1, #12]
  if (ep->is_in == 1U)
 8002294:	2801      	cmp	r0, #1
{
 8002296:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8002298:	d16b      	bne.n	8002372 <USB_EPStartXfer+0xea>
    if (ep->xfer_len > ep->maxpacket)
 800229a:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 800229c:	bf97      	itett	ls
 800229e:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 80022a0:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 80022a2:	618b      	strls	r3, [r1, #24]
 80022a4:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 80022a6:	bf88      	it	hi
 80022a8:	618a      	strhi	r2, [r1, #24]
 80022aa:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 80022ac:	bb0f      	cbnz	r7, 80022f2 <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80022ae:	88ca      	ldrh	r2, [r1, #6]
 80022b0:	6949      	ldr	r1, [r1, #20]
 80022b2:	4633      	mov	r3, r6
 80022b4:	4620      	mov	r0, r4
 80022b6:	f7ff ffd4 	bl	8002262 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80022ba:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80022be:	782a      	ldrb	r2, [r5, #0]
 80022c0:	f204 4102 	addw	r1, r4, #1026	; 0x402
 80022c4:	fa11 f383 	uxtah	r3, r1, r3
 80022c8:	f823 6032 	strh.w	r6, [r3, r2, lsl #3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80022cc:	782a      	ldrb	r2, [r5, #0]
 80022ce:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80022d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022da:	041b      	lsls	r3, r3, #16
 80022dc:	0c1b      	lsrs	r3, r3, #16
 80022de:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80022e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ea:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 80022ee:	2000      	movs	r0, #0
 80022f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80022f2:	7809      	ldrb	r1, [r1, #0]
 80022f4:	b20a      	sxth	r2, r1
 80022f6:	f834 2022 	ldrh.w	r2, [r4, r2, lsl #2]
 80022fa:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80022fe:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002302:	bf15      	itete	ne
 8002304:	f204 4006 	addwne	r0, r4, #1030	; 0x406
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002308:	f204 4002 	addweq	r0, r4, #1026	; 0x402
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800230c:	fa10 f282 	uxtahne	r2, r0, r2
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002310:	fa10 f282 	uxtaheq	r2, r0, r2
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002314:	bf15      	itete	ne
 8002316:	f822 3031 	strhne.w	r3, [r2, r1, lsl #3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800231a:	f822 3031 	strheq.w	r3, [r2, r1, lsl #3]
        pmabuffer = ep->pmaaddr1;
 800231e:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8002320:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002322:	6969      	ldr	r1, [r5, #20]
 8002324:	4633      	mov	r3, r6
 8002326:	4620      	mov	r0, r4
 8002328:	f7ff ff9b 	bl	8002262 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800232c:	786b      	ldrb	r3, [r5, #1]
 800232e:	782a      	ldrb	r2, [r5, #0]
 8002330:	b97b      	cbnz	r3, 8002352 <USB_EPStartXfer+0xca>
 8002332:	b212      	sxth	r2, r2
 8002334:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800233c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002340:	041b      	lsls	r3, r3, #16
 8002342:	0c1b      	lsrs	r3, r3, #16
 8002344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002348:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800234c:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8002350:	e7bc      	b.n	80022cc <USB_EPStartXfer+0x44>
 8002352:	2b01      	cmp	r3, #1
 8002354:	d1ba      	bne.n	80022cc <USB_EPStartXfer+0x44>
 8002356:	b212      	sxth	r2, r2
 8002358:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800235c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002364:	041b      	lsls	r3, r3, #16
 8002366:	0c1b      	lsrs	r3, r3, #16
 8002368:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800236c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002370:	e7ec      	b.n	800234c <USB_EPStartXfer+0xc4>
    if (ep->xfer_len > ep->maxpacket)
 8002372:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8002374:	bf95      	itete	ls
 8002376:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8002378:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 800237a:	618b      	strls	r3, [r1, #24]
      ep->xfer_len -= len;
 800237c:	618a      	strhi	r2, [r1, #24]
      ep->xfer_len = 0U;
 800237e:	bf98      	it	ls
 8002380:	4613      	movls	r3, r2
 8002382:	7809      	ldrb	r1, [r1, #0]
    if (ep->doublebuffer == 0U)
 8002384:	b9a7      	cbnz	r7, 80023b0 <USB_EPStartXfer+0x128>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002386:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 800238a:	f204 4006 	addw	r0, r4, #1030	; 0x406
 800238e:	fa10 f282 	uxtah	r2, r0, r2
 8002392:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002396:	2b00      	cmp	r3, #0
 8002398:	d137      	bne.n	800240a <USB_EPStartXfer+0x182>
 800239a:	8813      	ldrh	r3, [r2, #0]
 800239c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80023a0:	049b      	lsls	r3, r3, #18
 80023a2:	0c9b      	lsrs	r3, r3, #18
 80023a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023ac:	8013      	strh	r3, [r2, #0]
 80023ae:	e034      	b.n	800241a <USB_EPStartXfer+0x192>
 80023b0:	b990      	cbnz	r0, 80023d8 <USB_EPStartXfer+0x150>
 80023b2:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80023b6:	f204 4002 	addw	r0, r4, #1026	; 0x402
 80023ba:	fa10 f282 	uxtah	r2, r0, r2
 80023be:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80023c2:	b9ab      	cbnz	r3, 80023f0 <USB_EPStartXfer+0x168>
 80023c4:	8811      	ldrh	r1, [r2, #0]
 80023c6:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 80023ca:	0489      	lsls	r1, r1, #18
 80023cc:	0c89      	lsrs	r1, r1, #18
 80023ce:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80023d2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80023d6:	8011      	strh	r1, [r2, #0]
 80023d8:	786a      	ldrb	r2, [r5, #1]
 80023da:	7828      	ldrb	r0, [r5, #0]
 80023dc:	bb72      	cbnz	r2, 800243c <USB_EPStartXfer+0x1b4>
 80023de:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80023e2:	f204 4106 	addw	r1, r4, #1030	; 0x406
 80023e6:	fa11 f282 	uxtah	r2, r1, r2
 80023ea:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80023ee:	e7d2      	b.n	8002396 <USB_EPStartXfer+0x10e>
 80023f0:	2b3d      	cmp	r3, #61	; 0x3d
 80023f2:	d805      	bhi.n	8002400 <USB_EPStartXfer+0x178>
 80023f4:	0859      	lsrs	r1, r3, #1
 80023f6:	07d8      	lsls	r0, r3, #31
 80023f8:	bf48      	it	mi
 80023fa:	3101      	addmi	r1, #1
 80023fc:	0289      	lsls	r1, r1, #10
 80023fe:	e7ea      	b.n	80023d6 <USB_EPStartXfer+0x14e>
 8002400:	4814      	ldr	r0, [pc, #80]	; (8002454 <USB_EPStartXfer+0x1cc>)
 8002402:	0959      	lsrs	r1, r3, #5
 8002404:	ea40 2181 	orr.w	r1, r0, r1, lsl #10
 8002408:	e7e5      	b.n	80023d6 <USB_EPStartXfer+0x14e>
 800240a:	2b3d      	cmp	r3, #61	; 0x3d
 800240c:	d811      	bhi.n	8002432 <USB_EPStartXfer+0x1aa>
 800240e:	0859      	lsrs	r1, r3, #1
 8002410:	07db      	lsls	r3, r3, #31
 8002412:	bf48      	it	mi
 8002414:	3101      	addmi	r1, #1
 8002416:	0289      	lsls	r1, r1, #10
 8002418:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800241a:	782a      	ldrb	r2, [r5, #0]
 800241c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002428:	041b      	lsls	r3, r3, #16
 800242a:	0c1b      	lsrs	r3, r3, #16
 800242c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002430:	e757      	b.n	80022e2 <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002432:	0959      	lsrs	r1, r3, #5
 8002434:	4b07      	ldr	r3, [pc, #28]	; (8002454 <USB_EPStartXfer+0x1cc>)
 8002436:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800243a:	e7b7      	b.n	80023ac <USB_EPStartXfer+0x124>
 800243c:	2a01      	cmp	r2, #1
 800243e:	bf01      	itttt	eq
 8002440:	f8b4 1050 	ldrheq.w	r1, [r4, #80]	; 0x50
 8002444:	f204 4206 	addweq	r2, r4, #1030	; 0x406
 8002448:	fa12 f181 	uxtaheq	r1, r2, r1
 800244c:	f821 3030 	strheq.w	r3, [r1, r0, lsl #3]
 8002450:	e7e3      	b.n	800241a <USB_EPStartXfer+0x192>
 8002452:	bf00      	nop
 8002454:	ffff8000 	.word	0xffff8000

08002458 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002458:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 800245c:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800245e:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002460:	085d      	lsrs	r5, r3, #1
 8002462:	460a      	mov	r2, r1
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002464:	4607      	mov	r7, r0

  for (i = n; i != 0U; i--)
 8002466:	462e      	mov	r6, r5
 8002468:	3202      	adds	r2, #2
 800246a:	b936      	cbnz	r6, 800247a <USB_ReadPMA+0x22>
    {
      pdwVal++;
    }
  }

  if ((wNBytes % 2U) != 0U)
 800246c:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800246e:	bf44      	itt	mi
 8002470:	f830 3015 	ldrhmi.w	r3, [r0, r5, lsl #1]
 8002474:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *pdwVal;
 800247a:	f837 4b02 	ldrh.w	r4, [r7], #2
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800247e:	f802 4c02 	strb.w	r4, [r2, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8002482:	0a24      	lsrs	r4, r4, #8
 8002484:	f802 4c01 	strb.w	r4, [r2, #-1]
  for (i = n; i != 0U; i--)
 8002488:	3e01      	subs	r6, #1
 800248a:	e7ed      	b.n	8002468 <USB_ReadPMA+0x10>

0800248c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800248c:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
{
 8002490:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002492:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002496:	b15b      	cbz	r3, 80024b0 <USBD_CDC_EP0_RxReady+0x24>
 8002498:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800249c:	28ff      	cmp	r0, #255	; 0xff
 800249e:	d007      	beq.n	80024b0 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80024a6:	4621      	mov	r1, r4
 80024a8:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 80024aa:	23ff      	movs	r3, #255	; 0xff
 80024ac:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80024b0:	2000      	movs	r0, #0
 80024b2:	bd10      	pop	{r4, pc}

080024b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80024b4:	2343      	movs	r3, #67	; 0x43
 80024b6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80024b8:	4800      	ldr	r0, [pc, #0]	; (80024bc <USBD_CDC_GetFSCfgDesc+0x8>)
 80024ba:	4770      	bx	lr
 80024bc:	20000038 	.word	0x20000038

080024c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80024c0:	2343      	movs	r3, #67	; 0x43
 80024c2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80024c4:	4800      	ldr	r0, [pc, #0]	; (80024c8 <USBD_CDC_GetHSCfgDesc+0x8>)
 80024c6:	4770      	bx	lr
 80024c8:	2000007c 	.word	0x2000007c

080024cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80024cc:	2343      	movs	r3, #67	; 0x43
 80024ce:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80024d0:	4800      	ldr	r0, [pc, #0]	; (80024d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80024d2:	4770      	bx	lr
 80024d4:	200000cc 	.word	0x200000cc

080024d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80024d8:	230a      	movs	r3, #10
 80024da:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80024dc:	4800      	ldr	r0, [pc, #0]	; (80024e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80024de:	4770      	bx	lr
 80024e0:	200000c0 	.word	0x200000c0

080024e4 <USBD_CDC_DataOut>:
{
 80024e4:	b538      	push	{r3, r4, r5, lr}
 80024e6:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80024e8:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80024ec:	f001 f946 	bl	800377c <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 80024f0:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80024f4:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 80024f8:	b14b      	cbz	r3, 800250e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80024fa:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 80024fe:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8002508:	4798      	blx	r3
    return USBD_OK;
 800250a:	2000      	movs	r0, #0
 800250c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800250e:	2002      	movs	r0, #2
}
 8002510:	bd38      	pop	{r3, r4, r5, pc}

08002512 <USBD_CDC_DataIn>:
{
 8002512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8002514:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 8002518:	b1ce      	cbz	r6, 800254e <USBD_CDC_DataIn+0x3c>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800251a:	2314      	movs	r3, #20
 800251c:	fb03 0301 	mla	r3, r3, r1, r0
 8002520:	69da      	ldr	r2, [r3, #28]
 8002522:	b182      	cbz	r2, 8002546 <USBD_CDC_DataIn+0x34>
 8002524:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 8002528:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 800252c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800252e:	fbb2 f4f5 	udiv	r4, r2, r5
 8002532:	fb05 2414 	mls	r4, r5, r4, r2
 8002536:	b934      	cbnz	r4, 8002546 <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8002538:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800253a:	4622      	mov	r2, r4
 800253c:	4623      	mov	r3, r4
 800253e:	f001 f901 	bl	8003744 <USBD_LL_Transmit>
    return USBD_OK;
 8002542:	4620      	mov	r0, r4
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8002544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8002546:	2000      	movs	r0, #0
 8002548:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 800254c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 800254e:	2002      	movs	r0, #2
}
 8002550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002552 <USBD_CDC_Setup>:
{
 8002552:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002556:	780a      	ldrb	r2, [r1, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002558:	f8d0 7290 	ldr.w	r7, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 800255c:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002560:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8002564:	4605      	mov	r5, r0
 8002566:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 8002568:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 800256c:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002570:	d028      	beq.n	80025c4 <USBD_CDC_Setup+0x72>
 8002572:	2c20      	cmp	r4, #32
 8002574:	d147      	bne.n	8002606 <USBD_CDC_Setup+0xb4>
    if (req->wLength)
 8002576:	88cc      	ldrh	r4, [r1, #6]
 8002578:	784b      	ldrb	r3, [r1, #1]
 800257a:	b1e4      	cbz	r4, 80025b6 <USBD_CDC_Setup+0x64>
      if (req->bmRequest & 0x80U)
 800257c:	0612      	lsls	r2, r2, #24
 800257e:	d511      	bpl.n	80025a4 <USBD_CDC_Setup+0x52>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002580:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8002584:	4639      	mov	r1, r7
 8002586:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800258a:	4618      	mov	r0, r3
 800258c:	4622      	mov	r2, r4
 800258e:	47c8      	blx	r9
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002590:	88f2      	ldrh	r2, [r6, #6]
 8002592:	4639      	mov	r1, r7
 8002594:	4628      	mov	r0, r5
 8002596:	f000 fc27 	bl	8002de8 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800259a:	4644      	mov	r4, r8
}
 800259c:	4620      	mov	r0, r4
 800259e:	b003      	add	sp, #12
 80025a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hcdc->CmdOpCode = req->bRequest;
 80025a4:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80025a8:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80025ac:	4622      	mov	r2, r4
 80025ae:	4639      	mov	r1, r7
 80025b0:	f000 fc2f 	bl	8002e12 <USBD_CtlPrepareRx>
 80025b4:	e7f1      	b.n	800259a <USBD_CDC_Setup+0x48>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80025b6:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80025ba:	4618      	mov	r0, r3
 80025bc:	6895      	ldr	r5, [r2, #8]
 80025be:	4622      	mov	r2, r4
 80025c0:	47a8      	blx	r5
 80025c2:	e7eb      	b.n	800259c <USBD_CDC_Setup+0x4a>
    switch (req->bRequest)
 80025c4:	784f      	ldrb	r7, [r1, #1]
 80025c6:	2f0a      	cmp	r7, #10
 80025c8:	d00d      	beq.n	80025e6 <USBD_CDC_Setup+0x94>
 80025ca:	2f0b      	cmp	r7, #11
 80025cc:	d015      	beq.n	80025fa <USBD_CDC_Setup+0xa8>
 80025ce:	b9d7      	cbnz	r7, 8002606 <USBD_CDC_Setup+0xb4>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80025d0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d114      	bne.n	8002602 <USBD_CDC_Setup+0xb0>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80025d8:	2202      	movs	r2, #2
 80025da:	f10d 0106 	add.w	r1, sp, #6
 80025de:	f000 fc03 	bl	8002de8 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80025e2:	463c      	mov	r4, r7
 80025e4:	e7da      	b.n	800259c <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80025e6:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d109      	bne.n	8002602 <USBD_CDC_Setup+0xb0>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80025ee:	2201      	movs	r2, #1
 80025f0:	f10d 0105 	add.w	r1, sp, #5
 80025f4:	f000 fbf8 	bl	8002de8 <USBD_CtlSendData>
 80025f8:	e7d0      	b.n	800259c <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80025fa:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d0cc      	beq.n	800259c <USBD_CDC_Setup+0x4a>
        USBD_CtlError (pdev, req);
 8002602:	4631      	mov	r1, r6
 8002604:	4628      	mov	r0, r5
    USBD_CtlError (pdev, req);
 8002606:	f000 fbc8 	bl	8002d9a <USBD_CtlError>
    ret = USBD_FAIL;
 800260a:	2402      	movs	r4, #2
    break;
 800260c:	e7c6      	b.n	800259c <USBD_CDC_Setup+0x4a>

0800260e <USBD_CDC_DeInit>:
{
 800260e:	b538      	push	{r3, r4, r5, lr}
 8002610:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002612:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8002614:	2181      	movs	r1, #129	; 0x81
 8002616:	f001 f84d 	bl	80036b4 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800261a:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800261c:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800261e:	4620      	mov	r0, r4
 8002620:	f001 f848 	bl	80036b4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8002624:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8002628:	2182      	movs	r1, #130	; 0x82
 800262a:	4620      	mov	r0, r4
 800262c:	f001 f842 	bl	80036b4 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002630:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8002634:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 8002636:	b14b      	cbz	r3, 800264c <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002638:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002640:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8002644:	f001 f8c8 	bl	80037d8 <USBD_static_free>
    pdev->pClassData = NULL;
 8002648:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 800264c:	2000      	movs	r0, #0
 800264e:	bd38      	pop	{r3, r4, r5, pc}

08002650 <USBD_CDC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8002650:	7c03      	ldrb	r3, [r0, #16]
{
 8002652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002656:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8002658:	bbcb      	cbnz	r3, 80026ce <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800265a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800265e:	2202      	movs	r2, #2
 8002660:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002662:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002664:	f001 f816 	bl	8003694 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002668:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800266a:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800266e:	4629      	mov	r1, r5
 8002670:	2202      	movs	r2, #2
 8002672:	4620      	mov	r0, r4
 8002674:	f001 f80e 	bl	8003694 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002678:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800267c:	2308      	movs	r3, #8
 800267e:	2203      	movs	r2, #3
 8002680:	2182      	movs	r1, #130	; 0x82
 8002682:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002684:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002686:	f001 f805 	bl	8003694 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800268a:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800268c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002690:	f001 f89e 	bl	80037d0 <USBD_static_malloc>
 8002694:	4606      	mov	r6, r0
 8002696:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 800269a:	b358      	cbz	r0, 80026f4 <USBD_CDC_Init+0xa4>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800269c:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80026a4:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 80026a8:	2700      	movs	r7, #0
 80026aa:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 80026ae:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80026b2:	f1b8 0f00 	cmp.w	r8, #0
 80026b6:	d113      	bne.n	80026e0 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80026b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026bc:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80026c0:	4629      	mov	r1, r5
 80026c2:	4620      	mov	r0, r4
 80026c4:	f001 f84c 	bl	8003760 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80026c8:	4640      	mov	r0, r8
 80026ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80026ce:	2340      	movs	r3, #64	; 0x40
 80026d0:	2202      	movs	r2, #2
 80026d2:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80026d4:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80026d6:	f000 ffdd 	bl	8003694 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80026da:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80026dc:	2340      	movs	r3, #64	; 0x40
 80026de:	e7c6      	b.n	800266e <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80026e0:	2340      	movs	r3, #64	; 0x40
 80026e2:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80026e6:	4629      	mov	r1, r5
 80026e8:	4620      	mov	r0, r4
 80026ea:	f001 f839 	bl	8003760 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80026ee:	4638      	mov	r0, r7
 80026f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 80026f4:	4628      	mov	r0, r5
}
 80026f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080026fa <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 80026fa:	b119      	cbz	r1, 8002704 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80026fc:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 8002700:	2000      	movs	r0, #0
 8002702:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002704:	2002      	movs	r0, #2
  }

  return ret;
}
 8002706:	4770      	bx	lr

08002708 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002708:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 800270c:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800270e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8002712:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8002716:	4770      	bx	lr

08002718 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8002718:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  return USBD_OK;
}
 800271c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800271e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8002722:	4770      	bx	lr

08002724 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002724:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 8002728:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800272a:	b162      	cbz	r2, 8002746 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800272c:	7c04      	ldrb	r4, [r0, #16]
 800272e:	b944      	cbnz	r4, 8002742 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002730:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002734:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002738:	2101      	movs	r1, #1
 800273a:	f001 f811 	bl	8003760 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800273e:	2000      	movs	r0, #0
 8002740:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8002742:	2340      	movs	r3, #64	; 0x40
 8002744:	e7f6      	b.n	8002734 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8002746:	2002      	movs	r0, #2
  }
}
 8002748:	bd10      	pop	{r4, pc}

0800274a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800274a:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800274c:	b180      	cbz	r0, 8002770 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800274e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002752:	b113      	cbz	r3, 800275a <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002754:	2300      	movs	r3, #0
 8002756:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800275a:	b109      	cbz	r1, 8002760 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800275c:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002760:	2301      	movs	r3, #1
 8002762:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 8002766:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002768:	f000 ff3a 	bl	80035e0 <USBD_LL_Init>

  return USBD_OK;
 800276c:	2000      	movs	r0, #0
 800276e:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8002770:	2002      	movs	r0, #2
}
 8002772:	bd08      	pop	{r3, pc}

08002774 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002774:	b119      	cbz	r1, 800277e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002776:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 800277a:	2000      	movs	r0, #0
 800277c:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800277e:	2002      	movs	r0, #2
  }

  return status;
}
 8002780:	4770      	bx	lr

08002782 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002782:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8002784:	f000 ff78 	bl	8003678 <USBD_LL_Start>

  return USBD_OK;
}
 8002788:	2000      	movs	r0, #0
 800278a:	bd08      	pop	{r3, pc}

0800278c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800278c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 800278e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002792:	b90b      	cbnz	r3, 8002798 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002794:	2002      	movs	r0, #2
 8002796:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4798      	blx	r3
 800279c:	2800      	cmp	r0, #0
 800279e:	d1f9      	bne.n	8002794 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 80027a0:	bd08      	pop	{r3, pc}

080027a2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80027a2:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80027a4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4798      	blx	r3
  return USBD_OK;
}
 80027ac:	2000      	movs	r0, #0
 80027ae:	bd08      	pop	{r3, pc}

080027b0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80027b0:	b538      	push	{r3, r4, r5, lr}
 80027b2:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80027b4:	f500 7520 	add.w	r5, r0, #640	; 0x280
 80027b8:	4628      	mov	r0, r5
 80027ba:	f000 fada 	bl	8002d72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80027be:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80027c0:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 80027c4:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 80027c8:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 80027cc:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 80027d0:	f001 031f 	and.w	r3, r1, #31
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d00e      	beq.n	80027f6 <USBD_LL_SetupStage+0x46>
 80027d8:	d307      	bcc.n	80027ea <USBD_LL_SetupStage+0x3a>
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d010      	beq.n	8002800 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80027de:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80027e2:	4620      	mov	r0, r4
 80027e4:	f000 ff74 	bl	80036d0 <USBD_LL_StallEP>
    break;
 80027e8:	e003      	b.n	80027f2 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80027ea:	4629      	mov	r1, r5
 80027ec:	4620      	mov	r0, r4
 80027ee:	f000 f8f1 	bl	80029d4 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80027f2:	2000      	movs	r0, #0
 80027f4:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80027f6:	4629      	mov	r1, r5
 80027f8:	4620      	mov	r0, r4
 80027fa:	f000 fa0d 	bl	8002c18 <USBD_StdItfReq>
    break;
 80027fe:	e7f8      	b.n	80027f2 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8002800:	4629      	mov	r1, r5
 8002802:	4620      	mov	r0, r4
 8002804:	f000 fa2d 	bl	8002c62 <USBD_StdEPReq>
    break;
 8002808:	e7f3      	b.n	80027f2 <USBD_LL_SetupStage+0x42>

0800280a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800280a:	b570      	push	{r4, r5, r6, lr}
 800280c:	4605      	mov	r5, r0
 800280e:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8002810:	bb39      	cbnz	r1, 8002862 <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002812:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8002816:	2b03      	cmp	r3, #3
 8002818:	d11e      	bne.n	8002858 <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 800281a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800281e:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8002822:	4293      	cmp	r3, r2
 8002824:	d90b      	bls.n	800283e <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002826:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 8002828:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800282a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 800282e:	bf8c      	ite	hi
 8002830:	b29a      	uxthhi	r2, r3
 8002832:	b292      	uxthls	r2, r2
 8002834:	4631      	mov	r1, r6
 8002836:	f000 fafb 	bl	8002e30 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800283a:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 800283c:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800283e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	b123      	cbz	r3, 8002850 <USBD_LL_DataOutStage+0x46>
 8002846:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800284a:	2a03      	cmp	r2, #3
 800284c:	d100      	bne.n	8002850 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 800284e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002850:	4628      	mov	r0, r5
 8002852:	f000 faf5 	bl	8002e40 <USBD_CtlSendStatus>
 8002856:	e7f0      	b.n	800283a <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8002858:	2b05      	cmp	r3, #5
 800285a:	d1ee      	bne.n	800283a <USBD_LL_DataOutStage+0x30>
        USBD_LL_StallEP(pdev, 0U);
 800285c:	f000 ff38 	bl	80036d0 <USBD_LL_StallEP>
 8002860:	e7eb      	b.n	800283a <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 8002862:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	b12b      	cbz	r3, 8002876 <USBD_LL_DataOutStage+0x6c>
 800286a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800286e:	2a03      	cmp	r2, #3
 8002870:	d101      	bne.n	8002876 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8002872:	4798      	blx	r3
 8002874:	e7e1      	b.n	800283a <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8002876:	2002      	movs	r0, #2
}
 8002878:	bd70      	pop	{r4, r5, r6, pc}

0800287a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800287a:	b570      	push	{r4, r5, r6, lr}
 800287c:	4613      	mov	r3, r2
 800287e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8002880:	460e      	mov	r6, r1
 8002882:	2900      	cmp	r1, #0
 8002884:	d148      	bne.n	8002918 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002886:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800288a:	2a02      	cmp	r2, #2
 800288c:	d13d      	bne.n	800290a <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800288e:	6a05      	ldr	r5, [r0, #32]
 8002890:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002892:	4295      	cmp	r5, r2
 8002894:	d914      	bls.n	80028c0 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8002896:	1aaa      	subs	r2, r5, r2
 8002898:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800289a:	4619      	mov	r1, r3
 800289c:	b292      	uxth	r2, r2
 800289e:	f000 fab0 	bl	8002e02 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80028a2:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80028a4:	461a      	mov	r2, r3
 80028a6:	4619      	mov	r1, r3
 80028a8:	4620      	mov	r0, r4
 80028aa:	f000 ff59 	bl	8003760 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80028ae:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	f04f 0000 	mov.w	r0, #0
 80028b8:	d13a      	bne.n	8002930 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80028ba:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 80028be:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 80028c0:	69c3      	ldr	r3, [r0, #28]
 80028c2:	fbb3 f5f2 	udiv	r5, r3, r2
 80028c6:	fb02 3515 	mls	r5, r2, r5, r3
 80028ca:	b965      	cbnz	r5, 80028e6 <USBD_LL_DataInStage+0x6c>
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d80a      	bhi.n	80028e6 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80028d0:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d206      	bcs.n	80028e6 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80028d8:	462a      	mov	r2, r5
 80028da:	f000 fa92 	bl	8002e02 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80028de:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80028e2:	462b      	mov	r3, r5
 80028e4:	e7de      	b.n	80028a4 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80028e6:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	b12b      	cbz	r3, 80028fa <USBD_LL_DataInStage+0x80>
 80028ee:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 80028f2:	2a03      	cmp	r2, #3
 80028f4:	d101      	bne.n	80028fa <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 80028f6:	4620      	mov	r0, r4
 80028f8:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80028fa:	2180      	movs	r1, #128	; 0x80
 80028fc:	4620      	mov	r0, r4
 80028fe:	f000 fee7 	bl	80036d0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8002902:	4620      	mov	r0, r4
 8002904:	f000 faa7 	bl	8002e56 <USBD_CtlReceiveStatus>
 8002908:	e7d1      	b.n	80028ae <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800290a:	f032 0304 	bics.w	r3, r2, #4
 800290e:	d1ce      	bne.n	80028ae <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8002910:	2180      	movs	r1, #128	; 0x80
 8002912:	f000 fedd 	bl	80036d0 <USBD_LL_StallEP>
 8002916:	e7ca      	b.n	80028ae <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8002918:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	b133      	cbz	r3, 800292e <USBD_LL_DataInStage+0xb4>
 8002920:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002924:	2a03      	cmp	r2, #3
 8002926:	d102      	bne.n	800292e <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8002928:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800292a:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 800292c:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800292e:	2002      	movs	r0, #2
}
 8002930:	bd70      	pop	{r4, r5, r6, pc}

08002932 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8002932:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002934:	2200      	movs	r2, #0
{
 8002936:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002938:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800293a:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800293c:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800293e:	2340      	movs	r3, #64	; 0x40
 8002940:	f000 fea8 	bl	8003694 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002944:	4633      	mov	r3, r6
 8002946:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002948:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800294c:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002950:	2200      	movs	r2, #0
 8002952:	4620      	mov	r0, r4
 8002954:	f000 fe9e 	bl	8003694 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8002958:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800295c:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 800295e:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002960:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002962:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8002966:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 800296a:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800296c:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 8002970:	b123      	cbz	r3, 800297c <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002972:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8002976:	4620      	mov	r0, r4
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4798      	blx	r3
  }

  return USBD_OK;
}
 800297c:	2000      	movs	r0, #0
 800297e:	bd70      	pop	{r4, r5, r6, pc}

08002980 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002980:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002982:	2000      	movs	r0, #0
 8002984:	4770      	bx	lr

08002986 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002986:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800298a:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800298e:	2304      	movs	r3, #4
 8002990:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8002994:	2000      	movs	r0, #0
 8002996:	4770      	bx	lr

08002998 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8002998:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 800299c:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 80029a0:	2000      	movs	r0, #0
 80029a2:	4770      	bx	lr

080029a4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80029a4:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80029a6:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80029aa:	2a03      	cmp	r2, #3
 80029ac:	d104      	bne.n	80029b8 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 80029ae:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	b103      	cbz	r3, 80029b8 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80029b6:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80029b8:	2000      	movs	r0, #0
 80029ba:	bd08      	pop	{r3, pc}

080029bc <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80029bc:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 80029be:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80029c0:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 80029c2:	f000 fe85 	bl	80036d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80029c6:	4620      	mov	r0, r4
 80029c8:	2100      	movs	r1, #0
}
 80029ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 80029ce:	f000 be7f 	b.w	80036d0 <USBD_LL_StallEP>
	...

080029d4 <USBD_StdDevReq>:
{
 80029d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80029d6:	780b      	ldrb	r3, [r1, #0]
 80029d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80029dc:	2b20      	cmp	r3, #32
{
 80029de:	4604      	mov	r4, r0
 80029e0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80029e2:	d014      	beq.n	8002a0e <USBD_StdDevReq+0x3a>
 80029e4:	2b40      	cmp	r3, #64	; 0x40
 80029e6:	d012      	beq.n	8002a0e <USBD_StdDevReq+0x3a>
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f040 8095 	bne.w	8002b18 <USBD_StdDevReq+0x144>
    switch (req->bRequest)
 80029ee:	784b      	ldrb	r3, [r1, #1]
 80029f0:	2b09      	cmp	r3, #9
 80029f2:	f200 8090 	bhi.w	8002b16 <USBD_StdDevReq+0x142>
 80029f6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80029fa:	00e7      	.short	0x00e7
 80029fc:	008e0101 	.word	0x008e0101
 8002a00:	008e00fa 	.word	0x008e00fa
 8002a04:	00130082 	.word	0x00130082
 8002a08:	00d2008e 	.word	0x00d2008e
 8002a0c:	00a0      	.short	0x00a0
    pdev->pClass->Setup(pdev, req);
 8002a0e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8002a12:	4629      	mov	r1, r5
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	4620      	mov	r0, r4
 8002a18:	4798      	blx	r3
}
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	b003      	add	sp, #12
 8002a1e:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 8002a20:	884b      	ldrh	r3, [r1, #2]
 8002a22:	0a1a      	lsrs	r2, r3, #8
 8002a24:	3a01      	subs	r2, #1
 8002a26:	2a0e      	cmp	r2, #14
 8002a28:	d875      	bhi.n	8002b16 <USBD_StdDevReq+0x142>
 8002a2a:	e8df f002 	tbb	[pc, r2]
 8002a2e:	2824      	.short	0x2824
 8002a30:	55747435 	.word	0x55747435
 8002a34:	7474745e 	.word	0x7474745e
 8002a38:	74747474 	.word	0x74747474
 8002a3c:	08          	.byte	0x08
 8002a3d:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8002a3e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002a42:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002a44:	7c20      	ldrb	r0, [r4, #16]
 8002a46:	f10d 0106 	add.w	r1, sp, #6
 8002a4a:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 8002a4c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002a50:	b152      	cbz	r2, 8002a68 <USBD_StdDevReq+0x94>
 8002a52:	88eb      	ldrh	r3, [r5, #6]
 8002a54:	b143      	cbz	r3, 8002a68 <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 8002a56:	429a      	cmp	r2, r3
 8002a58:	bf28      	it	cs
 8002a5a:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8002a5c:	4601      	mov	r1, r0
 8002a5e:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8002a60:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8002a64:	f000 f9c0 	bl	8002de8 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8002a68:	88eb      	ldrh	r3, [r5, #6]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1d5      	bne.n	8002a1a <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f000 f9e6 	bl	8002e40 <USBD_CtlSendStatus>
 8002a74:	e7d1      	b.n	8002a1a <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002a76:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	e7e2      	b.n	8002a44 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8002a7e:	7c02      	ldrb	r2, [r0, #16]
 8002a80:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002a84:	b932      	cbnz	r2, 8002a94 <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002a88:	f10d 0006 	add.w	r0, sp, #6
 8002a8c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002a8e:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002a90:	7043      	strb	r3, [r0, #1]
 8002a92:	e7db      	b.n	8002a4c <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	e7f7      	b.n	8002a88 <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b05      	cmp	r3, #5
 8002a9c:	d83b      	bhi.n	8002b16 <USBD_StdDevReq+0x142>
 8002a9e:	e8df f003 	tbb	[pc, r3]
 8002aa2:	0703      	.short	0x0703
 8002aa4:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8002aa8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	e7c9      	b.n	8002a44 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002ab0:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	e7c5      	b.n	8002a44 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002ab8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	e7c1      	b.n	8002a44 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002ac0:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	e7bd      	b.n	8002a44 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002ac8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	e7b9      	b.n	8002a44 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002ad0:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	e7b5      	b.n	8002a44 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8002ad8:	7c03      	ldrb	r3, [r0, #16]
 8002ada:	b9e3      	cbnz	r3, 8002b16 <USBD_StdDevReq+0x142>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002adc:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002ae0:	f10d 0006 	add.w	r0, sp, #6
 8002ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae6:	4798      	blx	r3
 8002ae8:	e7b0      	b.n	8002a4c <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8002aea:	7c03      	ldrb	r3, [r0, #16]
 8002aec:	b99b      	cbnz	r3, 8002b16 <USBD_StdDevReq+0x142>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002aee:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002af2:	f10d 0006 	add.w	r0, sp, #6
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002afa:	2307      	movs	r3, #7
 8002afc:	e7c8      	b.n	8002a90 <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8002afe:	888b      	ldrh	r3, [r1, #4]
 8002b00:	b94b      	cbnz	r3, 8002b16 <USBD_StdDevReq+0x142>
 8002b02:	88cb      	ldrh	r3, [r1, #6]
 8002b04:	b93b      	cbnz	r3, 8002b16 <USBD_StdDevReq+0x142>
 8002b06:	884d      	ldrh	r5, [r1, #2]
 8002b08:	2d7f      	cmp	r5, #127	; 0x7f
 8002b0a:	d804      	bhi.n	8002b16 <USBD_StdDevReq+0x142>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002b0c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002b10:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8002b12:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002b14:	d103      	bne.n	8002b1e <USBD_StdDevReq+0x14a>
      USBD_CtlError(pdev, req);
 8002b16:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8002b18:	f7ff ff50 	bl	80029bc <USBD_CtlError.constprop.1>
    break;
 8002b1c:	e77d      	b.n	8002a1a <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 8002b1e:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8002b22:	f000 fe01 	bl	8003728 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8002b26:	4620      	mov	r0, r4
 8002b28:	f000 f98a 	bl	8002e40 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8002b2c:	b11d      	cbz	r5, 8002b36 <USBD_StdDevReq+0x162>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002b2e:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8002b30:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8002b34:	e771      	b.n	8002a1a <USBD_StdDevReq+0x46>
 8002b36:	2301      	movs	r3, #1
 8002b38:	e7fa      	b.n	8002b30 <USBD_StdDevReq+0x15c>
  cfgidx = (uint8_t)(req->wValue);
 8002b3a:	7889      	ldrb	r1, [r1, #2]
 8002b3c:	4d35      	ldr	r5, [pc, #212]	; (8002c14 <USBD_StdDevReq+0x240>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002b3e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8002b40:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002b42:	d8e8      	bhi.n	8002b16 <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 8002b44:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d008      	beq.n	8002b5e <USBD_StdDevReq+0x18a>
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d014      	beq.n	8002b7a <USBD_StdDevReq+0x1a6>
      USBD_CtlError(pdev, req);
 8002b50:	f7ff ff34 	bl	80029bc <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 8002b54:	7829      	ldrb	r1, [r5, #0]
 8002b56:	4620      	mov	r0, r4
 8002b58:	f7ff fe23 	bl	80027a2 <USBD_ClrClassConfig>
 8002b5c:	e75d      	b.n	8002a1a <USBD_StdDevReq+0x46>
      if (cfgidx)
 8002b5e:	2900      	cmp	r1, #0
 8002b60:	d085      	beq.n	8002a6e <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 8002b62:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002b64:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8002b66:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002b68:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f7ff fe0d 	bl	800278c <USBD_SetClassConfig>
 8002b72:	2802      	cmp	r0, #2
 8002b74:	f47f af7b 	bne.w	8002a6e <USBD_StdDevReq+0x9a>
 8002b78:	e7cd      	b.n	8002b16 <USBD_StdDevReq+0x142>
      if (cfgidx == 0U)
 8002b7a:	b931      	cbnz	r1, 8002b8a <USBD_StdDevReq+0x1b6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8002b82:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8002b84:	f7ff fe0d 	bl	80027a2 <USBD_ClrClassConfig>
 8002b88:	e771      	b.n	8002a6e <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 8002b8a:	6841      	ldr	r1, [r0, #4]
 8002b8c:	2901      	cmp	r1, #1
 8002b8e:	f43f af6e 	beq.w	8002a6e <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8002b92:	b2c9      	uxtb	r1, r1
 8002b94:	f7ff fe05 	bl	80027a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002b98:	7829      	ldrb	r1, [r5, #0]
 8002b9a:	6061      	str	r1, [r4, #4]
 8002b9c:	e7e6      	b.n	8002b6c <USBD_StdDevReq+0x198>
  if (req->wLength != 1U)
 8002b9e:	88ca      	ldrh	r2, [r1, #6]
 8002ba0:	2a01      	cmp	r2, #1
 8002ba2:	d1b8      	bne.n	8002b16 <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 8002ba4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0b4      	beq.n	8002b16 <USBD_StdDevReq+0x142>
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d903      	bls.n	8002bb8 <USBD_StdDevReq+0x1e4>
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d1b0      	bne.n	8002b16 <USBD_StdDevReq+0x142>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8002bb4:	1d01      	adds	r1, r0, #4
 8002bb6:	e003      	b.n	8002bc0 <USBD_StdDevReq+0x1ec>
      pdev->dev_default_config = 0U;
 8002bb8:	4601      	mov	r1, r0
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	f000 f911 	bl	8002de8 <USBD_CtlSendData>
 8002bc6:	e728      	b.n	8002a1a <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8002bc8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d8a1      	bhi.n	8002b16 <USBD_StdDevReq+0x142>
    if(req->wLength != 0x2U)
 8002bd2:	88cb      	ldrh	r3, [r1, #6]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d19e      	bne.n	8002b16 <USBD_StdDevReq+0x142>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8002bdc:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8002be0:	b10b      	cbz	r3, 8002be6 <USBD_StdDevReq+0x212>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8002be2:	2303      	movs	r3, #3
 8002be4:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002be6:	2202      	movs	r2, #2
 8002be8:	f104 010c 	add.w	r1, r4, #12
 8002bec:	e7e8      	b.n	8002bc0 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002bee:	884b      	ldrh	r3, [r1, #2]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	f47f af12 	bne.w	8002a1a <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 8002bf6:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 8002bfa:	e738      	b.n	8002a6e <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 8002bfc:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002c00:	3b01      	subs	r3, #1
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d887      	bhi.n	8002b16 <USBD_StdDevReq+0x142>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002c06:	884b      	ldrh	r3, [r1, #2]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	f47f af06 	bne.w	8002a1a <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e7f1      	b.n	8002bf6 <USBD_StdDevReq+0x222>
 8002c12:	bf00      	nop
 8002c14:	20000688 	.word	0x20000688

08002c18 <USBD_StdItfReq>:
{
 8002c18:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002c1a:	780b      	ldrb	r3, [r1, #0]
 8002c1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002c20:	2b20      	cmp	r3, #32
{
 8002c22:	4604      	mov	r4, r0
 8002c24:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002c26:	d002      	beq.n	8002c2e <USBD_StdItfReq+0x16>
 8002c28:	2b40      	cmp	r3, #64	; 0x40
 8002c2a:	d000      	beq.n	8002c2e <USBD_StdItfReq+0x16>
 8002c2c:	b9b3      	cbnz	r3, 8002c5c <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 8002c2e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8002c32:	3b01      	subs	r3, #1
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d810      	bhi.n	8002c5a <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8002c38:	792b      	ldrb	r3, [r5, #4]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d80d      	bhi.n	8002c5a <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8002c3e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8002c42:	4629      	mov	r1, r5
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	4620      	mov	r0, r4
 8002c48:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8002c4a:	88eb      	ldrh	r3, [r5, #6]
 8002c4c:	b91b      	cbnz	r3, 8002c56 <USBD_StdItfReq+0x3e>
 8002c4e:	b910      	cbnz	r0, 8002c56 <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 8002c50:	4620      	mov	r0, r4
 8002c52:	f000 f8f5 	bl	8002e40 <USBD_CtlSendStatus>
}
 8002c56:	2000      	movs	r0, #0
 8002c58:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 8002c5a:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8002c5c:	f7ff feae 	bl	80029bc <USBD_CtlError.constprop.1>
    break;
 8002c60:	e7f9      	b.n	8002c56 <USBD_StdItfReq+0x3e>

08002c62 <USBD_StdEPReq>:
{
 8002c62:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002c64:	780a      	ldrb	r2, [r1, #0]
 8002c66:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002c6a:	2a20      	cmp	r2, #32
{
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002c70:	d013      	beq.n	8002c9a <USBD_StdEPReq+0x38>
 8002c72:	2a40      	cmp	r2, #64	; 0x40
 8002c74:	d011      	beq.n	8002c9a <USBD_StdEPReq+0x38>
 8002c76:	b96a      	cbnz	r2, 8002c94 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8002c78:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8002c7a:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8002c7c:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8002c7e:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8002c80:	d01f      	beq.n	8002cc2 <USBD_StdEPReq+0x60>
 8002c82:	d335      	bcc.n	8002cf0 <USBD_StdEPReq+0x8e>
 8002c84:	2d03      	cmp	r5, #3
 8002c86:	d105      	bne.n	8002c94 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8002c88:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002c8c:	2a02      	cmp	r2, #2
 8002c8e:	d026      	beq.n	8002cde <USBD_StdEPReq+0x7c>
 8002c90:	2a03      	cmp	r2, #3
 8002c92:	d00a      	beq.n	8002caa <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 8002c94:	f7ff fe92 	bl	80029bc <USBD_CtlError.constprop.1>
    break;
 8002c98:	e005      	b.n	8002ca6 <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 8002c9a:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	6892      	ldr	r2, [r2, #8]
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	4790      	blx	r2
}
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 8002caa:	885a      	ldrh	r2, [r3, #2]
 8002cac:	b92a      	cbnz	r2, 8002cba <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8002cae:	064a      	lsls	r2, r1, #25
 8002cb0:	d003      	beq.n	8002cba <USBD_StdEPReq+0x58>
 8002cb2:	88db      	ldrh	r3, [r3, #6]
 8002cb4:	b90b      	cbnz	r3, 8002cba <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 8002cb6:	f000 fd0b 	bl	80036d0 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 8002cba:	4620      	mov	r0, r4
 8002cbc:	f000 f8c0 	bl	8002e40 <USBD_CtlSendStatus>
        break;
 8002cc0:	e7f1      	b.n	8002ca6 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8002cc2:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002cc6:	2a02      	cmp	r2, #2
 8002cc8:	d009      	beq.n	8002cde <USBD_StdEPReq+0x7c>
 8002cca:	2a03      	cmp	r2, #3
 8002ccc:	d1e2      	bne.n	8002c94 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8002cce:	885b      	ldrh	r3, [r3, #2]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e8      	bne.n	8002ca6 <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 8002cd4:	064d      	lsls	r5, r1, #25
 8002cd6:	d0f0      	beq.n	8002cba <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8002cd8:	f000 fd08 	bl	80036ec <USBD_LL_ClearStallEP>
 8002cdc:	e7ed      	b.n	8002cba <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8002cde:	064b      	lsls	r3, r1, #25
 8002ce0:	d017      	beq.n	8002d12 <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 8002ce2:	f000 fcf5 	bl	80036d0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8002ce6:	2180      	movs	r1, #128	; 0x80
 8002ce8:	4620      	mov	r0, r4
 8002cea:	f000 fcf1 	bl	80036d0 <USBD_LL_StallEP>
 8002cee:	e7da      	b.n	8002ca6 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8002cf0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d00e      	beq.n	8002d16 <USBD_StdEPReq+0xb4>
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d1cb      	bne.n	8002c94 <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 8002cfc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002d00:	f04f 0314 	mov.w	r3, #20
 8002d04:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002d08:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 8002d0c:	d012      	beq.n	8002d34 <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002d0e:	6992      	ldr	r2, [r2, #24]
 8002d10:	b9da      	cbnz	r2, 8002d4a <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 8002d12:	4620      	mov	r0, r4
 8002d14:	e7be      	b.n	8002c94 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8002d16:	0649      	lsls	r1, r1, #25
 8002d18:	d1fb      	bne.n	8002d12 <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8002d1a:	0613      	lsls	r3, r2, #24
 8002d1c:	bf4c      	ite	mi
 8002d1e:	f100 0114 	addmi.w	r1, r0, #20
 8002d22:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002d2a:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f000 f85b 	bl	8002de8 <USBD_CtlSendData>
          break;
 8002d32:	e7b8      	b.n	8002ca6 <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8002d34:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 8002d38:	2a00      	cmp	r2, #0
 8002d3a:	d0ea      	beq.n	8002d12 <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8002d3c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8002d40:	fb03 0505 	mla	r5, r3, r5, r0
 8002d44:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 8002d48:	e004      	b.n	8002d54 <USBD_StdEPReq+0xf2>
 8002d4a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8002d4e:	fb05 3503 	mla	r5, r5, r3, r3
 8002d52:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8002d54:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8002d58:	d103      	bne.n	8002d62 <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 8002d5a:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	4629      	mov	r1, r5
 8002d60:	e7e4      	b.n	8002d2c <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002d62:	4620      	mov	r0, r4
 8002d64:	f000 fcd0 	bl	8003708 <USBD_LL_IsStallEP>
 8002d68:	b108      	cbz	r0, 8002d6e <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e7f5      	b.n	8002d5a <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 8002d6e:	6028      	str	r0, [r5, #0]
 8002d70:	e7f4      	b.n	8002d5c <USBD_StdEPReq+0xfa>

08002d72 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002d72:	780b      	ldrb	r3, [r1, #0]
 8002d74:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002d76:	784b      	ldrb	r3, [r1, #1]
 8002d78:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002d7a:	78ca      	ldrb	r2, [r1, #3]
 8002d7c:	788b      	ldrb	r3, [r1, #2]
 8002d7e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002d82:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002d84:	794a      	ldrb	r2, [r1, #5]
 8002d86:	790b      	ldrb	r3, [r1, #4]
 8002d88:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002d8c:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002d8e:	79ca      	ldrb	r2, [r1, #7]
 8002d90:	798b      	ldrb	r3, [r1, #6]
 8002d92:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002d96:	80c3      	strh	r3, [r0, #6]
 8002d98:	4770      	bx	lr

08002d9a <USBD_CtlError>:
{
 8002d9a:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8002d9c:	2180      	movs	r1, #128	; 0x80
{
 8002d9e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8002da0:	f000 fc96 	bl	80036d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8002da4:	4620      	mov	r0, r4
 8002da6:	2100      	movs	r1, #0
}
 8002da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8002dac:	f000 bc90 	b.w	80036d0 <USBD_LL_StallEP>

08002db0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002db0:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8002db2:	b188      	cbz	r0, 8002dd8 <USBD_GetString+0x28>
 8002db4:	4605      	mov	r5, r0
 8002db6:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8002db8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2c00      	cmp	r4, #0
 8002dc0:	d1f9      	bne.n	8002db6 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8002dc8:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	704b      	strb	r3, [r1, #1]
 8002dce:	3801      	subs	r0, #1
 8002dd0:	2302      	movs	r3, #2
    while (*desc != '\0')
 8002dd2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002dd6:	b905      	cbnz	r5, 8002dda <USBD_GetString+0x2a>
 8002dd8:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8002de0:	3302      	adds	r3, #2
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	548c      	strb	r4, [r1, r2]
 8002de6:	e7f4      	b.n	8002dd2 <USBD_GetString+0x22>

08002de8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8002de8:	b510      	push	{r4, lr}
 8002dea:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8002dec:	2202      	movs	r2, #2
 8002dee:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8002df2:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8002df4:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002df6:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8002df8:	2100      	movs	r1, #0
 8002dfa:	f000 fca3 	bl	8003744 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002dfe:	2000      	movs	r0, #0
 8002e00:	bd10      	pop	{r4, pc}

08002e02 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8002e02:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8002e04:	4613      	mov	r3, r2
 8002e06:	460a      	mov	r2, r1
 8002e08:	2100      	movs	r1, #0
 8002e0a:	f000 fc9b 	bl	8003744 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002e0e:	2000      	movs	r0, #0
 8002e10:	bd08      	pop	{r3, pc}

08002e12 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8002e12:	b510      	push	{r4, lr}
 8002e14:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8002e16:	2203      	movs	r2, #3
 8002e18:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8002e1c:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8002e20:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8002e22:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8002e26:	2100      	movs	r1, #0
 8002e28:	f000 fc9a 	bl	8003760 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	bd10      	pop	{r4, pc}

08002e30 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8002e30:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8002e32:	4613      	mov	r3, r2
 8002e34:	460a      	mov	r2, r1
 8002e36:	2100      	movs	r1, #0
 8002e38:	f000 fc92 	bl	8003760 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	bd08      	pop	{r3, pc}

08002e40 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8002e40:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002e42:	2304      	movs	r3, #4
 8002e44:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8002e48:	2300      	movs	r3, #0
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f000 fc79 	bl	8003744 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002e52:	2000      	movs	r0, #0
 8002e54:	bd08      	pop	{r3, pc}

08002e56 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8002e56:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8002e58:	2305      	movs	r3, #5
 8002e5a:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002e5e:	2300      	movs	r3, #0
 8002e60:	461a      	mov	r2, r3
 8002e62:	4619      	mov	r1, r3
 8002e64:	f000 fc7c 	bl	8003760 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002e68:	2000      	movs	r0, #0
 8002e6a:	bd08      	pop	{r3, pc}

08002e6c <LTC_wake>:
*/
  }
}

void LTC_wake(uint16_t numChips)
{
 8002e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	for(int i=0; i<numChips; i++)
 8002e6e:	2400      	movs	r4, #0
		//HAL_Delay(1);
		uint8_t cmd[]={0x00, 0x00};
		//for(int x=0;x<10;x++)
		//{
			HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
			HAL_SPI_Transmit(&hspi1, (uint8_t*)cmd, 1, 100);
 8002e70:	4f12      	ldr	r7, [pc, #72]	; (8002ebc <LTC_wake+0x50>)
{
 8002e72:	4606      	mov	r6, r0
		HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 8002e74:	4625      	mov	r5, r4
	for(int i=0; i<numChips; i++)
 8002e76:	42b4      	cmp	r4, r6
 8002e78:	db01      	blt.n	8002e7e <LTC_wake+0x12>
			HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, HIGH);
	//}
	}
}
 8002e7a:	b003      	add	sp, #12
 8002e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2110      	movs	r1, #16
 8002e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e86:	f7fd fb19 	bl	80004bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2110      	movs	r1, #16
 8002e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		uint8_t cmd[]={0x00, 0x00};
 8002e92:	f88d 5004 	strb.w	r5, [sp, #4]
 8002e96:	f88d 5005 	strb.w	r5, [sp, #5]
			HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 8002e9a:	f7fd fb0f 	bl	80004bc <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, (uint8_t*)cmd, 1, 100);
 8002e9e:	2364      	movs	r3, #100	; 0x64
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	a901      	add	r1, sp, #4
 8002ea4:	4638      	mov	r0, r7
 8002ea6:	f7fe fe06 	bl	8001ab6 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, HIGH);
 8002eaa:	2201      	movs	r2, #1
 8002eac:	2110      	movs	r1, #16
 8002eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eb2:	f7fd fb03 	bl	80004bc <HAL_GPIO_WritePin>
	for(int i=0; i<numChips; i++)
 8002eb6:	3401      	adds	r4, #1
 8002eb8:	e7dd      	b.n	8002e76 <LTC_wake+0xa>
 8002eba:	bf00      	nop
 8002ebc:	20000b24 	.word	0x20000b24

08002ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ec0:	b570      	push	{r4, r5, r6, lr}
 8002ec2:	b0ae      	sub	sp, #184	; 0xb8
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability
    */
  HAL_PWR_EnableBkUpAccess();
 8002ec4:	f7fd ff2e 	bl	8000d24 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002ec8:	4a30      	ldr	r2, [pc, #192]	; (8002f8c <SystemClock_Config+0xcc>)
 8002eca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002ece:	f023 0318 	bic.w	r3, r3, #24
 8002ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002ed6:	2314      	movs	r3, #20
 8002ed8:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002ede:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002ee0:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ee2:	2502      	movs	r5, #2
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002ee4:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002ee6:	2607      	movs	r6, #7
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002ee8:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002eea:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002eec:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002eee:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ef0:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002ef2:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002ef4:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002ef6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002ef8:	9613      	str	r6, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002efa:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002efc:	9515      	str	r5, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002efe:	f7fe f807 	bl	8000f10 <HAL_RCC_OscConfig>
 8002f02:	b100      	cbz	r0, 8002f06 <SystemClock_Config+0x46>
 8002f04:	e7fe      	b.n	8002f04 <SystemClock_Config+0x44>

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f06:	220f      	movs	r2, #15
 8002f08:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f0a:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f0c:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f0e:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f10:	2104      	movs	r1, #4
 8002f12:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f14:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f18:	f7fe fa58 	bl	80013cc <HAL_RCC_ClockConfig>
 8002f1c:	b100      	cbz	r0, 8002f20 <SystemClock_Config+0x60>
 8002f1e:	e7fe      	b.n	8002f1e <SystemClock_Config+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8002f20:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <SystemClock_Config+0xd0>)
 8002f22:	9316      	str	r3, [sp, #88]	; 0x58
                              |RCC_PERIPHCLK_LPTIM1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f28:	932d      	str	r3, [sp, #180]	; 0xb4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002f2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002f2e:	9328      	str	r3, [sp, #160]	; 0xa0
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002f30:	2318      	movs	r3, #24
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f32:	901e      	str	r0, [sp, #120]	; 0x78
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8002f34:	9025      	str	r0, [sp, #148]	; 0x94
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002f36:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f38:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002f3a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002f3e:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002f40:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002f42:	961a      	str	r6, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002f44:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002f46:	951c      	str	r5, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002f48:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f4a:	f7fe fb63 	bl	8001614 <HAL_RCCEx_PeriphCLKConfig>
 8002f4e:	b100      	cbz	r0, 8002f52 <SystemClock_Config+0x92>
 8002f50:	e7fe      	b.n	8002f50 <SystemClock_Config+0x90>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002f52:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002f56:	f7fd fef5 	bl	8000d44 <HAL_PWREx_ControlVoltageScaling>
 8002f5a:	4604      	mov	r4, r0
 8002f5c:	b100      	cbz	r0, 8002f60 <SystemClock_Config+0xa0>
 8002f5e:	e7fe      	b.n	8002f5e <SystemClock_Config+0x9e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/10000);//100us
 8002f60:	f7fe fac6 	bl	80014f0 <HAL_RCC_GetHCLKFreq>
 8002f64:	f242 7310 	movw	r3, #10000	; 0x2710
 8002f68:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f6c:	f7fd f9bc 	bl	80002e8 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002f70:	2004      	movs	r0, #4
 8002f72:	f7fd f9cf 	bl	8000314 <HAL_SYSTICK_CLKSourceConfig>

    /**Enable MSI Auto calibration
    */
  HAL_RCCEx_EnableMSIPLLMode();
 8002f76:	f7fe fcc3 	bl	8001900 <HAL_RCCEx_EnableMSIPLLMode>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002f7a:	4622      	mov	r2, r4
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f82:	f7fd f971 	bl	8000268 <HAL_NVIC_SetPriority>
}
 8002f86:	b02e      	add	sp, #184	; 0xb8
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	00022201 	.word	0x00022201

08002f94 <MX_SPI1_Init>:
/* SPI1 init function */
void MX_SPI1_Init(void)
{

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002f94:	480f      	ldr	r0, [pc, #60]	; (8002fd4 <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f96:	4910      	ldr	r1, [pc, #64]	; (8002fd8 <MX_SPI1_Init+0x44>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;//SPI_DATASIZE_4BIT;
 8002f98:	f44f 62e0 	mov.w	r2, #1792	; 0x700
{
 8002f9c:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f9e:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;//SPI_DATASIZE_4BIT;
 8002fa2:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fa8:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002fac:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002fae:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;//SPI_BAUDRATEPRESCALER_2;
 8002fb0:	2238      	movs	r2, #56	; 0x38
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002fb2:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fb4:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fb6:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;//SPI_BAUDRATEPRESCALER_2;
 8002fb8:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fba:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fbc:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fbe:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002fc0:	2207      	movs	r2, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002fc2:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002fc4:	2308      	movs	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 8002fc6:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002fc8:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fca:	f7fe fd23 	bl	8001a14 <HAL_SPI_Init>
 8002fce:	b100      	cbz	r0, 8002fd2 <MX_SPI1_Init+0x3e>
 8002fd0:	e7fe      	b.n	8002fd0 <MX_SPI1_Init+0x3c>
 8002fd2:	bd08      	pop	{r3, pc}
 8002fd4:	20000b24 	.word	0x20000b24
 8002fd8:	40013000 	.word	0x40013000

08002fdc <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fdc:	4b38      	ldr	r3, [pc, #224]	; (80030c0 <MX_GPIO_Init+0xe4>)
{
 8002fde:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fe0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002fe2:	4f38      	ldr	r7, [pc, #224]	; (80030c4 <MX_GPIO_Init+0xe8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3 
 8002fe4:	4d38      	ldr	r5, [pc, #224]	; (80030c8 <MX_GPIO_Init+0xec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fe6:	f042 0204 	orr.w	r2, r2, #4
 8002fea:	64da      	str	r2, [r3, #76]	; 0x4c
 8002fec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 8002fee:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ff0:	f002 0204 	and.w	r2, r2, #4
 8002ff4:	9201      	str	r2, [sp, #4]
 8002ff6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ff8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ffa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ffe:	64da      	str	r2, [r3, #76]	; 0x4c
 8003000:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003002:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003006:	9202      	str	r2, [sp, #8]
 8003008:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800300a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800300c:	f042 0201 	orr.w	r2, r2, #1
 8003010:	64da      	str	r2, [r3, #76]	; 0x4c
 8003012:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003014:	f002 0201 	and.w	r2, r2, #1
 8003018:	9203      	str	r2, [sp, #12]
 800301a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800301c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800301e:	f042 0202 	orr.w	r2, r2, #2
 8003022:	64da      	str	r2, [r3, #76]	; 0x4c
 8003024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800302c:	4638      	mov	r0, r7
 800302e:	2200      	movs	r2, #0
 8003030:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003034:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003036:	f7fd fa41 	bl	80004bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 800303a:	2200      	movs	r2, #0
 800303c:	f248 0118 	movw	r1, #32792	; 0x8018
 8003040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003044:	f7fd fa3a 	bl	80004bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3 
 8003048:	2200      	movs	r2, #0
 800304a:	4628      	mov	r0, r5
 800304c:	f241 41fc 	movw	r1, #5372	; 0x14fc
 8003050:	f7fd fa34 	bl	80004bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003056:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800305c:	a905      	add	r1, sp, #20
 800305e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003060:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003062:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003064:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003066:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003068:	f7fd f966 	bl	8000338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8;
 800306c:	f240 1307 	movw	r3, #263	; 0x107
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003070:	a905      	add	r1, sp, #20
 8003072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8;
 8003076:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003078:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800307c:	f7fd f95c 	bl	8000338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15;
 8003080:	f248 0318 	movw	r3, #32792	; 0x8018
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003084:	a905      	add	r1, sp, #20
 8003086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15;
 800308a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800308c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003090:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003092:	f7fd f951 	bl	8000338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11;
 8003096:	f640 0303 	movw	r3, #2051	; 0x803
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800309a:	a905      	add	r1, sp, #20
 800309c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11;
 800309e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030a0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a4:	f7fd f948 	bl	8000338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB12 PB3 
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3 
 80030a8:	f241 43fc 	movw	r3, #5372	; 0x14fc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ac:	a905      	add	r1, sp, #20
 80030ae:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3 
 80030b0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b2:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b8:	f7fd f93e 	bl	8000338 <HAL_GPIO_Init>

}
 80030bc:	b00b      	add	sp, #44	; 0x2c
 80030be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030c0:	40021000 	.word	0x40021000
 80030c4:	48000800 	.word	0x48000800
 80030c8:	48000400 	.word	0x48000400

080030cc <pec15_calc>:
  Calculates  and returns the CRC15
  */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 80030cc:	b530      	push	{r4, r5, lr}

  remainder = 16;//initialize the PEC
  for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
  {
    addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
    remainder = (remainder<<8)^crc15Table[addr];
 80030ce:	4d0a      	ldr	r5, [pc, #40]	; (80030f8 <pec15_calc+0x2c>)
  for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 80030d0:	460c      	mov	r4, r1
  remainder = 16;//initialize the PEC
 80030d2:	2310      	movs	r3, #16
  for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 80030d4:	1a62      	subs	r2, r4, r1
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	4290      	cmp	r0, r2
 80030da:	d802      	bhi.n	80030e2 <pec15_calc+0x16>
  }
  return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80030dc:	0058      	lsls	r0, r3, #1
 80030de:	b280      	uxth	r0, r0
}
 80030e0:	bd30      	pop	{r4, r5, pc}
    addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 80030e2:	f814 2b01 	ldrb.w	r2, [r4], #1
 80030e6:	ea82 12d3 	eor.w	r2, r2, r3, lsr #7
    remainder = (remainder<<8)^crc15Table[addr];
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 80030f0:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	e7ed      	b.n	80030d4 <pec15_calc+0x8>
 80030f8:	08004008 	.word	0x08004008

080030fc <LTC_Write>:
{
 80030fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint8_t CMD_LEN = 4+(8*total_ic);
 8003100:	00ce      	lsls	r6, r1, #3
 8003102:	3604      	adds	r6, #4
 8003104:	b2f6      	uxtb	r6, r6
{
 8003106:	4607      	mov	r7, r0
	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8003108:	4630      	mov	r0, r6
{
 800310a:	4690      	mov	r8, r2
 800310c:	460d      	mov	r5, r1
	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 800310e:	f000 fc13 	bl	8003938 <malloc>
	cmd[0] = (uint8_t)(cmd16 >> 8);
 8003112:	0a3b      	lsrs	r3, r7, #8
	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8003114:	4604      	mov	r4, r0
	cmd[0] = (uint8_t)(cmd16 >> 8);
 8003116:	7003      	strb	r3, [r0, #0]
	cmd[1] = (uint8_t)(cmd16);
 8003118:	7047      	strb	r7, [r0, #1]
	cmd_pec = pec15_calc(2, cmd);
 800311a:	4601      	mov	r1, r0
 800311c:	2002      	movs	r0, #2
 800311e:	f7ff ffd5 	bl	80030cc <pec15_calc>
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003122:	0a03      	lsrs	r3, r0, #8
 8003124:	70a3      	strb	r3, [r4, #2]
 8003126:	3d01      	subs	r5, #1
 8003128:	2306      	movs	r3, #6
 800312a:	fb03 8505 	mla	r5, r3, r5, r8
	cmd[3] = (uint8_t)(cmd_pec);
 800312e:	70e0      	strb	r0, [r4, #3]
 8003130:	f1a8 0806 	sub.w	r8, r8, #6
	cmd_index = 4;
 8003134:	2704      	movs	r7, #4
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)       // executes for each LTC681x in daisy chain, this loops starts with
 8003136:	4545      	cmp	r5, r8
 8003138:	d111      	bne.n	800315e <LTC_Write+0x62>
	cs_low();
 800313a:	2200      	movs	r2, #0
 800313c:	2110      	movs	r1, #16
 800313e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003142:	f7fd f9bb 	bl	80004bc <HAL_GPIO_WritePin>
	switch(HAL_SPI_Transmit(&hspi1, (uint8_t*)cmd, CMD_LEN, 100))
 8003146:	2364      	movs	r3, #100	; 0x64
 8003148:	4632      	mov	r2, r6
 800314a:	4621      	mov	r1, r4
 800314c:	4816      	ldr	r0, [pc, #88]	; (80031a8 <LTC_Write+0xac>)
 800314e:	f7fe fcb2 	bl	8001ab6 <HAL_SPI_Transmit>
 8003152:	2801      	cmp	r0, #1
 8003154:	d002      	beq.n	800315c <LTC_Write+0x60>
 8003156:	d317      	bcc.n	8003188 <LTC_Write+0x8c>
 8003158:	2803      	cmp	r0, #3
 800315a:	d119      	bne.n	8003190 <LTC_Write+0x94>
 800315c:	e7fe      	b.n	800315c <LTC_Write+0x60>
 800315e:	2000      	movs	r0, #0
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 8003160:	183b      	adds	r3, r7, r0
 8003162:	5c2a      	ldrb	r2, [r5, r0]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	3001      	adds	r0, #1
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8003168:	2806      	cmp	r0, #6
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 800316a:	54e2      	strb	r2, [r4, r3]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800316c:	d1f8      	bne.n	8003160 <LTC_Write+0x64>
		data_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // calculating the PEC for each Iss configuration register data
 800316e:	4629      	mov	r1, r5
 8003170:	f7ff ffac 	bl	80030cc <pec15_calc>
		cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 8003174:	1dbb      	adds	r3, r7, #6
 8003176:	b2db      	uxtb	r3, r3
 8003178:	0a02      	lsrs	r2, r0, #8
 800317a:	54e2      	strb	r2, [r4, r3]
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 800317c:	4423      	add	r3, r4
		cmd_index = cmd_index + 2;
 800317e:	3708      	adds	r7, #8
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 8003180:	7058      	strb	r0, [r3, #1]
		cmd_index = cmd_index + 2;
 8003182:	b2ff      	uxtb	r7, r7
 8003184:	3d06      	subs	r5, #6
 8003186:	e7d6      	b.n	8003136 <LTC_Write+0x3a>
	      HAL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);
 8003188:	2104      	movs	r1, #4
 800318a:	4808      	ldr	r0, [pc, #32]	; (80031ac <LTC_Write+0xb0>)
 800318c:	f7fd f99b 	bl	80004c6 <HAL_GPIO_TogglePin>
	cs_high();
 8003190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003194:	2201      	movs	r2, #1
 8003196:	2110      	movs	r1, #16
 8003198:	f7fd f990 	bl	80004bc <HAL_GPIO_WritePin>
	free(cmd);
 800319c:	4620      	mov	r0, r4
}
 800319e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free(cmd);
 80031a2:	f000 bbd1 	b.w	8003948 <free>
 80031a6:	bf00      	nop
 80031a8:	20000b24 	.word	0x20000b24
 80031ac:	48000400 	.word	0x48000400

080031b0 <LTC_bleed>:
{
 80031b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	CRGA = (uint8_t *)malloc(total_ic*6*sizeof(uint8_t));
 80031b4:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80031b8:	0064      	lsls	r4, r4, #1
{
 80031ba:	4605      	mov	r5, r0
	CRGA = (uint8_t *)malloc(total_ic*6*sizeof(uint8_t));
 80031bc:	4620      	mov	r0, r4
{
 80031be:	460e      	mov	r6, r1
	CRGA = (uint8_t *)malloc(total_ic*6*sizeof(uint8_t));
 80031c0:	f000 fbba 	bl	8003938 <malloc>
 80031c4:	4681      	mov	r9, r0
	CRGB = (uint8_t *)malloc(total_ic*6*sizeof(uint8_t));
 80031c6:	4620      	mov	r0, r4
 80031c8:	f000 fbb6 	bl	8003938 <malloc>
 80031cc:	2406      	movs	r4, #6
 80031ce:	4680      	mov	r8, r0
 80031d0:	fb06 4404 	mla	r4, r6, r4, r4
 80031d4:	1f28      	subs	r0, r5, #4
 80031d6:	464b      	mov	r3, r9
 80031d8:	eb09 0504 	add.w	r5, r9, r4
 80031dc:	4641      	mov	r1, r8
		CRGA[current_ic*6+0]=0xFC;
 80031de:	f04f 0efc 	mov.w	lr, #252	; 0xfc
		CRGA[current_ic*6+1]=0x00;
 80031e2:	2400      	movs	r4, #0
 80031e4:	3306      	adds	r3, #6
	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)       // executes for each LTC681x in daisy chain, this loops starts with
 80031e6:	42ab      	cmp	r3, r5
 80031e8:	f101 0106 	add.w	r1, r1, #6
 80031ec:	d10b      	bne.n	8003206 <LTC_bleed+0x56>
	LTC_Write(WRCFGA, total_ic, (uint8_t *) CRGA);
 80031ee:	464a      	mov	r2, r9
 80031f0:	4631      	mov	r1, r6
 80031f2:	2001      	movs	r0, #1
 80031f4:	f7ff ff82 	bl	80030fc <LTC_Write>
	LTC_Write(WRCFGB, total_ic, (uint8_t *) CRGB);
 80031f8:	4642      	mov	r2, r8
 80031fa:	4631      	mov	r1, r6
 80031fc:	2024      	movs	r0, #36	; 0x24
}
 80031fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	LTC_Write(WRCFGB, total_ic, (uint8_t *) CRGB);
 8003202:	f7ff bf7b 	b.w	80030fc <LTC_Write>
		CRGA[current_ic*6+4]=(uint8_t)(dcc1[current_ic]);
 8003206:	f850 7f04 	ldr.w	r7, [r0, #4]!
 800320a:	f803 7c02 	strb.w	r7, [r3, #-2]
		CRGA[current_ic*6+5]=((dcc1[current_ic] >> 8) & 0x0F);
 800320e:	f3c7 2207 	ubfx	r2, r7, #8, #8
 8003212:	f002 0c0f 	and.w	ip, r2, #15
		CRGB[current_ic*6+1]=((dcc1[current_ic] >> 16) & 0x03);
 8003216:	f3c7 4701 	ubfx	r7, r7, #16, #2
		CRGB[current_ic*6+0]=0x0F | ((dcc1[current_ic] >> 8) & 0xF0);
 800321a:	f042 020f 	orr.w	r2, r2, #15
		CRGA[current_ic*6+0]=0xFC;
 800321e:	f803 ec06 	strb.w	lr, [r3, #-6]
		CRGA[current_ic*6+1]=0x00;
 8003222:	f803 4c05 	strb.w	r4, [r3, #-5]
		CRGA[current_ic*6+2]=0x00;
 8003226:	f803 4c04 	strb.w	r4, [r3, #-4]
		CRGA[current_ic*6+3]=0x00;
 800322a:	f803 4c03 	strb.w	r4, [r3, #-3]
		CRGA[current_ic*6+5]=((dcc1[current_ic] >> 8) & 0x0F);
 800322e:	f803 cc01 	strb.w	ip, [r3, #-1]
		CRGB[current_ic*6+0]=0x0F | ((dcc1[current_ic] >> 8) & 0xF0);
 8003232:	f801 2c06 	strb.w	r2, [r1, #-6]
		CRGB[current_ic*6+1]=((dcc1[current_ic] >> 16) & 0x03);
 8003236:	f801 7c05 	strb.w	r7, [r1, #-5]
		CRGB[current_ic*6+2]=0x00;
 800323a:	f801 4c04 	strb.w	r4, [r1, #-4]
		CRGB[current_ic*6+3]=0x00;
 800323e:	f801 4c03 	strb.w	r4, [r1, #-3]
		CRGB[current_ic*6+4]=0x00;
 8003242:	f801 4c02 	strb.w	r4, [r1, #-2]
		CRGB[current_ic*6+5]=0x00;
 8003246:	f801 4c01 	strb.w	r4, [r1, #-1]
 800324a:	e7cb      	b.n	80031e4 <LTC_bleed+0x34>

0800324c <main>:
  {
 800324c:	b508      	push	{r3, lr}
    HAL_Init();
 800324e:	f7fc ffd1 	bl	80001f4 <HAL_Init>
  SystemClock_Config();
 8003252:	f7ff fe35 	bl	8002ec0 <SystemClock_Config>
  MX_GPIO_Init();
 8003256:	f7ff fec1 	bl	8002fdc <MX_GPIO_Init>
  MX_SPI1_Init();
 800325a:	f7ff fe9b 	bl	8002f94 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800325e:	f000 f911 	bl	8003484 <MX_USB_DEVICE_Init>
  HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, HIGH);
 8003262:	2201      	movs	r2, #1
 8003264:	2110      	movs	r1, #16
 8003266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800326a:	f7fd f927 	bl	80004bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAN_STBY_GPIO_PORT, CAN_STBY_PIN, HIGH);
 800326e:	2201      	movs	r2, #1
 8003270:	2180      	movs	r1, #128	; 0x80
 8003272:	481e      	ldr	r0, [pc, #120]	; (80032ec <main+0xa0>)
		dcc[0]= 0x0000;
 8003274:	4c1e      	ldr	r4, [pc, #120]	; (80032f0 <main+0xa4>)
  HAL_GPIO_WritePin(CAN_STBY_GPIO_PORT, CAN_STBY_PIN, HIGH);
 8003276:	f7fd f921 	bl	80004bc <HAL_GPIO_WritePin>
  LTC_wake(NUMCHIPS);
 800327a:	2002      	movs	r0, #2
 800327c:	f7ff fdf6 	bl	8002e6c <LTC_wake>
  delay_u(300);
 8003280:	2003      	movs	r0, #3
 8003282:	f7fc ffd1 	bl	8000228 <HAL_Delay>
  LTC_wake(NUMCHIPS);
 8003286:	2002      	movs	r0, #2
 8003288:	f7ff fdf0 	bl	8002e6c <LTC_wake>
		dcc[0]= 0x0000;
 800328c:	2300      	movs	r3, #0
		LTC_bleed(dcc, NUMCHIPS);
 800328e:	2102      	movs	r1, #2
 8003290:	4817      	ldr	r0, [pc, #92]	; (80032f0 <main+0xa4>)
		dcc[0]= 0x0000;
 8003292:	6023      	str	r3, [r4, #0]
		dcc[1]= dcc[0];
 8003294:	6063      	str	r3, [r4, #4]
		LTC_bleed(dcc, NUMCHIPS);
 8003296:	f7ff ff8b 	bl	80031b0 <LTC_bleed>
		delay_m(100);
 800329a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800329e:	f7fc ffc3 	bl	8000228 <HAL_Delay>
		dcc[0]= 0xAAAA;
 80032a2:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
		LTC_bleed(dcc, NUMCHIPS);
 80032a6:	2102      	movs	r1, #2
 80032a8:	4811      	ldr	r0, [pc, #68]	; (80032f0 <main+0xa4>)
		dcc[0]= 0xAAAA;
 80032aa:	6023      	str	r3, [r4, #0]
		dcc[1]= dcc[0];
 80032ac:	6063      	str	r3, [r4, #4]
		LTC_bleed(dcc, NUMCHIPS);
 80032ae:	f7ff ff7f 	bl	80031b0 <LTC_bleed>
		delay_m(100);
 80032b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032b6:	f7fc ffb7 	bl	8000228 <HAL_Delay>
		dcc[0]= 0x5555;
 80032ba:	f245 5355 	movw	r3, #21845	; 0x5555
		LTC_bleed(dcc, NUMCHIPS);
 80032be:	2102      	movs	r1, #2
 80032c0:	480b      	ldr	r0, [pc, #44]	; (80032f0 <main+0xa4>)
		dcc[0]= 0x5555;
 80032c2:	6023      	str	r3, [r4, #0]
		dcc[1]= dcc[0];
 80032c4:	6063      	str	r3, [r4, #4]
		LTC_bleed(dcc, NUMCHIPS);
 80032c6:	f7ff ff73 	bl	80031b0 <LTC_bleed>
		delay_m(100);
 80032ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032ce:	f7fc ffab 	bl	8000228 <HAL_Delay>
		dcc[0]= 0xFFFF;
 80032d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
		LTC_bleed(dcc, NUMCHIPS);
 80032d6:	2102      	movs	r1, #2
 80032d8:	4805      	ldr	r0, [pc, #20]	; (80032f0 <main+0xa4>)
		dcc[0]= 0xFFFF;
 80032da:	6023      	str	r3, [r4, #0]
		dcc[1]= dcc[0];
 80032dc:	6063      	str	r3, [r4, #4]
		LTC_bleed(dcc, NUMCHIPS);
 80032de:	f7ff ff67 	bl	80031b0 <LTC_bleed>
		delay_m(100);
 80032e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032e6:	f7fc ff9f 	bl	8000228 <HAL_Delay>
 80032ea:	e7cf      	b.n	800328c <main+0x40>
 80032ec:	48000400 	.word	0x48000400
 80032f0:	20000c10 	.word	0x20000c10

080032f4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80032f4:	e7fe      	b.n	80032f4 <_Error_Handler>
	...

080032f8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f8:	4b21      	ldr	r3, [pc, #132]	; (8003380 <HAL_MspInit+0x88>)
{
 80032fa:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	661a      	str	r2, [r3, #96]	; 0x60
 8003304:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003306:	f002 0201 	and.w	r2, r2, #1
 800330a:	9200      	str	r2, [sp, #0]
 800330c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800330e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003310:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003314:	659a      	str	r2, [r3, #88]	; 0x58
 8003316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331c:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800331e:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003320:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003322:	f7fc ff8f 	bl	8000244 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003326:	2200      	movs	r2, #0
 8003328:	4611      	mov	r1, r2
 800332a:	f06f 000b 	mvn.w	r0, #11
 800332e:	f7fc ff9b 	bl	8000268 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003332:	2200      	movs	r2, #0
 8003334:	4611      	mov	r1, r2
 8003336:	f06f 000a 	mvn.w	r0, #10
 800333a:	f7fc ff95 	bl	8000268 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800333e:	2200      	movs	r2, #0
 8003340:	4611      	mov	r1, r2
 8003342:	f06f 0009 	mvn.w	r0, #9
 8003346:	f7fc ff8f 	bl	8000268 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800334a:	2200      	movs	r2, #0
 800334c:	4611      	mov	r1, r2
 800334e:	f06f 0004 	mvn.w	r0, #4
 8003352:	f7fc ff89 	bl	8000268 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003356:	2200      	movs	r2, #0
 8003358:	4611      	mov	r1, r2
 800335a:	f06f 0003 	mvn.w	r0, #3
 800335e:	f7fc ff83 	bl	8000268 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003362:	2200      	movs	r2, #0
 8003364:	4611      	mov	r1, r2
 8003366:	f06f 0001 	mvn.w	r0, #1
 800336a:	f7fc ff7d 	bl	8000268 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800336e:	2200      	movs	r2, #0
 8003370:	4611      	mov	r1, r2
 8003372:	f04f 30ff 	mov.w	r0, #4294967295
 8003376:	f7fc ff77 	bl	8000268 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800337a:	b003      	add	sp, #12
 800337c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003380:	40021000 	.word	0x40021000

08003384 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003384:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8003386:	6803      	ldr	r3, [r0, #0]
 8003388:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <HAL_SPI_MspInit+0x7c>)
 800338a:	4293      	cmp	r3, r2
{
 800338c:	b089      	sub	sp, #36	; 0x24
  if(hspi->Instance==SPI1)
 800338e:	d11b      	bne.n	80033c8 <HAL_SPI_MspInit+0x44>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003390:	4b1c      	ldr	r3, [pc, #112]	; (8003404 <HAL_SPI_MspInit+0x80>)
 8003392:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003394:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003398:	661a      	str	r2, [r3, #96]	; 0x60
 800339a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800339c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033a0:	9301      	str	r3, [sp, #4]
 80033a2:	9b01      	ldr	r3, [sp, #4]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80033a4:	23e0      	movs	r3, #224	; 0xe0
 80033a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a8:	2302      	movs	r3, #2
 80033aa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b0:	2303      	movs	r3, #3
 80033b2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033b4:	2305      	movs	r3, #5
 80033b6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b8:	a903      	add	r1, sp, #12
 80033ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033be:	f7fc ffbb 	bl	8000338 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80033c2:	b009      	add	sp, #36	; 0x24
 80033c4:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(hspi->Instance==SPI2)
 80033c8:	4a0f      	ldr	r2, [pc, #60]	; (8003408 <HAL_SPI_MspInit+0x84>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d1f9      	bne.n	80033c2 <HAL_SPI_MspInit+0x3e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80033ce:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <HAL_SPI_MspInit+0x80>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d0:	480e      	ldr	r0, [pc, #56]	; (800340c <HAL_SPI_MspInit+0x88>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80033d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80033d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033d8:	659a      	str	r2, [r3, #88]	; 0x58
 80033da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e0:	9302      	str	r3, [sp, #8]
 80033e2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80033e4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80033e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ea:	2302      	movs	r3, #2
 80033ec:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f2:	2303      	movs	r3, #3
 80033f4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033f6:	2305      	movs	r3, #5
 80033f8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033fa:	a903      	add	r1, sp, #12
 80033fc:	e7df      	b.n	80033be <HAL_SPI_MspInit+0x3a>
 80033fe:	bf00      	nop
 8003400:	40013000 	.word	0x40013000
 8003404:	40021000 	.word	0x40021000
 8003408:	40003800 	.word	0x40003800
 800340c:	48000400 	.word	0x48000400

08003410 <NMI_Handler>:
 8003410:	4770      	bx	lr

08003412 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003412:	e7fe      	b.n	8003412 <HardFault_Handler>

08003414 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003414:	e7fe      	b.n	8003414 <MemManage_Handler>

08003416 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003416:	e7fe      	b.n	8003416 <BusFault_Handler>

08003418 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003418:	e7fe      	b.n	8003418 <UsageFault_Handler>

0800341a <SVC_Handler>:
 800341a:	4770      	bx	lr

0800341c <DebugMon_Handler>:
 800341c:	4770      	bx	lr

0800341e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800341e:	4770      	bx	lr

08003420 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003420:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003422:	f7fc fef3 	bl	800020c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003426:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800342a:	f7fc bf80 	b.w	800032e <HAL_SYSTICK_IRQHandler>
	...

08003430 <USB_IRQHandler>:
void USB_IRQHandler(void)
{
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003430:	4801      	ldr	r0, [pc, #4]	; (8003438 <USB_IRQHandler+0x8>)
 8003432:	f7fd b981 	b.w	8000738 <HAL_PCD_IRQHandler>
 8003436:	bf00      	nop
 8003438:	20001694 	.word	0x20001694

0800343c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800343c:	490f      	ldr	r1, [pc, #60]	; (800347c <SystemInit+0x40>)
 800343e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003442:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800344a:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <SystemInit+0x44>)
 800344c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800344e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8003450:	f042 0201 	orr.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8003456:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800345e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003462:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003464:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003468:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003470:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003472:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003474:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003478:	608b      	str	r3, [r1, #8]
 800347a:	4770      	bx	lr
 800347c:	e000ed00 	.word	0xe000ed00
 8003480:	40021000 	.word	0x40021000

08003484 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003484:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8003486:	2200      	movs	r2, #0
 8003488:	490a      	ldr	r1, [pc, #40]	; (80034b4 <MX_USB_DEVICE_Init+0x30>)
 800348a:	480b      	ldr	r0, [pc, #44]	; (80034b8 <MX_USB_DEVICE_Init+0x34>)
 800348c:	f7ff f95d 	bl	800274a <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8003490:	490a      	ldr	r1, [pc, #40]	; (80034bc <MX_USB_DEVICE_Init+0x38>)
 8003492:	4809      	ldr	r0, [pc, #36]	; (80034b8 <MX_USB_DEVICE_Init+0x34>)
 8003494:	f7ff f96e 	bl	8002774 <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8003498:	4909      	ldr	r1, [pc, #36]	; (80034c0 <MX_USB_DEVICE_Init+0x3c>)
 800349a:	4807      	ldr	r0, [pc, #28]	; (80034b8 <MX_USB_DEVICE_Init+0x34>)
 800349c:	f7ff f92d 	bl	80026fa <USBD_CDC_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 80034a0:	4805      	ldr	r0, [pc, #20]	; (80034b8 <MX_USB_DEVICE_Init+0x34>)
 80034a2:	f000 f99a 	bl	80037da <USBD_LL_BatteryCharging>
 80034a6:	b120      	cbz	r0, 80034b2 <MX_USB_DEVICE_Init+0x2e>
  USBD_Start(&hUsbDeviceFS);
 80034a8:	4803      	ldr	r0, [pc, #12]	; (80034b8 <MX_USB_DEVICE_Init+0x34>)
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80034aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  USBD_Start(&hUsbDeviceFS);
 80034ae:	f7ff b968 	b.w	8002782 <USBD_Start>
 80034b2:	bd08      	pop	{r3, pc}
 80034b4:	20000124 	.word	0x20000124
 80034b8:	20000c28 	.word	0x20000c28
 80034bc:	20000000 	.word	0x20000000
 80034c0:	20000114 	.word	0x20000114

080034c4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80034c4:	2000      	movs	r0, #0
 80034c6:	4770      	bx	lr

080034c8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80034c8:	2000      	movs	r0, #0
 80034ca:	4770      	bx	lr

080034cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80034cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80034ce:	4c05      	ldr	r4, [pc, #20]	; (80034e4 <CDC_Receive_FS+0x18>)
 80034d0:	4601      	mov	r1, r0
 80034d2:	4620      	mov	r0, r4
 80034d4:	f7ff f920 	bl	8002718 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80034d8:	4620      	mov	r0, r4
 80034da:	f7ff f923 	bl	8002724 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80034de:	2000      	movs	r0, #0
 80034e0:	bd10      	pop	{r4, pc}
 80034e2:	bf00      	nop
 80034e4:	20000c28 	.word	0x20000c28

080034e8 <CDC_Init_FS>:
{
 80034e8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80034ea:	4c06      	ldr	r4, [pc, #24]	; (8003504 <CDC_Init_FS+0x1c>)
 80034ec:	4906      	ldr	r1, [pc, #24]	; (8003508 <CDC_Init_FS+0x20>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	4620      	mov	r0, r4
 80034f2:	f7ff f909 	bl	8002708 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80034f6:	4905      	ldr	r1, [pc, #20]	; (800350c <CDC_Init_FS+0x24>)
 80034f8:	4620      	mov	r0, r4
 80034fa:	f7ff f90d 	bl	8002718 <USBD_CDC_SetRxBuffer>
}
 80034fe:	2000      	movs	r0, #0
 8003500:	bd10      	pop	{r4, pc}
 8003502:	bf00      	nop
 8003504:	20000c28 	.word	0x20000c28
 8003508:	200012ac 	.word	0x200012ac
 800350c:	20000ec4 	.word	0x20000ec4

08003510 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003510:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8003512:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <HAL_PCD_MspInit+0x38>)
 8003514:	6802      	ldr	r2, [r0, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d112      	bne.n	8003540 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800351a:	f503 33d4 	add.w	r3, r3, #108544	; 0x1a800

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800351e:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_CLK_ENABLE();
 8003520:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003522:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003526:	659a      	str	r2, [r3, #88]	; 0x58
 8003528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800352a:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800352c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003530:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003532:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8003534:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003536:	f7fc fe97 	bl	8000268 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800353a:	2043      	movs	r0, #67	; 0x43
 800353c:	f7fc fec8 	bl	80002d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003540:	b003      	add	sp, #12
 8003542:	f85d fb04 	ldr.w	pc, [sp], #4
 8003546:	bf00      	nop
 8003548:	40006800 	.word	0x40006800

0800354c <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800354c:	f500 6186 	add.w	r1, r0, #1072	; 0x430
 8003550:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003554:	f7ff b92c 	b.w	80027b0 <USBD_LL_SetupStage>

08003558 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003558:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800355c:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003560:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8003564:	f7ff b951 	b.w	800280a <USBD_LL_DataOutStage>

08003568 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003568:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800356c:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003572:	f7ff b982 	b.w	800287a <USBD_LL_DataInStage>

08003576 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003576:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 800357a:	f7ff ba13 	b.w	80029a4 <USBD_LL_SOF>

0800357e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800357e:	b510      	push	{r4, lr}
 8003580:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003582:	2101      	movs	r1, #1
 8003584:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003588:	f7ff f9fa 	bl	8002980 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800358c:	f8d4 0470 	ldr.w	r0, [r4, #1136]	; 0x470
}
 8003590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003594:	f7ff b9cd 	b.w	8002932 <USBD_LL_Reset>

08003598 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003598:	b510      	push	{r4, lr}
 800359a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800359c:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 80035a0:	f7ff f9f1 	bl	8002986 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80035a4:	69a3      	ldr	r3, [r4, #24]
 80035a6:	b123      	cbz	r3, 80035b2 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80035a8:	4a02      	ldr	r2, [pc, #8]	; (80035b4 <HAL_PCD_SuspendCallback+0x1c>)
 80035aa:	6913      	ldr	r3, [r2, #16]
 80035ac:	f043 0306 	orr.w	r3, r3, #6
 80035b0:	6113      	str	r3, [r2, #16]
 80035b2:	bd10      	pop	{r4, pc}
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80035b8:	6983      	ldr	r3, [r0, #24]
{
 80035ba:	b510      	push	{r4, lr}
 80035bc:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 80035be:	b133      	cbz	r3, 80035ce <HAL_PCD_ResumeCallback+0x16>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80035c0:	4a06      	ldr	r2, [pc, #24]	; (80035dc <HAL_PCD_ResumeCallback+0x24>)
 80035c2:	6913      	ldr	r3, [r2, #16]
 80035c4:	f023 0306 	bic.w	r3, r3, #6
 80035c8:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 80035ca:	f7ff fc79 	bl	8002ec0 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80035ce:	f8d4 0470 	ldr.w	r0, [r4, #1136]	; 0x470
}
 80035d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80035d6:	f7ff b9df 	b.w	8002998 <USBD_LL_Resume>
 80035da:	bf00      	nop
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <USBD_LL_Init>:
{
 80035e0:	b510      	push	{r4, lr}
 80035e2:	4604      	mov	r4, r0
  HAL_PWREx_EnableVddUSB();
 80035e4:	f7fd fbe2 	bl	8000dac <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.pData = pdev;
 80035e8:	4820      	ldr	r0, [pc, #128]	; (800366c <USBD_LL_Init+0x8c>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80035ea:	4a21      	ldr	r2, [pc, #132]	; (8003670 <USBD_LL_Init+0x90>)
  hpcd_USB_FS.pData = pdev;
 80035ec:	f8c0 4470 	str.w	r4, [r0, #1136]	; 0x470
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80035f0:	2308      	movs	r3, #8
 80035f2:	e880 000c 	stmia.w	r0, {r2, r3}
  pdev->pData = &hpcd_USB_FS;
 80035f6:	f8c4 0298 	str.w	r0, [r4, #664]	; 0x298
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 80035fa:	2300      	movs	r3, #0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80035fc:	2202      	movs	r2, #2
 80035fe:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003600:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003602:	6102      	str	r2, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003604:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003606:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003608:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800360a:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800360c:	f7fc ff5f 	bl	80004ce <HAL_PCD_Init>
 8003610:	b120      	cbz	r0, 800361c <USBD_LL_Init+0x3c>
    _Error_Handler(__FILE__, __LINE__);
 8003612:	f240 113d 	movw	r1, #317	; 0x13d
 8003616:	4817      	ldr	r0, [pc, #92]	; (8003674 <USBD_LL_Init+0x94>)
 8003618:	f7ff fe6c 	bl	80032f4 <_Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800361c:	2200      	movs	r2, #0
 800361e:	4611      	mov	r1, r2
 8003620:	2318      	movs	r3, #24
 8003622:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8003626:	f7fd fb3b 	bl	8000ca0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800362a:	2358      	movs	r3, #88	; 0x58
 800362c:	2200      	movs	r2, #0
 800362e:	2180      	movs	r1, #128	; 0x80
 8003630:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8003634:	f7fd fb34 	bl	8000ca0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8003638:	23c0      	movs	r3, #192	; 0xc0
 800363a:	2200      	movs	r2, #0
 800363c:	2181      	movs	r1, #129	; 0x81
 800363e:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8003642:	f7fd fb2d 	bl	8000ca0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8003646:	f44f 7388 	mov.w	r3, #272	; 0x110
 800364a:	2200      	movs	r2, #0
 800364c:	2101      	movs	r1, #1
 800364e:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8003652:	f7fd fb25 	bl	8000ca0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8003656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800365a:	2200      	movs	r2, #0
 800365c:	2182      	movs	r1, #130	; 0x82
 800365e:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8003662:	f7fd fb1d 	bl	8000ca0 <HAL_PCDEx_PMAConfig>
}
 8003666:	2000      	movs	r0, #0
 8003668:	bd10      	pop	{r4, pc}
 800366a:	bf00      	nop
 800366c:	20001694 	.word	0x20001694
 8003670:	40006800 	.word	0x40006800
 8003674:	0800424c 	.word	0x0800424c

08003678 <USBD_LL_Start>:
{
 8003678:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800367a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800367e:	f7fc ff9a 	bl	80005b6 <HAL_PCD_Start>
 8003682:	2803      	cmp	r0, #3
 8003684:	bf9a      	itte	ls
 8003686:	4b02      	ldrls	r3, [pc, #8]	; (8003690 <USBD_LL_Start+0x18>)
 8003688:	5c18      	ldrbls	r0, [r3, r0]
 800368a:	2002      	movhi	r0, #2
}
 800368c:	bd08      	pop	{r3, pc}
 800368e:	bf00      	nop
 8003690:	08004248 	.word	0x08004248

08003694 <USBD_LL_OpenEP>:
{
 8003694:	b510      	push	{r4, lr}
 8003696:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003698:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800369c:	4613      	mov	r3, r2
 800369e:	4622      	mov	r2, r4
 80036a0:	f7fc ffb2 	bl	8000608 <HAL_PCD_EP_Open>
 80036a4:	2803      	cmp	r0, #3
 80036a6:	bf9a      	itte	ls
 80036a8:	4b01      	ldrls	r3, [pc, #4]	; (80036b0 <USBD_LL_OpenEP+0x1c>)
 80036aa:	5c18      	ldrbls	r0, [r3, r0]
 80036ac:	2002      	movhi	r0, #2
}
 80036ae:	bd10      	pop	{r4, pc}
 80036b0:	08004248 	.word	0x08004248

080036b4 <USBD_LL_CloseEP>:
{
 80036b4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80036b6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80036ba:	f7fc ffda 	bl	8000672 <HAL_PCD_EP_Close>
 80036be:	2803      	cmp	r0, #3
 80036c0:	bf9a      	itte	ls
 80036c2:	4b02      	ldrls	r3, [pc, #8]	; (80036cc <USBD_LL_CloseEP+0x18>)
 80036c4:	5c18      	ldrbls	r0, [r3, r0]
 80036c6:	2002      	movhi	r0, #2
}
 80036c8:	bd08      	pop	{r3, pc}
 80036ca:	bf00      	nop
 80036cc:	08004248 	.word	0x08004248

080036d0 <USBD_LL_StallEP>:
{
 80036d0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80036d2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80036d6:	f7fd fa77 	bl	8000bc8 <HAL_PCD_EP_SetStall>
 80036da:	2803      	cmp	r0, #3
 80036dc:	bf9a      	itte	ls
 80036de:	4b02      	ldrls	r3, [pc, #8]	; (80036e8 <USBD_LL_StallEP+0x18>)
 80036e0:	5c18      	ldrbls	r0, [r3, r0]
 80036e2:	2002      	movhi	r0, #2
}
 80036e4:	bd08      	pop	{r3, pc}
 80036e6:	bf00      	nop
 80036e8:	08004248 	.word	0x08004248

080036ec <USBD_LL_ClearStallEP>:
{
 80036ec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80036ee:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80036f2:	f7fd faa2 	bl	8000c3a <HAL_PCD_EP_ClrStall>
 80036f6:	2803      	cmp	r0, #3
 80036f8:	bf9a      	itte	ls
 80036fa:	4b02      	ldrls	r3, [pc, #8]	; (8003704 <USBD_LL_ClearStallEP+0x18>)
 80036fc:	5c18      	ldrbls	r0, [r3, r0]
 80036fe:	2002      	movhi	r0, #2
}
 8003700:	bd08      	pop	{r3, pc}
 8003702:	bf00      	nop
 8003704:	08004248 	.word	0x08004248

08003708 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8003708:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800370a:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800370e:	bf45      	ittet	mi
 8003710:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8003714:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003718:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800371c:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003720:	bf58      	it	pl
 8003722:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
}
 8003726:	4770      	bx	lr

08003728 <USBD_LL_SetUSBAddress>:
{
 8003728:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800372a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800372e:	f7fc ff57 	bl	80005e0 <HAL_PCD_SetAddress>
 8003732:	2803      	cmp	r0, #3
 8003734:	bf9a      	itte	ls
 8003736:	4b02      	ldrls	r3, [pc, #8]	; (8003740 <USBD_LL_SetUSBAddress+0x18>)
 8003738:	5c18      	ldrbls	r0, [r3, r0]
 800373a:	2002      	movhi	r0, #2
}
 800373c:	bd08      	pop	{r3, pc}
 800373e:	bf00      	nop
 8003740:	08004248 	.word	0x08004248

08003744 <USBD_LL_Transmit>:
{
 8003744:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003746:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800374a:	f7fc ffdd 	bl	8000708 <HAL_PCD_EP_Transmit>
 800374e:	2803      	cmp	r0, #3
 8003750:	bf9a      	itte	ls
 8003752:	4b02      	ldrls	r3, [pc, #8]	; (800375c <USBD_LL_Transmit+0x18>)
 8003754:	5c18      	ldrbls	r0, [r3, r0]
 8003756:	2002      	movhi	r0, #2
}
 8003758:	bd08      	pop	{r3, pc}
 800375a:	bf00      	nop
 800375c:	08004248 	.word	0x08004248

08003760 <USBD_LL_PrepareReceive>:
{
 8003760:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003762:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003766:	f7fc ffaf 	bl	80006c8 <HAL_PCD_EP_Receive>
 800376a:	2803      	cmp	r0, #3
 800376c:	bf9a      	itte	ls
 800376e:	4b02      	ldrls	r3, [pc, #8]	; (8003778 <USBD_LL_PrepareReceive+0x18>)
 8003770:	5c18      	ldrbls	r0, [r3, r0]
 8003772:	2002      	movhi	r0, #2
}
 8003774:	bd08      	pop	{r3, pc}
 8003776:	bf00      	nop
 8003778:	08004248 	.word	0x08004248

0800377c <USBD_LL_GetRxDataSize>:
{
 800377c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800377e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003782:	f7fc ffba 	bl	80006fa <HAL_PCD_EP_GetRxCount>
}
 8003786:	bd08      	pop	{r3, pc}

08003788 <HAL_PCDEx_LPM_Callback>:
{
 8003788:	b510      	push	{r4, lr}
 800378a:	4604      	mov	r4, r0
  switch (msg)
 800378c:	b111      	cbz	r1, 8003794 <HAL_PCDEx_LPM_Callback+0xc>
 800378e:	2901      	cmp	r1, #1
 8003790:	d00f      	beq.n	80037b2 <HAL_PCDEx_LPM_Callback+0x2a>
 8003792:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8003794:	6983      	ldr	r3, [r0, #24]
 8003796:	b133      	cbz	r3, 80037a6 <HAL_PCDEx_LPM_Callback+0x1e>
      SystemClock_Config();
 8003798:	f7ff fb92 	bl	8002ec0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800379c:	4a0b      	ldr	r2, [pc, #44]	; (80037cc <HAL_PCDEx_LPM_Callback+0x44>)
 800379e:	6913      	ldr	r3, [r2, #16]
 80037a0:	f023 0306 	bic.w	r3, r3, #6
 80037a4:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80037a6:	f8d4 0470 	ldr.w	r0, [r4, #1136]	; 0x470
}
 80037aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 80037ae:	f7ff b8f3 	b.w	8002998 <USBD_LL_Resume>
    USBD_LL_Suspend(hpcd->pData);
 80037b2:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 80037b6:	f7ff f8e6 	bl	8002986 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80037ba:	69a3      	ldr	r3, [r4, #24]
 80037bc:	b123      	cbz	r3, 80037c8 <HAL_PCDEx_LPM_Callback+0x40>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80037be:	4a03      	ldr	r2, [pc, #12]	; (80037cc <HAL_PCDEx_LPM_Callback+0x44>)
 80037c0:	6913      	ldr	r3, [r2, #16]
 80037c2:	f043 0306 	orr.w	r3, r3, #6
 80037c6:	6113      	str	r3, [r2, #16]
 80037c8:	bd10      	pop	{r4, pc}
 80037ca:	bf00      	nop
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <USBD_static_malloc>:
}
 80037d0:	4800      	ldr	r0, [pc, #0]	; (80037d4 <USBD_static_malloc+0x4>)
 80037d2:	4770      	bx	lr
 80037d4:	2000068c 	.word	0x2000068c

080037d8 <USBD_static_free>:
{
 80037d8:	4770      	bx	lr

080037da <USBD_LL_BatteryCharging>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
  if (hpcd->Init.battery_charging_enable == ENABLE)
 80037da:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	2b01      	cmp	r3, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 80037e2:	bf14      	ite	ne
 80037e4:	2002      	movne	r0, #2
 80037e6:	2000      	moveq	r0, #0
 80037e8:	4770      	bx	lr
	...

080037ec <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 80037ec:	2312      	movs	r3, #18
 80037ee:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80037f0:	4800      	ldr	r0, [pc, #0]	; (80037f4 <USBD_FS_DeviceDescriptor+0x8>)
 80037f2:	4770      	bx	lr
 80037f4:	20000150 	.word	0x20000150

080037f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 80037f8:	2304      	movs	r3, #4
 80037fa:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80037fc:	4800      	ldr	r0, [pc, #0]	; (8003800 <USBD_FS_LangIDStrDescriptor+0x8>)
 80037fe:	4770      	bx	lr
 8003800:	20000164 	.word	0x20000164

08003804 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 8003804:	230c      	movs	r3, #12
 8003806:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8003808:	4800      	ldr	r0, [pc, #0]	; (800380c <USBD_FS_USR_BOSDescriptor+0x8>)
 800380a:	4770      	bx	lr
 800380c:	20000144 	.word	0x20000144

08003810 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003810:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003812:	4c04      	ldr	r4, [pc, #16]	; (8003824 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003814:	4804      	ldr	r0, [pc, #16]	; (8003828 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003816:	460a      	mov	r2, r1
 8003818:	4621      	mov	r1, r4
 800381a:	f7ff fac9 	bl	8002db0 <USBD_GetString>
}
 800381e:	4620      	mov	r0, r4
 8003820:	bd10      	pop	{r4, pc}
 8003822:	bf00      	nop
 8003824:	20001b08 	.word	0x20001b08
 8003828:	08004278 	.word	0x08004278

0800382c <USBD_FS_ProductStrDescriptor>:
{
 800382c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800382e:	4c04      	ldr	r4, [pc, #16]	; (8003840 <USBD_FS_ProductStrDescriptor+0x14>)
 8003830:	4804      	ldr	r0, [pc, #16]	; (8003844 <USBD_FS_ProductStrDescriptor+0x18>)
 8003832:	460a      	mov	r2, r1
 8003834:	4621      	mov	r1, r4
 8003836:	f7ff fabb 	bl	8002db0 <USBD_GetString>
}
 800383a:	4620      	mov	r0, r4
 800383c:	bd10      	pop	{r4, pc}
 800383e:	bf00      	nop
 8003840:	20001b08 	.word	0x20001b08
 8003844:	0800428b 	.word	0x0800428b

08003848 <USBD_FS_SerialStrDescriptor>:
{
 8003848:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800384a:	4c04      	ldr	r4, [pc, #16]	; (800385c <USBD_FS_SerialStrDescriptor+0x14>)
 800384c:	4804      	ldr	r0, [pc, #16]	; (8003860 <USBD_FS_SerialStrDescriptor+0x18>)
 800384e:	460a      	mov	r2, r1
 8003850:	4621      	mov	r1, r4
 8003852:	f7ff faad 	bl	8002db0 <USBD_GetString>
}
 8003856:	4620      	mov	r0, r4
 8003858:	bd10      	pop	{r4, pc}
 800385a:	bf00      	nop
 800385c:	20001b08 	.word	0x20001b08
 8003860:	080042a1 	.word	0x080042a1

08003864 <USBD_FS_ConfigStrDescriptor>:
{
 8003864:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003866:	4c04      	ldr	r4, [pc, #16]	; (8003878 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003868:	4804      	ldr	r0, [pc, #16]	; (800387c <USBD_FS_ConfigStrDescriptor+0x18>)
 800386a:	460a      	mov	r2, r1
 800386c:	4621      	mov	r1, r4
 800386e:	f7ff fa9f 	bl	8002db0 <USBD_GetString>
}
 8003872:	4620      	mov	r0, r4
 8003874:	bd10      	pop	{r4, pc}
 8003876:	bf00      	nop
 8003878:	20001b08 	.word	0x20001b08
 800387c:	0800425f 	.word	0x0800425f

08003880 <USBD_FS_InterfaceStrDescriptor>:
{
 8003880:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003882:	4c04      	ldr	r4, [pc, #16]	; (8003894 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003884:	4804      	ldr	r0, [pc, #16]	; (8003898 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003886:	460a      	mov	r2, r1
 8003888:	4621      	mov	r1, r4
 800388a:	f7ff fa91 	bl	8002db0 <USBD_GetString>
}
 800388e:	4620      	mov	r0, r4
 8003890:	bd10      	pop	{r4, pc}
 8003892:	bf00      	nop
 8003894:	20001b08 	.word	0x20001b08
 8003898:	0800426a 	.word	0x0800426a

0800389c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800389c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80038a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80038a2:	e003      	b.n	80038ac <LoopCopyDataInit>

080038a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80038a4:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80038a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80038a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80038aa:	3104      	adds	r1, #4

080038ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80038ac:	480b      	ldr	r0, [pc, #44]	; (80038dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80038ae:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80038b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80038b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80038b4:	d3f6      	bcc.n	80038a4 <CopyDataInit>
	ldr	r2, =_sbss
 80038b6:	4a0b      	ldr	r2, [pc, #44]	; (80038e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80038b8:	e002      	b.n	80038c0 <LoopFillZerobss>

080038ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80038ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80038bc:	f842 3b04 	str.w	r3, [r2], #4

080038c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80038c0:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <LoopForever+0x16>)
	cmp	r2, r3
 80038c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80038c4:	d3f9      	bcc.n	80038ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038c6:	f7ff fdb9 	bl	800343c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038ca:	f000 f811 	bl	80038f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80038ce:	f7ff fcbd 	bl	800324c <main>

080038d2 <LoopForever>:

LoopForever:
    b LoopForever
 80038d2:	e7fe      	b.n	80038d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80038d4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80038d8:	080042b8 	.word	0x080042b8
	ldr	r0, =_sdata
 80038dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80038e0:	2000066c 	.word	0x2000066c
	ldr	r2, =_sbss
 80038e4:	2000066c 	.word	0x2000066c
	ldr	r3, = _ebss
 80038e8:	20001d18 	.word	0x20001d18

080038ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80038ec:	e7fe      	b.n	80038ec <ADC1_IRQHandler>
	...

080038f0 <__libc_init_array>:
 80038f0:	b570      	push	{r4, r5, r6, lr}
 80038f2:	4e0d      	ldr	r6, [pc, #52]	; (8003928 <__libc_init_array+0x38>)
 80038f4:	4c0d      	ldr	r4, [pc, #52]	; (800392c <__libc_init_array+0x3c>)
 80038f6:	1ba4      	subs	r4, r4, r6
 80038f8:	10a4      	asrs	r4, r4, #2
 80038fa:	2500      	movs	r5, #0
 80038fc:	42a5      	cmp	r5, r4
 80038fe:	d109      	bne.n	8003914 <__libc_init_array+0x24>
 8003900:	4e0b      	ldr	r6, [pc, #44]	; (8003930 <__libc_init_array+0x40>)
 8003902:	4c0c      	ldr	r4, [pc, #48]	; (8003934 <__libc_init_array+0x44>)
 8003904:	f000 fb74 	bl	8003ff0 <_init>
 8003908:	1ba4      	subs	r4, r4, r6
 800390a:	10a4      	asrs	r4, r4, #2
 800390c:	2500      	movs	r5, #0
 800390e:	42a5      	cmp	r5, r4
 8003910:	d105      	bne.n	800391e <__libc_init_array+0x2e>
 8003912:	bd70      	pop	{r4, r5, r6, pc}
 8003914:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003918:	4798      	blx	r3
 800391a:	3501      	adds	r5, #1
 800391c:	e7ee      	b.n	80038fc <__libc_init_array+0xc>
 800391e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003922:	4798      	blx	r3
 8003924:	3501      	adds	r5, #1
 8003926:	e7f2      	b.n	800390e <__libc_init_array+0x1e>
 8003928:	080042b0 	.word	0x080042b0
 800392c:	080042b0 	.word	0x080042b0
 8003930:	080042b0 	.word	0x080042b0
 8003934:	080042b4 	.word	0x080042b4

08003938 <malloc>:
 8003938:	4b02      	ldr	r3, [pc, #8]	; (8003944 <malloc+0xc>)
 800393a:	4601      	mov	r1, r0
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	f000 b80b 	b.w	8003958 <_malloc_r>
 8003942:	bf00      	nop
 8003944:	20000578 	.word	0x20000578

08003948 <free>:
 8003948:	4b02      	ldr	r3, [pc, #8]	; (8003954 <free+0xc>)
 800394a:	4601      	mov	r1, r0
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	f000 ba83 	b.w	8003e58 <_free_r>
 8003952:	bf00      	nop
 8003954:	20000578 	.word	0x20000578

08003958 <_malloc_r>:
 8003958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395c:	f101 040b 	add.w	r4, r1, #11
 8003960:	2c16      	cmp	r4, #22
 8003962:	4681      	mov	r9, r0
 8003964:	d907      	bls.n	8003976 <_malloc_r+0x1e>
 8003966:	f034 0407 	bics.w	r4, r4, #7
 800396a:	d505      	bpl.n	8003978 <_malloc_r+0x20>
 800396c:	230c      	movs	r3, #12
 800396e:	f8c9 3000 	str.w	r3, [r9]
 8003972:	2600      	movs	r6, #0
 8003974:	e131      	b.n	8003bda <_malloc_r+0x282>
 8003976:	2410      	movs	r4, #16
 8003978:	428c      	cmp	r4, r1
 800397a:	d3f7      	bcc.n	800396c <_malloc_r+0x14>
 800397c:	4648      	mov	r0, r9
 800397e:	f000 f9f9 	bl	8003d74 <__malloc_lock>
 8003982:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8003986:	4d9c      	ldr	r5, [pc, #624]	; (8003bf8 <_malloc_r+0x2a0>)
 8003988:	d236      	bcs.n	80039f8 <_malloc_r+0xa0>
 800398a:	f104 0208 	add.w	r2, r4, #8
 800398e:	442a      	add	r2, r5
 8003990:	f1a2 0108 	sub.w	r1, r2, #8
 8003994:	6856      	ldr	r6, [r2, #4]
 8003996:	428e      	cmp	r6, r1
 8003998:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800399c:	d102      	bne.n	80039a4 <_malloc_r+0x4c>
 800399e:	68d6      	ldr	r6, [r2, #12]
 80039a0:	42b2      	cmp	r2, r6
 80039a2:	d010      	beq.n	80039c6 <_malloc_r+0x6e>
 80039a4:	6873      	ldr	r3, [r6, #4]
 80039a6:	68f2      	ldr	r2, [r6, #12]
 80039a8:	68b1      	ldr	r1, [r6, #8]
 80039aa:	f023 0303 	bic.w	r3, r3, #3
 80039ae:	60ca      	str	r2, [r1, #12]
 80039b0:	4433      	add	r3, r6
 80039b2:	6091      	str	r1, [r2, #8]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	605a      	str	r2, [r3, #4]
 80039bc:	4648      	mov	r0, r9
 80039be:	f000 f9df 	bl	8003d80 <__malloc_unlock>
 80039c2:	3608      	adds	r6, #8
 80039c4:	e109      	b.n	8003bda <_malloc_r+0x282>
 80039c6:	3302      	adds	r3, #2
 80039c8:	4a8c      	ldr	r2, [pc, #560]	; (8003bfc <_malloc_r+0x2a4>)
 80039ca:	692e      	ldr	r6, [r5, #16]
 80039cc:	4296      	cmp	r6, r2
 80039ce:	4611      	mov	r1, r2
 80039d0:	d06d      	beq.n	8003aae <_malloc_r+0x156>
 80039d2:	6870      	ldr	r0, [r6, #4]
 80039d4:	f020 0003 	bic.w	r0, r0, #3
 80039d8:	1b07      	subs	r7, r0, r4
 80039da:	2f0f      	cmp	r7, #15
 80039dc:	dd47      	ble.n	8003a6e <_malloc_r+0x116>
 80039de:	1933      	adds	r3, r6, r4
 80039e0:	f044 0401 	orr.w	r4, r4, #1
 80039e4:	6074      	str	r4, [r6, #4]
 80039e6:	616b      	str	r3, [r5, #20]
 80039e8:	612b      	str	r3, [r5, #16]
 80039ea:	60da      	str	r2, [r3, #12]
 80039ec:	609a      	str	r2, [r3, #8]
 80039ee:	f047 0201 	orr.w	r2, r7, #1
 80039f2:	605a      	str	r2, [r3, #4]
 80039f4:	5037      	str	r7, [r6, r0]
 80039f6:	e7e1      	b.n	80039bc <_malloc_r+0x64>
 80039f8:	0a63      	lsrs	r3, r4, #9
 80039fa:	d02a      	beq.n	8003a52 <_malloc_r+0xfa>
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d812      	bhi.n	8003a26 <_malloc_r+0xce>
 8003a00:	09a3      	lsrs	r3, r4, #6
 8003a02:	3338      	adds	r3, #56	; 0x38
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003a0a:	f1a2 0008 	sub.w	r0, r2, #8
 8003a0e:	6856      	ldr	r6, [r2, #4]
 8003a10:	4286      	cmp	r6, r0
 8003a12:	d006      	beq.n	8003a22 <_malloc_r+0xca>
 8003a14:	6872      	ldr	r2, [r6, #4]
 8003a16:	f022 0203 	bic.w	r2, r2, #3
 8003a1a:	1b11      	subs	r1, r2, r4
 8003a1c:	290f      	cmp	r1, #15
 8003a1e:	dd1c      	ble.n	8003a5a <_malloc_r+0x102>
 8003a20:	3b01      	subs	r3, #1
 8003a22:	3301      	adds	r3, #1
 8003a24:	e7d0      	b.n	80039c8 <_malloc_r+0x70>
 8003a26:	2b14      	cmp	r3, #20
 8003a28:	d801      	bhi.n	8003a2e <_malloc_r+0xd6>
 8003a2a:	335b      	adds	r3, #91	; 0x5b
 8003a2c:	e7ea      	b.n	8003a04 <_malloc_r+0xac>
 8003a2e:	2b54      	cmp	r3, #84	; 0x54
 8003a30:	d802      	bhi.n	8003a38 <_malloc_r+0xe0>
 8003a32:	0b23      	lsrs	r3, r4, #12
 8003a34:	336e      	adds	r3, #110	; 0x6e
 8003a36:	e7e5      	b.n	8003a04 <_malloc_r+0xac>
 8003a38:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003a3c:	d802      	bhi.n	8003a44 <_malloc_r+0xec>
 8003a3e:	0be3      	lsrs	r3, r4, #15
 8003a40:	3377      	adds	r3, #119	; 0x77
 8003a42:	e7df      	b.n	8003a04 <_malloc_r+0xac>
 8003a44:	f240 5254 	movw	r2, #1364	; 0x554
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d804      	bhi.n	8003a56 <_malloc_r+0xfe>
 8003a4c:	0ca3      	lsrs	r3, r4, #18
 8003a4e:	337c      	adds	r3, #124	; 0x7c
 8003a50:	e7d8      	b.n	8003a04 <_malloc_r+0xac>
 8003a52:	233f      	movs	r3, #63	; 0x3f
 8003a54:	e7d6      	b.n	8003a04 <_malloc_r+0xac>
 8003a56:	237e      	movs	r3, #126	; 0x7e
 8003a58:	e7d4      	b.n	8003a04 <_malloc_r+0xac>
 8003a5a:	2900      	cmp	r1, #0
 8003a5c:	68f1      	ldr	r1, [r6, #12]
 8003a5e:	db04      	blt.n	8003a6a <_malloc_r+0x112>
 8003a60:	68b3      	ldr	r3, [r6, #8]
 8003a62:	60d9      	str	r1, [r3, #12]
 8003a64:	608b      	str	r3, [r1, #8]
 8003a66:	18b3      	adds	r3, r6, r2
 8003a68:	e7a4      	b.n	80039b4 <_malloc_r+0x5c>
 8003a6a:	460e      	mov	r6, r1
 8003a6c:	e7d0      	b.n	8003a10 <_malloc_r+0xb8>
 8003a6e:	2f00      	cmp	r7, #0
 8003a70:	616a      	str	r2, [r5, #20]
 8003a72:	612a      	str	r2, [r5, #16]
 8003a74:	db05      	blt.n	8003a82 <_malloc_r+0x12a>
 8003a76:	4430      	add	r0, r6
 8003a78:	6843      	ldr	r3, [r0, #4]
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	6043      	str	r3, [r0, #4]
 8003a80:	e79c      	b.n	80039bc <_malloc_r+0x64>
 8003a82:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003a86:	d244      	bcs.n	8003b12 <_malloc_r+0x1ba>
 8003a88:	08c0      	lsrs	r0, r0, #3
 8003a8a:	1087      	asrs	r7, r0, #2
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	fa02 f707 	lsl.w	r7, r2, r7
 8003a92:	686a      	ldr	r2, [r5, #4]
 8003a94:	3001      	adds	r0, #1
 8003a96:	433a      	orrs	r2, r7
 8003a98:	606a      	str	r2, [r5, #4]
 8003a9a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8003a9e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8003aa2:	60b7      	str	r7, [r6, #8]
 8003aa4:	3a08      	subs	r2, #8
 8003aa6:	60f2      	str	r2, [r6, #12]
 8003aa8:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8003aac:	60fe      	str	r6, [r7, #12]
 8003aae:	2001      	movs	r0, #1
 8003ab0:	109a      	asrs	r2, r3, #2
 8003ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ab6:	6868      	ldr	r0, [r5, #4]
 8003ab8:	4282      	cmp	r2, r0
 8003aba:	f200 80a1 	bhi.w	8003c00 <_malloc_r+0x2a8>
 8003abe:	4202      	tst	r2, r0
 8003ac0:	d106      	bne.n	8003ad0 <_malloc_r+0x178>
 8003ac2:	f023 0303 	bic.w	r3, r3, #3
 8003ac6:	0052      	lsls	r2, r2, #1
 8003ac8:	4202      	tst	r2, r0
 8003aca:	f103 0304 	add.w	r3, r3, #4
 8003ace:	d0fa      	beq.n	8003ac6 <_malloc_r+0x16e>
 8003ad0:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8003ad4:	46e0      	mov	r8, ip
 8003ad6:	469e      	mov	lr, r3
 8003ad8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8003adc:	4546      	cmp	r6, r8
 8003ade:	d153      	bne.n	8003b88 <_malloc_r+0x230>
 8003ae0:	f10e 0e01 	add.w	lr, lr, #1
 8003ae4:	f01e 0f03 	tst.w	lr, #3
 8003ae8:	f108 0808 	add.w	r8, r8, #8
 8003aec:	d1f4      	bne.n	8003ad8 <_malloc_r+0x180>
 8003aee:	0798      	lsls	r0, r3, #30
 8003af0:	d179      	bne.n	8003be6 <_malloc_r+0x28e>
 8003af2:	686b      	ldr	r3, [r5, #4]
 8003af4:	ea23 0302 	bic.w	r3, r3, r2
 8003af8:	606b      	str	r3, [r5, #4]
 8003afa:	6868      	ldr	r0, [r5, #4]
 8003afc:	0052      	lsls	r2, r2, #1
 8003afe:	4282      	cmp	r2, r0
 8003b00:	d87e      	bhi.n	8003c00 <_malloc_r+0x2a8>
 8003b02:	2a00      	cmp	r2, #0
 8003b04:	d07c      	beq.n	8003c00 <_malloc_r+0x2a8>
 8003b06:	4673      	mov	r3, lr
 8003b08:	4202      	tst	r2, r0
 8003b0a:	d1e1      	bne.n	8003ad0 <_malloc_r+0x178>
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	0052      	lsls	r2, r2, #1
 8003b10:	e7fa      	b.n	8003b08 <_malloc_r+0x1b0>
 8003b12:	0a42      	lsrs	r2, r0, #9
 8003b14:	2a04      	cmp	r2, #4
 8003b16:	d815      	bhi.n	8003b44 <_malloc_r+0x1ec>
 8003b18:	0982      	lsrs	r2, r0, #6
 8003b1a:	3238      	adds	r2, #56	; 0x38
 8003b1c:	1c57      	adds	r7, r2, #1
 8003b1e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8003b22:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8003b26:	45be      	cmp	lr, r7
 8003b28:	d126      	bne.n	8003b78 <_malloc_r+0x220>
 8003b2a:	2001      	movs	r0, #1
 8003b2c:	1092      	asrs	r2, r2, #2
 8003b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b32:	6868      	ldr	r0, [r5, #4]
 8003b34:	4310      	orrs	r0, r2
 8003b36:	6068      	str	r0, [r5, #4]
 8003b38:	f8c6 e00c 	str.w	lr, [r6, #12]
 8003b3c:	60b7      	str	r7, [r6, #8]
 8003b3e:	f8ce 6008 	str.w	r6, [lr, #8]
 8003b42:	e7b3      	b.n	8003aac <_malloc_r+0x154>
 8003b44:	2a14      	cmp	r2, #20
 8003b46:	d801      	bhi.n	8003b4c <_malloc_r+0x1f4>
 8003b48:	325b      	adds	r2, #91	; 0x5b
 8003b4a:	e7e7      	b.n	8003b1c <_malloc_r+0x1c4>
 8003b4c:	2a54      	cmp	r2, #84	; 0x54
 8003b4e:	d802      	bhi.n	8003b56 <_malloc_r+0x1fe>
 8003b50:	0b02      	lsrs	r2, r0, #12
 8003b52:	326e      	adds	r2, #110	; 0x6e
 8003b54:	e7e2      	b.n	8003b1c <_malloc_r+0x1c4>
 8003b56:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8003b5a:	d802      	bhi.n	8003b62 <_malloc_r+0x20a>
 8003b5c:	0bc2      	lsrs	r2, r0, #15
 8003b5e:	3277      	adds	r2, #119	; 0x77
 8003b60:	e7dc      	b.n	8003b1c <_malloc_r+0x1c4>
 8003b62:	f240 5754 	movw	r7, #1364	; 0x554
 8003b66:	42ba      	cmp	r2, r7
 8003b68:	bf9a      	itte	ls
 8003b6a:	0c82      	lsrls	r2, r0, #18
 8003b6c:	327c      	addls	r2, #124	; 0x7c
 8003b6e:	227e      	movhi	r2, #126	; 0x7e
 8003b70:	e7d4      	b.n	8003b1c <_malloc_r+0x1c4>
 8003b72:	68bf      	ldr	r7, [r7, #8]
 8003b74:	45be      	cmp	lr, r7
 8003b76:	d004      	beq.n	8003b82 <_malloc_r+0x22a>
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	f022 0203 	bic.w	r2, r2, #3
 8003b7e:	4290      	cmp	r0, r2
 8003b80:	d3f7      	bcc.n	8003b72 <_malloc_r+0x21a>
 8003b82:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8003b86:	e7d7      	b.n	8003b38 <_malloc_r+0x1e0>
 8003b88:	6870      	ldr	r0, [r6, #4]
 8003b8a:	68f7      	ldr	r7, [r6, #12]
 8003b8c:	f020 0003 	bic.w	r0, r0, #3
 8003b90:	eba0 0a04 	sub.w	sl, r0, r4
 8003b94:	f1ba 0f0f 	cmp.w	sl, #15
 8003b98:	dd10      	ble.n	8003bbc <_malloc_r+0x264>
 8003b9a:	68b2      	ldr	r2, [r6, #8]
 8003b9c:	1933      	adds	r3, r6, r4
 8003b9e:	f044 0401 	orr.w	r4, r4, #1
 8003ba2:	6074      	str	r4, [r6, #4]
 8003ba4:	60d7      	str	r7, [r2, #12]
 8003ba6:	60ba      	str	r2, [r7, #8]
 8003ba8:	f04a 0201 	orr.w	r2, sl, #1
 8003bac:	616b      	str	r3, [r5, #20]
 8003bae:	612b      	str	r3, [r5, #16]
 8003bb0:	60d9      	str	r1, [r3, #12]
 8003bb2:	6099      	str	r1, [r3, #8]
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	f846 a000 	str.w	sl, [r6, r0]
 8003bba:	e6ff      	b.n	80039bc <_malloc_r+0x64>
 8003bbc:	f1ba 0f00 	cmp.w	sl, #0
 8003bc0:	db0f      	blt.n	8003be2 <_malloc_r+0x28a>
 8003bc2:	4430      	add	r0, r6
 8003bc4:	6843      	ldr	r3, [r0, #4]
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	6043      	str	r3, [r0, #4]
 8003bcc:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8003bd0:	4648      	mov	r0, r9
 8003bd2:	60df      	str	r7, [r3, #12]
 8003bd4:	60bb      	str	r3, [r7, #8]
 8003bd6:	f000 f8d3 	bl	8003d80 <__malloc_unlock>
 8003bda:	4630      	mov	r0, r6
 8003bdc:	b003      	add	sp, #12
 8003bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003be2:	463e      	mov	r6, r7
 8003be4:	e77a      	b.n	8003adc <_malloc_r+0x184>
 8003be6:	f85c 0908 	ldr.w	r0, [ip], #-8
 8003bea:	4584      	cmp	ip, r0
 8003bec:	f103 33ff 	add.w	r3, r3, #4294967295
 8003bf0:	f43f af7d 	beq.w	8003aee <_malloc_r+0x196>
 8003bf4:	e781      	b.n	8003afa <_malloc_r+0x1a2>
 8003bf6:	bf00      	nop
 8003bf8:	20000168 	.word	0x20000168
 8003bfc:	20000170 	.word	0x20000170
 8003c00:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8003c04:	f8db 6004 	ldr.w	r6, [fp, #4]
 8003c08:	f026 0603 	bic.w	r6, r6, #3
 8003c0c:	42b4      	cmp	r4, r6
 8003c0e:	d803      	bhi.n	8003c18 <_malloc_r+0x2c0>
 8003c10:	1b33      	subs	r3, r6, r4
 8003c12:	2b0f      	cmp	r3, #15
 8003c14:	f300 8096 	bgt.w	8003d44 <_malloc_r+0x3ec>
 8003c18:	4a4f      	ldr	r2, [pc, #316]	; (8003d58 <_malloc_r+0x400>)
 8003c1a:	6817      	ldr	r7, [r2, #0]
 8003c1c:	4a4f      	ldr	r2, [pc, #316]	; (8003d5c <_malloc_r+0x404>)
 8003c1e:	6811      	ldr	r1, [r2, #0]
 8003c20:	3710      	adds	r7, #16
 8003c22:	3101      	adds	r1, #1
 8003c24:	eb0b 0306 	add.w	r3, fp, r6
 8003c28:	4427      	add	r7, r4
 8003c2a:	d005      	beq.n	8003c38 <_malloc_r+0x2e0>
 8003c2c:	494c      	ldr	r1, [pc, #304]	; (8003d60 <_malloc_r+0x408>)
 8003c2e:	3901      	subs	r1, #1
 8003c30:	440f      	add	r7, r1
 8003c32:	3101      	adds	r1, #1
 8003c34:	4249      	negs	r1, r1
 8003c36:	400f      	ands	r7, r1
 8003c38:	4639      	mov	r1, r7
 8003c3a:	4648      	mov	r0, r9
 8003c3c:	9201      	str	r2, [sp, #4]
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	f000 f8a4 	bl	8003d8c <_sbrk_r>
 8003c44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003c48:	4680      	mov	r8, r0
 8003c4a:	d056      	beq.n	8003cfa <_malloc_r+0x3a2>
 8003c4c:	9b00      	ldr	r3, [sp, #0]
 8003c4e:	9a01      	ldr	r2, [sp, #4]
 8003c50:	4283      	cmp	r3, r0
 8003c52:	d901      	bls.n	8003c58 <_malloc_r+0x300>
 8003c54:	45ab      	cmp	fp, r5
 8003c56:	d150      	bne.n	8003cfa <_malloc_r+0x3a2>
 8003c58:	4842      	ldr	r0, [pc, #264]	; (8003d64 <_malloc_r+0x40c>)
 8003c5a:	6801      	ldr	r1, [r0, #0]
 8003c5c:	4543      	cmp	r3, r8
 8003c5e:	eb07 0e01 	add.w	lr, r7, r1
 8003c62:	f8c0 e000 	str.w	lr, [r0]
 8003c66:	4940      	ldr	r1, [pc, #256]	; (8003d68 <_malloc_r+0x410>)
 8003c68:	4682      	mov	sl, r0
 8003c6a:	d113      	bne.n	8003c94 <_malloc_r+0x33c>
 8003c6c:	420b      	tst	r3, r1
 8003c6e:	d111      	bne.n	8003c94 <_malloc_r+0x33c>
 8003c70:	68ab      	ldr	r3, [r5, #8]
 8003c72:	443e      	add	r6, r7
 8003c74:	f046 0601 	orr.w	r6, r6, #1
 8003c78:	605e      	str	r6, [r3, #4]
 8003c7a:	4a3c      	ldr	r2, [pc, #240]	; (8003d6c <_malloc_r+0x414>)
 8003c7c:	f8da 3000 	ldr.w	r3, [sl]
 8003c80:	6811      	ldr	r1, [r2, #0]
 8003c82:	428b      	cmp	r3, r1
 8003c84:	bf88      	it	hi
 8003c86:	6013      	strhi	r3, [r2, #0]
 8003c88:	4a39      	ldr	r2, [pc, #228]	; (8003d70 <_malloc_r+0x418>)
 8003c8a:	6811      	ldr	r1, [r2, #0]
 8003c8c:	428b      	cmp	r3, r1
 8003c8e:	bf88      	it	hi
 8003c90:	6013      	strhi	r3, [r2, #0]
 8003c92:	e032      	b.n	8003cfa <_malloc_r+0x3a2>
 8003c94:	6810      	ldr	r0, [r2, #0]
 8003c96:	3001      	adds	r0, #1
 8003c98:	bf1b      	ittet	ne
 8003c9a:	eba8 0303 	subne.w	r3, r8, r3
 8003c9e:	4473      	addne	r3, lr
 8003ca0:	f8c2 8000 	streq.w	r8, [r2]
 8003ca4:	f8ca 3000 	strne.w	r3, [sl]
 8003ca8:	f018 0007 	ands.w	r0, r8, #7
 8003cac:	bf1c      	itt	ne
 8003cae:	f1c0 0008 	rsbne	r0, r0, #8
 8003cb2:	4480      	addne	r8, r0
 8003cb4:	4b2a      	ldr	r3, [pc, #168]	; (8003d60 <_malloc_r+0x408>)
 8003cb6:	4447      	add	r7, r8
 8003cb8:	4418      	add	r0, r3
 8003cba:	400f      	ands	r7, r1
 8003cbc:	1bc7      	subs	r7, r0, r7
 8003cbe:	4639      	mov	r1, r7
 8003cc0:	4648      	mov	r0, r9
 8003cc2:	f000 f863 	bl	8003d8c <_sbrk_r>
 8003cc6:	1c43      	adds	r3, r0, #1
 8003cc8:	bf08      	it	eq
 8003cca:	4640      	moveq	r0, r8
 8003ccc:	f8da 3000 	ldr.w	r3, [sl]
 8003cd0:	f8c5 8008 	str.w	r8, [r5, #8]
 8003cd4:	bf08      	it	eq
 8003cd6:	2700      	moveq	r7, #0
 8003cd8:	eba0 0008 	sub.w	r0, r0, r8
 8003cdc:	443b      	add	r3, r7
 8003cde:	4407      	add	r7, r0
 8003ce0:	f047 0701 	orr.w	r7, r7, #1
 8003ce4:	45ab      	cmp	fp, r5
 8003ce6:	f8ca 3000 	str.w	r3, [sl]
 8003cea:	f8c8 7004 	str.w	r7, [r8, #4]
 8003cee:	d0c4      	beq.n	8003c7a <_malloc_r+0x322>
 8003cf0:	2e0f      	cmp	r6, #15
 8003cf2:	d810      	bhi.n	8003d16 <_malloc_r+0x3be>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f8c8 3004 	str.w	r3, [r8, #4]
 8003cfa:	68ab      	ldr	r3, [r5, #8]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	f022 0203 	bic.w	r2, r2, #3
 8003d02:	4294      	cmp	r4, r2
 8003d04:	eba2 0304 	sub.w	r3, r2, r4
 8003d08:	d801      	bhi.n	8003d0e <_malloc_r+0x3b6>
 8003d0a:	2b0f      	cmp	r3, #15
 8003d0c:	dc1a      	bgt.n	8003d44 <_malloc_r+0x3ec>
 8003d0e:	4648      	mov	r0, r9
 8003d10:	f000 f836 	bl	8003d80 <__malloc_unlock>
 8003d14:	e62d      	b.n	8003972 <_malloc_r+0x1a>
 8003d16:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003d1a:	3e0c      	subs	r6, #12
 8003d1c:	f026 0607 	bic.w	r6, r6, #7
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	4333      	orrs	r3, r6
 8003d26:	f8cb 3004 	str.w	r3, [fp, #4]
 8003d2a:	eb0b 0306 	add.w	r3, fp, r6
 8003d2e:	2205      	movs	r2, #5
 8003d30:	2e0f      	cmp	r6, #15
 8003d32:	605a      	str	r2, [r3, #4]
 8003d34:	609a      	str	r2, [r3, #8]
 8003d36:	d9a0      	bls.n	8003c7a <_malloc_r+0x322>
 8003d38:	f10b 0108 	add.w	r1, fp, #8
 8003d3c:	4648      	mov	r0, r9
 8003d3e:	f000 f88b 	bl	8003e58 <_free_r>
 8003d42:	e79a      	b.n	8003c7a <_malloc_r+0x322>
 8003d44:	68ae      	ldr	r6, [r5, #8]
 8003d46:	f044 0201 	orr.w	r2, r4, #1
 8003d4a:	4434      	add	r4, r6
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	6072      	str	r2, [r6, #4]
 8003d52:	60ac      	str	r4, [r5, #8]
 8003d54:	6063      	str	r3, [r4, #4]
 8003d56:	e631      	b.n	80039bc <_malloc_r+0x64>
 8003d58:	200008dc 	.word	0x200008dc
 8003d5c:	20000570 	.word	0x20000570
 8003d60:	00000080 	.word	0x00000080
 8003d64:	200008ac 	.word	0x200008ac
 8003d68:	0000007f 	.word	0x0000007f
 8003d6c:	200008d4 	.word	0x200008d4
 8003d70:	200008d8 	.word	0x200008d8

08003d74 <__malloc_lock>:
 8003d74:	4801      	ldr	r0, [pc, #4]	; (8003d7c <__malloc_lock+0x8>)
 8003d76:	f000 b92b 	b.w	8003fd0 <__retarget_lock_acquire_recursive>
 8003d7a:	bf00      	nop
 8003d7c:	20001d0c 	.word	0x20001d0c

08003d80 <__malloc_unlock>:
 8003d80:	4801      	ldr	r0, [pc, #4]	; (8003d88 <__malloc_unlock+0x8>)
 8003d82:	f000 b926 	b.w	8003fd2 <__retarget_lock_release_recursive>
 8003d86:	bf00      	nop
 8003d88:	20001d0c 	.word	0x20001d0c

08003d8c <_sbrk_r>:
 8003d8c:	b538      	push	{r3, r4, r5, lr}
 8003d8e:	4c06      	ldr	r4, [pc, #24]	; (8003da8 <_sbrk_r+0x1c>)
 8003d90:	2300      	movs	r3, #0
 8003d92:	4605      	mov	r5, r0
 8003d94:	4608      	mov	r0, r1
 8003d96:	6023      	str	r3, [r4, #0]
 8003d98:	f000 f91c 	bl	8003fd4 <_sbrk>
 8003d9c:	1c43      	adds	r3, r0, #1
 8003d9e:	d102      	bne.n	8003da6 <_sbrk_r+0x1a>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	b103      	cbz	r3, 8003da6 <_sbrk_r+0x1a>
 8003da4:	602b      	str	r3, [r5, #0]
 8003da6:	bd38      	pop	{r3, r4, r5, pc}
 8003da8:	20001d14 	.word	0x20001d14

08003dac <_malloc_trim_r>:
 8003dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003db0:	4f25      	ldr	r7, [pc, #148]	; (8003e48 <_malloc_trim_r+0x9c>)
 8003db2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8003e54 <_malloc_trim_r+0xa8>
 8003db6:	4689      	mov	r9, r1
 8003db8:	4606      	mov	r6, r0
 8003dba:	f7ff ffdb 	bl	8003d74 <__malloc_lock>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	685d      	ldr	r5, [r3, #4]
 8003dc2:	f1a8 0411 	sub.w	r4, r8, #17
 8003dc6:	f025 0503 	bic.w	r5, r5, #3
 8003dca:	eba4 0409 	sub.w	r4, r4, r9
 8003dce:	442c      	add	r4, r5
 8003dd0:	fbb4 f4f8 	udiv	r4, r4, r8
 8003dd4:	3c01      	subs	r4, #1
 8003dd6:	fb08 f404 	mul.w	r4, r8, r4
 8003dda:	4544      	cmp	r4, r8
 8003ddc:	da05      	bge.n	8003dea <_malloc_trim_r+0x3e>
 8003dde:	4630      	mov	r0, r6
 8003de0:	f7ff ffce 	bl	8003d80 <__malloc_unlock>
 8003de4:	2000      	movs	r0, #0
 8003de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dea:	2100      	movs	r1, #0
 8003dec:	4630      	mov	r0, r6
 8003dee:	f7ff ffcd 	bl	8003d8c <_sbrk_r>
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	442b      	add	r3, r5
 8003df6:	4298      	cmp	r0, r3
 8003df8:	d1f1      	bne.n	8003dde <_malloc_trim_r+0x32>
 8003dfa:	4261      	negs	r1, r4
 8003dfc:	4630      	mov	r0, r6
 8003dfe:	f7ff ffc5 	bl	8003d8c <_sbrk_r>
 8003e02:	3001      	adds	r0, #1
 8003e04:	d110      	bne.n	8003e28 <_malloc_trim_r+0x7c>
 8003e06:	2100      	movs	r1, #0
 8003e08:	4630      	mov	r0, r6
 8003e0a:	f7ff ffbf 	bl	8003d8c <_sbrk_r>
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	1a83      	subs	r3, r0, r2
 8003e12:	2b0f      	cmp	r3, #15
 8003e14:	dde3      	ble.n	8003dde <_malloc_trim_r+0x32>
 8003e16:	490d      	ldr	r1, [pc, #52]	; (8003e4c <_malloc_trim_r+0xa0>)
 8003e18:	6809      	ldr	r1, [r1, #0]
 8003e1a:	1a40      	subs	r0, r0, r1
 8003e1c:	490c      	ldr	r1, [pc, #48]	; (8003e50 <_malloc_trim_r+0xa4>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	6008      	str	r0, [r1, #0]
 8003e24:	6053      	str	r3, [r2, #4]
 8003e26:	e7da      	b.n	8003dde <_malloc_trim_r+0x32>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4a09      	ldr	r2, [pc, #36]	; (8003e50 <_malloc_trim_r+0xa4>)
 8003e2c:	1b2d      	subs	r5, r5, r4
 8003e2e:	f045 0501 	orr.w	r5, r5, #1
 8003e32:	605d      	str	r5, [r3, #4]
 8003e34:	6813      	ldr	r3, [r2, #0]
 8003e36:	4630      	mov	r0, r6
 8003e38:	1b1c      	subs	r4, r3, r4
 8003e3a:	6014      	str	r4, [r2, #0]
 8003e3c:	f7ff ffa0 	bl	8003d80 <__malloc_unlock>
 8003e40:	2001      	movs	r0, #1
 8003e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e46:	bf00      	nop
 8003e48:	20000168 	.word	0x20000168
 8003e4c:	20000570 	.word	0x20000570
 8003e50:	200008ac 	.word	0x200008ac
 8003e54:	00000080 	.word	0x00000080

08003e58 <_free_r>:
 8003e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e5c:	4604      	mov	r4, r0
 8003e5e:	4688      	mov	r8, r1
 8003e60:	2900      	cmp	r1, #0
 8003e62:	f000 80ab 	beq.w	8003fbc <_free_r+0x164>
 8003e66:	f7ff ff85 	bl	8003d74 <__malloc_lock>
 8003e6a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8003e6e:	4d54      	ldr	r5, [pc, #336]	; (8003fc0 <_free_r+0x168>)
 8003e70:	f022 0001 	bic.w	r0, r2, #1
 8003e74:	f1a8 0308 	sub.w	r3, r8, #8
 8003e78:	181f      	adds	r7, r3, r0
 8003e7a:	68a9      	ldr	r1, [r5, #8]
 8003e7c:	687e      	ldr	r6, [r7, #4]
 8003e7e:	428f      	cmp	r7, r1
 8003e80:	f026 0603 	bic.w	r6, r6, #3
 8003e84:	f002 0201 	and.w	r2, r2, #1
 8003e88:	d11b      	bne.n	8003ec2 <_free_r+0x6a>
 8003e8a:	4430      	add	r0, r6
 8003e8c:	b93a      	cbnz	r2, 8003e9e <_free_r+0x46>
 8003e8e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	4410      	add	r0, r2
 8003e96:	6899      	ldr	r1, [r3, #8]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	60ca      	str	r2, [r1, #12]
 8003e9c:	6091      	str	r1, [r2, #8]
 8003e9e:	f040 0201 	orr.w	r2, r0, #1
 8003ea2:	605a      	str	r2, [r3, #4]
 8003ea4:	60ab      	str	r3, [r5, #8]
 8003ea6:	4b47      	ldr	r3, [pc, #284]	; (8003fc4 <_free_r+0x16c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4298      	cmp	r0, r3
 8003eac:	d304      	bcc.n	8003eb8 <_free_r+0x60>
 8003eae:	4b46      	ldr	r3, [pc, #280]	; (8003fc8 <_free_r+0x170>)
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	6819      	ldr	r1, [r3, #0]
 8003eb4:	f7ff ff7a 	bl	8003dac <_malloc_trim_r>
 8003eb8:	4620      	mov	r0, r4
 8003eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ebe:	f7ff bf5f 	b.w	8003d80 <__malloc_unlock>
 8003ec2:	607e      	str	r6, [r7, #4]
 8003ec4:	2a00      	cmp	r2, #0
 8003ec6:	d139      	bne.n	8003f3c <_free_r+0xe4>
 8003ec8:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8003ecc:	1a5b      	subs	r3, r3, r1
 8003ece:	4408      	add	r0, r1
 8003ed0:	6899      	ldr	r1, [r3, #8]
 8003ed2:	f105 0e08 	add.w	lr, r5, #8
 8003ed6:	4571      	cmp	r1, lr
 8003ed8:	d032      	beq.n	8003f40 <_free_r+0xe8>
 8003eda:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8003ede:	f8c1 e00c 	str.w	lr, [r1, #12]
 8003ee2:	f8ce 1008 	str.w	r1, [lr, #8]
 8003ee6:	19b9      	adds	r1, r7, r6
 8003ee8:	6849      	ldr	r1, [r1, #4]
 8003eea:	07c9      	lsls	r1, r1, #31
 8003eec:	d40a      	bmi.n	8003f04 <_free_r+0xac>
 8003eee:	4430      	add	r0, r6
 8003ef0:	68b9      	ldr	r1, [r7, #8]
 8003ef2:	bb3a      	cbnz	r2, 8003f44 <_free_r+0xec>
 8003ef4:	4e35      	ldr	r6, [pc, #212]	; (8003fcc <_free_r+0x174>)
 8003ef6:	42b1      	cmp	r1, r6
 8003ef8:	d124      	bne.n	8003f44 <_free_r+0xec>
 8003efa:	616b      	str	r3, [r5, #20]
 8003efc:	612b      	str	r3, [r5, #16]
 8003efe:	2201      	movs	r2, #1
 8003f00:	60d9      	str	r1, [r3, #12]
 8003f02:	6099      	str	r1, [r3, #8]
 8003f04:	f040 0101 	orr.w	r1, r0, #1
 8003f08:	6059      	str	r1, [r3, #4]
 8003f0a:	5018      	str	r0, [r3, r0]
 8003f0c:	2a00      	cmp	r2, #0
 8003f0e:	d1d3      	bne.n	8003eb8 <_free_r+0x60>
 8003f10:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003f14:	d21a      	bcs.n	8003f4c <_free_r+0xf4>
 8003f16:	08c0      	lsrs	r0, r0, #3
 8003f18:	1081      	asrs	r1, r0, #2
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	408a      	lsls	r2, r1
 8003f1e:	6869      	ldr	r1, [r5, #4]
 8003f20:	3001      	adds	r0, #1
 8003f22:	430a      	orrs	r2, r1
 8003f24:	606a      	str	r2, [r5, #4]
 8003f26:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8003f2a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8003f2e:	6099      	str	r1, [r3, #8]
 8003f30:	3a08      	subs	r2, #8
 8003f32:	60da      	str	r2, [r3, #12]
 8003f34:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8003f38:	60cb      	str	r3, [r1, #12]
 8003f3a:	e7bd      	b.n	8003eb8 <_free_r+0x60>
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	e7d2      	b.n	8003ee6 <_free_r+0x8e>
 8003f40:	2201      	movs	r2, #1
 8003f42:	e7d0      	b.n	8003ee6 <_free_r+0x8e>
 8003f44:	68fe      	ldr	r6, [r7, #12]
 8003f46:	60ce      	str	r6, [r1, #12]
 8003f48:	60b1      	str	r1, [r6, #8]
 8003f4a:	e7db      	b.n	8003f04 <_free_r+0xac>
 8003f4c:	0a42      	lsrs	r2, r0, #9
 8003f4e:	2a04      	cmp	r2, #4
 8003f50:	d813      	bhi.n	8003f7a <_free_r+0x122>
 8003f52:	0982      	lsrs	r2, r0, #6
 8003f54:	3238      	adds	r2, #56	; 0x38
 8003f56:	1c51      	adds	r1, r2, #1
 8003f58:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8003f5c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8003f60:	428e      	cmp	r6, r1
 8003f62:	d124      	bne.n	8003fae <_free_r+0x156>
 8003f64:	2001      	movs	r0, #1
 8003f66:	1092      	asrs	r2, r2, #2
 8003f68:	fa00 f202 	lsl.w	r2, r0, r2
 8003f6c:	6868      	ldr	r0, [r5, #4]
 8003f6e:	4302      	orrs	r2, r0
 8003f70:	606a      	str	r2, [r5, #4]
 8003f72:	60de      	str	r6, [r3, #12]
 8003f74:	6099      	str	r1, [r3, #8]
 8003f76:	60b3      	str	r3, [r6, #8]
 8003f78:	e7de      	b.n	8003f38 <_free_r+0xe0>
 8003f7a:	2a14      	cmp	r2, #20
 8003f7c:	d801      	bhi.n	8003f82 <_free_r+0x12a>
 8003f7e:	325b      	adds	r2, #91	; 0x5b
 8003f80:	e7e9      	b.n	8003f56 <_free_r+0xfe>
 8003f82:	2a54      	cmp	r2, #84	; 0x54
 8003f84:	d802      	bhi.n	8003f8c <_free_r+0x134>
 8003f86:	0b02      	lsrs	r2, r0, #12
 8003f88:	326e      	adds	r2, #110	; 0x6e
 8003f8a:	e7e4      	b.n	8003f56 <_free_r+0xfe>
 8003f8c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8003f90:	d802      	bhi.n	8003f98 <_free_r+0x140>
 8003f92:	0bc2      	lsrs	r2, r0, #15
 8003f94:	3277      	adds	r2, #119	; 0x77
 8003f96:	e7de      	b.n	8003f56 <_free_r+0xfe>
 8003f98:	f240 5154 	movw	r1, #1364	; 0x554
 8003f9c:	428a      	cmp	r2, r1
 8003f9e:	bf9a      	itte	ls
 8003fa0:	0c82      	lsrls	r2, r0, #18
 8003fa2:	327c      	addls	r2, #124	; 0x7c
 8003fa4:	227e      	movhi	r2, #126	; 0x7e
 8003fa6:	e7d6      	b.n	8003f56 <_free_r+0xfe>
 8003fa8:	6889      	ldr	r1, [r1, #8]
 8003faa:	428e      	cmp	r6, r1
 8003fac:	d004      	beq.n	8003fb8 <_free_r+0x160>
 8003fae:	684a      	ldr	r2, [r1, #4]
 8003fb0:	f022 0203 	bic.w	r2, r2, #3
 8003fb4:	4290      	cmp	r0, r2
 8003fb6:	d3f7      	bcc.n	8003fa8 <_free_r+0x150>
 8003fb8:	68ce      	ldr	r6, [r1, #12]
 8003fba:	e7da      	b.n	8003f72 <_free_r+0x11a>
 8003fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fc0:	20000168 	.word	0x20000168
 8003fc4:	20000574 	.word	0x20000574
 8003fc8:	200008dc 	.word	0x200008dc
 8003fcc:	20000170 	.word	0x20000170

08003fd0 <__retarget_lock_acquire_recursive>:
 8003fd0:	4770      	bx	lr

08003fd2 <__retarget_lock_release_recursive>:
 8003fd2:	4770      	bx	lr

08003fd4 <_sbrk>:
 8003fd4:	4b04      	ldr	r3, [pc, #16]	; (8003fe8 <_sbrk+0x14>)
 8003fd6:	6819      	ldr	r1, [r3, #0]
 8003fd8:	4602      	mov	r2, r0
 8003fda:	b909      	cbnz	r1, 8003fe0 <_sbrk+0xc>
 8003fdc:	4903      	ldr	r1, [pc, #12]	; (8003fec <_sbrk+0x18>)
 8003fde:	6019      	str	r1, [r3, #0]
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	4402      	add	r2, r0
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	4770      	bx	lr
 8003fe8:	200008e0 	.word	0x200008e0
 8003fec:	20001d18 	.word	0x20001d18

08003ff0 <_init>:
 8003ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff2:	bf00      	nop
 8003ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff6:	bc08      	pop	{r3}
 8003ff8:	469e      	mov	lr, r3
 8003ffa:	4770      	bx	lr

08003ffc <_fini>:
 8003ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffe:	bf00      	nop
 8004000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004002:	bc08      	pop	{r3}
 8004004:	469e      	mov	lr, r3
 8004006:	4770      	bx	lr
