
uBMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fa4  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08004134  08004134  00014134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004378  08004378  00014378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800437c  0800437c  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  20000000  08004380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000744  2000008c  0800440c  0002008c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200007d0  0800440c  000207d0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c9ce  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000034d3  00000000  00000000  0003ca8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007793  00000000  00000000  0003ff5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c80  00000000  00000000  000476f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000012b0  00000000  00000000  00048370  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006822  00000000  00000000  00049620  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004ebb  00000000  00000000  0004fe42  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00054cfd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002390  00000000  00000000  00054d7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800411c 	.word	0x0800411c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800411c 	.word	0x0800411c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f092 0f00 	teq	r2, #0
 80004ba:	bf14      	ite	ne
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e720      	b.n	8000314 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aedc 	beq.w	80002c2 <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6c1      	b.n	80002c2 <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_InitTick+0x24>)
{
 8000b18:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000b1a:	6818      	ldr	r0, [r3, #0]
 8000b1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b20:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b24:	f000 f878 	bl	8000c18 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4621      	mov	r1, r4
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f000 f83e 	bl	8000bb0 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000b34:	2000      	movs	r0, #0
 8000b36:	bd10      	pop	{r4, pc}
 8000b38:	20000024 	.word	0x20000024

08000b3c <HAL_Init>:
{
 8000b3c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3e:	2003      	movs	r0, #3
 8000b40:	f000 f824 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b44:	2000      	movs	r0, #0
 8000b46:	f7ff ffe5 	bl	8000b14 <HAL_InitTick>
  HAL_MspInit();
 8000b4a:	f003 f823 	bl	8003b94 <HAL_MspInit>
}
 8000b4e:	2000      	movs	r0, #0
 8000b50:	bd08      	pop	{r3, pc}
	...

08000b54 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000b54:	4a02      	ldr	r2, [pc, #8]	; (8000b60 <HAL_IncTick+0xc>)
 8000b56:	6813      	ldr	r3, [r2, #0]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	200000c8 	.word	0x200000c8

08000b64 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b64:	4b01      	ldr	r3, [pc, #4]	; (8000b6c <HAL_GetTick+0x8>)
 8000b66:	6818      	ldr	r0, [r3, #0]
}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	200000c8 	.word	0x200000c8

08000b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b70:	b538      	push	{r3, r4, r5, lr}
 8000b72:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b74:	f7ff fff6 	bl	8000b64 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b78:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000b7a:	4605      	mov	r5, r0
  {
    wait++;
 8000b7c:	bf18      	it	ne
 8000b7e:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000b80:	f7ff fff0 	bl	8000b64 <HAL_GetTick>
 8000b84:	1b40      	subs	r0, r0, r5
 8000b86:	4284      	cmp	r4, r0
 8000b88:	d8fa      	bhi.n	8000b80 <HAL_Delay+0x10>
  {
  }
}
 8000b8a:	bd38      	pop	{r3, r4, r5, pc}

08000b8c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b8e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b94:	041b      	lsls	r3, r3, #16
 8000b96:	0c1b      	lsrs	r3, r3, #16
 8000b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b9c:	0200      	lsls	r0, r0, #8
 8000b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000ba6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ba8:	60d3      	str	r3, [r2, #12]
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb2:	b530      	push	{r4, r5, lr}
 8000bb4:	68dc      	ldr	r4, [r3, #12]
 8000bb6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bbe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	bf28      	it	cs
 8000bc4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	f04f 0501 	mov.w	r5, #1
 8000bcc:	fa05 f303 	lsl.w	r3, r5, r3
 8000bd0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd4:	bf8c      	ite	hi
 8000bd6:	3c03      	subhi	r4, #3
 8000bd8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bda:	4019      	ands	r1, r3
 8000bdc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bde:	fa05 f404 	lsl.w	r4, r5, r4
 8000be2:	3c01      	subs	r4, #1
 8000be4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000be6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	ea42 0201 	orr.w	r2, r2, r1
 8000bec:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	bfaf      	iteee	ge
 8000bf2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	f000 000f 	andlt.w	r0, r0, #15
 8000bfa:	4b06      	ldrlt	r3, [pc, #24]	; (8000c14 <HAL_NVIC_SetPriority+0x64>)
 8000bfc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfe:	bfa5      	ittet	ge
 8000c00:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000c04:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c06:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000c0c:	bd30      	pop	{r4, r5, pc}
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00
 8000c14:	e000ed14 	.word	0xe000ed14

08000c18 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c18:	3801      	subs	r0, #1
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d20a      	bcs.n	8000c36 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c24:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	21f0      	movs	r1, #240	; 0xf0
 8000c28:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c2c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c30:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c36:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e010 	.word	0xe000e010
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c46:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c48:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c4a:	bf0c      	ite	eq
 8000c4c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000c50:	f022 0204 	bicne.w	r2, r2, #4
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	4770      	bx	lr
 8000c58:	e000e010 	.word	0xe000e010

08000c5c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c5c:	4770      	bx	lr

08000c5e <HAL_SYSTICK_IRQHandler>:
{
 8000c5e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000c60:	f7ff fffc 	bl	8000c5c <HAL_SYSTICK_Callback>
 8000c64:	bd08      	pop	{r3, pc}
	...

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c6c:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c70:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8000de8 <HAL_GPIO_Init+0x180>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c74:	4a5a      	ldr	r2, [pc, #360]	; (8000de0 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00;
 8000c76:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c78:	fa38 f403 	lsrs.w	r4, r8, r3
 8000c7c:	d102      	bne.n	8000c84 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000c7e:	b003      	add	sp, #12
 8000c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c84:	2401      	movs	r4, #1
 8000c86:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000c8a:	ea18 050a 	ands.w	r5, r8, sl
 8000c8e:	f000 809c 	beq.w	8000dca <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c92:	684c      	ldr	r4, [r1, #4]
 8000c94:	f024 0b10 	bic.w	fp, r4, #16
 8000c98:	f1bb 0f02 	cmp.w	fp, #2
 8000c9c:	d114      	bne.n	8000cc8 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8000c9e:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000ca2:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ca6:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000caa:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000cae:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000cb2:	270f      	movs	r7, #15
 8000cb4:	fa07 f70c 	lsl.w	r7, r7, ip
 8000cb8:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000cbc:	690e      	ldr	r6, [r1, #16]
 8000cbe:	fa06 f60c 	lsl.w	r6, r6, ip
 8000cc2:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8000cc4:	f8ce 6020 	str.w	r6, [lr, #32]
 8000cc8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000ccc:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000cce:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000cd0:	fa07 f70c 	lsl.w	r7, r7, ip
 8000cd4:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000cd6:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000cda:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000cdc:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ce0:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ce4:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ce8:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000cec:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cee:	d811      	bhi.n	8000d14 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8000cf0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000cf2:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8000cf6:	68ce      	ldr	r6, [r1, #12]
 8000cf8:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000cfc:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000d00:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d02:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d04:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d08:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000d0c:	409e      	lsls	r6, r3
 8000d0e:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000d12:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d14:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000d16:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d18:	688e      	ldr	r6, [r1, #8]
 8000d1a:	fa06 f60c 	lsl.w	r6, r6, ip
 8000d1e:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d20:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000d22:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d24:	d551      	bpl.n	8000dca <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8000d2a:	f046 0601 	orr.w	r6, r6, #1
 8000d2e:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8000d32:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8000d36:	f023 0703 	bic.w	r7, r3, #3
 8000d3a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000d3e:	f006 0601 	and.w	r6, r6, #1
 8000d42:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000d46:	9601      	str	r6, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d48:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4c:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000d4e:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d50:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000d54:	f04f 0e0f 	mov.w	lr, #15
 8000d58:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000d5c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d60:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000d64:	d033      	beq.n	8000dce <HAL_GPIO_Init+0x166>
 8000d66:	4e1f      	ldr	r6, [pc, #124]	; (8000de4 <HAL_GPIO_Init+0x17c>)
 8000d68:	42b0      	cmp	r0, r6
 8000d6a:	d032      	beq.n	8000dd2 <HAL_GPIO_Init+0x16a>
 8000d6c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d70:	42b0      	cmp	r0, r6
 8000d72:	d030      	beq.n	8000dd6 <HAL_GPIO_Init+0x16e>
 8000d74:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d78:	42b0      	cmp	r0, r6
 8000d7a:	d02e      	beq.n	8000dda <HAL_GPIO_Init+0x172>
 8000d7c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d80:	42b0      	cmp	r0, r6
 8000d82:	bf14      	ite	ne
 8000d84:	2607      	movne	r6, #7
 8000d86:	2604      	moveq	r6, #4
 8000d88:	fa06 f60c 	lsl.w	r6, r6, ip
 8000d8c:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d90:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8000d92:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d94:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d96:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000d9a:	bf0c      	ite	eq
 8000d9c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000d9e:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8000da0:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 8000da2:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000da4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000da8:	bf0c      	ite	eq
 8000daa:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000dac:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000dae:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 8000db0:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000db2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000db6:	bf0c      	ite	eq
 8000db8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000dba:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8000dbc:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 8000dbe:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dc0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000dc2:	bf54      	ite	pl
 8000dc4:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000dc6:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000dc8:	60d6      	str	r6, [r2, #12]
    position++;
 8000dca:	3301      	adds	r3, #1
 8000dcc:	e754      	b.n	8000c78 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000dce:	2600      	movs	r6, #0
 8000dd0:	e7da      	b.n	8000d88 <HAL_GPIO_Init+0x120>
 8000dd2:	2601      	movs	r6, #1
 8000dd4:	e7d8      	b.n	8000d88 <HAL_GPIO_Init+0x120>
 8000dd6:	2602      	movs	r6, #2
 8000dd8:	e7d6      	b.n	8000d88 <HAL_GPIO_Init+0x120>
 8000dda:	2603      	movs	r6, #3
 8000ddc:	e7d4      	b.n	8000d88 <HAL_GPIO_Init+0x120>
 8000dde:	bf00      	nop
 8000de0:	40010400 	.word	0x40010400
 8000de4:	48000400 	.word	0x48000400
 8000de8:	40021000 	.word	0x40021000

08000dec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dec:	6903      	ldr	r3, [r0, #16]
 8000dee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000df0:	bf14      	ite	ne
 8000df2:	2001      	movne	r0, #1
 8000df4:	2000      	moveq	r0, #0
 8000df6:	4770      	bx	lr

08000df8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000df8:	b10a      	cbz	r2, 8000dfe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dfa:	6181      	str	r1, [r0, #24]
 8000dfc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dfe:	6281      	str	r1, [r0, #40]	; 0x28
 8000e00:	4770      	bx	lr

08000e02 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000e02:	6943      	ldr	r3, [r0, #20]
 8000e04:	4059      	eors	r1, r3
 8000e06:	6141      	str	r1, [r0, #20]
 8000e08:	4770      	bx	lr

08000e0a <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000e0a:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8000e0e:	2a01      	cmp	r2, #1
{
 8000e10:	b510      	push	{r4, lr}
 8000e12:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000e14:	d00b      	beq.n	8000e2e <HAL_PCD_SetAddress+0x24>
 8000e16:	2201      	movs	r2, #1
 8000e18:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 8000e1c:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000e20:	6800      	ldr	r0, [r0, #0]
 8000e22:	f001 fd9f 	bl	8002964 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000e26:	2000      	movs	r0, #0
 8000e28:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 8000e2c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000e2e:	2002      	movs	r0, #2
  return HAL_OK;
}
 8000e30:	bd10      	pop	{r4, pc}

08000e32 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000e32:	b570      	push	{r4, r5, r6, lr}
 8000e34:	4604      	mov	r4, r0
 8000e36:	f001 000f 	and.w	r0, r1, #15
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000e3a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000e3e:	b2c5      	uxtb	r5, r0
 8000e40:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8000e44:	fb01 4105 	mla	r1, r1, r5, r4
    ep->is_in = 1U;
 8000e48:	bf15      	itete	ne
 8000e4a:	eb04 1545 	addne.w	r5, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
    ep->is_in = 0U;
 8000e4e:	eb04 1545 	addeq.w	r5, r4, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8000e52:	3128      	addne	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8000e54:	f501 710a 	addeq.w	r1, r1, #552	; 0x228
    ep->is_in = 1U;
 8000e58:	bf15      	itete	ne
 8000e5a:	2601      	movne	r6, #1
    ep->is_in = 0U;
 8000e5c:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 8000e5e:	f885 6029 	strbne.w	r6, [r5, #41]	; 0x29
    ep->is_in = 0U;
 8000e62:	f885 6229 	strbeq.w	r6, [r5, #553]	; 0x229
  }

  ep->num = ep_addr & 0xFU;
  ep->maxpacket = ep_mps;
 8000e66:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8000e68:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 8000e6a:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & 0xFU;
 8000e6c:	b2c0      	uxtb	r0, r0
 8000e6e:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 8000e70:	b102      	cbz	r2, 8000e74 <HAL_PCD_EP_Open+0x42>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000e72:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000e74:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8000e76:	bf04      	itt	eq
 8000e78:	2300      	moveq	r3, #0
 8000e7a:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8000e7c:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d009      	beq.n	8000e98 <HAL_PCD_EP_Open+0x66>
 8000e84:	2301      	movs	r3, #1
 8000e86:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000e8a:	6820      	ldr	r0, [r4, #0]
 8000e8c:	f001 fb8c 	bl	80025a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428

  return ret;
 8000e96:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8000e98:	2002      	movs	r0, #2
}
 8000e9a:	bd70      	pop	{r4, r5, r6, pc}

08000e9c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e9c:	b570      	push	{r4, r5, r6, lr}
 8000e9e:	f001 010f 	and.w	r1, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0xFU];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000ea2:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 8000ea6:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000ea8:	2500      	movs	r5, #0
  ep->is_in = 0U;
  ep->num = ep_addr & 0xFU;
 8000eaa:	f886 1228 	strb.w	r1, [r6, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8000eae:	f504 710a 	add.w	r1, r4, #552	; 0x228
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000eb2:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8000eb4:	f8c6 223c 	str.w	r2, [r6, #572]	; 0x23c
  ep->xfer_len = len;
 8000eb8:	f8c6 3240 	str.w	r3, [r6, #576]	; 0x240
  ep->xfer_count = 0U;
 8000ebc:	f8c6 5244 	str.w	r5, [r6, #580]	; 0x244
  ep->is_in = 0U;
 8000ec0:	f886 5229 	strb.w	r5, [r6, #553]	; 0x229
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000ec4:	6800      	ldr	r0, [r0, #0]
 8000ec6:	f001 fd6b 	bl	80029a0 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000eca:	4628      	mov	r0, r5
 8000ecc:	bd70      	pop	{r4, r5, r6, pc}

08000ece <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000ece:	b570      	push	{r4, r5, r6, lr}
 8000ed0:	f001 010f 	and.w	r1, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0xFU];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000ed4:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8000ed8:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
 8000eda:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_count = 0U;
 8000edc:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000ede:	2301      	movs	r3, #1
  ep->num = ep_addr & 0xFU;
 8000ee0:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8000ee4:	f104 0128 	add.w	r1, r4, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000ee8:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8000eea:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_count = 0U;
 8000eec:	646e      	str	r6, [r5, #68]	; 0x44
  ep->is_in = 1U;
 8000eee:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000ef2:	6800      	ldr	r0, [r0, #0]
 8000ef4:	f001 fd54 	bl	80029a0 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000ef8:	4630      	mov	r0, r6
 8000efa:	bd70      	pop	{r4, r5, r6, pc}

08000efc <HAL_PCD_IRQHandler>:
{
 8000efc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f00:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000f02:	6800      	ldr	r0, [r0, #0]
 8000f04:	f001 fd34 	bl	8002970 <USB_ReadInterrupts>
 8000f08:	0400      	lsls	r0, r0, #16
 8000f0a:	f100 8230 	bmi.w	800136e <HAL_PCD_IRQHandler+0x472>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000f0e:	6820      	ldr	r0, [r4, #0]
 8000f10:	f001 fd2e 	bl	8002970 <USB_ReadInterrupts>
 8000f14:	0541      	lsls	r1, r0, #21
 8000f16:	d50f      	bpl.n	8000f38 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f18:	6822      	ldr	r2, [r4, #0]
 8000f1a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000f1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f22:	041b      	lsls	r3, r3, #16
 8000f24:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 8000f26:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f28:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000f2c:	f002 ff11 	bl	8003d52 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000f30:	2100      	movs	r1, #0
 8000f32:	4620      	mov	r0, r4
 8000f34:	f7ff ff69 	bl	8000e0a <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000f38:	6820      	ldr	r0, [r4, #0]
 8000f3a:	f001 fd19 	bl	8002970 <USB_ReadInterrupts>
 8000f3e:	0443      	lsls	r3, r0, #17
 8000f40:	d508      	bpl.n	8000f54 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000f42:	6822      	ldr	r2, [r4, #0]
 8000f44:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f4c:	041b      	lsls	r3, r3, #16
 8000f4e:	0c1b      	lsrs	r3, r3, #16
 8000f50:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000f54:	6820      	ldr	r0, [r4, #0]
 8000f56:	f001 fd0b 	bl	8002970 <USB_ReadInterrupts>
 8000f5a:	0487      	lsls	r7, r0, #18
 8000f5c:	d508      	bpl.n	8000f70 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000f5e:	6822      	ldr	r2, [r4, #0]
 8000f60:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000f64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f68:	041b      	lsls	r3, r3, #16
 8000f6a:	0c1b      	lsrs	r3, r3, #16
 8000f6c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000f70:	6820      	ldr	r0, [r4, #0]
 8000f72:	f001 fcfd 	bl	8002970 <USB_ReadInterrupts>
 8000f76:	04c6      	lsls	r6, r0, #19
 8000f78:	d526      	bpl.n	8000fc8 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000f7a:	6822      	ldr	r2, [r4, #0]
 8000f7c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000f80:	f023 0304 	bic.w	r3, r3, #4
 8000f84:	041b      	lsls	r3, r3, #16
 8000f86:	0c1b      	lsrs	r3, r3, #16
 8000f88:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000f8c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000f90:	f023 0308 	bic.w	r3, r3, #8
 8000f94:	041b      	lsls	r3, r3, #16
 8000f96:	0c1b      	lsrs	r3, r3, #16
 8000f98:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8000f9c:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d105      	bne.n	8000fb0 <HAL_PCD_IRQHandler+0xb4>
      hpcd->LPM_State = LPM_L0;
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	f884 1460 	strb.w	r1, [r4, #1120]	; 0x460
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000faa:	4620      	mov	r0, r4
 8000fac:	f002 ff68 	bl	8003e80 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	f002 feeb 	bl	8003d8c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000fb6:	6822      	ldr	r2, [r4, #0]
 8000fb8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000fbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fc0:	041b      	lsls	r3, r3, #16
 8000fc2:	0c1b      	lsrs	r3, r3, #16
 8000fc4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000fc8:	6820      	ldr	r0, [r4, #0]
 8000fca:	f001 fcd1 	bl	8002970 <USB_ReadInterrupts>
 8000fce:	0505      	lsls	r5, r0, #20
 8000fd0:	d51d      	bpl.n	800100e <HAL_PCD_IRQHandler+0x112>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000fd2:	6820      	ldr	r0, [r4, #0]
 8000fd4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000fe2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000fe6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fea:	041b      	lsls	r3, r3, #16
 8000fec:	0c1b      	lsrs	r3, r3, #16
 8000fee:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000ff2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8001000:	f001 fcb6 	bl	8002970 <USB_ReadInterrupts>
 8001004:	04c0      	lsls	r0, r0, #19
 8001006:	d402      	bmi.n	800100e <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_SuspendCallback(hpcd);
 8001008:	4620      	mov	r0, r4
 800100a:	f002 feaf 	bl	8003d6c <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800100e:	6820      	ldr	r0, [r4, #0]
 8001010:	f001 fcae 	bl	8002970 <USB_ReadInterrupts>
 8001014:	0601      	lsls	r1, r0, #24
 8001016:	d529      	bpl.n	800106c <HAL_PCD_IRQHandler+0x170>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001018:	6823      	ldr	r3, [r4, #0]
 800101a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800101e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001022:	0412      	lsls	r2, r2, #16
 8001024:	0c12      	lsrs	r2, r2, #16
 8001026:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800102a:	f894 2460 	ldrb.w	r2, [r4, #1120]	; 0x460
 800102e:	2a00      	cmp	r2, #0
 8001030:	f040 81a2 	bne.w	8001378 <HAL_PCD_IRQHandler+0x47c>
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001034:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001038:	b292      	uxth	r2, r2
 800103a:	f042 0204 	orr.w	r2, r2, #4
 800103e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001042:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001046:	b292      	uxth	r2, r2
 8001048:	f042 0208 	orr.w	r2, r2, #8
 800104c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001050:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001054:	f3c3 038d 	ubfx	r3, r3, #2, #14
      hpcd->LPM_State = LPM_L1;
 8001058:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800105a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 800105e:	f884 1460 	strb.w	r1, [r4, #1120]	; 0x460
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001062:	f8c4 3464 	str.w	r3, [r4, #1124]	; 0x464
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001066:	4620      	mov	r0, r4
 8001068:	f002 ff0a 	bl	8003e80 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800106c:	6820      	ldr	r0, [r4, #0]
 800106e:	f001 fc7f 	bl	8002970 <USB_ReadInterrupts>
 8001072:	0582      	lsls	r2, r0, #22
 8001074:	d50b      	bpl.n	800108e <HAL_PCD_IRQHandler+0x192>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001076:	6822      	ldr	r2, [r4, #0]
 8001078:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800107c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001080:	041b      	lsls	r3, r3, #16
 8001082:	0c1b      	lsrs	r3, r3, #16
 8001084:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001088:	4620      	mov	r0, r4
 800108a:	f002 fe5e 	bl	8003d4a <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800108e:	6820      	ldr	r0, [r4, #0]
 8001090:	f001 fc6e 	bl	8002970 <USB_ReadInterrupts>
 8001094:	05c3      	lsls	r3, r0, #23
 8001096:	d508      	bpl.n	80010aa <HAL_PCD_IRQHandler+0x1ae>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001098:	6822      	ldr	r2, [r4, #0]
 800109a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800109e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010a2:	041b      	lsls	r3, r3, #16
 80010a4:	0c1b      	lsrs	r3, r3, #16
 80010a6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 80010aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 80010ae:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 80010b2:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 80010b4:	f011 070f 	ands.w	r7, r1, #15
 80010b8:	f040 80a5 	bne.w	8001206 <HAL_PCD_IRQHandler+0x30a>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010bc:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80010be:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010c2:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80010c4:	d129      	bne.n	800111a <HAL_PCD_IRQHandler+0x21e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010c6:	ea03 030a 	and.w	r3, r3, sl
 80010ca:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010cc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80010d0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80010d4:	f200 4002 	addw	r0, r0, #1026	; 0x402
 80010d8:	fa10 f083 	uxtah	r0, r0, r3
 80010dc:	f830 3032 	ldrh.w	r3, [r0, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 80010e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010e6:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80010e8:	4413      	add	r3, r2
 80010ea:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80010ec:	4620      	mov	r0, r4
 80010ee:	f002 fe25 	bl	8003d3c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80010f2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80010f6:	b153      	cbz	r3, 800110e <HAL_PCD_IRQHandler+0x212>
 80010f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80010fa:	b942      	cbnz	r2, 800110e <HAL_PCD_IRQHandler+0x212>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80010fc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001100:	6821      	ldr	r1, [r4, #0]
 8001102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001106:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800110a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800110e:	6820      	ldr	r0, [r4, #0]
 8001110:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001114:	041a      	lsls	r2, r3, #16
 8001116:	d4ca      	bmi.n	80010ae <HAL_PCD_IRQHandler+0x1b2>
 8001118:	e6f9      	b.n	8000f0e <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800111a:	051a      	lsls	r2, r3, #20
 800111c:	d51e      	bpl.n	800115c <HAL_PCD_IRQHandler+0x260>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800111e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001122:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8001126:	f200 4106 	addw	r1, r0, #1030	; 0x406
 800112a:	fa11 f383 	uxtah	r3, r1, r3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 800112e:	f504 6186 	add.w	r1, r4, #1072	; 0x430
 8001132:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8001136:	f8b4 222e 	ldrh.w	r2, [r4, #558]	; 0x22e
 800113a:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800113e:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 8001142:	f001 fd15 	bl	8002b70 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001146:	6822      	ldr	r2, [r4, #0]
 8001148:	8813      	ldrh	r3, [r2, #0]
 800114a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800114e:	051b      	lsls	r3, r3, #20
 8001150:	0d1b      	lsrs	r3, r3, #20
 8001152:	8013      	strh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001154:	4620      	mov	r0, r4
 8001156:	f002 fde3 	bl	8003d20 <HAL_PCD_SetupStageCallback>
 800115a:	e7d8      	b.n	800110e <HAL_PCD_IRQHandler+0x212>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800115c:	041f      	lsls	r7, r3, #16
 800115e:	d5d6      	bpl.n	800110e <HAL_PCD_IRQHandler+0x212>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001160:	8803      	ldrh	r3, [r0, #0]
 8001162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001166:	051b      	lsls	r3, r3, #20
 8001168:	0d1b      	lsrs	r3, r3, #20
 800116a:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800116c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001170:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8001174:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8001178:	fa11 f383 	uxtah	r3, r1, r3
 800117c:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8001180:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001184:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244

          if (ep->xfer_count != 0U)
 8001188:	b163      	cbz	r3, 80011a4 <HAL_PCD_IRQHandler+0x2a8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 800118a:	f8b4 222e 	ldrh.w	r2, [r4, #558]	; 0x22e
 800118e:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8001192:	f001 fced 	bl	8002b70 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001196:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 800119a:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 800119e:	4413      	add	r3, r2
 80011a0:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80011a4:	2100      	movs	r1, #0
 80011a6:	4620      	mov	r0, r4
 80011a8:	f002 fdc0 	bl	8003d2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80011ac:	6822      	ldr	r2, [r4, #0]
 80011ae:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
 80011b2:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80011b6:	f202 4506 	addw	r5, r2, #1030	; 0x406
 80011ba:	b289      	uxth	r1, r1
 80011bc:	b953      	cbnz	r3, 80011d4 <HAL_PCD_IRQHandler+0x2d8>
 80011be:	5a6b      	ldrh	r3, [r5, r1]
 80011c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80011c4:	049b      	lsls	r3, r3, #18
 80011c6:	0c9b      	lsrs	r3, r3, #18
 80011c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80011cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011d0:	526b      	strh	r3, [r5, r1]
 80011d2:	e007      	b.n	80011e4 <HAL_PCD_IRQHandler+0x2e8>
 80011d4:	2b3d      	cmp	r3, #61	; 0x3d
 80011d6:	d811      	bhi.n	80011fc <HAL_PCD_IRQHandler+0x300>
 80011d8:	0858      	lsrs	r0, r3, #1
 80011da:	07de      	lsls	r6, r3, #31
 80011dc:	bf48      	it	mi
 80011de:	3001      	addmi	r0, #1
 80011e0:	0280      	lsls	r0, r0, #10
 80011e2:	5268      	strh	r0, [r5, r1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80011e4:	8813      	ldrh	r3, [r2, #0]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	ea03 030b 	and.w	r3, r3, fp
 80011ec:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80011f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f8:	8013      	strh	r3, [r2, #0]
 80011fa:	e788      	b.n	800110e <HAL_PCD_IRQHandler+0x212>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80011fc:	4860      	ldr	r0, [pc, #384]	; (8001380 <HAL_PCD_IRQHandler+0x484>)
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	ea40 2383 	orr.w	r3, r0, r3, lsl #10
 8001204:	e7e4      	b.n	80011d0 <HAL_PCD_IRQHandler+0x2d4>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001206:	b23e      	sxth	r6, r7
 8001208:	f830 9026 	ldrh.w	r9, [r0, r6, lsl #2]
 800120c:	fa1f f989 	uxth.w	r9, r9
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001210:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 8001214:	d03e      	beq.n	8001294 <HAL_PCD_IRQHandler+0x398>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001216:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 800121a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800121e:	051b      	lsls	r3, r3, #20
 8001220:	0d1b      	lsrs	r3, r3, #20
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001222:	ea4f 1847 	mov.w	r8, r7, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001226:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800122a:	eb04 0108 	add.w	r1, r4, r8
 800122e:	f891 3234 	ldrb.w	r3, [r1, #564]	; 0x234
 8001232:	2b00      	cmp	r3, #0
 8001234:	d157      	bne.n	80012e6 <HAL_PCD_IRQHandler+0x3ea>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001236:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800123a:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 800123e:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001242:	fa15 f383 	uxtah	r3, r5, r3
 8001246:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 800124a:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 800124e:	b135      	cbz	r5, 800125e <HAL_PCD_IRQHandler+0x362>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001250:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
 8001254:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8001258:	462b      	mov	r3, r5
 800125a:	f001 fc89 	bl	8002b70 <USB_ReadPMA>
 800125e:	eb04 1346 	add.w	r3, r4, r6, lsl #5
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
        ep->xfer_buff += count;
 8001262:	eb04 0108 	add.w	r1, r4, r8
        ep->xfer_count += count;
 8001266:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800126a:	442a      	add	r2, r5
 800126c:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
        ep->xfer_buff += count;
 8001270:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
 8001274:	442a      	add	r2, r5
 8001276:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800127a:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800127e:	b11b      	cbz	r3, 8001288 <HAL_PCD_IRQHandler+0x38c>
 8001280:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8001284:	4285      	cmp	r5, r0
 8001286:	d269      	bcs.n	800135c <HAL_PCD_IRQHandler+0x460>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001288:	44a0      	add	r8, r4
 800128a:	4620      	mov	r0, r4
 800128c:	f898 1228 	ldrb.w	r1, [r8, #552]	; 0x228
 8001290:	f002 fd4c 	bl	8003d2c <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001294:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001298:	f43f af39 	beq.w	800110e <HAL_PCD_IRQHandler+0x212>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 80012a2:	b292      	uxth	r2, r2
 80012a4:	ea02 020a 	and.w	r2, r2, sl
 80012a8:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80012ac:	eb04 1747 	add.w	r7, r4, r7, lsl #5
 80012b0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80012b4:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80012b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80012bc:	fa13 f382 	uxtah	r3, r3, r2
 80012c0:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 80012c4:	f833 2031 	ldrh.w	r2, [r3, r1, lsl #3]
 80012c8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80012cc:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80012ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012d0:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80012d4:	441a      	add	r2, r3
 80012d6:	63fa      	str	r2, [r7, #60]	; 0x3c

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80012d8:	6c33      	ldr	r3, [r6, #64]	; 0x40
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80012da:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d143      	bne.n	8001368 <HAL_PCD_IRQHandler+0x46c>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80012e0:	f002 fd2c 	bl	8003d3c <HAL_PCD_DataInStageCallback>
 80012e4:	e713      	b.n	800110e <HAL_PCD_IRQHandler+0x212>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80012e6:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 80012ea:	b213      	sxth	r3, r2
 80012ec:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 80012f0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80012f4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80012f8:	d022      	beq.n	8001340 <HAL_PCD_IRQHandler+0x444>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80012fa:	f200 4502 	addw	r5, r0, #1026	; 0x402
 80012fe:	fa15 f383 	uxtah	r3, r5, r3
 8001302:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8001306:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 800130a:	b135      	cbz	r5, 800131a <HAL_PCD_IRQHandler+0x41e>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800130c:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8001310:	462b      	mov	r3, r5
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001312:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8001316:	f001 fc2b 	bl	8002b70 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);
 800131a:	eb04 0308 	add.w	r3, r4, r8
 800131e:	6822      	ldr	r2, [r4, #0]
 8001320:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8001324:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001328:	b29b      	uxth	r3, r3
 800132a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800132e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001336:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800133a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800133e:	e78e      	b.n	800125e <HAL_PCD_IRQHandler+0x362>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001340:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001344:	fa15 f383 	uxtah	r3, r5, r3
 8001348:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 800134c:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8001350:	2d00      	cmp	r5, #0
 8001352:	d0e2      	beq.n	800131a <HAL_PCD_IRQHandler+0x41e>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001354:	462b      	mov	r3, r5
 8001356:	f8b1 2232 	ldrh.w	r2, [r1, #562]	; 0x232
 800135a:	e7da      	b.n	8001312 <HAL_PCD_IRQHandler+0x416>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800135c:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8001360:	4620      	mov	r0, r4
 8001362:	f7ff fd9b 	bl	8000e9c <HAL_PCD_EP_Receive>
 8001366:	e795      	b.n	8001294 <HAL_PCD_IRQHandler+0x398>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001368:	f7ff fdb1 	bl	8000ece <HAL_PCD_EP_Transmit>
 800136c:	e6cf      	b.n	800110e <HAL_PCD_IRQHandler+0x212>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800136e:	f8df a014 	ldr.w	sl, [pc, #20]	; 8001384 <HAL_PCD_IRQHandler+0x488>
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001372:	f8df b014 	ldr.w	fp, [pc, #20]	; 8001388 <HAL_PCD_IRQHandler+0x48c>
 8001376:	e6ca      	b.n	800110e <HAL_PCD_IRQHandler+0x212>
      HAL_PCD_SuspendCallback(hpcd);
 8001378:	4620      	mov	r0, r4
 800137a:	f002 fcf7 	bl	8003d6c <HAL_PCD_SuspendCallback>
 800137e:	e675      	b.n	800106c <HAL_PCD_IRQHandler+0x170>
 8001380:	ffff8000 	.word	0xffff8000
 8001384:	ffff8f0f 	.word	0xffff8f0f
 8001388:	ffffbf8f 	.word	0xffffbf8f

0800138c <HAL_PCD_EP_SetStall>:
{
 800138c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 800138e:	6843      	ldr	r3, [r0, #4]
 8001390:	f001 050f 	and.w	r5, r1, #15
 8001394:	429d      	cmp	r5, r3
{
 8001396:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8001398:	d82d      	bhi.n	80013f6 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 800139a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800139e:	f04f 0320 	mov.w	r3, #32
 80013a2:	d01e      	beq.n	80013e2 <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 80013a4:	eb00 1245 	add.w	r2, r0, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80013a8:	fb03 0305 	mla	r3, r3, r5, r0
    ep->is_in = 1U;
 80013ac:	2101      	movs	r1, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80013ae:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 80013b0:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
  ep->is_stall = 1U;
 80013b4:	2201      	movs	r2, #1
 80013b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 80013b8:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 80013ba:	f894 1428 	ldrb.w	r1, [r4, #1064]	; 0x428
 80013be:	4291      	cmp	r1, r2
 80013c0:	d01b      	beq.n	80013fa <HAL_PCD_EP_SetStall+0x6e>
 80013c2:	f884 2428 	strb.w	r2, [r4, #1064]	; 0x428
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80013c6:	4619      	mov	r1, r3
 80013c8:	6820      	ldr	r0, [r4, #0]
 80013ca:	f001 fa63 	bl	8002894 <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 80013ce:	b925      	cbnz	r5, 80013da <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80013d0:	f504 6186 	add.w	r1, r4, #1072	; 0x430
 80013d4:	6820      	ldr	r0, [r4, #0]
 80013d6:	f001 facf 	bl	8002978 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80013da:	2000      	movs	r0, #0
 80013dc:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80013e0:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80013e2:	fb03 0301 	mla	r3, r3, r1, r0
    ep->is_in = 0U;
 80013e6:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80013ea:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80013ec:	f503 730a 	add.w	r3, r3, #552	; 0x228
    ep->is_in = 0U;
 80013f0:	f881 2229 	strb.w	r2, [r1, #553]	; 0x229
 80013f4:	e7de      	b.n	80013b4 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 80013f6:	2001      	movs	r0, #1
 80013f8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80013fa:	2002      	movs	r0, #2
}
 80013fc:	bd38      	pop	{r3, r4, r5, pc}

080013fe <HAL_PCD_EP_ClrStall>:
{
 80013fe:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001400:	6843      	ldr	r3, [r0, #4]
 8001402:	f001 020f 	and.w	r2, r1, #15
 8001406:	429a      	cmp	r2, r3
{
 8001408:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800140a:	d827      	bhi.n	800145c <HAL_PCD_EP_ClrStall+0x5e>
  if ((0x80U & ep_addr) == 0x80U)
 800140c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001410:	f04f 0120 	mov.w	r1, #32
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001414:	fb01 0102 	mla	r1, r1, r2, r0
 8001418:	ea4f 1342 	mov.w	r3, r2, lsl #5
    ep->is_in = 1U;
 800141c:	bf19      	ittee	ne
 800141e:	181b      	addne	r3, r3, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001420:	3128      	addne	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8001422:	f501 710a 	addeq.w	r1, r1, #552	; 0x228
    ep->is_in = 0U;
 8001426:	191b      	addeq	r3, r3, r4
    ep->is_in = 1U;
 8001428:	bf14      	ite	ne
 800142a:	2001      	movne	r0, #1
    ep->is_in = 0U;
 800142c:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 800142e:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8001432:	bf14      	ite	ne
 8001434:	f883 0029 	strbne.w	r0, [r3, #41]	; 0x29
    ep->is_in = 0U;
 8001438:	f883 0229 	strbeq.w	r0, [r3, #553]	; 0x229
  ep->is_stall = 0U;
 800143c:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & 0xFU;
 800143e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001440:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
 8001444:	2b01      	cmp	r3, #1
 8001446:	d00b      	beq.n	8001460 <HAL_PCD_EP_ClrStall+0x62>
 8001448:	2301      	movs	r3, #1
 800144a:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800144e:	6820      	ldr	r0, [r4, #0]
 8001450:	f001 fa41 	bl	80028d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001454:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
  return HAL_OK;
 8001458:	4628      	mov	r0, r5
 800145a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800145c:	2001      	movs	r0, #1
 800145e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001460:	2002      	movs	r0, #2
}
 8001462:	bd38      	pop	{r3, r4, r5, pc}

08001464 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 8001464:	4a02      	ldr	r2, [pc, #8]	; (8001470 <HAL_PWR_EnableBkUpAccess+0xc>)
 8001466:	6813      	ldr	r3, [r2, #0]
 8001468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4770      	bx	lr
 8001470:	40007000 	.word	0x40007000

08001474 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001474:	4b02      	ldr	r3, [pc, #8]	; (8001480 <HAL_PWREx_GetVoltageRange+0xc>)
 8001476:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8001478:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40007000 	.word	0x40007000

08001484 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001486:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001488:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800148c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001490:	d11a      	bne.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001492:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001496:	d013      	beq.n	80014c0 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001498:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 800149a:	4912      	ldr	r1, [pc, #72]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800149c:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80014a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014a4:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80014a6:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	fbb2 f1f1 	udiv	r1, r2, r1
 80014ae:	2232      	movs	r2, #50	; 0x32
 80014b0:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 80014b2:	b112      	cbz	r2, 80014ba <HAL_PWREx_ControlVoltageScaling+0x36>
 80014b4:	6959      	ldr	r1, [r3, #20]
 80014b6:	0549      	lsls	r1, r1, #21
 80014b8:	d404      	bmi.n	80014c4 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	055b      	lsls	r3, r3, #21
 80014be:	d40d      	bmi.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 80014c0:	2000      	movs	r0, #0
 80014c2:	4770      	bx	lr
        wait_loop_index--;
 80014c4:	3a01      	subs	r2, #1
 80014c6:	e7f4      	b.n	80014b2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014c8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014cc:	bf1f      	itttt	ne
 80014ce:	681a      	ldrne	r2, [r3, #0]
 80014d0:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80014d4:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80014d8:	601a      	strne	r2, [r3, #0]
 80014da:	e7f1      	b.n	80014c0 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 80014dc:	2003      	movs	r0, #3
}  
 80014de:	4770      	bx	lr
 80014e0:	40007000 	.word	0x40007000
 80014e4:	000f4240 	.word	0x000f4240
 80014e8:	20000024 	.word	0x20000024

080014ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80014ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80014ee:	4d1e      	ldr	r5, [pc, #120]	; (8001568 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80014f0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80014f2:	00da      	lsls	r2, r3, #3
{
 80014f4:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80014f6:	d518      	bpl.n	800152a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80014f8:	f7ff ffbc 	bl	8001474 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014fc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001500:	d123      	bne.n	800154a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001502:	2c80      	cmp	r4, #128	; 0x80
 8001504:	d929      	bls.n	800155a <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001506:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001508:	bf8c      	ite	hi
 800150a:	2002      	movhi	r0, #2
 800150c:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800150e:	4a17      	ldr	r2, [pc, #92]	; (800156c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001510:	6813      	ldr	r3, [r2, #0]
 8001512:	f023 0307 	bic.w	r3, r3, #7
 8001516:	4303      	orrs	r3, r0
 8001518:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800151a:	6813      	ldr	r3, [r2, #0]
 800151c:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001520:	1a18      	subs	r0, r3, r0
 8001522:	bf18      	it	ne
 8001524:	2001      	movne	r0, #1
 8001526:	b003      	add	sp, #12
 8001528:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	65ab      	str	r3, [r5, #88]	; 0x58
 8001532:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001538:	9301      	str	r3, [sp, #4]
 800153a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800153c:	f7ff ff9a 	bl	8001474 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001540:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001546:	65ab      	str	r3, [r5, #88]	; 0x58
 8001548:	e7d8      	b.n	80014fc <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800154a:	2c80      	cmp	r4, #128	; 0x80
 800154c:	d807      	bhi.n	800155e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800154e:	d008      	beq.n	8001562 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001550:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001554:	4258      	negs	r0, r3
 8001556:	4158      	adcs	r0, r3
 8001558:	e7d9      	b.n	800150e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800155a:	2000      	movs	r0, #0
 800155c:	e7d7      	b.n	800150e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800155e:	2003      	movs	r0, #3
 8001560:	e7d5      	b.n	800150e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001562:	2002      	movs	r0, #2
 8001564:	e7d3      	b.n	800150e <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000
 800156c:	40022000 	.word	0x40022000

08001570 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001570:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	f012 0f0c 	tst.w	r2, #12
{
 8001578:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800157a:	d009      	beq.n	8001590 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001582:	2a0c      	cmp	r2, #12
 8001584:	d12d      	bne.n	80015e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	f002 0203 	and.w	r2, r2, #3
 800158c:	2a01      	cmp	r2, #1
 800158e:	d128      	bne.n	80015e2 <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001590:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001592:	4928      	ldr	r1, [pc, #160]	; (8001634 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001594:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001596:	bf55      	itete	pl
 8001598:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800159c:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800159e:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80015a2:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 80015a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80015aa:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 80015ac:	f011 0f0c 	tst.w	r1, #12
 80015b0:	bf0c      	ite	eq
 80015b2:	4610      	moveq	r0, r2
 80015b4:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80015b6:	6899      	ldr	r1, [r3, #8]
 80015b8:	f001 010c 	and.w	r1, r1, #12
 80015bc:	290c      	cmp	r1, #12
 80015be:	d130      	bne.n	8001622 <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015c0:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015c2:	68d8      	ldr	r0, [r3, #12]
 80015c4:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80015c8:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015ca:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 80015ce:	2802      	cmp	r0, #2
 80015d0:	d019      	beq.n	8001606 <HAL_RCC_GetSysClockFreq+0x96>
 80015d2:	2803      	cmp	r0, #3
 80015d4:	d026      	beq.n	8001624 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015d6:	fbb2 f2f1 	udiv	r2, r2, r1
 80015da:	68d8      	ldr	r0, [r3, #12]
 80015dc:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80015e0:	e017      	b.n	8001612 <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	f002 020c 	and.w	r2, r2, #12
 80015e8:	2a04      	cmp	r2, #4
 80015ea:	d007      	beq.n	80015fc <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	f002 020c 	and.w	r2, r2, #12
 80015f2:	2a08      	cmp	r2, #8
 80015f4:	d104      	bne.n	8001600 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 80015f6:	4810      	ldr	r0, [pc, #64]	; (8001638 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80015f8:	2200      	movs	r2, #0
 80015fa:	e7dc      	b.n	80015b6 <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 80015fc:	480f      	ldr	r0, [pc, #60]	; (800163c <HAL_RCC_GetSysClockFreq+0xcc>)
 80015fe:	e7fb      	b.n	80015f8 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8001600:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001602:	4602      	mov	r2, r0
 8001604:	e7d7      	b.n	80015b6 <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	480c      	ldr	r0, [pc, #48]	; (800163c <HAL_RCC_GetSysClockFreq+0xcc>)
 800160a:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800160e:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001618:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800161a:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800161c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800161e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001622:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	4804      	ldr	r0, [pc, #16]	; (8001638 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001628:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800162c:	e7ef      	b.n	800160e <HAL_RCC_GetSysClockFreq+0x9e>
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000
 8001634:	08004344 	.word	0x08004344
 8001638:	007a1200 	.word	0x007a1200
 800163c:	00f42400 	.word	0x00f42400

08001640 <HAL_RCC_OscConfig>:
{
 8001640:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(RCC_OscInitStruct == NULL)
 8001644:	4605      	mov	r5, r0
 8001646:	b908      	cbnz	r0, 800164c <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8001648:	2001      	movs	r0, #1
 800164a:	e08d      	b.n	8001768 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800164c:	6803      	ldr	r3, [r0, #0]
 800164e:	06d8      	lsls	r0, r3, #27
 8001650:	d538      	bpl.n	80016c4 <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001652:	4cab      	ldr	r4, [pc, #684]	; (8001900 <HAL_RCC_OscConfig+0x2c0>)
 8001654:	68a3      	ldr	r3, [r4, #8]
 8001656:	f013 0f0c 	tst.w	r3, #12
 800165a:	d161      	bne.n	8001720 <HAL_RCC_OscConfig+0xe0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800165c:	6823      	ldr	r3, [r4, #0]
 800165e:	0799      	lsls	r1, r3, #30
 8001660:	d502      	bpl.n	8001668 <HAL_RCC_OscConfig+0x28>
 8001662:	69ab      	ldr	r3, [r5, #24]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0ef      	beq.n	8001648 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001668:	6823      	ldr	r3, [r4, #0]
 800166a:	6a28      	ldr	r0, [r5, #32]
 800166c:	071a      	lsls	r2, r3, #28
 800166e:	bf56      	itet	pl
 8001670:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001674:	6823      	ldrmi	r3, [r4, #0]
 8001676:	091b      	lsrpl	r3, r3, #4
 8001678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800167c:	4283      	cmp	r3, r0
 800167e:	d23a      	bcs.n	80016f6 <HAL_RCC_OscConfig+0xb6>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001680:	f7ff ff34 	bl	80014ec <RCC_SetFlashLatencyFromMSIRange>
 8001684:	2800      	cmp	r0, #0
 8001686:	d1df      	bne.n	8001648 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	f043 0308 	orr.w	r3, r3, #8
 800168e:	6023      	str	r3, [r4, #0]
 8001690:	6823      	ldr	r3, [r4, #0]
 8001692:	6a2a      	ldr	r2, [r5, #32]
 8001694:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001698:	4313      	orrs	r3, r2
 800169a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800169c:	6863      	ldr	r3, [r4, #4]
 800169e:	69ea      	ldr	r2, [r5, #28]
 80016a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80016a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016a8:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016aa:	f7ff ff61 	bl	8001570 <HAL_RCC_GetSysClockFreq>
 80016ae:	68a3      	ldr	r3, [r4, #8]
 80016b0:	4a94      	ldr	r2, [pc, #592]	; (8001904 <HAL_RCC_OscConfig+0x2c4>)
 80016b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80016b6:	5cd3      	ldrb	r3, [r2, r3]
 80016b8:	40d8      	lsrs	r0, r3
 80016ba:	4b93      	ldr	r3, [pc, #588]	; (8001908 <HAL_RCC_OscConfig+0x2c8>)
 80016bc:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80016be:	2000      	movs	r0, #0
 80016c0:	f7ff fa28 	bl	8000b14 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c4:	682b      	ldr	r3, [r5, #0]
 80016c6:	07d8      	lsls	r0, r3, #31
 80016c8:	d461      	bmi.n	800178e <HAL_RCC_OscConfig+0x14e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ca:	682b      	ldr	r3, [r5, #0]
 80016cc:	0799      	lsls	r1, r3, #30
 80016ce:	f100 80a9 	bmi.w	8001824 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d2:	682b      	ldr	r3, [r5, #0]
 80016d4:	071a      	lsls	r2, r3, #28
 80016d6:	f100 80e7 	bmi.w	80018a8 <HAL_RCC_OscConfig+0x268>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016da:	682b      	ldr	r3, [r5, #0]
 80016dc:	075b      	lsls	r3, r3, #29
 80016de:	f100 8115 	bmi.w	800190c <HAL_RCC_OscConfig+0x2cc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016e2:	682b      	ldr	r3, [r5, #0]
 80016e4:	069a      	lsls	r2, r3, #26
 80016e6:	f100 817c 	bmi.w	80019e2 <HAL_RCC_OscConfig+0x3a2>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016ea:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80016ec:	2a00      	cmp	r2, #0
 80016ee:	f040 81a3 	bne.w	8001a38 <HAL_RCC_OscConfig+0x3f8>
  return HAL_OK;
 80016f2:	2000      	movs	r0, #0
 80016f4:	e038      	b.n	8001768 <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016f6:	6823      	ldr	r3, [r4, #0]
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	6023      	str	r3, [r4, #0]
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001704:	4303      	orrs	r3, r0
 8001706:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001708:	6863      	ldr	r3, [r4, #4]
 800170a:	69ea      	ldr	r2, [r5, #28]
 800170c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001710:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001714:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001716:	f7ff fee9 	bl	80014ec <RCC_SetFlashLatencyFromMSIRange>
 800171a:	2800      	cmp	r0, #0
 800171c:	d0c5      	beq.n	80016aa <HAL_RCC_OscConfig+0x6a>
 800171e:	e793      	b.n	8001648 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001720:	69ab      	ldr	r3, [r5, #24]
 8001722:	b323      	cbz	r3, 800176e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_ENABLE();
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800172c:	f7ff fa1a 	bl	8000b64 <HAL_GetTick>
 8001730:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001732:	6823      	ldr	r3, [r4, #0]
 8001734:	079b      	lsls	r3, r3, #30
 8001736:	d511      	bpl.n	800175c <HAL_RCC_OscConfig+0x11c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	f043 0308 	orr.w	r3, r3, #8
 800173e:	6023      	str	r3, [r4, #0]
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	6a2a      	ldr	r2, [r5, #32]
 8001744:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001748:	4313      	orrs	r3, r2
 800174a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800174c:	6863      	ldr	r3, [r4, #4]
 800174e:	69ea      	ldr	r2, [r5, #28]
 8001750:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001754:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001758:	6063      	str	r3, [r4, #4]
 800175a:	e7b3      	b.n	80016c4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800175c:	f7ff fa02 	bl	8000b64 <HAL_GetTick>
 8001760:	1b80      	subs	r0, r0, r6
 8001762:	2802      	cmp	r0, #2
 8001764:	d9e5      	bls.n	8001732 <HAL_RCC_OscConfig+0xf2>
            return HAL_TIMEOUT;
 8001766:	2003      	movs	r0, #3
}
 8001768:	b002      	add	sp, #8
 800176a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_MSI_DISABLE();
 800176e:	6823      	ldr	r3, [r4, #0]
 8001770:	f023 0301 	bic.w	r3, r3, #1
 8001774:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001776:	f7ff f9f5 	bl	8000b64 <HAL_GetTick>
 800177a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	079f      	lsls	r7, r3, #30
 8001780:	d5a0      	bpl.n	80016c4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001782:	f7ff f9ef 	bl	8000b64 <HAL_GetTick>
 8001786:	1b80      	subs	r0, r0, r6
 8001788:	2802      	cmp	r0, #2
 800178a:	d9f7      	bls.n	800177c <HAL_RCC_OscConfig+0x13c>
 800178c:	e7eb      	b.n	8001766 <HAL_RCC_OscConfig+0x126>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 800178e:	4c5c      	ldr	r4, [pc, #368]	; (8001900 <HAL_RCC_OscConfig+0x2c0>)
 8001790:	68a3      	ldr	r3, [r4, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	2b08      	cmp	r3, #8
 8001798:	d009      	beq.n	80017ae <HAL_RCC_OscConfig+0x16e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800179a:	68a3      	ldr	r3, [r4, #8]
 800179c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 80017a0:	2b0c      	cmp	r3, #12
 80017a2:	d10b      	bne.n	80017bc <HAL_RCC_OscConfig+0x17c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017a4:	68e3      	ldr	r3, [r4, #12]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d106      	bne.n	80017bc <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ae:	6823      	ldr	r3, [r4, #0]
 80017b0:	039a      	lsls	r2, r3, #14
 80017b2:	d58a      	bpl.n	80016ca <HAL_RCC_OscConfig+0x8a>
 80017b4:	686b      	ldr	r3, [r5, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d187      	bne.n	80016ca <HAL_RCC_OscConfig+0x8a>
 80017ba:	e745      	b.n	8001648 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017bc:	686b      	ldr	r3, [r5, #4]
 80017be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c2:	d110      	bne.n	80017e6 <HAL_RCC_OscConfig+0x1a6>
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80017cc:	f7ff f9ca 	bl	8000b64 <HAL_GetTick>
 80017d0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80017d2:	6823      	ldr	r3, [r4, #0]
 80017d4:	039b      	lsls	r3, r3, #14
 80017d6:	f53f af78 	bmi.w	80016ca <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017da:	f7ff f9c3 	bl	8000b64 <HAL_GetTick>
 80017de:	1b80      	subs	r0, r0, r6
 80017e0:	2864      	cmp	r0, #100	; 0x64
 80017e2:	d9f6      	bls.n	80017d2 <HAL_RCC_OscConfig+0x192>
 80017e4:	e7bf      	b.n	8001766 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ea:	d104      	bne.n	80017f6 <HAL_RCC_OscConfig+0x1b6>
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f2:	6023      	str	r3, [r4, #0]
 80017f4:	e7e6      	b.n	80017c4 <HAL_RCC_OscConfig+0x184>
 80017f6:	6822      	ldr	r2, [r4, #0]
 80017f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017fc:	6022      	str	r2, [r4, #0]
 80017fe:	6822      	ldr	r2, [r4, #0]
 8001800:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001804:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1e0      	bne.n	80017cc <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 800180a:	f7ff f9ab 	bl	8000b64 <HAL_GetTick>
 800180e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001810:	6823      	ldr	r3, [r4, #0]
 8001812:	039f      	lsls	r7, r3, #14
 8001814:	f57f af59 	bpl.w	80016ca <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001818:	f7ff f9a4 	bl	8000b64 <HAL_GetTick>
 800181c:	1b80      	subs	r0, r0, r6
 800181e:	2864      	cmp	r0, #100	; 0x64
 8001820:	d9f6      	bls.n	8001810 <HAL_RCC_OscConfig+0x1d0>
 8001822:	e7a0      	b.n	8001766 <HAL_RCC_OscConfig+0x126>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001824:	4c36      	ldr	r4, [pc, #216]	; (8001900 <HAL_RCC_OscConfig+0x2c0>)
 8001826:	68a3      	ldr	r3, [r4, #8]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b04      	cmp	r3, #4
 800182e:	d009      	beq.n	8001844 <HAL_RCC_OscConfig+0x204>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001830:	68a3      	ldr	r3, [r4, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001836:	2b0c      	cmp	r3, #12
 8001838:	d113      	bne.n	8001862 <HAL_RCC_OscConfig+0x222>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800183a:	68e3      	ldr	r3, [r4, #12]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d10e      	bne.n	8001862 <HAL_RCC_OscConfig+0x222>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001844:	6823      	ldr	r3, [r4, #0]
 8001846:	055e      	lsls	r6, r3, #21
 8001848:	d503      	bpl.n	8001852 <HAL_RCC_OscConfig+0x212>
 800184a:	68eb      	ldr	r3, [r5, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	f43f aefb 	beq.w	8001648 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001852:	6863      	ldr	r3, [r4, #4]
 8001854:	692a      	ldr	r2, [r5, #16]
 8001856:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800185a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800185e:	6063      	str	r3, [r4, #4]
 8001860:	e737      	b.n	80016d2 <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001862:	68eb      	ldr	r3, [r5, #12]
 8001864:	b17b      	cbz	r3, 8001886 <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_HSI_ENABLE();
 8001866:	6823      	ldr	r3, [r4, #0]
 8001868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800186e:	f7ff f979 	bl	8000b64 <HAL_GetTick>
 8001872:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	0558      	lsls	r0, r3, #21
 8001878:	d4eb      	bmi.n	8001852 <HAL_RCC_OscConfig+0x212>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187a:	f7ff f973 	bl	8000b64 <HAL_GetTick>
 800187e:	1b80      	subs	r0, r0, r6
 8001880:	2802      	cmp	r0, #2
 8001882:	d9f7      	bls.n	8001874 <HAL_RCC_OscConfig+0x234>
 8001884:	e76f      	b.n	8001766 <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_HSI_DISABLE();
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800188c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800188e:	f7ff f969 	bl	8000b64 <HAL_GetTick>
 8001892:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	0559      	lsls	r1, r3, #21
 8001898:	f57f af1b 	bpl.w	80016d2 <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189c:	f7ff f962 	bl	8000b64 <HAL_GetTick>
 80018a0:	1b80      	subs	r0, r0, r6
 80018a2:	2802      	cmp	r0, #2
 80018a4:	d9f6      	bls.n	8001894 <HAL_RCC_OscConfig+0x254>
 80018a6:	e75e      	b.n	8001766 <HAL_RCC_OscConfig+0x126>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018a8:	696b      	ldr	r3, [r5, #20]
 80018aa:	4c15      	ldr	r4, [pc, #84]	; (8001900 <HAL_RCC_OscConfig+0x2c0>)
 80018ac:	b19b      	cbz	r3, 80018d6 <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 80018ae:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80018ba:	f7ff f953 	bl	8000b64 <HAL_GetTick>
 80018be:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80018c0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80018c4:	079f      	lsls	r7, r3, #30
 80018c6:	f53f af08 	bmi.w	80016da <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ca:	f7ff f94b 	bl	8000b64 <HAL_GetTick>
 80018ce:	1b80      	subs	r0, r0, r6
 80018d0:	2802      	cmp	r0, #2
 80018d2:	d9f5      	bls.n	80018c0 <HAL_RCC_OscConfig+0x280>
 80018d4:	e747      	b.n	8001766 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_LSI_DISABLE();
 80018d6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80018da:	f023 0301 	bic.w	r3, r3, #1
 80018de:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80018e2:	f7ff f93f 	bl	8000b64 <HAL_GetTick>
 80018e6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 80018e8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80018ec:	0798      	lsls	r0, r3, #30
 80018ee:	f57f aef4 	bpl.w	80016da <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f2:	f7ff f937 	bl	8000b64 <HAL_GetTick>
 80018f6:	1b80      	subs	r0, r0, r6
 80018f8:	2802      	cmp	r0, #2
 80018fa:	d9f5      	bls.n	80018e8 <HAL_RCC_OscConfig+0x2a8>
 80018fc:	e733      	b.n	8001766 <HAL_RCC_OscConfig+0x126>
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000
 8001904:	08004334 	.word	0x08004334
 8001908:	20000024 	.word	0x20000024
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800190c:	4c79      	ldr	r4, [pc, #484]	; (8001af4 <HAL_RCC_OscConfig+0x4b4>)
 800190e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001910:	00d9      	lsls	r1, r3, #3
 8001912:	d427      	bmi.n	8001964 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001914:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191a:	65a3      	str	r3, [r4, #88]	; 0x58
 800191c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001926:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001928:	4e73      	ldr	r6, [pc, #460]	; (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 800192a:	6833      	ldr	r3, [r6, #0]
 800192c:	05da      	lsls	r2, r3, #23
 800192e:	d51b      	bpl.n	8001968 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001930:	68ab      	ldr	r3, [r5, #8]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d129      	bne.n	800198a <HAL_RCC_OscConfig+0x34a>
 8001936:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001942:	f7ff f90f 	bl	8000b64 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001946:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800194a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800194c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001950:	0798      	lsls	r0, r3, #30
 8001952:	d540      	bpl.n	80019d6 <HAL_RCC_OscConfig+0x396>
    if(pwrclkchanged == SET)
 8001954:	2f00      	cmp	r7, #0
 8001956:	f43f aec4 	beq.w	80016e2 <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 800195a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800195c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001960:	65a3      	str	r3, [r4, #88]	; 0x58
 8001962:	e6be      	b.n	80016e2 <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 8001964:	2700      	movs	r7, #0
 8001966:	e7df      	b.n	8001928 <HAL_RCC_OscConfig+0x2e8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001968:	6833      	ldr	r3, [r6, #0]
 800196a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001970:	f7ff f8f8 	bl	8000b64 <HAL_GetTick>
 8001974:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001976:	6833      	ldr	r3, [r6, #0]
 8001978:	05db      	lsls	r3, r3, #23
 800197a:	d4d9      	bmi.n	8001930 <HAL_RCC_OscConfig+0x2f0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197c:	f7ff f8f2 	bl	8000b64 <HAL_GetTick>
 8001980:	eba0 0008 	sub.w	r0, r0, r8
 8001984:	2802      	cmp	r0, #2
 8001986:	d9f6      	bls.n	8001976 <HAL_RCC_OscConfig+0x336>
 8001988:	e6ed      	b.n	8001766 <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198a:	2b05      	cmp	r3, #5
 800198c:	d106      	bne.n	800199c <HAL_RCC_OscConfig+0x35c>
 800198e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001992:	f043 0304 	orr.w	r3, r3, #4
 8001996:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800199a:	e7cc      	b.n	8001936 <HAL_RCC_OscConfig+0x2f6>
 800199c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80019a0:	f022 0201 	bic.w	r2, r2, #1
 80019a4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80019a8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80019ac:	f022 0204 	bic.w	r2, r2, #4
 80019b0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1c4      	bne.n	8001942 <HAL_RCC_OscConfig+0x302>
      tickstart = HAL_GetTick();
 80019b8:	f7ff f8d4 	bl	8000b64 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019bc:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80019c0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80019c2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80019c6:	0799      	lsls	r1, r3, #30
 80019c8:	d5c4      	bpl.n	8001954 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ca:	f7ff f8cb 	bl	8000b64 <HAL_GetTick>
 80019ce:	1b80      	subs	r0, r0, r6
 80019d0:	4540      	cmp	r0, r8
 80019d2:	d9f6      	bls.n	80019c2 <HAL_RCC_OscConfig+0x382>
 80019d4:	e6c7      	b.n	8001766 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d6:	f7ff f8c5 	bl	8000b64 <HAL_GetTick>
 80019da:	1b80      	subs	r0, r0, r6
 80019dc:	4540      	cmp	r0, r8
 80019de:	d9b5      	bls.n	800194c <HAL_RCC_OscConfig+0x30c>
 80019e0:	e6c1      	b.n	8001766 <HAL_RCC_OscConfig+0x126>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80019e4:	4c43      	ldr	r4, [pc, #268]	; (8001af4 <HAL_RCC_OscConfig+0x4b4>)
 80019e6:	b19b      	cbz	r3, 8001a10 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_HSI48_ENABLE();
 80019e8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80019f4:	f7ff f8b6 	bl	8000b64 <HAL_GetTick>
 80019f8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 80019fa:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80019fe:	079b      	lsls	r3, r3, #30
 8001a00:	f53f ae73 	bmi.w	80016ea <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a04:	f7ff f8ae 	bl	8000b64 <HAL_GetTick>
 8001a08:	1b80      	subs	r0, r0, r6
 8001a0a:	2802      	cmp	r0, #2
 8001a0c:	d9f5      	bls.n	80019fa <HAL_RCC_OscConfig+0x3ba>
 8001a0e:	e6aa      	b.n	8001766 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSI48_DISABLE();
 8001a10:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001a1c:	f7ff f8a2 	bl	8000b64 <HAL_GetTick>
 8001a20:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8001a22:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001a26:	079f      	lsls	r7, r3, #30
 8001a28:	f57f ae5f 	bpl.w	80016ea <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a2c:	f7ff f89a 	bl	8000b64 <HAL_GetTick>
 8001a30:	1b80      	subs	r0, r0, r6
 8001a32:	2802      	cmp	r0, #2
 8001a34:	d9f5      	bls.n	8001a22 <HAL_RCC_OscConfig+0x3e2>
 8001a36:	e696      	b.n	8001766 <HAL_RCC_OscConfig+0x126>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a38:	4c2e      	ldr	r4, [pc, #184]	; (8001af4 <HAL_RCC_OscConfig+0x4b4>)
 8001a3a:	68a3      	ldr	r3, [r4, #8]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b0c      	cmp	r3, #12
 8001a42:	f43f ae01 	beq.w	8001648 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001a46:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a48:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a50:	d136      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 8001a52:	f7ff f887 	bl	8000b64 <HAL_GetTick>
 8001a56:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	0198      	lsls	r0, r3, #6
 8001a5c:	d42a      	bmi.n	8001ab4 <HAL_RCC_OscConfig+0x474>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a5e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001a60:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001a62:	06db      	lsls	r3, r3, #27
 8001a64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a68:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001a6e:	3a01      	subs	r2, #1
 8001a70:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001a74:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001a76:	0852      	lsrs	r2, r2, #1
 8001a78:	3a01      	subs	r2, #1
 8001a7a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001a7e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001a80:	0852      	lsrs	r2, r2, #1
 8001a82:	3a01      	subs	r2, #1
 8001a84:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001a88:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001a8a:	6823      	ldr	r3, [r4, #0]
 8001a8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a90:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a92:	68e3      	ldr	r3, [r4, #12]
 8001a94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a98:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001a9a:	f7ff f863 	bl	8000b64 <HAL_GetTick>
 8001a9e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	0199      	lsls	r1, r3, #6
 8001aa4:	f53f ae25 	bmi.w	80016f2 <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff f85c 	bl	8000b64 <HAL_GetTick>
 8001aac:	1b40      	subs	r0, r0, r5
 8001aae:	2802      	cmp	r0, #2
 8001ab0:	d9f6      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x460>
 8001ab2:	e658      	b.n	8001766 <HAL_RCC_OscConfig+0x126>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab4:	f7ff f856 	bl	8000b64 <HAL_GetTick>
 8001ab8:	1b80      	subs	r0, r0, r6
 8001aba:	2802      	cmp	r0, #2
 8001abc:	d9cc      	bls.n	8001a58 <HAL_RCC_OscConfig+0x418>
 8001abe:	e652      	b.n	8001766 <HAL_RCC_OscConfig+0x126>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ac4:	bf5e      	ittt	pl
 8001ac6:	68e3      	ldrpl	r3, [r4, #12]
 8001ac8:	f023 0303 	bicpl.w	r3, r3, #3
 8001acc:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001ace:	68e3      	ldr	r3, [r4, #12]
 8001ad0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad8:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001ada:	f7ff f843 	bl	8000b64 <HAL_GetTick>
 8001ade:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	019b      	lsls	r3, r3, #6
 8001ae4:	f57f ae05 	bpl.w	80016f2 <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff f83c 	bl	8000b64 <HAL_GetTick>
 8001aec:	1b40      	subs	r0, r0, r5
 8001aee:	2802      	cmp	r0, #2
 8001af0:	d9f6      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x4a0>
 8001af2:	e638      	b.n	8001766 <HAL_RCC_OscConfig+0x126>
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40007000 	.word	0x40007000

08001afc <HAL_RCC_ClockConfig>:
{
 8001afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b00:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001b02:	4604      	mov	r4, r0
 8001b04:	b910      	cbnz	r0, 8001b0c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001b06:	2001      	movs	r0, #1
 8001b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b0c:	4a40      	ldr	r2, [pc, #256]	; (8001c10 <HAL_RCC_ClockConfig+0x114>)
 8001b0e:	6813      	ldr	r3, [r2, #0]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	428b      	cmp	r3, r1
 8001b16:	d328      	bcc.n	8001b6a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b18:	6823      	ldr	r3, [r4, #0]
 8001b1a:	07d9      	lsls	r1, r3, #31
 8001b1c:	d430      	bmi.n	8001b80 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b1e:	6821      	ldr	r1, [r4, #0]
 8001b20:	078a      	lsls	r2, r1, #30
 8001b22:	d45a      	bmi.n	8001bda <HAL_RCC_ClockConfig+0xde>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b24:	4a3a      	ldr	r2, [pc, #232]	; (8001c10 <HAL_RCC_ClockConfig+0x114>)
 8001b26:	6813      	ldr	r3, [r2, #0]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	429e      	cmp	r6, r3
 8001b2e:	d35c      	bcc.n	8001bea <HAL_RCC_ClockConfig+0xee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b30:	f011 0f04 	tst.w	r1, #4
 8001b34:	4d37      	ldr	r5, [pc, #220]	; (8001c14 <HAL_RCC_ClockConfig+0x118>)
 8001b36:	d163      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x104>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b38:	070b      	lsls	r3, r1, #28
 8001b3a:	d506      	bpl.n	8001b4a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b3c:	68ab      	ldr	r3, [r5, #8]
 8001b3e:	6922      	ldr	r2, [r4, #16]
 8001b40:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001b44:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b48:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b4a:	f7ff fd11 	bl	8001570 <HAL_RCC_GetSysClockFreq>
 8001b4e:	68ab      	ldr	r3, [r5, #8]
 8001b50:	4a31      	ldr	r2, [pc, #196]	; (8001c18 <HAL_RCC_ClockConfig+0x11c>)
 8001b52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b56:	5cd3      	ldrb	r3, [r2, r3]
 8001b58:	40d8      	lsrs	r0, r3
 8001b5a:	4b30      	ldr	r3, [pc, #192]	; (8001c1c <HAL_RCC_ClockConfig+0x120>)
 8001b5c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f7fe ffd8 	bl	8000b14 <HAL_InitTick>
  return HAL_OK;
 8001b64:	2000      	movs	r0, #0
 8001b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	6813      	ldr	r3, [r2, #0]
 8001b6c:	f023 0307 	bic.w	r3, r3, #7
 8001b70:	430b      	orrs	r3, r1
 8001b72:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b74:	6813      	ldr	r3, [r2, #0]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	4299      	cmp	r1, r3
 8001b7c:	d1c3      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xa>
 8001b7e:	e7cb      	b.n	8001b18 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b80:	6862      	ldr	r2, [r4, #4]
 8001b82:	4d24      	ldr	r5, [pc, #144]	; (8001c14 <HAL_RCC_ClockConfig+0x118>)
 8001b84:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001b86:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b88:	d11b      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xc6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001b8a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001b8e:	d0ba      	beq.n	8001b06 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b90:	68ab      	ldr	r3, [r5, #8]
 8001b92:	f023 0303 	bic.w	r3, r3, #3
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001b9a:	f7fe ffe3 	bl	8000b64 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001ba2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba4:	68ab      	ldr	r3, [r5, #8]
 8001ba6:	6862      	ldr	r2, [r4, #4]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001bb0:	d0b5      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb2:	f7fe ffd7 	bl	8000b64 <HAL_GetTick>
 8001bb6:	1bc0      	subs	r0, r0, r7
 8001bb8:	4540      	cmp	r0, r8
 8001bba:	d9f3      	bls.n	8001ba4 <HAL_RCC_ClockConfig+0xa8>
        return HAL_TIMEOUT;
 8001bbc:	2003      	movs	r0, #3
}
 8001bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc2:	2a02      	cmp	r2, #2
 8001bc4:	d102      	bne.n	8001bcc <HAL_RCC_ClockConfig+0xd0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001bc6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001bca:	e7e0      	b.n	8001b8e <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bcc:	b912      	cbnz	r2, 8001bd4 <HAL_RCC_ClockConfig+0xd8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001bce:	f013 0f02 	tst.w	r3, #2
 8001bd2:	e7dc      	b.n	8001b8e <HAL_RCC_ClockConfig+0x92>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001bd4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001bd8:	e7d9      	b.n	8001b8e <HAL_RCC_ClockConfig+0x92>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bda:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <HAL_RCC_ClockConfig+0x118>)
 8001bdc:	68a0      	ldr	r0, [r4, #8]
 8001bde:	6893      	ldr	r3, [r2, #8]
 8001be0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001be4:	4303      	orrs	r3, r0
 8001be6:	6093      	str	r3, [r2, #8]
 8001be8:	e79c      	b.n	8001b24 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	6813      	ldr	r3, [r2, #0]
 8001bec:	f023 0307 	bic.w	r3, r3, #7
 8001bf0:	4333      	orrs	r3, r6
 8001bf2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf4:	6813      	ldr	r3, [r2, #0]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	429e      	cmp	r6, r3
 8001bfc:	d183      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xa>
 8001bfe:	e797      	b.n	8001b30 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c00:	68ab      	ldr	r3, [r5, #8]
 8001c02:	68e2      	ldr	r2, [r4, #12]
 8001c04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	60ab      	str	r3, [r5, #8]
 8001c0c:	e794      	b.n	8001b38 <HAL_RCC_ClockConfig+0x3c>
 8001c0e:	bf00      	nop
 8001c10:	40022000 	.word	0x40022000
 8001c14:	40021000 	.word	0x40021000
 8001c18:	08004334 	.word	0x08004334
 8001c1c:	20000024 	.word	0x20000024

08001c20 <HAL_RCC_GetHCLKFreq>:
}
 8001c20:	4b01      	ldr	r3, [pc, #4]	; (8001c28 <HAL_RCC_GetHCLKFreq+0x8>)
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000024 	.word	0x20000024

08001c2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001c2e:	4b44      	ldr	r3, [pc, #272]	; (8001d40 <RCCEx_PLLSAI1_Config+0x114>)
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	f012 0f03 	tst.w	r2, #3
{
 8001c36:	4605      	mov	r5, r0
 8001c38:	460e      	mov	r6, r1
 8001c3a:	461c      	mov	r4, r3
 8001c3c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001c3e:	d039      	beq.n	8001cb4 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	f002 0203 	and.w	r2, r2, #3
 8001c46:	4282      	cmp	r2, r0
 8001c48:	d14b      	bne.n	8001ce2 <RCCEx_PLLSAI1_Config+0xb6>
       ||
 8001c4a:	2a00      	cmp	r2, #0
 8001c4c:	d049      	beq.n	8001ce2 <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001c4e:	68db      	ldr	r3, [r3, #12]
       ||
 8001c50:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001c52:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001c56:	3301      	adds	r3, #1
       ||
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d142      	bne.n	8001ce2 <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001c62:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c64:	f7fe ff7e 	bl	8000b64 <HAL_GetTick>
 8001c68:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8001c6a:	6823      	ldr	r3, [r4, #0]
 8001c6c:	011a      	lsls	r2, r3, #4
 8001c6e:	d441      	bmi.n	8001cf4 <RCCEx_PLLSAI1_Config+0xc8>
 8001c70:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001c72:	2e00      	cmp	r6, #0
 8001c74:	d045      	beq.n	8001d02 <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001c76:	2e01      	cmp	r6, #1
 8001c78:	d14f      	bne.n	8001d1a <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001c7a:	6922      	ldr	r2, [r4, #16]
 8001c7c:	6928      	ldr	r0, [r5, #16]
 8001c7e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001c82:	0840      	lsrs	r0, r0, #1
 8001c84:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001c88:	3801      	subs	r0, #1
 8001c8a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001c8e:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001c92:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001c94:	6823      	ldr	r3, [r4, #0]
 8001c96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c9a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9c:	f7fe ff62 	bl	8000b64 <HAL_GetTick>
 8001ca0:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	d545      	bpl.n	8001d34 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001ca8:	6923      	ldr	r3, [r4, #16]
 8001caa:	69aa      	ldr	r2, [r5, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	6123      	str	r3, [r4, #16]
 8001cb0:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8001cb4:	2802      	cmp	r0, #2
 8001cb6:	d010      	beq.n	8001cda <RCCEx_PLLSAI1_Config+0xae>
 8001cb8:	2803      	cmp	r0, #3
 8001cba:	d014      	beq.n	8001ce6 <RCCEx_PLLSAI1_Config+0xba>
 8001cbc:	2801      	cmp	r0, #1
 8001cbe:	d110      	bne.n	8001ce2 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	079f      	lsls	r7, r3, #30
 8001cc4:	d5f5      	bpl.n	8001cb2 <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001cc6:	68e3      	ldr	r3, [r4, #12]
 8001cc8:	686a      	ldr	r2, [r5, #4]
 8001cca:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001cce:	3a01      	subs	r2, #1
 8001cd0:	4318      	orrs	r0, r3
 8001cd2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001cd6:	60e0      	str	r0, [r4, #12]
 8001cd8:	e7c0      	b.n	8001c5c <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001ce0:	d1f1      	bne.n	8001cc6 <RCCEx_PLLSAI1_Config+0x9a>
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	0391      	lsls	r1, r2, #14
 8001cea:	d4ec      	bmi.n	8001cc6 <RCCEx_PLLSAI1_Config+0x9a>
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001cf2:	e7f5      	b.n	8001ce0 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001cf4:	f7fe ff36 	bl	8000b64 <HAL_GetTick>
 8001cf8:	1bc0      	subs	r0, r0, r7
 8001cfa:	2802      	cmp	r0, #2
 8001cfc:	d9b5      	bls.n	8001c6a <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001cfe:	2003      	movs	r0, #3
 8001d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001d02:	6922      	ldr	r2, [r4, #16]
 8001d04:	68e9      	ldr	r1, [r5, #12]
 8001d06:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8001d0a:	06c9      	lsls	r1, r1, #27
 8001d0c:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 8001d10:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001d14:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001d16:	6123      	str	r3, [r4, #16]
 8001d18:	e7bc      	b.n	8001c94 <RCCEx_PLLSAI1_Config+0x68>
 8001d1a:	6923      	ldr	r3, [r4, #16]
 8001d1c:	6968      	ldr	r0, [r5, #20]
 8001d1e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001d22:	0840      	lsrs	r0, r0, #1
 8001d24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001d28:	3801      	subs	r0, #1
 8001d2a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001d2e:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001d32:	e7f0      	b.n	8001d16 <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001d34:	f7fe ff16 	bl	8000b64 <HAL_GetTick>
 8001d38:	1b80      	subs	r0, r0, r6
 8001d3a:	2802      	cmp	r0, #2
 8001d3c:	d9b1      	bls.n	8001ca2 <RCCEx_PLLSAI1_Config+0x76>
 8001d3e:	e7de      	b.n	8001cfe <RCCEx_PLLSAI1_Config+0xd2>
 8001d40:	40021000 	.word	0x40021000

08001d44 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001d44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d48:	6805      	ldr	r5, [r0, #0]
 8001d4a:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 8001d4e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d50:	d00e      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001d52:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001d54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001d58:	d05b      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8001d5a:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001d5e:	d05d      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001d60:	2900      	cmp	r1, #0
 8001d62:	d166      	bne.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0xee>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d64:	3004      	adds	r0, #4
 8001d66:	f7ff ff61 	bl	8001c2c <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8001d6a:	4605      	mov	r5, r0
 8001d6c:	2800      	cmp	r0, #0
 8001d6e:	d055      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d70:	6823      	ldr	r3, [r4, #0]
 8001d72:	039e      	lsls	r6, r3, #14
 8001d74:	d56d      	bpl.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d76:	4eac      	ldr	r6, [pc, #688]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d78:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001d7a:	00d8      	lsls	r0, r3, #3
 8001d7c:	d45b      	bmi.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d84:	65b3      	str	r3, [r6, #88]	; 0x58
 8001d86:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d90:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d92:	f8df 8298 	ldr.w	r8, [pc, #664]	; 800202c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8001d96:	f8d8 3000 	ldr.w	r3, [r8]
 8001d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9e:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8001da2:	f7fe fedf 	bl	8000b64 <HAL_GetTick>
 8001da6:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8001da8:	f8d8 3000 	ldr.w	r3, [r8]
 8001dac:	05d9      	lsls	r1, r3, #23
 8001dae:	d544      	bpl.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    if(ret == HAL_OK)
 8001db0:	2d00      	cmp	r5, #0
 8001db2:	d149      	bne.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x104>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001db4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001db8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001dbc:	d014      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001dbe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d011      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dc4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001dc8:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001dcc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001dd0:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001dd4:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ddc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001de0:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001de4:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001de8:	07da      	lsls	r2, r3, #31
 8001dea:	d509      	bpl.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001dec:	f7fe feba 	bl	8000b64 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df0:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001df4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001df6:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001dfa:	079b      	lsls	r3, r3, #30
 8001dfc:	f140 80eb 	bpl.w	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e00:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001e04:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8001e10:	e01a      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001e12:	4a85      	ldr	r2, [pc, #532]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e14:	68d3      	ldr	r3, [r2, #12]
 8001e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1a:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e1c:	4a82      	ldr	r2, [pc, #520]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e1e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001e20:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e24:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001e2e:	2500      	movs	r5, #0
 8001e30:	e79e      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 8001e32:	2501      	movs	r5, #1
 8001e34:	e79c      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001e36:	2700      	movs	r7, #0
 8001e38:	e7ab      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3a:	f7fe fe93 	bl	8000b64 <HAL_GetTick>
 8001e3e:	eba0 0009 	sub.w	r0, r0, r9
 8001e42:	2802      	cmp	r0, #2
 8001e44:	d9b0      	bls.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x64>
        ret = HAL_TIMEOUT;
 8001e46:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001e48:	b11f      	cbz	r7, 8001e52 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e4a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e50:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	07d8      	lsls	r0, r3, #31
 8001e56:	d508      	bpl.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e58:	4973      	ldr	r1, [pc, #460]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e5a:	6a20      	ldr	r0, [r4, #32]
 8001e5c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e60:	f022 0203 	bic.w	r2, r2, #3
 8001e64:	4302      	orrs	r2, r0
 8001e66:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e6a:	0799      	lsls	r1, r3, #30
 8001e6c:	d508      	bpl.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e6e:	496e      	ldr	r1, [pc, #440]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e70:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001e72:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e76:	f022 020c 	bic.w	r2, r2, #12
 8001e7a:	4302      	orrs	r2, r0
 8001e7c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e80:	075a      	lsls	r2, r3, #29
 8001e82:	d508      	bpl.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e84:	4968      	ldr	r1, [pc, #416]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001e88:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e8c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001e90:	4302      	orrs	r2, r0
 8001e92:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e96:	069f      	lsls	r7, r3, #26
 8001e98:	d508      	bpl.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e9a:	4963      	ldr	r1, [pc, #396]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e9c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001e9e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ea2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001ea6:	4302      	orrs	r2, r0
 8001ea8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001eac:	059e      	lsls	r6, r3, #22
 8001eae:	d508      	bpl.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001eb0:	495d      	ldr	r1, [pc, #372]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001eb2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001eb4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001eb8:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001ebc:	4302      	orrs	r2, r0
 8001ebe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ec2:	0558      	lsls	r0, r3, #21
 8001ec4:	d508      	bpl.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ec6:	4958      	ldr	r1, [pc, #352]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ec8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001eca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ece:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001ed2:	4302      	orrs	r2, r0
 8001ed4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ed8:	0659      	lsls	r1, r3, #25
 8001eda:	d508      	bpl.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001edc:	4952      	ldr	r1, [pc, #328]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ede:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001ee0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ee4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001ee8:	4302      	orrs	r2, r0
 8001eea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001eee:	061a      	lsls	r2, r3, #24
 8001ef0:	d508      	bpl.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ef2:	494d      	ldr	r1, [pc, #308]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ef4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001ef6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001efa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001efe:	4302      	orrs	r2, r0
 8001f00:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f04:	05df      	lsls	r7, r3, #23
 8001f06:	d508      	bpl.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f08:	4947      	ldr	r1, [pc, #284]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f0a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001f0c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001f10:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001f14:	4302      	orrs	r2, r0
 8001f16:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f1a:	049e      	lsls	r6, r3, #18
 8001f1c:	d50f      	bpl.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f1e:	4a42      	ldr	r2, [pc, #264]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001f22:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f26:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001f2a:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f2c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f34:	d157      	bne.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f36:	68d3      	ldr	r3, [r2, #12]
 8001f38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f3c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	0318      	lsls	r0, r3, #12
 8001f42:	d50f      	bpl.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f44:	4a38      	ldr	r2, [pc, #224]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f46:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001f48:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f4c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001f50:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001f52:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001f5a:	d14f      	bne.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f5c:	68d3      	ldr	r3, [r2, #12]
 8001f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f62:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	0359      	lsls	r1, r3, #13
 8001f68:	d50f      	bpl.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x246>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f6a:	4a2f      	ldr	r2, [pc, #188]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f6c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001f6e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f72:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001f76:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f78:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f80:	d147      	bne.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f82:	68d3      	ldr	r3, [r2, #12]
 8001f84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f88:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	045a      	lsls	r2, r3, #17
 8001f8e:	d512      	bpl.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x272>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f90:	4925      	ldr	r1, [pc, #148]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f92:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001f94:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001f98:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001f9c:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001f9e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x272>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001fa8:	2102      	movs	r1, #2
 8001faa:	1d20      	adds	r0, r4, #4
 8001fac:	f7ff fe3e 	bl	8001c2c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001fb0:	2800      	cmp	r0, #0
 8001fb2:	bf18      	it	ne
 8001fb4:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	041b      	lsls	r3, r3, #16
 8001fba:	d508      	bpl.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x28a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001fbc:	4a1a      	ldr	r2, [pc, #104]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001fbe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001fc0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001fc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001fce:	4628      	mov	r0, r5
 8001fd0:	b003      	add	sp, #12
 8001fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7fe fdc5 	bl	8000b64 <HAL_GetTick>
 8001fda:	eba0 0008 	sub.w	r0, r0, r8
 8001fde:	4548      	cmp	r0, r9
 8001fe0:	f67f af09 	bls.w	8001df6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8001fe4:	e72f      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x102>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001fe6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001fea:	d1a8      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fec:	2101      	movs	r1, #1
 8001fee:	1d20      	adds	r0, r4, #4
 8001ff0:	f7ff fe1c 	bl	8001c2c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001ff4:	2800      	cmp	r0, #0
 8001ff6:	bf18      	it	ne
 8001ff8:	4605      	movne	r5, r0
 8001ffa:	e7a0      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001ffc:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002000:	d1b0      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x220>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002002:	2101      	movs	r1, #1
 8002004:	1d20      	adds	r0, r4, #4
 8002006:	f7ff fe11 	bl	8001c2c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800200a:	2800      	cmp	r0, #0
 800200c:	bf18      	it	ne
 800200e:	4605      	movne	r5, r0
 8002010:	e7a8      	b.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x220>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002012:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002016:	d1b8      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x246>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002018:	2101      	movs	r1, #1
 800201a:	1d20      	adds	r0, r4, #4
 800201c:	f7ff fe06 	bl	8001c2c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002020:	2800      	cmp	r0, #0
 8002022:	bf18      	it	ne
 8002024:	4605      	movne	r5, r0
 8002026:	e7b0      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x246>
 8002028:	40021000 	.word	0x40021000
 800202c:	40007000 	.word	0x40007000

08002030 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002030:	4a02      	ldr	r2, [pc, #8]	; (800203c <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8002032:	6813      	ldr	r3, [r2, #0]
 8002034:	f043 0304 	orr.w	r3, r3, #4
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	4770      	bx	lr
 800203c:	40021000 	.word	0x40021000

08002040 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002040:	6803      	ldr	r3, [r0, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002048:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800204a:	6842      	ldr	r2, [r0, #4]
 800204c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002050:	d10a      	bne.n	8002068 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8002052:	6882      	ldr	r2, [r0, #8]
 8002054:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002058:	d002      	beq.n	8002060 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800205a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800205e:	d103      	bne.n	8002068 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002066:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002068:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800206a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800206e:	d107      	bne.n	8002080 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800207e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002080:	2301      	movs	r3, #1
 8002082:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002086:	2300      	movs	r3, #0
 8002088:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 800208c:	2003      	movs	r0, #3
 800208e:	4770      	bx	lr

08002090 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8002090:	b570      	push	{r4, r5, r6, lr}
 8002092:	4605      	mov	r5, r0
 8002094:	460c      	mov	r4, r1
 8002096:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002098:	682b      	ldr	r3, [r5, #0]
 800209a:	6898      	ldr	r0, [r3, #8]
 800209c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80020a0:	d00d      	beq.n	80020be <SPI_WaitFlagStateUntilTimeout.constprop.10+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 80020a2:	1c62      	adds	r2, r4, #1
 80020a4:	d0f9      	beq.n	800209a <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80020a6:	b924      	cbnz	r4, 80020b2 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x22>
 80020a8:	4628      	mov	r0, r5
}
 80020aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80020ae:	f7ff bfc7 	b.w	8002040 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80020b2:	f7fe fd57 	bl	8000b64 <HAL_GetTick>
 80020b6:	1b80      	subs	r0, r0, r6
 80020b8:	4284      	cmp	r4, r0
 80020ba:	d8ed      	bhi.n	8002098 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 80020bc:	e7f4      	b.n	80020a8 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x18>
}
 80020be:	bd70      	pop	{r4, r5, r6, pc}

080020c0 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80020c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020c2:	4606      	mov	r6, r0
 80020c4:	460c      	mov	r4, r1
 80020c6:	4615      	mov	r5, r2
 80020c8:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 80020ca:	6831      	ldr	r1, [r6, #0]
 80020cc:	6888      	ldr	r0, [r1, #8]
 80020ce:	4020      	ands	r0, r4
 80020d0:	d00e      	beq.n	80020f0 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80020d2:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80020d6:	bf01      	itttt	eq
 80020d8:	7b0a      	ldrbeq	r2, [r1, #12]
 80020da:	b2d2      	uxtbeq	r2, r2
 80020dc:	f88d 2007 	strbeq.w	r2, [sp, #7]
      UNUSED(tmpreg);
 80020e0:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 80020e4:	1c6b      	adds	r3, r5, #1
 80020e6:	d0f1      	beq.n	80020cc <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80020e8:	b925      	cbnz	r5, 80020f4 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x34>
 80020ea:	4630      	mov	r0, r6
 80020ec:	f7ff ffa8 	bl	8002040 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 80020f0:	b003      	add	sp, #12
 80020f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80020f4:	f7fe fd36 	bl	8000b64 <HAL_GetTick>
 80020f8:	1bc0      	subs	r0, r0, r7
 80020fa:	4285      	cmp	r5, r0
 80020fc:	d8e5      	bhi.n	80020ca <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 80020fe:	e7f4      	b.n	80020ea <SPI_WaitFifoStateUntilTimeout.constprop.11+0x2a>

08002100 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002100:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002102:	4613      	mov	r3, r2
{
 8002104:	460d      	mov	r5, r1
 8002106:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002108:	460a      	mov	r2, r1
 800210a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800210e:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002110:	f7ff ffd6 	bl	80020c0 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8002114:	b128      	cbz	r0, 8002122 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002116:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002118:	f043 0320 	orr.w	r3, r3, #32
 800211c:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800211e:	2003      	movs	r0, #3
 8002120:	e00f      	b.n	8002142 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002122:	4632      	mov	r2, r6
 8002124:	4629      	mov	r1, r5
 8002126:	4620      	mov	r0, r4
 8002128:	f7ff ffb2 	bl	8002090 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 800212c:	2800      	cmp	r0, #0
 800212e:	d1f2      	bne.n	8002116 <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002130:	4633      	mov	r3, r6
 8002132:	462a      	mov	r2, r5
 8002134:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002138:	4620      	mov	r0, r4
 800213a:	f7ff ffc1 	bl	80020c0 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 800213e:	2800      	cmp	r0, #0
 8002140:	d1e9      	bne.n	8002116 <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8002142:	bd70      	pop	{r4, r5, r6, pc}

08002144 <HAL_SPI_Init>:
{
 8002144:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8002146:	4604      	mov	r4, r0
 8002148:	2800      	cmp	r0, #0
 800214a:	d04a      	beq.n	80021e2 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002150:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002154:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002158:	b91b      	cbnz	r3, 8002162 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 800215a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800215e:	f001 fd5f 	bl	8003c20 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002162:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002164:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002166:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800216a:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800216c:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800216e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002172:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8002176:	600b      	str	r3, [r1, #0]
 8002178:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800217c:	d92e      	bls.n	80021dc <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800217e:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002180:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002184:	bf18      	it	ne
 8002186:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002188:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800218a:	b92b      	cbnz	r3, 8002198 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800218c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002190:	bf8c      	ite	hi
 8002192:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002194:	2301      	movls	r3, #1
 8002196:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002198:	68a6      	ldr	r6, [r4, #8]
 800219a:	6863      	ldr	r3, [r4, #4]
 800219c:	69a5      	ldr	r5, [r4, #24]
 800219e:	4333      	orrs	r3, r6
 80021a0:	6926      	ldr	r6, [r4, #16]
 80021a2:	4333      	orrs	r3, r6
 80021a4:	6966      	ldr	r6, [r4, #20]
 80021a6:	4333      	orrs	r3, r6
 80021a8:	69e6      	ldr	r6, [r4, #28]
 80021aa:	4333      	orrs	r3, r6
 80021ac:	6a26      	ldr	r6, [r4, #32]
 80021ae:	4333      	orrs	r3, r6
 80021b0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80021b2:	4333      	orrs	r3, r6
 80021b4:	f405 7600 	and.w	r6, r5, #512	; 0x200
 80021b8:	4333      	orrs	r3, r6
 80021ba:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80021bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021be:	431a      	orrs	r2, r3
 80021c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80021c2:	0c2d      	lsrs	r5, r5, #16
 80021c4:	431a      	orrs	r2, r3
 80021c6:	f005 0504 	and.w	r5, r5, #4
 80021ca:	432a      	orrs	r2, r5
 80021cc:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 80021ce:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021d0:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80021d2:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021d4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80021d6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 80021da:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80021dc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80021e0:	e7d0      	b.n	8002184 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 80021e2:	2001      	movs	r0, #1
}
 80021e4:	bd70      	pop	{r4, r5, r6, pc}

080021e6 <HAL_SPI_Transmit>:
{
 80021e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80021ea:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80021ec:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80021f0:	2b01      	cmp	r3, #1
{
 80021f2:	4604      	mov	r4, r0
 80021f4:	460d      	mov	r5, r1
 80021f6:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80021f8:	f000 80b1 	beq.w	800235e <HAL_SPI_Transmit+0x178>
 80021fc:	2301      	movs	r3, #1
 80021fe:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002202:	f7fe fcaf 	bl	8000b64 <HAL_GetTick>
 8002206:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002208:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800220c:	b2c0      	uxtb	r0, r0
 800220e:	2801      	cmp	r0, #1
 8002210:	f040 80a3 	bne.w	800235a <HAL_SPI_Transmit+0x174>
  if ((pData == NULL) || (Size == 0U))
 8002214:	2d00      	cmp	r5, #0
 8002216:	d057      	beq.n	80022c8 <HAL_SPI_Transmit+0xe2>
 8002218:	f1b8 0f00 	cmp.w	r8, #0
 800221c:	d054      	beq.n	80022c8 <HAL_SPI_Transmit+0xe2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800221e:	2303      	movs	r3, #3
 8002220:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002224:	2300      	movs	r3, #0
 8002226:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002228:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800222a:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 800222e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002232:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002236:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002238:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800223a:	68a3      	ldr	r3, [r4, #8]
 800223c:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800223e:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8002244:	bf08      	it	eq
 8002246:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8002248:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 800224c:	bf04      	itt	eq
 800224e:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8002252:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002254:	6803      	ldr	r3, [r0, #0]
 8002256:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002258:	bf5e      	ittt	pl
 800225a:	6803      	ldrpl	r3, [r0, #0]
 800225c:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002260:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002262:	68e3      	ldr	r3, [r4, #12]
 8002264:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002268:	6863      	ldr	r3, [r4, #4]
 800226a:	d93e      	bls.n	80022ea <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800226c:	b11b      	cbz	r3, 8002276 <HAL_SPI_Transmit+0x90>
 800226e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002270:	b29b      	uxth	r3, r3
 8002272:	2b01      	cmp	r3, #1
 8002274:	d106      	bne.n	8002284 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)pData);
 8002276:	f835 3b02 	ldrh.w	r3, [r5], #2
 800227a:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 800227c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800227e:	3b01      	subs	r3, #1
 8002280:	b29b      	uxth	r3, r3
 8002282:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8002284:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002286:	b29b      	uxth	r3, r3
 8002288:	b9a3      	cbnz	r3, 80022b4 <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800228a:	463a      	mov	r2, r7
 800228c:	4631      	mov	r1, r6
 800228e:	4620      	mov	r0, r4
 8002290:	f7ff ff36 	bl	8002100 <SPI_EndRxTxTransaction>
 8002294:	2800      	cmp	r0, #0
 8002296:	d15d      	bne.n	8002354 <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002298:	68a3      	ldr	r3, [r4, #8]
 800229a:	b933      	cbnz	r3, 80022aa <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	6823      	ldr	r3, [r4, #0]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	9201      	str	r2, [sp, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022aa:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 80022ac:	3000      	adds	r0, #0
 80022ae:	bf18      	it	ne
 80022b0:	2001      	movne	r0, #1
 80022b2:	e009      	b.n	80022c8 <HAL_SPI_Transmit+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	0790      	lsls	r0, r2, #30
 80022ba:	d503      	bpl.n	80022c4 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)pData);
 80022bc:	f835 2b02 	ldrh.w	r2, [r5], #2
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	e7db      	b.n	800227c <HAL_SPI_Transmit+0x96>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80022c4:	b94e      	cbnz	r6, 80022da <HAL_SPI_Transmit+0xf4>
          errorcode = HAL_TIMEOUT;
 80022c6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80022c8:	2301      	movs	r3, #1
 80022ca:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80022ce:	2300      	movs	r3, #0
 80022d0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80022d4:	b002      	add	sp, #8
 80022d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80022da:	1c71      	adds	r1, r6, #1
 80022dc:	d0d2      	beq.n	8002284 <HAL_SPI_Transmit+0x9e>
 80022de:	f7fe fc41 	bl	8000b64 <HAL_GetTick>
 80022e2:	1bc0      	subs	r0, r0, r7
 80022e4:	4286      	cmp	r6, r0
 80022e6:	d8cd      	bhi.n	8002284 <HAL_SPI_Transmit+0x9e>
 80022e8:	e7ed      	b.n	80022c6 <HAL_SPI_Transmit+0xe0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80022ea:	b11b      	cbz	r3, 80022f4 <HAL_SPI_Transmit+0x10e>
 80022ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d10a      	bne.n	800230a <HAL_SPI_Transmit+0x124>
      if (hspi->TxXferCount > 1U)
 80022f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d916      	bls.n	800232a <HAL_SPI_Transmit+0x144>
        hspi->Instance->DR = *((uint16_t *)pData);
 80022fc:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002300:	60c3      	str	r3, [r0, #12]
          hspi->TxXferCount -= 2U;
 8002302:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002304:	3b02      	subs	r3, #2
 8002306:	b29b      	uxth	r3, r3
 8002308:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800230a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0bb      	beq.n	800228a <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	0792      	lsls	r2, r2, #30
 8002318:	d512      	bpl.n	8002340 <HAL_SPI_Transmit+0x15a>
        if (hspi->TxXferCount > 1U)
 800231a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800231c:	b292      	uxth	r2, r2
 800231e:	2a01      	cmp	r2, #1
 8002320:	d90b      	bls.n	800233a <HAL_SPI_Transmit+0x154>
          hspi->Instance->DR = *((uint16_t *)pData);
 8002322:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002326:	60da      	str	r2, [r3, #12]
 8002328:	e7eb      	b.n	8002302 <HAL_SPI_Transmit+0x11c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800232a:	782b      	ldrb	r3, [r5, #0]
 800232c:	7303      	strb	r3, [r0, #12]
          hspi->TxXferCount--;
 800232e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002330:	3b01      	subs	r3, #1
 8002332:	b29b      	uxth	r3, r3
 8002334:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002336:	3501      	adds	r5, #1
 8002338:	e7e7      	b.n	800230a <HAL_SPI_Transmit+0x124>
 800233a:	782a      	ldrb	r2, [r5, #0]
 800233c:	731a      	strb	r2, [r3, #12]
 800233e:	e7f6      	b.n	800232e <HAL_SPI_Transmit+0x148>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002340:	2e00      	cmp	r6, #0
 8002342:	d0c0      	beq.n	80022c6 <HAL_SPI_Transmit+0xe0>
 8002344:	1c73      	adds	r3, r6, #1
 8002346:	d0e0      	beq.n	800230a <HAL_SPI_Transmit+0x124>
 8002348:	f7fe fc0c 	bl	8000b64 <HAL_GetTick>
 800234c:	1bc0      	subs	r0, r0, r7
 800234e:	4286      	cmp	r6, r0
 8002350:	d8db      	bhi.n	800230a <HAL_SPI_Transmit+0x124>
 8002352:	e7b8      	b.n	80022c6 <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002354:	2320      	movs	r3, #32
 8002356:	6623      	str	r3, [r4, #96]	; 0x60
 8002358:	e79e      	b.n	8002298 <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 800235a:	2002      	movs	r0, #2
 800235c:	e7b4      	b.n	80022c8 <HAL_SPI_Transmit+0xe2>
  __HAL_LOCK(hspi);
 800235e:	2002      	movs	r0, #2
 8002360:	e7b8      	b.n	80022d4 <HAL_SPI_Transmit+0xee>

08002362 <HAL_SPI_TransmitReceive>:
{
 8002362:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002366:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8002368:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 800236c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8002370:	2b01      	cmp	r3, #1
{
 8002372:	4604      	mov	r4, r0
 8002374:	460d      	mov	r5, r1
 8002376:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 8002378:	f000 8112 	beq.w	80025a0 <HAL_SPI_TransmitReceive+0x23e>
 800237c:	2301      	movs	r3, #1
 800237e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002382:	f7fe fbef 	bl	8000b64 <HAL_GetTick>
  tmp  = hspi->State;
 8002386:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp1 = hspi->Init.Mode;
 800238a:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 800238c:	b2db      	uxtb	r3, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800238e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002390:	4681      	mov	r9, r0
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8002392:	d00a      	beq.n	80023aa <HAL_SPI_TransmitReceive+0x48>
 8002394:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8002398:	f040 8100 	bne.w	800259c <HAL_SPI_TransmitReceive+0x23a>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800239c:	68a2      	ldr	r2, [r4, #8]
 800239e:	2a00      	cmp	r2, #0
 80023a0:	f040 80fc 	bne.w	800259c <HAL_SPI_TransmitReceive+0x23a>
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	f040 80f9 	bne.w	800259c <HAL_SPI_TransmitReceive+0x23a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023aa:	2d00      	cmp	r5, #0
 80023ac:	d04b      	beq.n	8002446 <HAL_SPI_TransmitReceive+0xe4>
 80023ae:	2e00      	cmp	r6, #0
 80023b0:	d049      	beq.n	8002446 <HAL_SPI_TransmitReceive+0xe4>
 80023b2:	2f00      	cmp	r7, #0
 80023b4:	d047      	beq.n	8002446 <HAL_SPI_TransmitReceive+0xe4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023b6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80023ba:	68e0      	ldr	r0, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023bc:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023be:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023c0:	bf1c      	itt	ne
 80023c2:	2305      	movne	r3, #5
 80023c4:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023c8:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80023ca:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023ce:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 80023d0:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 80023d2:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80023d6:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 80023d8:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023dc:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80023de:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80023e0:	87a7      	strh	r7, [r4, #60]	; 0x3c
 80023e2:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80023e4:	d804      	bhi.n	80023f0 <HAL_SPI_TransmitReceive+0x8e>
 80023e6:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80023ea:	b292      	uxth	r2, r2
 80023ec:	2a01      	cmp	r2, #1
 80023ee:	d92c      	bls.n	800244a <HAL_SPI_TransmitReceive+0xe8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023f6:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80023fc:	bf5e      	ittt	pl
 80023fe:	681a      	ldrpl	r2, [r3, #0]
 8002400:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002404:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002406:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800240a:	d956      	bls.n	80024ba <HAL_SPI_TransmitReceive+0x158>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800240c:	b119      	cbz	r1, 8002416 <HAL_SPI_TransmitReceive+0xb4>
 800240e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002410:	b292      	uxth	r2, r2
 8002412:	2a01      	cmp	r2, #1
 8002414:	d106      	bne.n	8002424 <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002416:	f835 2b02 	ldrh.w	r2, [r5], #2
 800241a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800241c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800241e:	3b01      	subs	r3, #1
 8002420:	b29b      	uxth	r3, r3
 8002422:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002424:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002426:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002428:	b29b      	uxth	r3, r3
 800242a:	b993      	cbnz	r3, 8002452 <HAL_SPI_TransmitReceive+0xf0>
 800242c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002430:	b29b      	uxth	r3, r3
 8002432:	b973      	cbnz	r3, 8002452 <HAL_SPI_TransmitReceive+0xf0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002434:	464a      	mov	r2, r9
 8002436:	4641      	mov	r1, r8
 8002438:	4620      	mov	r0, r4
 800243a:	f7ff fe61 	bl	8002100 <SPI_EndRxTxTransaction>
 800243e:	2800      	cmp	r0, #0
 8002440:	d033      	beq.n	80024aa <HAL_SPI_TransmitReceive+0x148>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002442:	2320      	movs	r3, #32
 8002444:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002446:	2001      	movs	r0, #1
 8002448:	e02f      	b.n	80024aa <HAL_SPI_TransmitReceive+0x148>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002450:	e7d1      	b.n	80023f6 <HAL_SPI_TransmitReceive+0x94>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002452:	b177      	cbz	r7, 8002472 <HAL_SPI_TransmitReceive+0x110>
 8002454:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002456:	b29b      	uxth	r3, r3
 8002458:	b15b      	cbz	r3, 8002472 <HAL_SPI_TransmitReceive+0x110>
 800245a:	6823      	ldr	r3, [r4, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	0792      	lsls	r2, r2, #30
 8002460:	d507      	bpl.n	8002472 <HAL_SPI_TransmitReceive+0x110>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002462:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002466:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8002468:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800246a:	3b01      	subs	r3, #1
 800246c:	b29b      	uxth	r3, r3
 800246e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002470:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002472:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002476:	b29b      	uxth	r3, r3
 8002478:	b16b      	cbz	r3, 8002496 <HAL_SPI_TransmitReceive+0x134>
 800247a:	6823      	ldr	r3, [r4, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	07d0      	lsls	r0, r2, #31
 8002480:	d509      	bpl.n	8002496 <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8002488:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800248c:	3b01      	subs	r3, #1
 800248e:	b29b      	uxth	r3, r3
 8002490:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8002494:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002496:	f1b8 3fff 	cmp.w	r8, #4294967295
 800249a:	d0c4      	beq.n	8002426 <HAL_SPI_TransmitReceive+0xc4>
 800249c:	f7fe fb62 	bl	8000b64 <HAL_GetTick>
 80024a0:	eba0 0009 	sub.w	r0, r0, r9
 80024a4:	4580      	cmp	r8, r0
 80024a6:	d8be      	bhi.n	8002426 <HAL_SPI_TransmitReceive+0xc4>
        errorcode = HAL_TIMEOUT;
 80024a8:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80024aa:	2301      	movs	r3, #1
 80024ac:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80024b0:	2300      	movs	r3, #0
 80024b2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80024b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80024ba:	b119      	cbz	r1, 80024c4 <HAL_SPI_TransmitReceive+0x162>
 80024bc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80024be:	b292      	uxth	r2, r2
 80024c0:	2a01      	cmp	r2, #1
 80024c2:	d10a      	bne.n	80024da <HAL_SPI_TransmitReceive+0x178>
      if (hspi->TxXferCount > 1U)
 80024c4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80024c6:	b292      	uxth	r2, r2
 80024c8:	2a01      	cmp	r2, #1
 80024ca:	d94d      	bls.n	8002568 <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80024cc:	f835 2b02 	ldrh.w	r2, [r5], #2
 80024d0:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80024d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024d4:	3b02      	subs	r3, #2
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80024da:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024de:	b29b      	uxth	r3, r3
 80024e0:	b923      	cbnz	r3, 80024ec <HAL_SPI_TransmitReceive+0x18a>
 80024e2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0a3      	beq.n	8002434 <HAL_SPI_TransmitReceive+0xd2>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80024ec:	b197      	cbz	r7, 8002514 <HAL_SPI_TransmitReceive+0x1b2>
 80024ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	b17b      	cbz	r3, 8002514 <HAL_SPI_TransmitReceive+0x1b2>
 80024f4:	6823      	ldr	r3, [r4, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	0791      	lsls	r1, r2, #30
 80024fa:	d50b      	bpl.n	8002514 <HAL_SPI_TransmitReceive+0x1b2>
        if (hspi->TxXferCount > 1U)
 80024fc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80024fe:	b292      	uxth	r2, r2
 8002500:	2a01      	cmp	r2, #1
 8002502:	d939      	bls.n	8002578 <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8002504:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002508:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 800250a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800250c:	3b02      	subs	r3, #2
 800250e:	b29b      	uxth	r3, r3
 8002510:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002512:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002514:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002518:	b29b      	uxth	r3, r3
 800251a:	b1db      	cbz	r3, 8002554 <HAL_SPI_TransmitReceive+0x1f2>
 800251c:	6823      	ldr	r3, [r4, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	07d2      	lsls	r2, r2, #31
 8002522:	d517      	bpl.n	8002554 <HAL_SPI_TransmitReceive+0x1f2>
        if (hspi->RxXferCount > 1U)
 8002524:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002528:	b292      	uxth	r2, r2
 800252a:	2a01      	cmp	r2, #1
 800252c:	d92c      	bls.n	8002588 <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	f826 2b02 	strh.w	r2, [r6], #2
          hspi->RxXferCount -= 2U;
 8002534:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002538:	3a02      	subs	r2, #2
 800253a:	b292      	uxth	r2, r2
 800253c:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002540:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002544:	b292      	uxth	r2, r2
 8002546:	2a01      	cmp	r2, #1
 8002548:	d803      	bhi.n	8002552 <HAL_SPI_TransmitReceive+0x1f0>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002550:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 8002552:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002554:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002558:	d0c0      	beq.n	80024dc <HAL_SPI_TransmitReceive+0x17a>
 800255a:	f7fe fb03 	bl	8000b64 <HAL_GetTick>
 800255e:	eba0 0009 	sub.w	r0, r0, r9
 8002562:	4580      	cmp	r8, r0
 8002564:	d8ba      	bhi.n	80024dc <HAL_SPI_TransmitReceive+0x17a>
 8002566:	e79f      	b.n	80024a8 <HAL_SPI_TransmitReceive+0x146>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002568:	782a      	ldrb	r2, [r5, #0]
 800256a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800256c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800256e:	3b01      	subs	r3, #1
 8002570:	b29b      	uxth	r3, r3
 8002572:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002574:	3501      	adds	r5, #1
 8002576:	e7b0      	b.n	80024da <HAL_SPI_TransmitReceive+0x178>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002578:	782a      	ldrb	r2, [r5, #0]
 800257a:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800257c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800257e:	3b01      	subs	r3, #1
 8002580:	b29b      	uxth	r3, r3
 8002582:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002584:	3501      	adds	r5, #1
 8002586:	e7c4      	b.n	8002512 <HAL_SPI_TransmitReceive+0x1b0>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002588:	7b1b      	ldrb	r3, [r3, #12]
 800258a:	7033      	strb	r3, [r6, #0]
          hspi->RxXferCount--;
 800258c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002590:	3b01      	subs	r3, #1
 8002592:	b29b      	uxth	r3, r3
 8002594:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002598:	3601      	adds	r6, #1
 800259a:	e7da      	b.n	8002552 <HAL_SPI_TransmitReceive+0x1f0>
    errorcode = HAL_BUSY;
 800259c:	2002      	movs	r0, #2
 800259e:	e784      	b.n	80024aa <HAL_SPI_TransmitReceive+0x148>
  __HAL_LOCK(hspi);
 80025a0:	2002      	movs	r0, #2
}
 80025a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080025a8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80025aa:	780c      	ldrb	r4, [r1, #0]
 80025ac:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80025b0:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
{
 80025b4:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80025b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 80025ba:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80025bc:	0412      	lsls	r2, r2, #16
 80025be:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 80025c0:	2803      	cmp	r0, #3
 80025c2:	d850      	bhi.n	8002666 <USB_ActivateEndpoint+0xbe>
 80025c4:	e8df f000 	tbb	[pc, r0]
 80025c8:	49044c02 	.word	0x49044c02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80025cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80025d0:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal);
 80025d2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80025d6:	780e      	ldrb	r6, [r1, #0]
 80025d8:	4cab      	ldr	r4, [pc, #684]	; (8002888 <USB_ActivateEndpoint+0x2e0>)
 80025da:	b235      	sxth	r5, r6
 80025dc:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80025e0:	b292      	uxth	r2, r2
 80025e2:	4022      	ands	r2, r4
 80025e4:	4332      	orrs	r2, r6
 80025e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025ee:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  if (ep->doublebuffer == 0U)
 80025f2:	7b0d      	ldrb	r5, [r1, #12]
 80025f4:	780a      	ldrb	r2, [r1, #0]
 80025f6:	2d00      	cmp	r5, #0
 80025f8:	f040 8082 	bne.w	8002700 <USB_ActivateEndpoint+0x158>
  {
    if (ep->is_in != 0U)
 80025fc:	784f      	ldrb	r7, [r1, #1]
 80025fe:	88ce      	ldrh	r6, [r1, #6]
 8002600:	2508      	movs	r5, #8
 8002602:	b397      	cbz	r7, 800266a <USB_ActivateEndpoint+0xc2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002604:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8002608:	fb15 3202 	smlabb	r2, r5, r2, r3
 800260c:	fa12 f287 	uxtah	r2, r2, r7
 8002610:	f026 0601 	bic.w	r6, r6, #1
 8002614:	f8a2 6400 	strh.w	r6, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002618:	780d      	ldrb	r5, [r1, #0]
 800261a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800261e:	0656      	lsls	r6, r2, #25
 8002620:	d509      	bpl.n	8002636 <USB_ActivateEndpoint+0x8e>
 8002622:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8002626:	b292      	uxth	r2, r2
 8002628:	4014      	ands	r4, r2
 800262a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800262e:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8002632:	f823 4025 	strh.w	r4, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002636:	78ca      	ldrb	r2, [r1, #3]
 8002638:	7809      	ldrb	r1, [r1, #0]
 800263a:	4c94      	ldr	r4, [pc, #592]	; (800288c <USB_ActivateEndpoint+0x2e4>)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800263c:	b209      	sxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 800263e:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002640:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002644:	b292      	uxth	r2, r2
 8002646:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 800264a:	d001      	beq.n	8002650 <USB_ActivateEndpoint+0xa8>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800264c:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002650:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002654:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002658:	e0c5      	b.n	80027e6 <USB_ActivateEndpoint+0x23e>
      wEpRegVal |= USB_EP_INTERRUPT;
 800265a:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 800265e:	e7b7      	b.n	80025d0 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002660:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002664:	e7b4      	b.n	80025d0 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8002666:	2001      	movs	r0, #1
 8002668:	e7b3      	b.n	80025d2 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800266a:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800266e:	fb15 3202 	smlabb	r2, r5, r2, r3
 8002672:	fa12 f284 	uxtah	r2, r2, r4
 8002676:	f026 0601 	bic.w	r6, r6, #1
 800267a:	f8a2 6404 	strh.w	r6, [r2, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800267e:	780a      	ldrb	r2, [r1, #0]
 8002680:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002684:	690c      	ldr	r4, [r1, #16]
 8002686:	fb15 3202 	smlabb	r2, r5, r2, r3
 800268a:	b2b6      	uxth	r6, r6
 800268c:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8002690:	b954      	cbnz	r4, 80026a8 <USB_ActivateEndpoint+0x100>
 8002692:	5b94      	ldrh	r4, [r2, r6]
 8002694:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 8002698:	04a4      	lsls	r4, r4, #18
 800269a:	0ca4      	lsrs	r4, r4, #18
 800269c:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80026a0:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80026a4:	5394      	strh	r4, [r2, r6]
 80026a6:	e007      	b.n	80026b8 <USB_ActivateEndpoint+0x110>
 80026a8:	2c3d      	cmp	r4, #61	; 0x3d
 80026aa:	d824      	bhi.n	80026f6 <USB_ActivateEndpoint+0x14e>
 80026ac:	0865      	lsrs	r5, r4, #1
 80026ae:	07e4      	lsls	r4, r4, #31
 80026b0:	bf48      	it	mi
 80026b2:	3501      	addmi	r5, #1
 80026b4:	02ad      	lsls	r5, r5, #10
 80026b6:	5395      	strh	r5, [r2, r6]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80026b8:	780c      	ldrb	r4, [r1, #0]
 80026ba:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80026be:	0452      	lsls	r2, r2, #17
 80026c0:	d50d      	bpl.n	80026de <USB_ActivateEndpoint+0x136>
 80026c2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80026c6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80026ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80026ce:	0412      	lsls	r2, r2, #16
 80026d0:	0c12      	lsrs	r2, r2, #16
 80026d2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80026d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026da:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80026de:	7809      	ldrb	r1, [r1, #0]
 80026e0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80026e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80026ec:	0412      	lsls	r2, r2, #16
 80026ee:	0c12      	lsrs	r2, r2, #16
 80026f0:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80026f4:	e7ac      	b.n	8002650 <USB_ActivateEndpoint+0xa8>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80026f6:	4d66      	ldr	r5, [pc, #408]	; (8002890 <USB_ActivateEndpoint+0x2e8>)
 80026f8:	0964      	lsrs	r4, r4, #5
 80026fa:	ea45 2484 	orr.w	r4, r5, r4, lsl #10
 80026fe:	e7d1      	b.n	80026a4 <USB_ActivateEndpoint+0xfc>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002700:	b212      	sxth	r2, r2
 8002702:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8002706:	b2ad      	uxth	r5, r5
 8002708:	4025      	ands	r5, r4
 800270a:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 800270e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002712:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002716:	780e      	ldrb	r6, [r1, #0]
 8002718:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800271c:	2208      	movs	r2, #8
 800271e:	fb12 3606 	smlabb	r6, r2, r6, r3
 8002722:	fa16 f585 	uxtah	r5, r6, r5
 8002726:	890e      	ldrh	r6, [r1, #8]
 8002728:	f026 0601 	bic.w	r6, r6, #1
 800272c:	f8a5 6400 	strh.w	r6, [r5, #1024]	; 0x400
 8002730:	780e      	ldrb	r6, [r1, #0]
 8002732:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8002736:	fb12 3206 	smlabb	r2, r2, r6, r3
 800273a:	fa12 f285 	uxtah	r2, r2, r5
 800273e:	894d      	ldrh	r5, [r1, #10]
 8002740:	f025 0501 	bic.w	r5, r5, #1
 8002744:	f8a2 5404 	strh.w	r5, [r2, #1028]	; 0x404
 8002748:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 800274a:	784d      	ldrb	r5, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800274c:	b212      	sxth	r2, r2
    if (ep->is_in == 0U)
 800274e:	2d00      	cmp	r5, #0
 8002750:	d14c      	bne.n	80027ec <USB_ActivateEndpoint+0x244>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002752:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8002756:	046f      	lsls	r7, r5, #17
 8002758:	d509      	bpl.n	800276e <USB_ActivateEndpoint+0x1c6>
 800275a:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 800275e:	b2ad      	uxth	r5, r5
 8002760:	402c      	ands	r4, r5
 8002762:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8002766:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800276a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800276e:	780c      	ldrb	r4, [r1, #0]
 8002770:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002774:	0656      	lsls	r6, r2, #25
 8002776:	d50d      	bpl.n	8002794 <USB_ActivateEndpoint+0x1ec>
 8002778:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800277c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002780:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002784:	0412      	lsls	r2, r2, #16
 8002786:	0c12      	lsrs	r2, r2, #16
 8002788:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800278c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002790:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002794:	780c      	ldrb	r4, [r1, #0]
 8002796:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800279a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800279e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027a2:	0412      	lsls	r2, r2, #16
 80027a4:	0c12      	lsrs	r2, r2, #16
 80027a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027aa:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80027ae:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80027b2:	780d      	ldrb	r5, [r1, #0]
 80027b4:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80027b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027c0:	0412      	lsls	r2, r2, #16
 80027c2:	0c12      	lsrs	r2, r2, #16
 80027c4:	f248 0480 	movw	r4, #32896	; 0x8080
 80027c8:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80027cc:	4322      	orrs	r2, r4
 80027ce:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80027d2:	7809      	ldrb	r1, [r1, #0]
 80027d4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80027d8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80027dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027e0:	0412      	lsls	r2, r2, #16
 80027e2:	0c12      	lsrs	r2, r2, #16
 80027e4:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80027e6:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 80027ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80027ec:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 80027f0:	046d      	lsls	r5, r5, #17
 80027f2:	d509      	bpl.n	8002808 <USB_ActivateEndpoint+0x260>
 80027f4:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 80027f8:	b2ad      	uxth	r5, r5
 80027fa:	402c      	ands	r4, r5
 80027fc:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8002800:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8002804:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002808:	780c      	ldrb	r4, [r1, #0]
 800280a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800280e:	0652      	lsls	r2, r2, #25
 8002810:	d50d      	bpl.n	800282e <USB_ActivateEndpoint+0x286>
 8002812:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002816:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800281a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800281e:	0412      	lsls	r2, r2, #16
 8002820:	0c12      	lsrs	r2, r2, #16
 8002822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002826:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800282a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800282e:	780c      	ldrb	r4, [r1, #0]
 8002830:	4d16      	ldr	r5, [pc, #88]	; (800288c <USB_ActivateEndpoint+0x2e4>)
 8002832:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002836:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800283a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800283e:	0412      	lsls	r2, r2, #16
 8002840:	0c12      	lsrs	r2, r2, #16
 8002842:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002846:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800284a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 800284e:	780c      	ldrb	r4, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 8002850:	78ca      	ldrb	r2, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002852:	b224      	sxth	r4, r4
      if (ep->type != EP_TYPE_ISOC)
 8002854:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002856:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800285a:	b292      	uxth	r2, r2
 800285c:	ea02 0205 	and.w	r2, r2, r5
 8002860:	bf18      	it	ne
 8002862:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800286a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800286e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002872:	7809      	ldrb	r1, [r1, #0]
 8002874:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002878:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800287c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002880:	0412      	lsls	r2, r2, #16
 8002882:	0c12      	lsrs	r2, r2, #16
 8002884:	e6e4      	b.n	8002650 <USB_ActivateEndpoint+0xa8>
 8002886:	bf00      	nop
 8002888:	ffff8f8f 	.word	0xffff8f8f
 800288c:	ffff8fbf 	.word	0xffff8fbf
 8002890:	ffff8000 	.word	0xffff8000

08002894 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002894:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8002896:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002898:	b212      	sxth	r2, r2
  if (ep->is_in != 0U)
 800289a:	b18b      	cbz	r3, 80028c0 <USB_EPSetStall+0x2c>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800289c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	0c1b      	lsrs	r3, r3, #16
 80028ac:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80028b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80028bc:	2000      	movs	r0, #0
 80028be:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80028c0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	0c1b      	lsrs	r3, r3, #16
 80028d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80028d4:	e7ec      	b.n	80028b0 <USB_EPSetStall+0x1c>

080028d6 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80028d6:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 80028d8:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028da:	b212      	sxth	r2, r2
  if (ep->is_in != 0U)
 80028dc:	b323      	cbz	r3, 8002928 <USB_EPClearStall+0x52>
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028e2:	065b      	lsls	r3, r3, #25
 80028e4:	d50d      	bpl.n	8002902 <USB_EPClearStall+0x2c>
 80028e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f2:	041b      	lsls	r3, r3, #16
 80028f4:	0c1b      	lsrs	r3, r3, #16
 80028f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028fe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002902:	780a      	ldrb	r2, [r1, #0]
 8002904:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800290c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002910:	041b      	lsls	r3, r3, #16
 8002912:	0c1b      	lsrs	r3, r3, #16
 8002914:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800291c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002920:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8002924:	2000      	movs	r0, #0
 8002926:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002928:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800292c:	045b      	lsls	r3, r3, #17
 800292e:	d50d      	bpl.n	800294c <USB_EPClearStall+0x76>
 8002930:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293c:	041b      	lsls	r3, r3, #16
 800293e:	0c1b      	lsrs	r3, r3, #16
 8002940:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002948:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800294c:	780a      	ldrb	r2, [r1, #0]
 800294e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295a:	041b      	lsls	r3, r3, #16
 800295c:	0c1b      	lsrs	r3, r3, #16
 800295e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002962:	e7d9      	b.n	8002918 <USB_EPClearStall+0x42>

08002964 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002964:	b911      	cbnz	r1, 800296c <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800296c:	2000      	movs	r0, #0
 800296e:	4770      	bx	lr

08002970 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8002970:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002974:	b280      	uxth	r0, r0
 8002976:	4770      	bx	lr

08002978 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002978:	2000      	movs	r0, #0
 800297a:	4770      	bx	lr

0800297c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800297c:	b510      	push	{r4, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800297e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002982:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002984:	4410      	add	r0, r2
 8002986:	f023 0301 	bic.w	r3, r3, #1
 800298a:	4602      	mov	r2, r0
 800298c:	4403      	add	r3, r0
 800298e:	1a14      	subs	r4, r2, r0

  for (i = n; i != 0U; i--)
 8002990:	429a      	cmp	r2, r3
 8002992:	440c      	add	r4, r1
 8002994:	d100      	bne.n	8002998 <USB_WritePMA+0x1c>
    {
      pdwVal++;
    }
    pBuf++;
  }
}
 8002996:	bd10      	pop	{r4, pc}
 8002998:	8824      	ldrh	r4, [r4, #0]
    *pdwVal = (uint16_t)temp2;
 800299a:	f822 4b02 	strh.w	r4, [r2], #2
 800299e:	e7f6      	b.n	800298e <USB_WritePMA+0x12>

080029a0 <USB_EPStartXfer>:
{
 80029a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a2:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 80029a4:	7848      	ldrb	r0, [r1, #1]
  uint32_t len = ep->xfer_len;
 80029a6:	698a      	ldr	r2, [r1, #24]
 80029a8:	690b      	ldr	r3, [r1, #16]
 80029aa:	7b0f      	ldrb	r7, [r1, #12]
  if (ep->is_in == 1U)
 80029ac:	2801      	cmp	r0, #1
{
 80029ae:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 80029b0:	d16b      	bne.n	8002a8a <USB_EPStartXfer+0xea>
    if (ep->xfer_len > ep->maxpacket)
 80029b2:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 80029b4:	bf97      	itett	ls
 80029b6:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 80029b8:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 80029ba:	618b      	strls	r3, [r1, #24]
 80029bc:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 80029be:	bf88      	it	hi
 80029c0:	618a      	strhi	r2, [r1, #24]
 80029c2:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 80029c4:	bb0f      	cbnz	r7, 8002a0a <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80029c6:	88ca      	ldrh	r2, [r1, #6]
 80029c8:	6949      	ldr	r1, [r1, #20]
 80029ca:	4633      	mov	r3, r6
 80029cc:	4620      	mov	r0, r4
 80029ce:	f7ff ffd5 	bl	800297c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80029d2:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80029d6:	782a      	ldrb	r2, [r5, #0]
 80029d8:	f204 4102 	addw	r1, r4, #1026	; 0x402
 80029dc:	fa11 f383 	uxtah	r3, r1, r3
 80029e0:	f823 6032 	strh.w	r6, [r3, r2, lsl #3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80029e4:	782a      	ldrb	r2, [r5, #0]
 80029e6:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80029ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029f2:	041b      	lsls	r3, r3, #16
 80029f4:	0c1b      	lsrs	r3, r3, #16
 80029f6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80029fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a02:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8002a06:	2000      	movs	r0, #0
 8002a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002a0a:	7809      	ldrb	r1, [r1, #0]
 8002a0c:	b20a      	sxth	r2, r1
 8002a0e:	f834 2022 	ldrh.w	r2, [r4, r2, lsl #2]
 8002a12:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002a16:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002a1a:	bf15      	itete	ne
 8002a1c:	f204 4006 	addwne	r0, r4, #1030	; 0x406
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002a20:	f204 4002 	addweq	r0, r4, #1026	; 0x402
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002a24:	fa10 f282 	uxtahne	r2, r0, r2
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002a28:	fa10 f282 	uxtaheq	r2, r0, r2
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002a2c:	bf15      	itete	ne
 8002a2e:	f822 3031 	strhne.w	r3, [r2, r1, lsl #3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002a32:	f822 3031 	strheq.w	r3, [r2, r1, lsl #3]
        pmabuffer = ep->pmaaddr1;
 8002a36:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8002a38:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002a3a:	6969      	ldr	r1, [r5, #20]
 8002a3c:	4633      	mov	r3, r6
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f7ff ff9c 	bl	800297c <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002a44:	786b      	ldrb	r3, [r5, #1]
 8002a46:	782a      	ldrb	r2, [r5, #0]
 8002a48:	b97b      	cbnz	r3, 8002a6a <USB_EPStartXfer+0xca>
 8002a4a:	b212      	sxth	r2, r2
 8002a4c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a58:	041b      	lsls	r3, r3, #16
 8002a5a:	0c1b      	lsrs	r3, r3, #16
 8002a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a64:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8002a68:	e7bc      	b.n	80029e4 <USB_EPStartXfer+0x44>
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d1ba      	bne.n	80029e4 <USB_EPStartXfer+0x44>
 8002a6e:	b212      	sxth	r2, r2
 8002a70:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7c:	041b      	lsls	r3, r3, #16
 8002a7e:	0c1b      	lsrs	r3, r3, #16
 8002a80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a88:	e7ec      	b.n	8002a64 <USB_EPStartXfer+0xc4>
    if (ep->xfer_len > ep->maxpacket)
 8002a8a:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8002a8c:	bf95      	itete	ls
 8002a8e:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8002a90:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 8002a92:	618b      	strls	r3, [r1, #24]
      ep->xfer_len -= len;
 8002a94:	618a      	strhi	r2, [r1, #24]
      ep->xfer_len = 0U;
 8002a96:	bf98      	it	ls
 8002a98:	4613      	movls	r3, r2
 8002a9a:	7809      	ldrb	r1, [r1, #0]
    if (ep->doublebuffer == 0U)
 8002a9c:	b9a7      	cbnz	r7, 8002ac8 <USB_EPStartXfer+0x128>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002a9e:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002aa2:	f204 4006 	addw	r0, r4, #1030	; 0x406
 8002aa6:	fa10 f282 	uxtah	r2, r0, r2
 8002aaa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d137      	bne.n	8002b22 <USB_EPStartXfer+0x182>
 8002ab2:	8813      	ldrh	r3, [r2, #0]
 8002ab4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002ab8:	049b      	lsls	r3, r3, #18
 8002aba:	0c9b      	lsrs	r3, r3, #18
 8002abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ac4:	8013      	strh	r3, [r2, #0]
 8002ac6:	e034      	b.n	8002b32 <USB_EPStartXfer+0x192>
 8002ac8:	b990      	cbnz	r0, 8002af0 <USB_EPStartXfer+0x150>
 8002aca:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002ace:	f204 4002 	addw	r0, r4, #1026	; 0x402
 8002ad2:	fa10 f282 	uxtah	r2, r0, r2
 8002ad6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002ada:	b9ab      	cbnz	r3, 8002b08 <USB_EPStartXfer+0x168>
 8002adc:	8811      	ldrh	r1, [r2, #0]
 8002ade:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8002ae2:	0489      	lsls	r1, r1, #18
 8002ae4:	0c89      	lsrs	r1, r1, #18
 8002ae6:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002aea:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002aee:	8011      	strh	r1, [r2, #0]
 8002af0:	786a      	ldrb	r2, [r5, #1]
 8002af2:	7828      	ldrb	r0, [r5, #0]
 8002af4:	bb72      	cbnz	r2, 8002b54 <USB_EPStartXfer+0x1b4>
 8002af6:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002afa:	f204 4106 	addw	r1, r4, #1030	; 0x406
 8002afe:	fa11 f282 	uxtah	r2, r1, r2
 8002b02:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002b06:	e7d2      	b.n	8002aae <USB_EPStartXfer+0x10e>
 8002b08:	2b3d      	cmp	r3, #61	; 0x3d
 8002b0a:	d805      	bhi.n	8002b18 <USB_EPStartXfer+0x178>
 8002b0c:	0859      	lsrs	r1, r3, #1
 8002b0e:	07d8      	lsls	r0, r3, #31
 8002b10:	bf48      	it	mi
 8002b12:	3101      	addmi	r1, #1
 8002b14:	0289      	lsls	r1, r1, #10
 8002b16:	e7ea      	b.n	8002aee <USB_EPStartXfer+0x14e>
 8002b18:	4814      	ldr	r0, [pc, #80]	; (8002b6c <USB_EPStartXfer+0x1cc>)
 8002b1a:	0959      	lsrs	r1, r3, #5
 8002b1c:	ea40 2181 	orr.w	r1, r0, r1, lsl #10
 8002b20:	e7e5      	b.n	8002aee <USB_EPStartXfer+0x14e>
 8002b22:	2b3d      	cmp	r3, #61	; 0x3d
 8002b24:	d811      	bhi.n	8002b4a <USB_EPStartXfer+0x1aa>
 8002b26:	0859      	lsrs	r1, r3, #1
 8002b28:	07db      	lsls	r3, r3, #31
 8002b2a:	bf48      	it	mi
 8002b2c:	3101      	addmi	r1, #1
 8002b2e:	0289      	lsls	r1, r1, #10
 8002b30:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002b32:	782a      	ldrb	r2, [r5, #0]
 8002b34:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002b38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b40:	041b      	lsls	r3, r3, #16
 8002b42:	0c1b      	lsrs	r3, r3, #16
 8002b44:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002b48:	e757      	b.n	80029fa <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002b4a:	0959      	lsrs	r1, r3, #5
 8002b4c:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <USB_EPStartXfer+0x1cc>)
 8002b4e:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002b52:	e7b7      	b.n	8002ac4 <USB_EPStartXfer+0x124>
 8002b54:	2a01      	cmp	r2, #1
 8002b56:	bf01      	itttt	eq
 8002b58:	f8b4 1050 	ldrheq.w	r1, [r4, #80]	; 0x50
 8002b5c:	f204 4206 	addweq	r2, r4, #1030	; 0x406
 8002b60:	fa12 f181 	uxtaheq	r1, r2, r1
 8002b64:	f821 3030 	strheq.w	r3, [r1, r0, lsl #3]
 8002b68:	e7e3      	b.n	8002b32 <USB_EPStartXfer+0x192>
 8002b6a:	bf00      	nop
 8002b6c:	ffff8000 	.word	0xffff8000

08002b70 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002b70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 8002b74:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002b76:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002b78:	085d      	lsrs	r5, r3, #1
 8002b7a:	460a      	mov	r2, r1
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002b7c:	4607      	mov	r7, r0

  for (i = n; i != 0U; i--)
 8002b7e:	462e      	mov	r6, r5
 8002b80:	3202      	adds	r2, #2
 8002b82:	b936      	cbnz	r6, 8002b92 <USB_ReadPMA+0x22>
    {
      pdwVal++;
    }
  }

  if ((wNBytes % 2U) != 0U)
 8002b84:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002b86:	bf44      	itt	mi
 8002b88:	f830 3015 	ldrhmi.w	r3, [r0, r5, lsl #1]
 8002b8c:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
 8002b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *pdwVal;
 8002b92:	f837 4b02 	ldrh.w	r4, [r7], #2
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002b96:	f802 4c02 	strb.w	r4, [r2, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8002b9a:	0a24      	lsrs	r4, r4, #8
 8002b9c:	f802 4c01 	strb.w	r4, [r2, #-1]
  for (i = n; i != 0U; i--)
 8002ba0:	3e01      	subs	r6, #1
 8002ba2:	e7ed      	b.n	8002b80 <USB_ReadPMA+0x10>

08002ba4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002ba4:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8002ba6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002baa:	b90b      	cbnz	r3, 8002bb0 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002bac:	2002      	movs	r0, #2
 8002bae:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4798      	blx	r3
 8002bb4:	2800      	cmp	r0, #0
 8002bb6:	d1f9      	bne.n	8002bac <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002bb8:	bd08      	pop	{r3, pc}

08002bba <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002bba:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8002bbc:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4798      	blx	r3
  return USBD_OK;
}
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	bd08      	pop	{r3, pc}

08002bc8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002bc8:	b538      	push	{r3, r4, r5, lr}
 8002bca:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002bcc:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8002bd0:	4628      	mov	r0, r5
 8002bd2:	f000 fada 	bl	800318a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002bd6:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8002bd8:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 8002bdc:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8002be0:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8002be4:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 8002be8:	f001 031f 	and.w	r3, r1, #31
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d00e      	beq.n	8002c0e <USBD_LL_SetupStage+0x46>
 8002bf0:	d307      	bcc.n	8002c02 <USBD_LL_SetupStage+0x3a>
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d010      	beq.n	8002c18 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002bf6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f001 f8ea 	bl	8003dd4 <USBD_LL_StallEP>
    break;
 8002c00:	e003      	b.n	8002c0a <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002c02:	4629      	mov	r1, r5
 8002c04:	4620      	mov	r0, r4
 8002c06:	f000 f8f1 	bl	8002dec <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002c0e:	4629      	mov	r1, r5
 8002c10:	4620      	mov	r0, r4
 8002c12:	f000 fa0d 	bl	8003030 <USBD_StdItfReq>
    break;
 8002c16:	e7f8      	b.n	8002c0a <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8002c18:	4629      	mov	r1, r5
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	f000 fa2d 	bl	800307a <USBD_StdEPReq>
    break;
 8002c20:	e7f3      	b.n	8002c0a <USBD_LL_SetupStage+0x42>

08002c22 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002c22:	b570      	push	{r4, r5, r6, lr}
 8002c24:	4605      	mov	r5, r0
 8002c26:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8002c28:	bb39      	cbnz	r1, 8002c7a <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002c2a:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d11e      	bne.n	8002c70 <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 8002c32:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8002c36:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d90b      	bls.n	8002c56 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002c3e:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 8002c40:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8002c42:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 8002c46:	bf8c      	ite	hi
 8002c48:	b29a      	uxthhi	r2, r3
 8002c4a:	b292      	uxthls	r2, r2
 8002c4c:	4631      	mov	r1, r6
 8002c4e:	f000 fac5 	bl	80031dc <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002c52:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8002c54:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002c56:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	b123      	cbz	r3, 8002c68 <USBD_LL_DataOutStage+0x46>
 8002c5e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002c62:	2a03      	cmp	r2, #3
 8002c64:	d100      	bne.n	8002c68 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8002c66:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002c68:	4628      	mov	r0, r5
 8002c6a:	f000 fabf 	bl	80031ec <USBD_CtlSendStatus>
 8002c6e:	e7f0      	b.n	8002c52 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8002c70:	2b05      	cmp	r3, #5
 8002c72:	d1ee      	bne.n	8002c52 <USBD_LL_DataOutStage+0x30>
        USBD_LL_StallEP(pdev, 0U);
 8002c74:	f001 f8ae 	bl	8003dd4 <USBD_LL_StallEP>
 8002c78:	e7eb      	b.n	8002c52 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 8002c7a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	b12b      	cbz	r3, 8002c8e <USBD_LL_DataOutStage+0x6c>
 8002c82:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002c86:	2a03      	cmp	r2, #3
 8002c88:	d101      	bne.n	8002c8e <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8002c8a:	4798      	blx	r3
 8002c8c:	e7e1      	b.n	8002c52 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8002c8e:	2002      	movs	r0, #2
}
 8002c90:	bd70      	pop	{r4, r5, r6, pc}

08002c92 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8002c92:	b570      	push	{r4, r5, r6, lr}
 8002c94:	4613      	mov	r3, r2
 8002c96:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8002c98:	460e      	mov	r6, r1
 8002c9a:	2900      	cmp	r1, #0
 8002c9c:	d148      	bne.n	8002d30 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002c9e:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8002ca2:	2a02      	cmp	r2, #2
 8002ca4:	d13d      	bne.n	8002d22 <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8002ca6:	6a05      	ldr	r5, [r0, #32]
 8002ca8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002caa:	4295      	cmp	r5, r2
 8002cac:	d914      	bls.n	8002cd8 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8002cae:	1aaa      	subs	r2, r5, r2
 8002cb0:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	b292      	uxth	r2, r2
 8002cb6:	f000 fa89 	bl	80031cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002cba:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	f001 f8cf 	bl	8003e64 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8002cc6:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	f04f 0000 	mov.w	r0, #0
 8002cd0:	d13a      	bne.n	8002d48 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8002cd2:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8002cd6:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8002cd8:	69c3      	ldr	r3, [r0, #28]
 8002cda:	fbb3 f5f2 	udiv	r5, r3, r2
 8002cde:	fb02 3515 	mls	r5, r2, r5, r3
 8002ce2:	b965      	cbnz	r5, 8002cfe <USBD_LL_DataInStage+0x6c>
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d80a      	bhi.n	8002cfe <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002ce8:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d206      	bcs.n	8002cfe <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8002cf0:	462a      	mov	r2, r5
 8002cf2:	f000 fa6b 	bl	80031cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8002cf6:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002cfa:	462b      	mov	r3, r5
 8002cfc:	e7de      	b.n	8002cbc <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002cfe:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	b12b      	cbz	r3, 8002d12 <USBD_LL_DataInStage+0x80>
 8002d06:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8002d0a:	2a03      	cmp	r2, #3
 8002d0c:	d101      	bne.n	8002d12 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 8002d0e:	4620      	mov	r0, r4
 8002d10:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8002d12:	2180      	movs	r1, #128	; 0x80
 8002d14:	4620      	mov	r0, r4
 8002d16:	f001 f85d 	bl	8003dd4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	f000 fa71 	bl	8003202 <USBD_CtlReceiveStatus>
 8002d20:	e7d1      	b.n	8002cc6 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8002d22:	f032 0304 	bics.w	r3, r2, #4
 8002d26:	d1ce      	bne.n	8002cc6 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8002d28:	2180      	movs	r1, #128	; 0x80
 8002d2a:	f001 f853 	bl	8003dd4 <USBD_LL_StallEP>
 8002d2e:	e7ca      	b.n	8002cc6 <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8002d30:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	b133      	cbz	r3, 8002d46 <USBD_LL_DataInStage+0xb4>
 8002d38:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002d3c:	2a03      	cmp	r2, #3
 8002d3e:	d102      	bne.n	8002d46 <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8002d40:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002d42:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8002d44:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8002d46:	2002      	movs	r0, #2
}
 8002d48:	bd70      	pop	{r4, r5, r6, pc}

08002d4a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8002d4a:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002d4c:	2200      	movs	r2, #0
{
 8002d4e:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002d50:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002d52:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002d54:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002d56:	2340      	movs	r3, #64	; 0x40
 8002d58:	f001 f82c 	bl	8003db4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002d5c:	4633      	mov	r3, r6
 8002d5e:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002d60:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002d64:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	f001 f822 	bl	8003db4 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8002d70:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8002d74:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 8002d76:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002d78:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002d7a:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8002d7e:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8002d82:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8002d84:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 8002d88:	b123      	cbz	r3, 8002d94 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002d8a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8002d8e:	4620      	mov	r0, r4
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4798      	blx	r3
  }

  return USBD_OK;
}
 8002d94:	2000      	movs	r0, #0
 8002d96:	bd70      	pop	{r4, r5, r6, pc}

08002d98 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002d98:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	4770      	bx	lr

08002d9e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002d9e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002da2:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002da6:	2304      	movs	r3, #4
 8002da8:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8002dac:	2000      	movs	r0, #0
 8002dae:	4770      	bx	lr

08002db0 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8002db0:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8002db4:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8002db8:	2000      	movs	r0, #0
 8002dba:	4770      	bx	lr

08002dbc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002dbc:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002dbe:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002dc2:	2a03      	cmp	r2, #3
 8002dc4:	d104      	bne.n	8002dd0 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002dc6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	b103      	cbz	r3, 8002dd0 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002dce:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	bd08      	pop	{r3, pc}

08002dd4 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002dd4:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8002dd6:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002dd8:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8002dda:	f000 fffb 	bl	8003dd4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8002dde:	4620      	mov	r0, r4
 8002de0:	2100      	movs	r1, #0
}
 8002de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8002de6:	f000 bff5 	b.w	8003dd4 <USBD_LL_StallEP>
	...

08002dec <USBD_StdDevReq>:
{
 8002dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002dee:	780b      	ldrb	r3, [r1, #0]
 8002df0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002df4:	2b20      	cmp	r3, #32
{
 8002df6:	4604      	mov	r4, r0
 8002df8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002dfa:	d014      	beq.n	8002e26 <USBD_StdDevReq+0x3a>
 8002dfc:	2b40      	cmp	r3, #64	; 0x40
 8002dfe:	d012      	beq.n	8002e26 <USBD_StdDevReq+0x3a>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f040 8095 	bne.w	8002f30 <USBD_StdDevReq+0x144>
    switch (req->bRequest)
 8002e06:	784b      	ldrb	r3, [r1, #1]
 8002e08:	2b09      	cmp	r3, #9
 8002e0a:	f200 8090 	bhi.w	8002f2e <USBD_StdDevReq+0x142>
 8002e0e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002e12:	00e7      	.short	0x00e7
 8002e14:	008e0101 	.word	0x008e0101
 8002e18:	008e00fa 	.word	0x008e00fa
 8002e1c:	00130082 	.word	0x00130082
 8002e20:	00d2008e 	.word	0x00d2008e
 8002e24:	00a0      	.short	0x00a0
    pdev->pClass->Setup(pdev, req);
 8002e26:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8002e2a:	4629      	mov	r1, r5
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	4620      	mov	r0, r4
 8002e30:	4798      	blx	r3
}
 8002e32:	2000      	movs	r0, #0
 8002e34:	b003      	add	sp, #12
 8002e36:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 8002e38:	884b      	ldrh	r3, [r1, #2]
 8002e3a:	0a1a      	lsrs	r2, r3, #8
 8002e3c:	3a01      	subs	r2, #1
 8002e3e:	2a0e      	cmp	r2, #14
 8002e40:	d875      	bhi.n	8002f2e <USBD_StdDevReq+0x142>
 8002e42:	e8df f002 	tbb	[pc, r2]
 8002e46:	2824      	.short	0x2824
 8002e48:	55747435 	.word	0x55747435
 8002e4c:	7474745e 	.word	0x7474745e
 8002e50:	74747474 	.word	0x74747474
 8002e54:	08          	.byte	0x08
 8002e55:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8002e56:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002e5a:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002e5c:	7c20      	ldrb	r0, [r4, #16]
 8002e5e:	f10d 0106 	add.w	r1, sp, #6
 8002e62:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 8002e64:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002e68:	b152      	cbz	r2, 8002e80 <USBD_StdDevReq+0x94>
 8002e6a:	88eb      	ldrh	r3, [r5, #6]
 8002e6c:	b143      	cbz	r3, 8002e80 <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	bf28      	it	cs
 8002e72:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8002e74:	4601      	mov	r1, r0
 8002e76:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8002e78:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8002e7c:	f000 f999 	bl	80031b2 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8002e80:	88eb      	ldrh	r3, [r5, #6]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1d5      	bne.n	8002e32 <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 8002e86:	4620      	mov	r0, r4
 8002e88:	f000 f9b0 	bl	80031ec <USBD_CtlSendStatus>
 8002e8c:	e7d1      	b.n	8002e32 <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002e8e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	e7e2      	b.n	8002e5c <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8002e96:	7c02      	ldrb	r2, [r0, #16]
 8002e98:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002e9c:	b932      	cbnz	r2, 8002eac <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002ea0:	f10d 0006 	add.w	r0, sp, #6
 8002ea4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002ea6:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002ea8:	7043      	strb	r3, [r0, #1]
 8002eaa:	e7db      	b.n	8002e64 <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	e7f7      	b.n	8002ea0 <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	d83b      	bhi.n	8002f2e <USBD_StdDevReq+0x142>
 8002eb6:	e8df f003 	tbb	[pc, r3]
 8002eba:	0703      	.short	0x0703
 8002ebc:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8002ec0:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	e7c9      	b.n	8002e5c <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002ec8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	e7c5      	b.n	8002e5c <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002ed0:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	e7c1      	b.n	8002e5c <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002ed8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	e7bd      	b.n	8002e5c <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002ee0:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	e7b9      	b.n	8002e5c <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002ee8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	e7b5      	b.n	8002e5c <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8002ef0:	7c03      	ldrb	r3, [r0, #16]
 8002ef2:	b9e3      	cbnz	r3, 8002f2e <USBD_StdDevReq+0x142>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002ef4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002ef8:	f10d 0006 	add.w	r0, sp, #6
 8002efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efe:	4798      	blx	r3
 8002f00:	e7b0      	b.n	8002e64 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8002f02:	7c03      	ldrb	r3, [r0, #16]
 8002f04:	b99b      	cbnz	r3, 8002f2e <USBD_StdDevReq+0x142>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002f06:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002f0a:	f10d 0006 	add.w	r0, sp, #6
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002f12:	2307      	movs	r3, #7
 8002f14:	e7c8      	b.n	8002ea8 <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8002f16:	888b      	ldrh	r3, [r1, #4]
 8002f18:	b94b      	cbnz	r3, 8002f2e <USBD_StdDevReq+0x142>
 8002f1a:	88cb      	ldrh	r3, [r1, #6]
 8002f1c:	b93b      	cbnz	r3, 8002f2e <USBD_StdDevReq+0x142>
 8002f1e:	884d      	ldrh	r5, [r1, #2]
 8002f20:	2d7f      	cmp	r5, #127	; 0x7f
 8002f22:	d804      	bhi.n	8002f2e <USBD_StdDevReq+0x142>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002f24:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002f28:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8002f2a:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002f2c:	d103      	bne.n	8002f36 <USBD_StdDevReq+0x14a>
      USBD_CtlError(pdev, req);
 8002f2e:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8002f30:	f7ff ff50 	bl	8002dd4 <USBD_CtlError.constprop.1>
    break;
 8002f34:	e77d      	b.n	8002e32 <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 8002f36:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8002f3a:	f000 ff77 	bl	8003e2c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8002f3e:	4620      	mov	r0, r4
 8002f40:	f000 f954 	bl	80031ec <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8002f44:	b11d      	cbz	r5, 8002f4e <USBD_StdDevReq+0x162>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002f46:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8002f48:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8002f4c:	e771      	b.n	8002e32 <USBD_StdDevReq+0x46>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e7fa      	b.n	8002f48 <USBD_StdDevReq+0x15c>
  cfgidx = (uint8_t)(req->wValue);
 8002f52:	7889      	ldrb	r1, [r1, #2]
 8002f54:	4d35      	ldr	r5, [pc, #212]	; (800302c <USBD_StdDevReq+0x240>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002f56:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8002f58:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002f5a:	d8e8      	bhi.n	8002f2e <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 8002f5c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d008      	beq.n	8002f76 <USBD_StdDevReq+0x18a>
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d014      	beq.n	8002f92 <USBD_StdDevReq+0x1a6>
      USBD_CtlError(pdev, req);
 8002f68:	f7ff ff34 	bl	8002dd4 <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 8002f6c:	7829      	ldrb	r1, [r5, #0]
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f7ff fe23 	bl	8002bba <USBD_ClrClassConfig>
 8002f74:	e75d      	b.n	8002e32 <USBD_StdDevReq+0x46>
      if (cfgidx)
 8002f76:	2900      	cmp	r1, #0
 8002f78:	d085      	beq.n	8002e86 <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 8002f7a:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002f7c:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8002f7e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002f80:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8002f84:	4620      	mov	r0, r4
 8002f86:	f7ff fe0d 	bl	8002ba4 <USBD_SetClassConfig>
 8002f8a:	2802      	cmp	r0, #2
 8002f8c:	f47f af7b 	bne.w	8002e86 <USBD_StdDevReq+0x9a>
 8002f90:	e7cd      	b.n	8002f2e <USBD_StdDevReq+0x142>
      if (cfgidx == 0U)
 8002f92:	b931      	cbnz	r1, 8002fa2 <USBD_StdDevReq+0x1b6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002f94:	2302      	movs	r3, #2
 8002f96:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8002f9a:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8002f9c:	f7ff fe0d 	bl	8002bba <USBD_ClrClassConfig>
 8002fa0:	e771      	b.n	8002e86 <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 8002fa2:	6841      	ldr	r1, [r0, #4]
 8002fa4:	2901      	cmp	r1, #1
 8002fa6:	f43f af6e 	beq.w	8002e86 <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8002faa:	b2c9      	uxtb	r1, r1
 8002fac:	f7ff fe05 	bl	8002bba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002fb0:	7829      	ldrb	r1, [r5, #0]
 8002fb2:	6061      	str	r1, [r4, #4]
 8002fb4:	e7e6      	b.n	8002f84 <USBD_StdDevReq+0x198>
  if (req->wLength != 1U)
 8002fb6:	88ca      	ldrh	r2, [r1, #6]
 8002fb8:	2a01      	cmp	r2, #1
 8002fba:	d1b8      	bne.n	8002f2e <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 8002fbc:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0b4      	beq.n	8002f2e <USBD_StdDevReq+0x142>
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d903      	bls.n	8002fd0 <USBD_StdDevReq+0x1e4>
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d1b0      	bne.n	8002f2e <USBD_StdDevReq+0x142>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8002fcc:	1d01      	adds	r1, r0, #4
 8002fce:	e003      	b.n	8002fd8 <USBD_StdDevReq+0x1ec>
      pdev->dev_default_config = 0U;
 8002fd0:	4601      	mov	r1, r0
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002fd8:	4620      	mov	r0, r4
 8002fda:	f000 f8ea 	bl	80031b2 <USBD_CtlSendData>
 8002fde:	e728      	b.n	8002e32 <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8002fe0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d8a1      	bhi.n	8002f2e <USBD_StdDevReq+0x142>
    if(req->wLength != 0x2U)
 8002fea:	88cb      	ldrh	r3, [r1, #6]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d19e      	bne.n	8002f2e <USBD_StdDevReq+0x142>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8002ff4:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8002ff8:	b10b      	cbz	r3, 8002ffe <USBD_StdDevReq+0x212>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002ffe:	2202      	movs	r2, #2
 8003000:	f104 010c 	add.w	r1, r4, #12
 8003004:	e7e8      	b.n	8002fd8 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003006:	884b      	ldrh	r3, [r1, #2]
 8003008:	2b01      	cmp	r3, #1
 800300a:	f47f af12 	bne.w	8002e32 <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 800300e:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 8003012:	e738      	b.n	8002e86 <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 8003014:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003018:	3b01      	subs	r3, #1
 800301a:	2b02      	cmp	r3, #2
 800301c:	d887      	bhi.n	8002f2e <USBD_StdDevReq+0x142>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800301e:	884b      	ldrh	r3, [r1, #2]
 8003020:	2b01      	cmp	r3, #1
 8003022:	f47f af06 	bne.w	8002e32 <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	e7f1      	b.n	800300e <USBD_StdDevReq+0x222>
 800302a:	bf00      	nop
 800302c:	200000a8 	.word	0x200000a8

08003030 <USBD_StdItfReq>:
{
 8003030:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003032:	780b      	ldrb	r3, [r1, #0]
 8003034:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003038:	2b20      	cmp	r3, #32
{
 800303a:	4604      	mov	r4, r0
 800303c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800303e:	d002      	beq.n	8003046 <USBD_StdItfReq+0x16>
 8003040:	2b40      	cmp	r3, #64	; 0x40
 8003042:	d000      	beq.n	8003046 <USBD_StdItfReq+0x16>
 8003044:	b9b3      	cbnz	r3, 8003074 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 8003046:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 800304a:	3b01      	subs	r3, #1
 800304c:	2b02      	cmp	r3, #2
 800304e:	d810      	bhi.n	8003072 <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003050:	792b      	ldrb	r3, [r5, #4]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d80d      	bhi.n	8003072 <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8003056:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800305a:	4629      	mov	r1, r5
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	4620      	mov	r0, r4
 8003060:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8003062:	88eb      	ldrh	r3, [r5, #6]
 8003064:	b91b      	cbnz	r3, 800306e <USBD_StdItfReq+0x3e>
 8003066:	b910      	cbnz	r0, 800306e <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 8003068:	4620      	mov	r0, r4
 800306a:	f000 f8bf 	bl	80031ec <USBD_CtlSendStatus>
}
 800306e:	2000      	movs	r0, #0
 8003070:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 8003072:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8003074:	f7ff feae 	bl	8002dd4 <USBD_CtlError.constprop.1>
    break;
 8003078:	e7f9      	b.n	800306e <USBD_StdItfReq+0x3e>

0800307a <USBD_StdEPReq>:
{
 800307a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800307c:	780a      	ldrb	r2, [r1, #0]
 800307e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003082:	2a20      	cmp	r2, #32
{
 8003084:	4604      	mov	r4, r0
 8003086:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003088:	d013      	beq.n	80030b2 <USBD_StdEPReq+0x38>
 800308a:	2a40      	cmp	r2, #64	; 0x40
 800308c:	d011      	beq.n	80030b2 <USBD_StdEPReq+0x38>
 800308e:	b96a      	cbnz	r2, 80030ac <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8003090:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8003092:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8003094:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8003096:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8003098:	d01f      	beq.n	80030da <USBD_StdEPReq+0x60>
 800309a:	d335      	bcc.n	8003108 <USBD_StdEPReq+0x8e>
 800309c:	2d03      	cmp	r5, #3
 800309e:	d105      	bne.n	80030ac <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 80030a0:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80030a4:	2a02      	cmp	r2, #2
 80030a6:	d026      	beq.n	80030f6 <USBD_StdEPReq+0x7c>
 80030a8:	2a03      	cmp	r2, #3
 80030aa:	d00a      	beq.n	80030c2 <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 80030ac:	f7ff fe92 	bl	8002dd4 <USBD_CtlError.constprop.1>
    break;
 80030b0:	e005      	b.n	80030be <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 80030b2:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 80030b6:	4619      	mov	r1, r3
 80030b8:	6892      	ldr	r2, [r2, #8]
 80030ba:	4620      	mov	r0, r4
 80030bc:	4790      	blx	r2
}
 80030be:	2000      	movs	r0, #0
 80030c0:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 80030c2:	885a      	ldrh	r2, [r3, #2]
 80030c4:	b92a      	cbnz	r2, 80030d2 <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80030c6:	064a      	lsls	r2, r1, #25
 80030c8:	d003      	beq.n	80030d2 <USBD_StdEPReq+0x58>
 80030ca:	88db      	ldrh	r3, [r3, #6]
 80030cc:	b90b      	cbnz	r3, 80030d2 <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 80030ce:	f000 fe81 	bl	8003dd4 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 80030d2:	4620      	mov	r0, r4
 80030d4:	f000 f88a 	bl	80031ec <USBD_CtlSendStatus>
        break;
 80030d8:	e7f1      	b.n	80030be <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 80030da:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80030de:	2a02      	cmp	r2, #2
 80030e0:	d009      	beq.n	80030f6 <USBD_StdEPReq+0x7c>
 80030e2:	2a03      	cmp	r2, #3
 80030e4:	d1e2      	bne.n	80030ac <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80030e6:	885b      	ldrh	r3, [r3, #2]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e8      	bne.n	80030be <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 80030ec:	064d      	lsls	r5, r1, #25
 80030ee:	d0f0      	beq.n	80030d2 <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80030f0:	f000 fe7e 	bl	8003df0 <USBD_LL_ClearStallEP>
 80030f4:	e7ed      	b.n	80030d2 <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80030f6:	064b      	lsls	r3, r1, #25
 80030f8:	d017      	beq.n	800312a <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 80030fa:	f000 fe6b 	bl	8003dd4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80030fe:	2180      	movs	r1, #128	; 0x80
 8003100:	4620      	mov	r0, r4
 8003102:	f000 fe67 	bl	8003dd4 <USBD_LL_StallEP>
 8003106:	e7da      	b.n	80030be <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8003108:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800310c:	2b02      	cmp	r3, #2
 800310e:	d00e      	beq.n	800312e <USBD_StdEPReq+0xb4>
 8003110:	2b03      	cmp	r3, #3
 8003112:	d1cb      	bne.n	80030ac <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 8003114:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003118:	f04f 0314 	mov.w	r3, #20
 800311c:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003120:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 8003124:	d012      	beq.n	800314c <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003126:	6992      	ldr	r2, [r2, #24]
 8003128:	b9da      	cbnz	r2, 8003162 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 800312a:	4620      	mov	r0, r4
 800312c:	e7be      	b.n	80030ac <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800312e:	0649      	lsls	r1, r1, #25
 8003130:	d1fb      	bne.n	800312a <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003132:	0613      	lsls	r3, r2, #24
 8003134:	bf4c      	ite	mi
 8003136:	f100 0114 	addmi.w	r1, r0, #20
 800313a:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 800313e:	2300      	movs	r3, #0
 8003140:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003142:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003144:	4620      	mov	r0, r4
 8003146:	f000 f834 	bl	80031b2 <USBD_CtlSendData>
          break;
 800314a:	e7b8      	b.n	80030be <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800314c:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 8003150:	2a00      	cmp	r2, #0
 8003152:	d0ea      	beq.n	800312a <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003154:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8003158:	fb03 0505 	mla	r5, r3, r5, r0
 800315c:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 8003160:	e004      	b.n	800316c <USBD_StdEPReq+0xf2>
 8003162:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8003166:	fb05 3503 	mla	r5, r5, r3, r3
 800316a:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800316c:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8003170:	d103      	bne.n	800317a <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 8003172:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003174:	2202      	movs	r2, #2
 8003176:	4629      	mov	r1, r5
 8003178:	e7e4      	b.n	8003144 <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800317a:	4620      	mov	r0, r4
 800317c:	f000 fe46 	bl	8003e0c <USBD_LL_IsStallEP>
 8003180:	b108      	cbz	r0, 8003186 <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 8003182:	2301      	movs	r3, #1
 8003184:	e7f5      	b.n	8003172 <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 8003186:	6028      	str	r0, [r5, #0]
 8003188:	e7f4      	b.n	8003174 <USBD_StdEPReq+0xfa>

0800318a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800318a:	780b      	ldrb	r3, [r1, #0]
 800318c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800318e:	784b      	ldrb	r3, [r1, #1]
 8003190:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003192:	78ca      	ldrb	r2, [r1, #3]
 8003194:	788b      	ldrb	r3, [r1, #2]
 8003196:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800319a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800319c:	794a      	ldrb	r2, [r1, #5]
 800319e:	790b      	ldrb	r3, [r1, #4]
 80031a0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80031a4:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80031a6:	79ca      	ldrb	r2, [r1, #7]
 80031a8:	798b      	ldrb	r3, [r1, #6]
 80031aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80031ae:	80c3      	strh	r3, [r0, #6]
 80031b0:	4770      	bx	lr

080031b2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80031b2:	b510      	push	{r4, lr}
 80031b4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80031b6:	2202      	movs	r2, #2
 80031b8:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80031bc:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80031be:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80031c0:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80031c2:	2100      	movs	r1, #0
 80031c4:	f000 fe40 	bl	8003e48 <USBD_LL_Transmit>

  return USBD_OK;
}
 80031c8:	2000      	movs	r0, #0
 80031ca:	bd10      	pop	{r4, pc}

080031cc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80031cc:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80031ce:	4613      	mov	r3, r2
 80031d0:	460a      	mov	r2, r1
 80031d2:	2100      	movs	r1, #0
 80031d4:	f000 fe38 	bl	8003e48 <USBD_LL_Transmit>

  return USBD_OK;
}
 80031d8:	2000      	movs	r0, #0
 80031da:	bd08      	pop	{r3, pc}

080031dc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80031dc:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80031de:	4613      	mov	r3, r2
 80031e0:	460a      	mov	r2, r1
 80031e2:	2100      	movs	r1, #0
 80031e4:	f000 fe3e 	bl	8003e64 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80031e8:	2000      	movs	r0, #0
 80031ea:	bd08      	pop	{r3, pc}

080031ec <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80031ec:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80031ee:	2304      	movs	r3, #4
 80031f0:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80031f4:	2300      	movs	r3, #0
 80031f6:	461a      	mov	r2, r3
 80031f8:	4619      	mov	r1, r3
 80031fa:	f000 fe25 	bl	8003e48 <USBD_LL_Transmit>

  return USBD_OK;
}
 80031fe:	2000      	movs	r0, #0
 8003200:	bd08      	pop	{r3, pc}

08003202 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8003202:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003204:	2305      	movs	r3, #5
 8003206:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800320a:	2300      	movs	r3, #0
 800320c:	461a      	mov	r2, r3
 800320e:	4619      	mov	r1, r3
 8003210:	f000 fe28 	bl	8003e64 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003214:	2000      	movs	r0, #0
 8003216:	bd08      	pop	{r3, pc}

08003218 <LTC_wake>:
*/
  }
}

void LTC_wake(uint16_t numChips)
{
 8003218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	for(int i=0; i<numChips; i++)
 800321a:	2400      	movs	r4, #0
		//HAL_Delay(1);
		uint8_t cmd[]={0x00, 0x00};
		//for(int x=0;x<10;x++)
		//{
			HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
			HAL_SPI_Transmit(&hspi1, (uint8_t*)cmd, 1, 100);
 800321c:	4f12      	ldr	r7, [pc, #72]	; (8003268 <LTC_wake+0x50>)
{
 800321e:	4606      	mov	r6, r0
		HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 8003220:	4625      	mov	r5, r4
	for(int i=0; i<numChips; i++)
 8003222:	42b4      	cmp	r4, r6
 8003224:	db01      	blt.n	800322a <LTC_wake+0x12>
			HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, HIGH);
	//}
	}
}
 8003226:	b003      	add	sp, #12
 8003228:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 800322a:	2200      	movs	r2, #0
 800322c:	2110      	movs	r1, #16
 800322e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003232:	f7fd fde1 	bl	8000df8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 8003236:	2200      	movs	r2, #0
 8003238:	2110      	movs	r1, #16
 800323a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		uint8_t cmd[]={0x00, 0x00};
 800323e:	f88d 5004 	strb.w	r5, [sp, #4]
 8003242:	f88d 5005 	strb.w	r5, [sp, #5]
			HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 8003246:	f7fd fdd7 	bl	8000df8 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, (uint8_t*)cmd, 1, 100);
 800324a:	2364      	movs	r3, #100	; 0x64
 800324c:	2201      	movs	r2, #1
 800324e:	a901      	add	r1, sp, #4
 8003250:	4638      	mov	r0, r7
 8003252:	f7fe ffc8 	bl	80021e6 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, HIGH);
 8003256:	2201      	movs	r2, #1
 8003258:	2110      	movs	r1, #16
 800325a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800325e:	f7fd fdcb 	bl	8000df8 <HAL_GPIO_WritePin>
	for(int i=0; i<numChips; i++)
 8003262:	3401      	adds	r4, #1
 8003264:	e7dd      	b.n	8003222 <LTC_wake+0xa>
 8003266:	bf00      	nop
 8003268:	2000028c 	.word	0x2000028c

0800326c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800326c:	b570      	push	{r4, r5, r6, lr}
 800326e:	b0ae      	sub	sp, #184	; 0xb8
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability
    */
  HAL_PWR_EnableBkUpAccess();
 8003270:	f7fe f8f8 	bl	8001464 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003274:	4a30      	ldr	r2, [pc, #192]	; (8003338 <SystemClock_Config+0xcc>)
 8003276:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800327a:	f023 0318 	bic.w	r3, r3, #24
 800327e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003282:	2314      	movs	r3, #20
 8003284:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800328a:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800328c:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800328e:	2502      	movs	r5, #2
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003290:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003292:	2607      	movs	r6, #7
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003294:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003296:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003298:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800329a:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800329c:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800329e:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80032a0:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80032a2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80032a4:	9613      	str	r6, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80032a6:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80032a8:	9515      	str	r5, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032aa:	f7fe f9c9 	bl	8001640 <HAL_RCC_OscConfig>
 80032ae:	b100      	cbz	r0, 80032b2 <SystemClock_Config+0x46>
 80032b0:	e7fe      	b.n	80032b0 <SystemClock_Config+0x44>

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032b2:	220f      	movs	r2, #15
 80032b4:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032b6:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80032b8:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032ba:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80032bc:	2104      	movs	r1, #4
 80032be:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032c0:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80032c4:	f7fe fc1a 	bl	8001afc <HAL_RCC_ClockConfig>
 80032c8:	b100      	cbz	r0, 80032cc <SystemClock_Config+0x60>
 80032ca:	e7fe      	b.n	80032ca <SystemClock_Config+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 80032cc:	4b1b      	ldr	r3, [pc, #108]	; (800333c <SystemClock_Config+0xd0>)
 80032ce:	9316      	str	r3, [sp, #88]	; 0x58
                              |RCC_PERIPHCLK_LPTIM1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80032d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032d4:	932d      	str	r3, [sp, #180]	; 0xb4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80032d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80032da:	9328      	str	r3, [sp, #160]	; 0xa0
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80032dc:	2318      	movs	r3, #24
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80032de:	901e      	str	r0, [sp, #120]	; 0x78
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80032e0:	9025      	str	r0, [sp, #148]	; 0x94
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80032e2:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032e4:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80032e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80032ea:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80032ec:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80032ee:	961a      	str	r6, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80032f0:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80032f2:	951c      	str	r5, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80032f4:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032f6:	f7fe fd25 	bl	8001d44 <HAL_RCCEx_PeriphCLKConfig>
 80032fa:	b100      	cbz	r0, 80032fe <SystemClock_Config+0x92>
 80032fc:	e7fe      	b.n	80032fc <SystemClock_Config+0x90>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80032fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003302:	f7fe f8bf 	bl	8001484 <HAL_PWREx_ControlVoltageScaling>
 8003306:	4604      	mov	r4, r0
 8003308:	b100      	cbz	r0, 800330c <SystemClock_Config+0xa0>
 800330a:	e7fe      	b.n	800330a <SystemClock_Config+0x9e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/10000);//100us
 800330c:	f7fe fc88 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8003310:	f242 7310 	movw	r3, #10000	; 0x2710
 8003314:	fbb0 f0f3 	udiv	r0, r0, r3
 8003318:	f7fd fc7e 	bl	8000c18 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800331c:	2004      	movs	r0, #4
 800331e:	f7fd fc91 	bl	8000c44 <HAL_SYSTICK_CLKSourceConfig>

    /**Enable MSI Auto calibration
    */
  HAL_RCCEx_EnableMSIPLLMode();
 8003322:	f7fe fe85 	bl	8002030 <HAL_RCCEx_EnableMSIPLLMode>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003326:	4622      	mov	r2, r4
 8003328:	4621      	mov	r1, r4
 800332a:	f04f 30ff 	mov.w	r0, #4294967295
 800332e:	f7fd fc3f 	bl	8000bb0 <HAL_NVIC_SetPriority>
}
 8003332:	b02e      	add	sp, #184	; 0xb8
 8003334:	bd70      	pop	{r4, r5, r6, pc}
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000
 800333c:	00022201 	.word	0x00022201

08003340 <MX_SPI1_Init>:
/* SPI1 init function */
void MX_SPI1_Init(void)
{

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003340:	480f      	ldr	r0, [pc, #60]	; (8003380 <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003342:	4910      	ldr	r1, [pc, #64]	; (8003384 <MX_SPI1_Init+0x44>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;//SPI_DATASIZE_4BIT;
 8003344:	f44f 62e0 	mov.w	r2, #1792	; 0x700
{
 8003348:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800334a:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;//SPI_DATASIZE_4BIT;
 800334e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003350:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003354:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003358:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800335a:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;//SPI_BAUDRATEPRESCALER_2;
 800335c:	2238      	movs	r2, #56	; 0x38
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800335e:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003360:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003362:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;//SPI_BAUDRATEPRESCALER_2;
 8003364:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003366:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003368:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800336a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800336c:	2207      	movs	r2, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800336e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003370:	2308      	movs	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 8003372:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003374:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003376:	f7fe fee5 	bl	8002144 <HAL_SPI_Init>
 800337a:	b100      	cbz	r0, 800337e <MX_SPI1_Init+0x3e>
 800337c:	e7fe      	b.n	800337c <MX_SPI1_Init+0x3c>
 800337e:	bd08      	pop	{r3, pc}
 8003380:	2000028c 	.word	0x2000028c
 8003384:	40013000 	.word	0x40013000

08003388 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003388:	4b38      	ldr	r3, [pc, #224]	; (800346c <MX_GPIO_Init+0xe4>)
{
 800338a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800338c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800338e:	4f38      	ldr	r7, [pc, #224]	; (8003470 <MX_GPIO_Init+0xe8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3 
 8003390:	4d38      	ldr	r5, [pc, #224]	; (8003474 <MX_GPIO_Init+0xec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003392:	f042 0204 	orr.w	r2, r2, #4
 8003396:	64da      	str	r2, [r3, #76]	; 0x4c
 8003398:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 800339a:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800339c:	f002 0204 	and.w	r2, r2, #4
 80033a0:	9201      	str	r2, [sp, #4]
 80033a2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80033ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033ae:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80033b2:	9202      	str	r2, [sp, #8]
 80033b4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033b8:	f042 0201 	orr.w	r2, r2, #1
 80033bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80033be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033c0:	f002 0201 	and.w	r2, r2, #1
 80033c4:	9203      	str	r2, [sp, #12]
 80033c6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033ca:	f042 0202 	orr.w	r2, r2, #2
 80033ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80033d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80033d8:	4638      	mov	r0, r7
 80033da:	2200      	movs	r2, #0
 80033dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033e0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80033e2:	f7fd fd09 	bl	8000df8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 80033e6:	2200      	movs	r2, #0
 80033e8:	f248 0118 	movw	r1, #32792	; 0x8018
 80033ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033f0:	f7fd fd02 	bl	8000df8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3 
 80033f4:	2200      	movs	r2, #0
 80033f6:	4628      	mov	r0, r5
 80033f8:	f241 41fc 	movw	r1, #5372	; 0x14fc
 80033fc:	f7fd fcfc 	bl	8000df8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003402:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003408:	a905      	add	r1, sp, #20
 800340a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800340c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800340e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003410:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003412:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003414:	f7fd fc28 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8;
 8003418:	f240 1307 	movw	r3, #263	; 0x107
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341c:	a905      	add	r1, sp, #20
 800341e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8;
 8003422:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003424:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003426:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003428:	f7fd fc1e 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15;
 800342c:	f248 0318 	movw	r3, #32792	; 0x8018
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003430:	a905      	add	r1, sp, #20
 8003432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15;
 8003436:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003438:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343e:	f7fd fc13 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11;
 8003442:	f640 0303 	movw	r3, #2051	; 0x803
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003446:	a905      	add	r1, sp, #20
 8003448:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11;
 800344a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800344c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003450:	f7fd fc0a 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB12 PB3 
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3 
 8003454:	f241 43fc 	movw	r3, #5372	; 0x14fc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003458:	a905      	add	r1, sp, #20
 800345a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3 
 800345c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800345e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003462:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003464:	f7fd fc00 	bl	8000c68 <HAL_GPIO_Init>

}
 8003468:	b00b      	add	sp, #44	; 0x2c
 800346a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800346c:	40021000 	.word	0x40021000
 8003470:	48000800 	.word	0x48000800
 8003474:	48000400 	.word	0x48000400

08003478 <pec15_calc>:
  Calculates  and returns the CRC15
  */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8003478:	b530      	push	{r4, r5, lr}

  remainder = 16;//initialize the PEC
  for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
  {
    addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
    remainder = (remainder<<8)^crc15Table[addr];
 800347a:	4d0a      	ldr	r5, [pc, #40]	; (80034a4 <pec15_calc+0x2c>)
  for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 800347c:	460c      	mov	r4, r1
  remainder = 16;//initialize the PEC
 800347e:	2310      	movs	r3, #16
  for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8003480:	1a62      	subs	r2, r4, r1
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	4290      	cmp	r0, r2
 8003486:	d802      	bhi.n	800348e <pec15_calc+0x16>
  }
  return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8003488:	0058      	lsls	r0, r3, #1
 800348a:	b280      	uxth	r0, r0
}
 800348c:	bd30      	pop	{r4, r5, pc}
    addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 800348e:	f814 2b01 	ldrb.w	r2, [r4], #1
 8003492:	ea82 12d3 	eor.w	r2, r2, r3, lsr #7
    remainder = (remainder<<8)^crc15Table[addr];
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 800349c:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	e7ed      	b.n	8003480 <pec15_calc+0x8>
 80034a4:	08004134 	.word	0x08004134

080034a8 <LTC_Send>:
{
 80034a8:	b530      	push	{r4, r5, lr}
 80034aa:	b085      	sub	sp, #20
	cmd[0] = (uint8_t)(cmd16 >> 8);
 80034ac:	0a03      	lsrs	r3, r0, #8
	cmd[1] = (uint8_t)(cmd16);
 80034ae:	f88d 000d 	strb.w	r0, [sp, #13]
	uint16_t cmd_pec = pec15_calc(2, cmd);
 80034b2:	a903      	add	r1, sp, #12
 80034b4:	2002      	movs	r0, #2
	cmd[0] = (uint8_t)(cmd16 >> 8);
 80034b6:	f88d 300c 	strb.w	r3, [sp, #12]
	uint16_t cmd_pec = pec15_calc(2, cmd);
 80034ba:	f7ff ffdd 	bl	8003478 <pec15_calc>
    uint8_t pRxData[]={0x00, 0x00};
 80034be:	2200      	movs	r2, #0
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80034c0:	0a03      	lsrs	r3, r0, #8
	cmd[3] = (uint8_t)(cmd_pec);
 80034c2:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 80034c6:	2110      	movs	r1, #16
 80034c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80034cc:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t pRxData[]={0x00, 0x00};
 80034d0:	f88d 2008 	strb.w	r2, [sp, #8]
 80034d4:	f88d 2009 	strb.w	r2, [sp, #9]
	HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 80034d8:	f7fd fc8e 	bl	8000df8 <HAL_GPIO_WritePin>
	switch(HAL_SPI_Transmit(&hspi1, (uint8_t*)cmd, 4, 100))
 80034dc:	2364      	movs	r3, #100	; 0x64
 80034de:	2204      	movs	r2, #4
 80034e0:	a903      	add	r1, sp, #12
 80034e2:	4816      	ldr	r0, [pc, #88]	; (800353c <LTC_Send+0x94>)
 80034e4:	f7fe fe7f 	bl	80021e6 <HAL_SPI_Transmit>
 80034e8:	2801      	cmp	r0, #1
 80034ea:	d002      	beq.n	80034f2 <LTC_Send+0x4a>
 80034ec:	d302      	bcc.n	80034f4 <LTC_Send+0x4c>
 80034ee:	2803      	cmp	r0, #3
 80034f0:	d104      	bne.n	80034fc <LTC_Send+0x54>
 80034f2:	e7fe      	b.n	80034f2 <LTC_Send+0x4a>
	      HAL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);
 80034f4:	2104      	movs	r1, #4
 80034f6:	4812      	ldr	r0, [pc, #72]	; (8003540 <LTC_Send+0x98>)
 80034f8:	f7fd fc83 	bl	8000e02 <HAL_GPIO_TogglePin>
	cmd[0] = 0x00;
 80034fc:	2300      	movs	r3, #0
	  switch(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)cmd, (uint8_t*)pRxData, 1, 100))
 80034fe:	4d0f      	ldr	r5, [pc, #60]	; (800353c <LTC_Send+0x94>)
	cmd[0] = 0x00;
 8003500:	f88d 300c 	strb.w	r3, [sp, #12]
	  switch(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)cmd, (uint8_t*)pRxData, 1, 100))
 8003504:	2464      	movs	r4, #100	; 0x64
	while(pRxData[0]==0x00)// & poll)
 8003506:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800350a:	b13b      	cbz	r3, 800351c <LTC_Send+0x74>
	HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, HIGH);
 800350c:	2201      	movs	r2, #1
 800350e:	2110      	movs	r1, #16
 8003510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003514:	f7fd fc70 	bl	8000df8 <HAL_GPIO_WritePin>
}
 8003518:	b005      	add	sp, #20
 800351a:	bd30      	pop	{r4, r5, pc}
	  switch(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)cmd, (uint8_t*)pRxData, 1, 100))
 800351c:	9400      	str	r4, [sp, #0]
 800351e:	2301      	movs	r3, #1
 8003520:	aa02      	add	r2, sp, #8
 8003522:	a903      	add	r1, sp, #12
 8003524:	4628      	mov	r0, r5
 8003526:	f7fe ff1c 	bl	8002362 <HAL_SPI_TransmitReceive>
 800352a:	b930      	cbnz	r0, 800353a <LTC_Send+0x92>
				HAL_GPIO_TogglePin(busContactor_GPIO_PORT, busContactor_PIN);
 800352c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003534:	f7fd fc65 	bl	8000e02 <HAL_GPIO_TogglePin>
			break;
 8003538:	e7e5      	b.n	8003506 <LTC_Send+0x5e>
 800353a:	e7fe      	b.n	800353a <LTC_Send+0x92>
 800353c:	2000028c 	.word	0x2000028c
 8003540:	48000400 	.word	0x48000400

08003544 <LTC_Write>:
{
 8003544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint8_t CMD_LEN = 4+(8*total_ic);
 8003548:	00ce      	lsls	r6, r1, #3
 800354a:	3604      	adds	r6, #4
 800354c:	b2f6      	uxtb	r6, r6
{
 800354e:	4607      	mov	r7, r0
	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8003550:	4630      	mov	r0, r6
{
 8003552:	4690      	mov	r8, r2
 8003554:	460d      	mov	r5, r1
	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8003556:	f000 fd05 	bl	8003f64 <malloc>
	cmd[0] = (uint8_t)(cmd16 >> 8);
 800355a:	0a3b      	lsrs	r3, r7, #8
	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 800355c:	4604      	mov	r4, r0
	cmd[0] = (uint8_t)(cmd16 >> 8);
 800355e:	7003      	strb	r3, [r0, #0]
	cmd[1] = (uint8_t)(cmd16);
 8003560:	7047      	strb	r7, [r0, #1]
	cmd_pec = pec15_calc(2, cmd);
 8003562:	4601      	mov	r1, r0
 8003564:	2002      	movs	r0, #2
 8003566:	f7ff ff87 	bl	8003478 <pec15_calc>
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800356a:	0a03      	lsrs	r3, r0, #8
 800356c:	70a3      	strb	r3, [r4, #2]
 800356e:	3d01      	subs	r5, #1
 8003570:	2306      	movs	r3, #6
 8003572:	fb03 8505 	mla	r5, r3, r5, r8
	cmd[3] = (uint8_t)(cmd_pec);
 8003576:	70e0      	strb	r0, [r4, #3]
 8003578:	f1a8 0806 	sub.w	r8, r8, #6
	cmd_index = 4;
 800357c:	2704      	movs	r7, #4
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)       // executes for each LTC681x in daisy chain, this loops starts with
 800357e:	4545      	cmp	r5, r8
 8003580:	d111      	bne.n	80035a6 <LTC_Write+0x62>
	cs_low();
 8003582:	2200      	movs	r2, #0
 8003584:	2110      	movs	r1, #16
 8003586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800358a:	f7fd fc35 	bl	8000df8 <HAL_GPIO_WritePin>
	switch(HAL_SPI_Transmit(&hspi1, (uint8_t*)cmd, CMD_LEN, 100))
 800358e:	2364      	movs	r3, #100	; 0x64
 8003590:	4632      	mov	r2, r6
 8003592:	4621      	mov	r1, r4
 8003594:	4816      	ldr	r0, [pc, #88]	; (80035f0 <LTC_Write+0xac>)
 8003596:	f7fe fe26 	bl	80021e6 <HAL_SPI_Transmit>
 800359a:	2801      	cmp	r0, #1
 800359c:	d002      	beq.n	80035a4 <LTC_Write+0x60>
 800359e:	d317      	bcc.n	80035d0 <LTC_Write+0x8c>
 80035a0:	2803      	cmp	r0, #3
 80035a2:	d119      	bne.n	80035d8 <LTC_Write+0x94>
 80035a4:	e7fe      	b.n	80035a4 <LTC_Write+0x60>
 80035a6:	2000      	movs	r0, #0
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 80035a8:	183b      	adds	r3, r7, r0
 80035aa:	5c2a      	ldrb	r2, [r5, r0]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	3001      	adds	r0, #1
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80035b0:	2806      	cmp	r0, #6
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 80035b2:	54e2      	strb	r2, [r4, r3]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80035b4:	d1f8      	bne.n	80035a8 <LTC_Write+0x64>
		data_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // calculating the PEC for each Iss configuration register data
 80035b6:	4629      	mov	r1, r5
 80035b8:	f7ff ff5e 	bl	8003478 <pec15_calc>
		cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 80035bc:	1dbb      	adds	r3, r7, #6
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	0a02      	lsrs	r2, r0, #8
 80035c2:	54e2      	strb	r2, [r4, r3]
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 80035c4:	4423      	add	r3, r4
		cmd_index = cmd_index + 2;
 80035c6:	3708      	adds	r7, #8
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 80035c8:	7058      	strb	r0, [r3, #1]
		cmd_index = cmd_index + 2;
 80035ca:	b2ff      	uxtb	r7, r7
 80035cc:	3d06      	subs	r5, #6
 80035ce:	e7d6      	b.n	800357e <LTC_Write+0x3a>
	      HAL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);
 80035d0:	2104      	movs	r1, #4
 80035d2:	4808      	ldr	r0, [pc, #32]	; (80035f4 <LTC_Write+0xb0>)
 80035d4:	f7fd fc15 	bl	8000e02 <HAL_GPIO_TogglePin>
	cs_high();
 80035d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035dc:	2201      	movs	r2, #1
 80035de:	2110      	movs	r1, #16
 80035e0:	f7fd fc0a 	bl	8000df8 <HAL_GPIO_WritePin>
	free(cmd);
 80035e4:	4620      	mov	r0, r4
}
 80035e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free(cmd);
 80035ea:	f000 bcc3 	b.w	8003f74 <free>
 80035ee:	bf00      	nop
 80035f0:	2000028c 	.word	0x2000028c
 80035f4:	48000400 	.word	0x48000400

080035f8 <LTC_bleed>:
{
 80035f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t CRGA[] = {0xFC, 0x00, 0x00, 0x00, 0x00, 0x00};
 80035fa:	23fc      	movs	r3, #252	; 0xfc
 80035fc:	f88d 3000 	strb.w	r3, [sp]
 8003600:	2300      	movs	r3, #0
 8003602:	f88d 3001 	strb.w	r3, [sp, #1]
 8003606:	f88d 3002 	strb.w	r3, [sp, #2]
 800360a:	f88d 3003 	strb.w	r3, [sp, #3]
	uint8_t CRGB[] = {0x0F, 0x00, 0x00, 0x00, 0x00, 0x00};
 800360e:	f88d 300a 	strb.w	r3, [sp, #10]
 8003612:	f88d 300b 	strb.w	r3, [sp, #11]
 8003616:	f88d 300c 	strb.w	r3, [sp, #12]
 800361a:	f88d 300d 	strb.w	r3, [sp, #13]
	CRGA[5]= (CRGA[5] & 0xF0) | ((dcc >> 8) & 0x0F);
 800361e:	f3c0 2307 	ubfx	r3, r0, #8, #8
	CRGA[4]=(uint8_t)(dcc);
 8003622:	f88d 0004 	strb.w	r0, [sp, #4]
	CRGA[5]= (CRGA[5] & 0xF0) | ((dcc >> 8) & 0x0F);
 8003626:	f003 020f 	and.w	r2, r3, #15
	LTC_Write(WRCFGA, 1, (uint8_t *) CRGA);
 800362a:	2101      	movs	r1, #1
	CRGB[1]= (CRGB[1] & 0xFC) | ((dcc >> 16) & 0x03);
 800362c:	f3c0 4001 	ubfx	r0, r0, #16, #2
	CRGB[0]= (CRGB[0] & 0x0F) | ((dcc >> 8) & 0xF0);
 8003630:	f023 030f 	bic.w	r3, r3, #15
 8003634:	f043 030f 	orr.w	r3, r3, #15
	CRGA[5]= (CRGA[5] & 0xF0) | ((dcc >> 8) & 0x0F);
 8003638:	f88d 2005 	strb.w	r2, [sp, #5]
	CRGB[1]= (CRGB[1] & 0xFC) | ((dcc >> 16) & 0x03);
 800363c:	f88d 0009 	strb.w	r0, [sp, #9]
	LTC_Write(WRCFGA, 1, (uint8_t *) CRGA);
 8003640:	466a      	mov	r2, sp
 8003642:	4608      	mov	r0, r1
	CRGB[0]= (CRGB[0] & 0x0F) | ((dcc >> 8) & 0xF0);
 8003644:	f88d 3008 	strb.w	r3, [sp, #8]
	LTC_Write(WRCFGA, 1, (uint8_t *) CRGA);
 8003648:	f7ff ff7c 	bl	8003544 <LTC_Write>
	LTC_Write(WRCFGB, 1, (uint8_t *) CRGB);
 800364c:	aa02      	add	r2, sp, #8
 800364e:	2101      	movs	r1, #1
 8003650:	2024      	movs	r0, #36	; 0x24
 8003652:	f7ff ff77 	bl	8003544 <LTC_Write>
}
 8003656:	b005      	add	sp, #20
 8003658:	f85d fb04 	ldr.w	pc, [sp], #4

0800365c <LTC_Send_Recieve>:
{
 800365c:	b570      	push	{r4, r5, r6, lr}
 800365e:	b088      	sub	sp, #32
	uint16_t cmd_pec = pec15_calc(2, cmd);
 8003660:	ac05      	add	r4, sp, #20
	cmd[0] = (uint8_t)(cmd16 >> 8);
 8003662:	0a03      	lsrs	r3, r0, #8
	cmd[1] = (uint8_t)(cmd16);
 8003664:	f88d 0015 	strb.w	r0, [sp, #21]
{
 8003668:	460e      	mov	r6, r1
	uint16_t cmd_pec = pec15_calc(2, cmd);
 800366a:	2002      	movs	r0, #2
 800366c:	4621      	mov	r1, r4
{
 800366e:	4615      	mov	r5, r2
	cmd[0] = (uint8_t)(cmd16 >> 8);
 8003670:	f88d 3014 	strb.w	r3, [sp, #20]
	uint16_t cmd_pec = pec15_calc(2, cmd);
 8003674:	f7ff ff00 	bl	8003478 <pec15_calc>
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003678:	0a03      	lsrs	r3, r0, #8
 800367a:	f88d 3016 	strb.w	r3, [sp, #22]
	cmd[3] = (uint8_t)(cmd_pec);
 800367e:	f88d 0017 	strb.w	r0, [sp, #23]
	for(int i=4;i<12;i++)
 8003682:	2304      	movs	r3, #4
		cmd[i]=0x00;
 8003684:	2200      	movs	r2, #0
 8003686:	54e2      	strb	r2, [r4, r3]
	for(int i=4;i<12;i++)
 8003688:	3301      	adds	r3, #1
 800368a:	2b0c      	cmp	r3, #12
 800368c:	d1fb      	bne.n	8003686 <LTC_Send_Recieve+0x2a>
	HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 800368e:	2200      	movs	r2, #0
 8003690:	2110      	movs	r1, #16
 8003692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003696:	f7fd fbaf 	bl	8000df8 <HAL_GPIO_WritePin>
	switch(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)cmd, (uint8_t*)pRxData, rxBytes+6, 100))
 800369a:	2264      	movs	r2, #100	; 0x64
 800369c:	1dab      	adds	r3, r5, #6
 800369e:	9200      	str	r2, [sp, #0]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	aa02      	add	r2, sp, #8
 80036a4:	4621      	mov	r1, r4
 80036a6:	480f      	ldr	r0, [pc, #60]	; (80036e4 <LTC_Send_Recieve+0x88>)
 80036a8:	f7fe fe5b 	bl	8002362 <HAL_SPI_TransmitReceive>
 80036ac:	2801      	cmp	r0, #1
 80036ae:	d002      	beq.n	80036b6 <LTC_Send_Recieve+0x5a>
 80036b0:	d302      	bcc.n	80036b8 <LTC_Send_Recieve+0x5c>
 80036b2:	2803      	cmp	r0, #3
 80036b4:	d107      	bne.n	80036c6 <LTC_Send_Recieve+0x6a>
 80036b6:	e7fe      	b.n	80036b6 <LTC_Send_Recieve+0x5a>
	      HAL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);
 80036b8:	2104      	movs	r1, #4
 80036ba:	480b      	ldr	r0, [pc, #44]	; (80036e8 <LTC_Send_Recieve+0x8c>)
 80036bc:	f7fd fba1 	bl	8000e02 <HAL_GPIO_TogglePin>
	      for(int i=0; i<rxBytes; i++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	42ab      	cmp	r3, r5
 80036c4:	db07      	blt.n	80036d6 <LTC_Send_Recieve+0x7a>
	HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, HIGH);
 80036c6:	2201      	movs	r2, #1
 80036c8:	2110      	movs	r1, #16
 80036ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036ce:	f7fd fb93 	bl	8000df8 <HAL_GPIO_WritePin>
}
 80036d2:	b008      	add	sp, #32
 80036d4:	bd70      	pop	{r4, r5, r6, pc}
	    	  outputRxData[i]=pRxData[i+4];
 80036d6:	aa02      	add	r2, sp, #8
 80036d8:	441a      	add	r2, r3
 80036da:	7912      	ldrb	r2, [r2, #4]
 80036dc:	54f2      	strb	r2, [r6, r3]
	      for(int i=0; i<rxBytes; i++)
 80036de:	3301      	adds	r3, #1
 80036e0:	e7ef      	b.n	80036c2 <LTC_Send_Recieve+0x66>
 80036e2:	bf00      	nop
 80036e4:	2000028c 	.word	0x2000028c
 80036e8:	48000400 	.word	0x48000400
 80036ec:	00000000 	.word	0x00000000

080036f0 <main>:
  {
 80036f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f4:	ed2d 8b02 	vpush	{d8}
 80036f8:	b089      	sub	sp, #36	; 0x24
    HAL_Init();
 80036fa:	f7fd fa1f 	bl	8000b3c <HAL_Init>
  SystemClock_Config();
 80036fe:	f7ff fdb5 	bl	800326c <SystemClock_Config>
  MX_GPIO_Init();
 8003702:	f7ff fe41 	bl	8003388 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003706:	f7ff fe1b 	bl	8003340 <MX_SPI1_Init>
  HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, HIGH);
 800370a:	2201      	movs	r2, #1
 800370c:	2110      	movs	r1, #16
 800370e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003712:	f7fd fb71 	bl	8000df8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAN_STBY_GPIO_PORT, CAN_STBY_PIN, HIGH);
 8003716:	2201      	movs	r2, #1
 8003718:	2180      	movs	r1, #128	; 0x80
 800371a:	48d7      	ldr	r0, [pc, #860]	; (8003a78 <main+0x388>)
		  LTC_Send_Recieve(RDCVAcmds[c], (uint8_t *)aRxBuffer, rxBytes);
 800371c:	4cd7      	ldr	r4, [pc, #860]	; (8003a7c <main+0x38c>)
  HAL_GPIO_WritePin(CAN_STBY_GPIO_PORT, CAN_STBY_PIN, HIGH);
 800371e:	f7fd fb6b 	bl	8000df8 <HAL_GPIO_WritePin>
  LTC_wake(1);
 8003722:	2001      	movs	r0, #1
 8003724:	f7ff fd78 	bl	8003218 <LTC_wake>
  delay_u(300);
 8003728:	2003      	movs	r0, #3
 800372a:	f7fd fa21 	bl	8000b70 <HAL_Delay>
  LTC_wake(1);
 800372e:	2001      	movs	r0, #1
 8003730:	f7ff fd72 	bl	8003218 <LTC_wake>
  LTC_Write(WRCFGA, 1, (uint8_t *) CRGA);
 8003734:	2101      	movs	r1, #1
  uint8_t CRGA[] = {0xFC, 0x00, 0x00, 0x00, 0x00, 0x00};
 8003736:	23fc      	movs	r3, #252	; 0xfc
 8003738:	f88d 3010 	strb.w	r3, [sp, #16]
  LTC_Write(WRCFGA, 1, (uint8_t *) CRGA);
 800373c:	aa04      	add	r2, sp, #16
  uint8_t CRGA[] = {0xFC, 0x00, 0x00, 0x00, 0x00, 0x00};
 800373e:	2300      	movs	r3, #0
  LTC_Write(WRCFGA, 1, (uint8_t *) CRGA);
 8003740:	4608      	mov	r0, r1
  uint8_t CRGA[] = {0xFC, 0x00, 0x00, 0x00, 0x00, 0x00};
 8003742:	f88d 3011 	strb.w	r3, [sp, #17]
 8003746:	f88d 3012 	strb.w	r3, [sp, #18]
 800374a:	f88d 3013 	strb.w	r3, [sp, #19]
 800374e:	f88d 3014 	strb.w	r3, [sp, #20]
 8003752:	f88d 3015 	strb.w	r3, [sp, #21]
  LTC_Write(WRCFGA, 1, (uint8_t *) CRGA);
 8003756:	f7ff fef5 	bl	8003544 <LTC_Write>
  tickstart = HAL_GetTick();
 800375a:	f7fd fa03 	bl	8000b64 <HAL_GetTick>
 800375e:	4bc8      	ldr	r3, [pc, #800]	; (8003a80 <main+0x390>)
 8003760:	4626      	mov	r6, r4
 8003762:	6018      	str	r0, [r3, #0]
 8003764:	469b      	mov	fp, r3
	  while((HAL_GetTick() - tickstart) < main_period)
 8003766:	4dc7      	ldr	r5, [pc, #796]	; (8003a84 <main+0x394>)
 8003768:	f7fd f9fc 	bl	8000b64 <HAL_GetTick>
 800376c:	f8db 3000 	ldr.w	r3, [fp]
 8003770:	1ac0      	subs	r0, r0, r3
 8003772:	682b      	ldr	r3, [r5, #0]
 8003774:	4298      	cmp	r0, r3
 8003776:	d3f7      	bcc.n	8003768 <main+0x78>
	  tickstart = HAL_GetTick();
 8003778:	f7fd f9f4 	bl	8000b64 <HAL_GetTick>
 800377c:	f8cb 0000 	str.w	r0, [fp]
	  LTC_wake(1);
 8003780:	2001      	movs	r0, #1
 8003782:	f7ff fd49 	bl	8003218 <LTC_wake>
	  delay_u(300);
 8003786:	2003      	movs	r0, #3
 8003788:	f7fd f9f2 	bl	8000b70 <HAL_Delay>
	  LTC_wake(1);
 800378c:	2001      	movs	r0, #1
 800378e:	f7ff fd43 	bl	8003218 <LTC_wake>
	  LTC_Send(cmd, 1);
 8003792:	2101      	movs	r1, #1
 8003794:	f240 506a 	movw	r0, #1386	; 0x56a
 8003798:	f7ff fe86 	bl	80034a8 <LTC_Send>
      HAL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 800379c:	2108      	movs	r1, #8
 800379e:	48b6      	ldr	r0, [pc, #728]	; (8003a78 <main+0x388>)
 80037a0:	f7fd fb2f 	bl	8000e02 <HAL_GPIO_TogglePin>
	  LTC_bleed(0);
 80037a4:	2000      	movs	r0, #0
 80037a6:	f7ff ff27 	bl	80035f8 <LTC_bleed>
	  LTC_Send(cmd, 1);
 80037aa:	2101      	movs	r1, #1
 80037ac:	f240 5077 	movw	r0, #1399	; 0x577
 80037b0:	f7ff fe7a 	bl	80034a8 <LTC_Send>
	  uint8_t RDCVAcmds[6]={RDCVA,RDCVB,RDCVC,RDCVD,RDCVE,RDCVF}; //read all cell voltage register groups
 80037b4:	2304      	movs	r3, #4
 80037b6:	f88d 3018 	strb.w	r3, [sp, #24]
 80037ba:	2308      	movs	r3, #8
 80037bc:	f88d 301a 	strb.w	r3, [sp, #26]
 80037c0:	230a      	movs	r3, #10
 80037c2:	f88d 301b 	strb.w	r3, [sp, #27]
 80037c6:	2309      	movs	r3, #9
 80037c8:	2706      	movs	r7, #6
 80037ca:	f88d 301c 	strb.w	r3, [sp, #28]
 80037ce:	230b      	movs	r3, #11
 80037d0:	f88d 7019 	strb.w	r7, [sp, #25]
 80037d4:	f88d 301d 	strb.w	r3, [sp, #29]
	  for(int c=0;c<6;c++)
 80037d8:	2500      	movs	r5, #0
		  LTC_Send_Recieve(RDCVAcmds[c], (uint8_t *)aRxBuffer, rxBytes);
 80037da:	ab06      	add	r3, sp, #24
 80037dc:	2206      	movs	r2, #6
 80037de:	5d58      	ldrb	r0, [r3, r5]
 80037e0:	4631      	mov	r1, r6
 80037e2:	f7ff ff3b 	bl	800365c <LTC_Send_Recieve>
			  voltages[i+c*3] = (aRxBuffer[(i<<1)+1] << 8) | aRxBuffer[(i<<1)];
 80037e6:	4aa8      	ldr	r2, [pc, #672]	; (8003a88 <main+0x398>)
 80037e8:	fb07 f005 	mul.w	r0, r7, r5
		  LTC_Send_Recieve(RDCVAcmds[c], (uint8_t *)aRxBuffer, rxBytes);
 80037ec:	2300      	movs	r3, #0
			  voltages[i+c*3] = (aRxBuffer[(i<<1)+1] << 8) | aRxBuffer[(i<<1)];
 80037ee:	1919      	adds	r1, r3, r4
 80037f0:	eb03 0e02 	add.w	lr, r3, r2
 80037f4:	f891 c001 	ldrb.w	ip, [r1, #1]
 80037f8:	5d19      	ldrb	r1, [r3, r4]
 80037fa:	3302      	adds	r3, #2
 80037fc:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
		  for(int i=0;i<3;i++)
 8003800:	2b06      	cmp	r3, #6
			  voltages[i+c*3] = (aRxBuffer[(i<<1)+1] << 8) | aRxBuffer[(i<<1)];
 8003802:	f82e 1000 	strh.w	r1, [lr, r0]
		  for(int i=0;i<3;i++)
 8003806:	d1f2      	bne.n	80037ee <main+0xfe>
	  for(int c=0;c<6;c++)
 8003808:	3501      	adds	r5, #1
 800380a:	2d06      	cmp	r5, #6
 800380c:	d1e5      	bne.n	80037da <main+0xea>
	  maxBrickV=(float)(voltages[0])*ADC_RESOLUTION;
 800380e:	8810      	ldrh	r0, [r2, #0]
	  minBrickV=(float)(voltages[0])*ADC_RESOLUTION;
 8003810:	4d9e      	ldr	r5, [pc, #632]	; (8003a8c <main+0x39c>)
 8003812:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8003abc <main+0x3cc>
	  maxBrickV=(float)(voltages[0])*ADC_RESOLUTION;
 8003816:	ee07 0a90 	vmov	s15, r0
 800381a:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  minBrickV=(float)(voltages[0])*ADC_RESOLUTION;
 800381e:	2700      	movs	r7, #0
	  maxBrickV=(float)(voltages[0])*ADC_RESOLUTION;
 8003820:	ee17 0a90 	vmov	r0, s15
 8003824:	f7fc fe38 	bl	8000498 <__aeabi_f2d>
 8003828:	a389      	add	r3, pc, #548	; (adr r3, 8003a50 <main+0x360>)
 800382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382e:	f7fc fe87 	bl	8000540 <__aeabi_dmul>
 8003832:	f7fd f91f 	bl	8000a74 <__aeabi_d2f>
 8003836:	4b96      	ldr	r3, [pc, #600]	; (8003a90 <main+0x3a0>)
	  minBrickV=(float)(voltages[0])*ADC_RESOLUTION;
 8003838:	6028      	str	r0, [r5, #0]
	  maxBrickV=(float)(voltages[0])*ADC_RESOLUTION;
 800383a:	ee08 0a10 	vmov	s16, r0
	  minBrickV=(float)(voltages[0])*ADC_RESOLUTION;
 800383e:	ee08 0a90 	vmov	s17, r0
	  maxBrickV=(float)(voltages[0])*ADC_RESOLUTION;
 8003842:	6018      	str	r0, [r3, #0]
	  minBrickV=(float)(voltages[0])*ADC_RESOLUTION;
 8003844:	46ca      	mov	sl, r9
 8003846:	9701      	str	r7, [sp, #4]
	  for(int i=0; i<SIZE_OF_ARRAY(cells); i++)
 8003848:	46b8      	mov	r8, r7
		  voltagesFloat[i]=(float)(voltages[cells[i]])*0.0001;
 800384a:	4b92      	ldr	r3, [pc, #584]	; (8003a94 <main+0x3a4>)
 800384c:	4a8e      	ldr	r2, [pc, #568]	; (8003a88 <main+0x398>)
 800384e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8003852:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8003856:	ee07 0a90 	vmov	s15, r0
 800385a:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  for(int i=0; i<SIZE_OF_ARRAY(cells); i++)
 800385e:	f108 0801 	add.w	r8, r8, #1
		  voltagesFloat[i]=(float)(voltages[cells[i]])*0.0001;
 8003862:	ee17 0a90 	vmov	r0, s15
 8003866:	f7fc fe17 	bl	8000498 <__aeabi_f2d>
 800386a:	a379      	add	r3, pc, #484	; (adr r3, 8003a50 <main+0x360>)
 800386c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003870:	f7fc fe66 	bl	8000540 <__aeabi_dmul>
 8003874:	f7fd f8fe 	bl	8000a74 <__aeabi_d2f>
 8003878:	ee07 0a90 	vmov	s15, r0
		  if(voltagesFloat[i] > maxBrickV)
 800387c:	eef4 7ac8 	vcmpe.f32	s15, s16
 8003880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003884:	bfc8      	it	gt
 8003886:	2301      	movgt	r3, #1
		  if(voltagesFloat[i] < minBrickV)
 8003888:	eef4 7ae8 	vcmpe.f32	s15, s17
		  			  maxBrickV=voltagesFloat[i];
 800388c:	bfc4      	itt	gt
 800388e:	eeb0 8a67 	vmovgt.f32	s16, s15
		  if(voltagesFloat[i] > maxBrickV)
 8003892:	9301      	strgt	r3, [sp, #4]
		  if(voltagesFloat[i] < minBrickV)
 8003894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		  			  minBrickV=voltagesFloat[i];
 8003898:	bf44      	itt	mi
 800389a:	eef0 8a67 	vmovmi.f32	s17, s15
		  if(voltagesFloat[i] < minBrickV)
 800389e:	2701      	movmi	r7, #1
	  for(int i=0; i<SIZE_OF_ARRAY(cells); i++)
 80038a0:	f1b8 0f0f 	cmp.w	r8, #15
		  voltagesFloat[i]=(float)(voltages[cells[i]])*0.0001;
 80038a4:	f84a 0b04 	str.w	r0, [sl], #4
	  for(int i=0; i<SIZE_OF_ARRAY(cells); i++)
 80038a8:	d1cf      	bne.n	800384a <main+0x15a>
 80038aa:	b10f      	cbz	r7, 80038b0 <main+0x1c0>
 80038ac:	edc5 8a00 	vstr	s17, [r5]
 80038b0:	9b01      	ldr	r3, [sp, #4]
 80038b2:	b113      	cbz	r3, 80038ba <main+0x1ca>
 80038b4:	4b76      	ldr	r3, [pc, #472]	; (8003a90 <main+0x3a0>)
 80038b6:	ed83 8a00 	vstr	s16, [r3]
 80038ba:	4f77      	ldr	r7, [pc, #476]	; (8003a98 <main+0x3a8>)
		  if(voltagesFloat[i] > (minBrickV + hyst))
 80038bc:	ed95 7a00 	vldr	s14, [r5]
 80038c0:	683b      	ldr	r3, [r7, #0]
		  float hyst=0.005;
 80038c2:	eddf 6a76 	vldr	s13, [pc, #472]	; 8003a9c <main+0x3ac>
 80038c6:	ed9f 6a76 	vldr	s12, [pc, #472]	; 8003aa0 <main+0x3b0>
		  if(voltagesFloat[i] > (minBrickV + hyst))
 80038ca:	2100      	movs	r1, #0
		  uint32_t cellBit = (1 << cells[i]);
 80038cc:	4a71      	ldr	r2, [pc, #452]	; (8003a94 <main+0x3a4>)
		  if(voltagesFloat[i] > (minBrickV + hyst))
 80038ce:	ecf9 5a01 	vldmia	r9!, {s11}
		  uint32_t cellBit = (1 << cells[i]);
 80038d2:	5c52      	ldrb	r2, [r2, r1]
 80038d4:	2001      	movs	r0, #1
 80038d6:	fa00 f202 	lsl.w	r2, r0, r2
		  float hyst=0.005;
 80038da:	421a      	tst	r2, r3
 80038dc:	bf0c      	ite	eq
 80038de:	eef0 7a46 	vmoveq.f32	s15, s12
 80038e2:	eef0 7a66 	vmovne.f32	s15, s13
		  if(voltagesFloat[i] > (minBrickV + hyst))
 80038e6:	ee77 7a87 	vadd.f32	s15, s15, s14
	  for(int i=0; i<SIZE_OF_ARRAY(cells); i++)
 80038ea:	3101      	adds	r1, #1
		  if(voltagesFloat[i] > (minBrickV + hyst))
 80038ec:	eef4 5ae7 	vcmpe.f32	s11, s15
 80038f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			  dcc |= cellBit;
 80038f4:	bfcc      	ite	gt
 80038f6:	4313      	orrgt	r3, r2
			  dcc &= ~cellBit;
 80038f8:	4393      	bicle	r3, r2
	  for(int i=0; i<SIZE_OF_ARRAY(cells); i++)
 80038fa:	290f      	cmp	r1, #15
 80038fc:	d1e6      	bne.n	80038cc <main+0x1dc>
	  LTC_Send_Recieve(RDSTATA, (uint8_t *)aRxBuffer, rxBytes);
 80038fe:	2206      	movs	r2, #6
 8003900:	4621      	mov	r1, r4
 8003902:	2010      	movs	r0, #16
 8003904:	603b      	str	r3, [r7, #0]
 8003906:	f7ff fea9 	bl	800365c <LTC_Send_Recieve>
	  dieTemp = (float)((aRxBuffer[3] << 8) | aRxBuffer[2]) * 0.0131579 - 276.0;
 800390a:	8870      	ldrh	r0, [r6, #2]
 800390c:	ee07 0a90 	vmov	s15, r0
 8003910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  if((minBrickV > BLEED_THRESHOLD) & (dieTemp < OVT))
 8003914:	f04f 0801 	mov.w	r8, #1
	  dieTemp = (float)((aRxBuffer[3] << 8) | aRxBuffer[2]) * 0.0131579 - 276.0;
 8003918:	ee17 0a90 	vmov	r0, s15
 800391c:	f7fc fdbc 	bl	8000498 <__aeabi_f2d>
 8003920:	a34d      	add	r3, pc, #308	; (adr r3, 8003a58 <main+0x368>)
 8003922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003926:	f7fc fe0b 	bl	8000540 <__aeabi_dmul>
 800392a:	2200      	movs	r2, #0
 800392c:	4b5d      	ldr	r3, [pc, #372]	; (8003aa4 <main+0x3b4>)
 800392e:	f7fc fc53 	bl	80001d8 <__aeabi_dsub>
 8003932:	f7fd f89f 	bl	8000a74 <__aeabi_d2f>
 8003936:	4b5c      	ldr	r3, [pc, #368]	; (8003aa8 <main+0x3b8>)
 8003938:	ee08 0a10 	vmov	s16, r0
 800393c:	6018      	str	r0, [r3, #0]
	  if((minBrickV > BLEED_THRESHOLD) & (dieTemp < OVT))
 800393e:	6828      	ldr	r0, [r5, #0]
 8003940:	f7fc fdaa 	bl	8000498 <__aeabi_f2d>
 8003944:	a346      	add	r3, pc, #280	; (adr r3, 8003a60 <main+0x370>)
 8003946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394a:	f7fd f889 	bl	8000a60 <__aeabi_dcmpgt>
 800394e:	b900      	cbnz	r0, 8003952 <main+0x262>
 8003950:	4680      	mov	r8, r0
 8003952:	f018 0fff 	tst.w	r8, #255	; 0xff
 8003956:	f000 80cb 	beq.w	8003af0 <main+0x400>
 800395a:	eddf 7a54 	vldr	s15, [pc, #336]	; 8003aac <main+0x3bc>
 800395e:	eeb4 8a67 	vcmp.f32	s16, s15
 8003962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003966:	f140 80c3 	bpl.w	8003af0 <main+0x400>
		  LTC_bleed(dcc);
 800396a:	6838      	ldr	r0, [r7, #0]
 800396c:	f7ff fe44 	bl	80035f8 <LTC_bleed>
	  LTC_Send(cmd, 1);
 8003970:	2101      	movs	r1, #1
 8003972:	f44f 60ac 	mov.w	r0, #1376	; 0x560
 8003976:	f7ff fd97 	bl	80034a8 <LTC_Send>
	  uint8_t RDAUXcmds[4]={RDAUXA,RDAUXB,RDAUXC,RDAUXD}; //read all cell voltage register groups
 800397a:	230c      	movs	r3, #12
 800397c:	f88d 300c 	strb.w	r3, [sp, #12]
 8003980:	230e      	movs	r3, #14
 8003982:	f88d 300d 	strb.w	r3, [sp, #13]
			  auxVoltages[i+c*3] = (aRxBuffer[(i<<1)+1] << 8) | aRxBuffer[(i<<1)];
 8003986:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8003ac0 <main+0x3d0>
	  uint8_t RDAUXcmds[4]={RDAUXA,RDAUXB,RDAUXC,RDAUXD}; //read all cell voltage register groups
 800398a:	230d      	movs	r3, #13
 800398c:	f88d 300e 	strb.w	r3, [sp, #14]
 8003990:	230f      	movs	r3, #15
 8003992:	f88d 300f 	strb.w	r3, [sp, #15]
	  for(int c=0;c<4;c++)
 8003996:	2700      	movs	r7, #0
		  LTC_Send_Recieve(RDAUXcmds[c], (uint8_t *)aRxBuffer, rxBytes);
 8003998:	f04f 0906 	mov.w	r9, #6
 800399c:	46c2      	mov	sl, r8
 800399e:	ab03      	add	r3, sp, #12
 80039a0:	4621      	mov	r1, r4
 80039a2:	5dd8      	ldrb	r0, [r3, r7]
 80039a4:	2206      	movs	r2, #6
 80039a6:	f7ff fe59 	bl	800365c <LTC_Send_Recieve>
 80039aa:	fb09 f107 	mul.w	r1, r9, r7
 80039ae:	2300      	movs	r3, #0
			  auxVoltages[i+c*3] = (aRxBuffer[(i<<1)+1] << 8) | aRxBuffer[(i<<1)];
 80039b0:	18f2      	adds	r2, r6, r3
 80039b2:	eb03 0008 	add.w	r0, r3, r8
 80039b6:	f892 e001 	ldrb.w	lr, [r2, #1]
 80039ba:	5cf2      	ldrb	r2, [r6, r3]
 80039bc:	3302      	adds	r3, #2
 80039be:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
		  for(int i=0;i<3;i++)
 80039c2:	2b06      	cmp	r3, #6
			  auxVoltages[i+c*3] = (aRxBuffer[(i<<1)+1] << 8) | aRxBuffer[(i<<1)];
 80039c4:	5242      	strh	r2, [r0, r1]
		  for(int i=0;i<3;i++)
 80039c6:	d1f3      	bne.n	80039b0 <main+0x2c0>
	  for(int c=0;c<4;c++)
 80039c8:	3701      	adds	r7, #1
 80039ca:	2f04      	cmp	r7, #4
 80039cc:	d1e7      	bne.n	800399e <main+0x2ae>
 80039ce:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8003ac4 <main+0x3d4>
 80039d2:	2700      	movs	r7, #0
 80039d4:	46c1      	mov	r9, r8
		  auxVoltagesFloat[i]=(float)(auxVoltages[i])*ADC_RESOLUTION;
 80039d6:	f83a 0017 	ldrh.w	r0, [sl, r7, lsl #1]
 80039da:	ee07 0a90 	vmov	s15, r0
 80039de:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  for(int i=0; i<12; i++)
 80039e2:	3701      	adds	r7, #1
		  auxVoltagesFloat[i]=(float)(auxVoltages[i])*ADC_RESOLUTION;
 80039e4:	ee17 0a90 	vmov	r0, s15
 80039e8:	f7fc fd56 	bl	8000498 <__aeabi_f2d>
 80039ec:	a318      	add	r3, pc, #96	; (adr r3, 8003a50 <main+0x360>)
 80039ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f2:	f7fc fda5 	bl	8000540 <__aeabi_dmul>
 80039f6:	f7fd f83d 	bl	8000a74 <__aeabi_d2f>
	  for(int i=0; i<12; i++)
 80039fa:	2f0c      	cmp	r7, #12
		  auxVoltagesFloat[i]=(float)(auxVoltages[i])*ADC_RESOLUTION;
 80039fc:	f848 0b04 	str.w	r0, [r8], #4
	  for(int i=0; i<12; i++)
 8003a00:	d1e9      	bne.n	80039d6 <main+0x2e6>
	  current=(auxVoltagesFloat[0] - auxVoltagesFloat[1] - AMP_OFFSET_ERROR) * AMPS_PER_VOLT;
 8003a02:	ed99 7a00 	vldr	s14, [r9]
 8003a06:	edd9 7a01 	vldr	s15, [r9, #4]
 8003a0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a0e:	ee17 0a90 	vmov	r0, s15
 8003a12:	f7fc fd41 	bl	8000498 <__aeabi_f2d>
 8003a16:	a314      	add	r3, pc, #80	; (adr r3, 8003a68 <main+0x378>)
 8003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1c:	f7fc fbde 	bl	80001dc <__adddf3>
 8003a20:	a313      	add	r3, pc, #76	; (adr r3, 8003a70 <main+0x380>)
 8003a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a26:	f7fc fd8b 	bl	8000540 <__aeabi_dmul>
 8003a2a:	f7fd f823 	bl	8000a74 <__aeabi_d2f>
	  if(minBrickV > MIN_V)
 8003a2e:	ed95 7a00 	vldr	s14, [r5]
	  current=(auxVoltagesFloat[0] - auxVoltagesFloat[1] - AMP_OFFSET_ERROR) * AMPS_PER_VOLT;
 8003a32:	4b1f      	ldr	r3, [pc, #124]	; (8003ab0 <main+0x3c0>)
 8003a34:	4a1f      	ldr	r2, [pc, #124]	; (8003ab4 <main+0x3c4>)
 8003a36:	6018      	str	r0, [r3, #0]
	  if(minBrickV > MIN_V)
 8003a38:	eef0 7a04 	vmov.f32	s15, #4	; 0x40200000  2.5
 8003a3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a44:	4d1c      	ldr	r5, [pc, #112]	; (8003ab8 <main+0x3c8>)
 8003a46:	dd56      	ble.n	8003af6 <main+0x406>
		  minVctr=3;
 8003a48:	2303      	movs	r3, #3
			  minVctr--;
 8003a4a:	7013      	strb	r3, [r2, #0]
 8003a4c:	e03c      	b.n	8003ac8 <main+0x3d8>
 8003a4e:	bf00      	nop
 8003a50:	eb1c432d 	.word	0xeb1c432d
 8003a54:	3f1a36e2 	.word	0x3f1a36e2
 8003a58:	7178e920 	.word	0x7178e920
 8003a5c:	3f8af287 	.word	0x3f8af287
 8003a60:	66666666 	.word	0x66666666
 8003a64:	400a6666 	.word	0x400a6666
 8003a68:	01a36e2f 	.word	0x01a36e2f
 8003a6c:	3f5205bc 	.word	0x3f5205bc
 8003a70:	0cf6474a 	.word	0x0cf6474a
 8003a74:	403fa544 	.word	0x403fa544
 8003a78:	48000400 	.word	0x48000400
 8003a7c:	2000027c 	.word	0x2000027c
 8003a80:	200000b8 	.word	0x200000b8
 8003a84:	20000010 	.word	0x20000010
 8003a88:	200000cc 	.word	0x200000cc
 8003a8c:	2000001c 	.word	0x2000001c
 8003a90:	20000014 	.word	0x20000014
 8003a94:	20000000 	.word	0x20000000
 8003a98:	200000b0 	.word	0x200000b0
 8003a9c:	3b03126f 	.word	0x3b03126f
 8003aa0:	3ba3d70a 	.word	0x3ba3d70a
 8003aa4:	40714000 	.word	0x40714000
 8003aa8:	200000b4 	.word	0x200000b4
 8003aac:	42820000 	.word	0x42820000
 8003ab0:	200000ac 	.word	0x200000ac
 8003ab4:	20000020 	.word	0x20000020
 8003ab8:	20000021 	.word	0x20000021
 8003abc:	20000228 	.word	0x20000228
 8003ac0:	20000264 	.word	0x20000264
 8003ac4:	200002f0 	.word	0x200002f0
	  if(maxBrickV < MAX_V)
 8003ac8:	4b2f      	ldr	r3, [pc, #188]	; (8003b88 <main+0x498>)
 8003aca:	6818      	ldr	r0, [r3, #0]
 8003acc:	f7fc fce4 	bl	8000498 <__aeabi_f2d>
 8003ad0:	a32b      	add	r3, pc, #172	; (adr r3, 8003b80 <main+0x490>)
 8003ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad6:	f7fc ffa5 	bl	8000a24 <__aeabi_dcmplt>
 8003ada:	4a2c      	ldr	r2, [pc, #176]	; (8003b8c <main+0x49c>)
 8003adc:	b188      	cbz	r0, 8003b02 <main+0x412>
		  maxVctr=3;
 8003ade:	2303      	movs	r3, #3
			  maxVctr--;
 8003ae0:	7013      	strb	r3, [r2, #0]
	  switch(state){
 8003ae2:	782b      	ldrb	r3, [r5, #0]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d848      	bhi.n	8003b7a <main+0x48a>
 8003ae8:	e8df f003 	tbb	[pc, r3]
 8003aec:	3e342311 	.word	0x3e342311
		  dcc=0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	e73c      	b.n	8003970 <main+0x280>
		  if(minVctr)
 8003af6:	7813      	ldrb	r3, [r2, #0]
 8003af8:	b10b      	cbz	r3, 8003afe <main+0x40e>
			  minVctr--;
 8003afa:	3b01      	subs	r3, #1
 8003afc:	e7a5      	b.n	8003a4a <main+0x35a>
			  state = 0;
 8003afe:	702b      	strb	r3, [r5, #0]
 8003b00:	e7e2      	b.n	8003ac8 <main+0x3d8>
		  if(maxVctr)
 8003b02:	7813      	ldrb	r3, [r2, #0]
 8003b04:	b10b      	cbz	r3, 8003b0a <main+0x41a>
			  maxVctr--;
 8003b06:	3b01      	subs	r3, #1
 8003b08:	e7ea      	b.n	8003ae0 <main+0x3f0>
			  state = 0;
 8003b0a:	702b      	strb	r3, [r5, #0]
 8003b0c:	e7e9      	b.n	8003ae2 <main+0x3f2>
		  busContactor_off();
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b18:	f7fd f96e 	bl	8000df8 <HAL_GPIO_WritePin>
		  chargeSSR_off();
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	2120      	movs	r1, #32
 8003b20:	481b      	ldr	r0, [pc, #108]	; (8003b90 <main+0x4a0>)
 8003b22:	f7fd f969 	bl	8000df8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3_PIN, 0);
 8003b26:	2200      	movs	r2, #0
 8003b28:	2110      	movs	r1, #16
 8003b2a:	4819      	ldr	r0, [pc, #100]	; (8003b90 <main+0x4a0>)
 8003b2c:	f7fd f964 	bl	8000df8 <HAL_GPIO_WritePin>
		  break;
 8003b30:	e619      	b.n	8003766 <main+0x76>
		  if(clear_btn()==0) //ride mode
 8003b32:	2102      	movs	r1, #2
 8003b34:	4816      	ldr	r0, [pc, #88]	; (8003b90 <main+0x4a0>)
 8003b36:	f7fd f959 	bl	8000dec <HAL_GPIO_ReadPin>
 8003b3a:	b910      	cbnz	r0, 8003b42 <main+0x452>
			  state=2;
 8003b3c:	2302      	movs	r3, #2
		  state=0;
 8003b3e:	702b      	strb	r3, [r5, #0]
  {
 8003b40:	e611      	b.n	8003766 <main+0x76>
		  else if(test_btn()==0) //charge mode?
 8003b42:	2101      	movs	r1, #1
 8003b44:	4812      	ldr	r0, [pc, #72]	; (8003b90 <main+0x4a0>)
 8003b46:	f7fd f951 	bl	8000dec <HAL_GPIO_ReadPin>
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	f47f ae0b 	bne.w	8003766 <main+0x76>
			  state=3;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e7f4      	b.n	8003b3e <main+0x44e>
		  busContactor_on();
 8003b54:	2201      	movs	r2, #1
 8003b56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		  HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3_PIN, 1);
 8003b5e:	f7fd f94b 	bl	8000df8 <HAL_GPIO_WritePin>
		  state=1;
 8003b62:	f04f 0301 	mov.w	r3, #1
 8003b66:	e7ea      	b.n	8003b3e <main+0x44e>
		  chargeSSR_on();
 8003b68:	2201      	movs	r2, #1
 8003b6a:	2120      	movs	r1, #32
 8003b6c:	4808      	ldr	r0, [pc, #32]	; (8003b90 <main+0x4a0>)
 8003b6e:	f7fd f943 	bl	8000df8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3_PIN, 1);
 8003b72:	2201      	movs	r2, #1
 8003b74:	2110      	movs	r1, #16
 8003b76:	4806      	ldr	r0, [pc, #24]	; (8003b90 <main+0x4a0>)
 8003b78:	e7f1      	b.n	8003b5e <main+0x46e>
		  state=0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e7df      	b.n	8003b3e <main+0x44e>
 8003b7e:	bf00      	nop
 8003b80:	a3d70a3d 	.word	0xa3d70a3d
 8003b84:	400d3d70 	.word	0x400d3d70
 8003b88:	20000014 	.word	0x20000014
 8003b8c:	20000018 	.word	0x20000018
 8003b90:	48000400 	.word	0x48000400

08003b94 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b94:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <HAL_MspInit+0x88>)
{
 8003b96:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	661a      	str	r2, [r3, #96]	; 0x60
 8003ba0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ba2:	f002 0201 	and.w	r2, r2, #1
 8003ba6:	9200      	str	r2, [sp, #0]
 8003ba8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003baa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003bac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003bb0:	659a      	str	r2, [r3, #88]	; 0x58
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bba:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bbc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bbe:	f7fc ffe5 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	4611      	mov	r1, r2
 8003bc6:	f06f 000b 	mvn.w	r0, #11
 8003bca:	f7fc fff1 	bl	8000bb0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003bce:	2200      	movs	r2, #0
 8003bd0:	4611      	mov	r1, r2
 8003bd2:	f06f 000a 	mvn.w	r0, #10
 8003bd6:	f7fc ffeb 	bl	8000bb0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003bda:	2200      	movs	r2, #0
 8003bdc:	4611      	mov	r1, r2
 8003bde:	f06f 0009 	mvn.w	r0, #9
 8003be2:	f7fc ffe5 	bl	8000bb0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003be6:	2200      	movs	r2, #0
 8003be8:	4611      	mov	r1, r2
 8003bea:	f06f 0004 	mvn.w	r0, #4
 8003bee:	f7fc ffdf 	bl	8000bb0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	f06f 0003 	mvn.w	r0, #3
 8003bfa:	f7fc ffd9 	bl	8000bb0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003bfe:	2200      	movs	r2, #0
 8003c00:	4611      	mov	r1, r2
 8003c02:	f06f 0001 	mvn.w	r0, #1
 8003c06:	f7fc ffd3 	bl	8000bb0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c12:	f7fc ffcd 	bl	8000bb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c16:	b003      	add	sp, #12
 8003c18:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c1c:	40021000 	.word	0x40021000

08003c20 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c20:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8003c22:	6803      	ldr	r3, [r0, #0]
 8003c24:	4a1d      	ldr	r2, [pc, #116]	; (8003c9c <HAL_SPI_MspInit+0x7c>)
 8003c26:	4293      	cmp	r3, r2
{
 8003c28:	b089      	sub	sp, #36	; 0x24
  if(hspi->Instance==SPI1)
 8003c2a:	d11b      	bne.n	8003c64 <HAL_SPI_MspInit+0x44>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c2c:	4b1c      	ldr	r3, [pc, #112]	; (8003ca0 <HAL_SPI_MspInit+0x80>)
 8003c2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c34:	661a      	str	r2, [r3, #96]	; 0x60
 8003c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c3c:	9301      	str	r3, [sp, #4]
 8003c3e:	9b01      	ldr	r3, [sp, #4]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003c40:	23e0      	movs	r3, #224	; 0xe0
 8003c42:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c44:	2302      	movs	r3, #2
 8003c46:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c50:	2305      	movs	r3, #5
 8003c52:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c54:	a903      	add	r1, sp, #12
 8003c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c5a:	f7fd f805 	bl	8000c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003c5e:	b009      	add	sp, #36	; 0x24
 8003c60:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(hspi->Instance==SPI2)
 8003c64:	4a0f      	ldr	r2, [pc, #60]	; (8003ca4 <HAL_SPI_MspInit+0x84>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d1f9      	bne.n	8003c5e <HAL_SPI_MspInit+0x3e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ca0 <HAL_SPI_MspInit+0x80>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c6c:	480e      	ldr	r0, [pc, #56]	; (8003ca8 <HAL_SPI_MspInit+0x88>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c74:	659a      	str	r2, [r3, #88]	; 0x58
 8003c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c7c:	9302      	str	r3, [sp, #8]
 8003c7e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003c80:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003c84:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c86:	2302      	movs	r3, #2
 8003c88:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c92:	2305      	movs	r3, #5
 8003c94:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c96:	a903      	add	r1, sp, #12
 8003c98:	e7df      	b.n	8003c5a <HAL_SPI_MspInit+0x3a>
 8003c9a:	bf00      	nop
 8003c9c:	40013000 	.word	0x40013000
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40003800 	.word	0x40003800
 8003ca8:	48000400 	.word	0x48000400

08003cac <NMI_Handler>:
 8003cac:	4770      	bx	lr

08003cae <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003cae:	e7fe      	b.n	8003cae <HardFault_Handler>

08003cb0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003cb0:	e7fe      	b.n	8003cb0 <MemManage_Handler>

08003cb2 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003cb2:	e7fe      	b.n	8003cb2 <BusFault_Handler>

08003cb4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003cb4:	e7fe      	b.n	8003cb4 <UsageFault_Handler>

08003cb6 <SVC_Handler>:
 8003cb6:	4770      	bx	lr

08003cb8 <DebugMon_Handler>:
 8003cb8:	4770      	bx	lr

08003cba <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003cba:	4770      	bx	lr

08003cbc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003cbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cbe:	f7fc ff49 	bl	8000b54 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003cc6:	f7fc bfca 	b.w	8000c5e <HAL_SYSTICK_IRQHandler>
	...

08003ccc <USB_IRQHandler>:
void USB_IRQHandler(void)
{
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003ccc:	4801      	ldr	r0, [pc, #4]	; (8003cd4 <USB_IRQHandler+0x8>)
 8003cce:	f7fd b915 	b.w	8000efc <HAL_PCD_IRQHandler>
 8003cd2:	bf00      	nop
 8003cd4:	20000358 	.word	0x20000358

08003cd8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cd8:	490f      	ldr	r1, [pc, #60]	; (8003d18 <SystemInit+0x40>)
 8003cda:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003cde:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <SystemInit+0x44>)
 8003ce8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003cea:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8003cec:	f042 0201 	orr.w	r2, r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8003cf2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003cfa:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003cfe:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003d00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d04:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d0c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003d0e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d14:	608b      	str	r3, [r1, #8]
 8003d16:	4770      	bx	lr
 8003d18:	e000ed00 	.word	0xe000ed00
 8003d1c:	40021000 	.word	0x40021000

08003d20 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003d20:	f500 6186 	add.w	r1, r0, #1072	; 0x430
 8003d24:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003d28:	f7fe bf4e 	b.w	8002bc8 <USBD_LL_SetupStage>

08003d2c <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003d2c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003d30:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003d34:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8003d38:	f7fe bf73 	b.w	8002c22 <USBD_LL_DataOutStage>

08003d3c <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003d3c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003d40:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003d44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d46:	f7fe bfa4 	b.w	8002c92 <USBD_LL_DataInStage>

08003d4a <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003d4a:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003d4e:	f7ff b835 	b.w	8002dbc <USBD_LL_SOF>

08003d52 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8003d52:	b510      	push	{r4, lr}
 8003d54:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003d56:	2101      	movs	r1, #1
 8003d58:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003d5c:	f7ff f81c 	bl	8002d98 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003d60:	f8d4 0470 	ldr.w	r0, [r4, #1136]	; 0x470
}
 8003d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003d68:	f7fe bfef 	b.w	8002d4a <USBD_LL_Reset>

08003d6c <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003d70:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003d74:	f7ff f813 	bl	8002d9e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003d78:	69a3      	ldr	r3, [r4, #24]
 8003d7a:	b123      	cbz	r3, 8003d86 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003d7c:	4a02      	ldr	r2, [pc, #8]	; (8003d88 <HAL_PCD_SuspendCallback+0x1c>)
 8003d7e:	6913      	ldr	r3, [r2, #16]
 8003d80:	f043 0306 	orr.w	r3, r3, #6
 8003d84:	6113      	str	r3, [r2, #16]
 8003d86:	bd10      	pop	{r4, pc}
 8003d88:	e000ed00 	.word	0xe000ed00

08003d8c <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8003d8c:	6983      	ldr	r3, [r0, #24]
{
 8003d8e:	b510      	push	{r4, lr}
 8003d90:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8003d92:	b133      	cbz	r3, 8003da2 <HAL_PCD_ResumeCallback+0x16>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003d94:	4a06      	ldr	r2, [pc, #24]	; (8003db0 <HAL_PCD_ResumeCallback+0x24>)
 8003d96:	6913      	ldr	r3, [r2, #16]
 8003d98:	f023 0306 	bic.w	r3, r3, #6
 8003d9c:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8003d9e:	f7ff fa65 	bl	800326c <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003da2:	f8d4 0470 	ldr.w	r0, [r4, #1136]	; 0x470
}
 8003da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003daa:	f7ff b801 	b.w	8002db0 <USBD_LL_Resume>
 8003dae:	bf00      	nop
 8003db0:	e000ed00 	.word	0xe000ed00

08003db4 <USBD_LL_OpenEP>:
{
 8003db4:	b510      	push	{r4, lr}
 8003db6:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003db8:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	4622      	mov	r2, r4
 8003dc0:	f7fd f837 	bl	8000e32 <HAL_PCD_EP_Open>
 8003dc4:	2803      	cmp	r0, #3
 8003dc6:	bf9a      	itte	ls
 8003dc8:	4b01      	ldrls	r3, [pc, #4]	; (8003dd0 <USBD_LL_OpenEP+0x1c>)
 8003dca:	5c18      	ldrbls	r0, [r3, r0]
 8003dcc:	2002      	movhi	r0, #2
}
 8003dce:	bd10      	pop	{r4, pc}
 8003dd0:	08004374 	.word	0x08004374

08003dd4 <USBD_LL_StallEP>:
{
 8003dd4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003dd6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003dda:	f7fd fad7 	bl	800138c <HAL_PCD_EP_SetStall>
 8003dde:	2803      	cmp	r0, #3
 8003de0:	bf9a      	itte	ls
 8003de2:	4b02      	ldrls	r3, [pc, #8]	; (8003dec <USBD_LL_StallEP+0x18>)
 8003de4:	5c18      	ldrbls	r0, [r3, r0]
 8003de6:	2002      	movhi	r0, #2
}
 8003de8:	bd08      	pop	{r3, pc}
 8003dea:	bf00      	nop
 8003dec:	08004374 	.word	0x08004374

08003df0 <USBD_LL_ClearStallEP>:
{
 8003df0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003df2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003df6:	f7fd fb02 	bl	80013fe <HAL_PCD_EP_ClrStall>
 8003dfa:	2803      	cmp	r0, #3
 8003dfc:	bf9a      	itte	ls
 8003dfe:	4b02      	ldrls	r3, [pc, #8]	; (8003e08 <USBD_LL_ClearStallEP+0x18>)
 8003e00:	5c18      	ldrbls	r0, [r3, r0]
 8003e02:	2002      	movhi	r0, #2
}
 8003e04:	bd08      	pop	{r3, pc}
 8003e06:	bf00      	nop
 8003e08:	08004374 	.word	0x08004374

08003e0c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8003e0c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003e0e:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003e12:	bf45      	ittet	mi
 8003e14:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8003e18:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003e1c:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003e20:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003e24:	bf58      	it	pl
 8003e26:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
}
 8003e2a:	4770      	bx	lr

08003e2c <USBD_LL_SetUSBAddress>:
{
 8003e2c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003e2e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003e32:	f7fc ffea 	bl	8000e0a <HAL_PCD_SetAddress>
 8003e36:	2803      	cmp	r0, #3
 8003e38:	bf9a      	itte	ls
 8003e3a:	4b02      	ldrls	r3, [pc, #8]	; (8003e44 <USBD_LL_SetUSBAddress+0x18>)
 8003e3c:	5c18      	ldrbls	r0, [r3, r0]
 8003e3e:	2002      	movhi	r0, #2
}
 8003e40:	bd08      	pop	{r3, pc}
 8003e42:	bf00      	nop
 8003e44:	08004374 	.word	0x08004374

08003e48 <USBD_LL_Transmit>:
{
 8003e48:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003e4a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003e4e:	f7fd f83e 	bl	8000ece <HAL_PCD_EP_Transmit>
 8003e52:	2803      	cmp	r0, #3
 8003e54:	bf9a      	itte	ls
 8003e56:	4b02      	ldrls	r3, [pc, #8]	; (8003e60 <USBD_LL_Transmit+0x18>)
 8003e58:	5c18      	ldrbls	r0, [r3, r0]
 8003e5a:	2002      	movhi	r0, #2
}
 8003e5c:	bd08      	pop	{r3, pc}
 8003e5e:	bf00      	nop
 8003e60:	08004374 	.word	0x08004374

08003e64 <USBD_LL_PrepareReceive>:
{
 8003e64:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003e66:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003e6a:	f7fd f817 	bl	8000e9c <HAL_PCD_EP_Receive>
 8003e6e:	2803      	cmp	r0, #3
 8003e70:	bf9a      	itte	ls
 8003e72:	4b02      	ldrls	r3, [pc, #8]	; (8003e7c <USBD_LL_PrepareReceive+0x18>)
 8003e74:	5c18      	ldrbls	r0, [r3, r0]
 8003e76:	2002      	movhi	r0, #2
}
 8003e78:	bd08      	pop	{r3, pc}
 8003e7a:	bf00      	nop
 8003e7c:	08004374 	.word	0x08004374

08003e80 <HAL_PCDEx_LPM_Callback>:
{
 8003e80:	b510      	push	{r4, lr}
 8003e82:	4604      	mov	r4, r0
  switch (msg)
 8003e84:	b111      	cbz	r1, 8003e8c <HAL_PCDEx_LPM_Callback+0xc>
 8003e86:	2901      	cmp	r1, #1
 8003e88:	d00f      	beq.n	8003eaa <HAL_PCDEx_LPM_Callback+0x2a>
 8003e8a:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8003e8c:	6983      	ldr	r3, [r0, #24]
 8003e8e:	b133      	cbz	r3, 8003e9e <HAL_PCDEx_LPM_Callback+0x1e>
      SystemClock_Config();
 8003e90:	f7ff f9ec 	bl	800326c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003e94:	4a0b      	ldr	r2, [pc, #44]	; (8003ec4 <HAL_PCDEx_LPM_Callback+0x44>)
 8003e96:	6913      	ldr	r3, [r2, #16]
 8003e98:	f023 0306 	bic.w	r3, r3, #6
 8003e9c:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8003e9e:	f8d4 0470 	ldr.w	r0, [r4, #1136]	; 0x470
}
 8003ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8003ea6:	f7fe bf83 	b.w	8002db0 <USBD_LL_Resume>
    USBD_LL_Suspend(hpcd->pData);
 8003eaa:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8003eae:	f7fe ff76 	bl	8002d9e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8003eb2:	69a3      	ldr	r3, [r4, #24]
 8003eb4:	b123      	cbz	r3, 8003ec0 <HAL_PCDEx_LPM_Callback+0x40>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003eb6:	4a03      	ldr	r2, [pc, #12]	; (8003ec4 <HAL_PCDEx_LPM_Callback+0x44>)
 8003eb8:	6913      	ldr	r3, [r2, #16]
 8003eba:	f043 0306 	orr.w	r3, r3, #6
 8003ebe:	6113      	str	r3, [r2, #16]
 8003ec0:	bd10      	pop	{r4, pc}
 8003ec2:	bf00      	nop
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003ecc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003ece:	e003      	b.n	8003ed8 <LoopCopyDataInit>

08003ed0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003ed2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003ed4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003ed6:	3104      	adds	r1, #4

08003ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003ed8:	480b      	ldr	r0, [pc, #44]	; (8003f08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003eda:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8003edc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003ede:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003ee0:	d3f6      	bcc.n	8003ed0 <CopyDataInit>
	ldr	r2, =_sbss
 8003ee2:	4a0b      	ldr	r2, [pc, #44]	; (8003f10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003ee4:	e002      	b.n	8003eec <LoopFillZerobss>

08003ee6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003ee6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003ee8:	f842 3b04 	str.w	r3, [r2], #4

08003eec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003eec:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <LoopForever+0x16>)
	cmp	r2, r3
 8003eee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003ef0:	d3f9      	bcc.n	8003ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003ef2:	f7ff fef1 	bl	8003cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ef6:	f000 f811 	bl	8003f1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003efa:	f7ff fbf9 	bl	80036f0 <main>

08003efe <LoopForever>:

LoopForever:
    b LoopForever
 8003efe:	e7fe      	b.n	8003efe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f00:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003f04:	08004380 	.word	0x08004380
	ldr	r0, =_sdata
 8003f08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003f0c:	2000008c 	.word	0x2000008c
	ldr	r2, =_sbss
 8003f10:	2000008c 	.word	0x2000008c
	ldr	r3, = _ebss
 8003f14:	200007d0 	.word	0x200007d0

08003f18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f18:	e7fe      	b.n	8003f18 <ADC1_IRQHandler>
	...

08003f1c <__libc_init_array>:
 8003f1c:	b570      	push	{r4, r5, r6, lr}
 8003f1e:	4e0d      	ldr	r6, [pc, #52]	; (8003f54 <__libc_init_array+0x38>)
 8003f20:	4c0d      	ldr	r4, [pc, #52]	; (8003f58 <__libc_init_array+0x3c>)
 8003f22:	1ba4      	subs	r4, r4, r6
 8003f24:	10a4      	asrs	r4, r4, #2
 8003f26:	2500      	movs	r5, #0
 8003f28:	42a5      	cmp	r5, r4
 8003f2a:	d109      	bne.n	8003f40 <__libc_init_array+0x24>
 8003f2c:	4e0b      	ldr	r6, [pc, #44]	; (8003f5c <__libc_init_array+0x40>)
 8003f2e:	4c0c      	ldr	r4, [pc, #48]	; (8003f60 <__libc_init_array+0x44>)
 8003f30:	f000 f8f4 	bl	800411c <_init>
 8003f34:	1ba4      	subs	r4, r4, r6
 8003f36:	10a4      	asrs	r4, r4, #2
 8003f38:	2500      	movs	r5, #0
 8003f3a:	42a5      	cmp	r5, r4
 8003f3c:	d105      	bne.n	8003f4a <__libc_init_array+0x2e>
 8003f3e:	bd70      	pop	{r4, r5, r6, pc}
 8003f40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f44:	4798      	blx	r3
 8003f46:	3501      	adds	r5, #1
 8003f48:	e7ee      	b.n	8003f28 <__libc_init_array+0xc>
 8003f4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f4e:	4798      	blx	r3
 8003f50:	3501      	adds	r5, #1
 8003f52:	e7f2      	b.n	8003f3a <__libc_init_array+0x1e>
 8003f54:	08004378 	.word	0x08004378
 8003f58:	08004378 	.word	0x08004378
 8003f5c:	08004378 	.word	0x08004378
 8003f60:	0800437c 	.word	0x0800437c

08003f64 <malloc>:
 8003f64:	4b02      	ldr	r3, [pc, #8]	; (8003f70 <malloc+0xc>)
 8003f66:	4601      	mov	r1, r0
 8003f68:	6818      	ldr	r0, [r3, #0]
 8003f6a:	f000 b859 	b.w	8004020 <_malloc_r>
 8003f6e:	bf00      	nop
 8003f70:	20000028 	.word	0x20000028

08003f74 <free>:
 8003f74:	4b02      	ldr	r3, [pc, #8]	; (8003f80 <free+0xc>)
 8003f76:	4601      	mov	r1, r0
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	f000 b803 	b.w	8003f84 <_free_r>
 8003f7e:	bf00      	nop
 8003f80:	20000028 	.word	0x20000028

08003f84 <_free_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	4605      	mov	r5, r0
 8003f88:	2900      	cmp	r1, #0
 8003f8a:	d045      	beq.n	8004018 <_free_r+0x94>
 8003f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f90:	1f0c      	subs	r4, r1, #4
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	bfb8      	it	lt
 8003f96:	18e4      	addlt	r4, r4, r3
 8003f98:	f000 f8b0 	bl	80040fc <__malloc_lock>
 8003f9c:	4a1f      	ldr	r2, [pc, #124]	; (800401c <_free_r+0x98>)
 8003f9e:	6813      	ldr	r3, [r2, #0]
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	b933      	cbnz	r3, 8003fb2 <_free_r+0x2e>
 8003fa4:	6063      	str	r3, [r4, #4]
 8003fa6:	6014      	str	r4, [r2, #0]
 8003fa8:	4628      	mov	r0, r5
 8003faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fae:	f000 b8a6 	b.w	80040fe <__malloc_unlock>
 8003fb2:	42a3      	cmp	r3, r4
 8003fb4:	d90c      	bls.n	8003fd0 <_free_r+0x4c>
 8003fb6:	6821      	ldr	r1, [r4, #0]
 8003fb8:	1862      	adds	r2, r4, r1
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	bf04      	itt	eq
 8003fbe:	681a      	ldreq	r2, [r3, #0]
 8003fc0:	685b      	ldreq	r3, [r3, #4]
 8003fc2:	6063      	str	r3, [r4, #4]
 8003fc4:	bf04      	itt	eq
 8003fc6:	1852      	addeq	r2, r2, r1
 8003fc8:	6022      	streq	r2, [r4, #0]
 8003fca:	6004      	str	r4, [r0, #0]
 8003fcc:	e7ec      	b.n	8003fa8 <_free_r+0x24>
 8003fce:	4613      	mov	r3, r2
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	b10a      	cbz	r2, 8003fd8 <_free_r+0x54>
 8003fd4:	42a2      	cmp	r2, r4
 8003fd6:	d9fa      	bls.n	8003fce <_free_r+0x4a>
 8003fd8:	6819      	ldr	r1, [r3, #0]
 8003fda:	1858      	adds	r0, r3, r1
 8003fdc:	42a0      	cmp	r0, r4
 8003fde:	d10b      	bne.n	8003ff8 <_free_r+0x74>
 8003fe0:	6820      	ldr	r0, [r4, #0]
 8003fe2:	4401      	add	r1, r0
 8003fe4:	1858      	adds	r0, r3, r1
 8003fe6:	4282      	cmp	r2, r0
 8003fe8:	6019      	str	r1, [r3, #0]
 8003fea:	d1dd      	bne.n	8003fa8 <_free_r+0x24>
 8003fec:	6810      	ldr	r0, [r2, #0]
 8003fee:	6852      	ldr	r2, [r2, #4]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	4401      	add	r1, r0
 8003ff4:	6019      	str	r1, [r3, #0]
 8003ff6:	e7d7      	b.n	8003fa8 <_free_r+0x24>
 8003ff8:	d902      	bls.n	8004000 <_free_r+0x7c>
 8003ffa:	230c      	movs	r3, #12
 8003ffc:	602b      	str	r3, [r5, #0]
 8003ffe:	e7d3      	b.n	8003fa8 <_free_r+0x24>
 8004000:	6820      	ldr	r0, [r4, #0]
 8004002:	1821      	adds	r1, r4, r0
 8004004:	428a      	cmp	r2, r1
 8004006:	bf04      	itt	eq
 8004008:	6811      	ldreq	r1, [r2, #0]
 800400a:	6852      	ldreq	r2, [r2, #4]
 800400c:	6062      	str	r2, [r4, #4]
 800400e:	bf04      	itt	eq
 8004010:	1809      	addeq	r1, r1, r0
 8004012:	6021      	streq	r1, [r4, #0]
 8004014:	605c      	str	r4, [r3, #4]
 8004016:	e7c7      	b.n	8003fa8 <_free_r+0x24>
 8004018:	bd38      	pop	{r3, r4, r5, pc}
 800401a:	bf00      	nop
 800401c:	200000bc 	.word	0x200000bc

08004020 <_malloc_r>:
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	1ccd      	adds	r5, r1, #3
 8004024:	f025 0503 	bic.w	r5, r5, #3
 8004028:	3508      	adds	r5, #8
 800402a:	2d0c      	cmp	r5, #12
 800402c:	bf38      	it	cc
 800402e:	250c      	movcc	r5, #12
 8004030:	2d00      	cmp	r5, #0
 8004032:	4606      	mov	r6, r0
 8004034:	db01      	blt.n	800403a <_malloc_r+0x1a>
 8004036:	42a9      	cmp	r1, r5
 8004038:	d903      	bls.n	8004042 <_malloc_r+0x22>
 800403a:	230c      	movs	r3, #12
 800403c:	6033      	str	r3, [r6, #0]
 800403e:	2000      	movs	r0, #0
 8004040:	bd70      	pop	{r4, r5, r6, pc}
 8004042:	f000 f85b 	bl	80040fc <__malloc_lock>
 8004046:	4a23      	ldr	r2, [pc, #140]	; (80040d4 <_malloc_r+0xb4>)
 8004048:	6814      	ldr	r4, [r2, #0]
 800404a:	4621      	mov	r1, r4
 800404c:	b991      	cbnz	r1, 8004074 <_malloc_r+0x54>
 800404e:	4c22      	ldr	r4, [pc, #136]	; (80040d8 <_malloc_r+0xb8>)
 8004050:	6823      	ldr	r3, [r4, #0]
 8004052:	b91b      	cbnz	r3, 800405c <_malloc_r+0x3c>
 8004054:	4630      	mov	r0, r6
 8004056:	f000 f841 	bl	80040dc <_sbrk_r>
 800405a:	6020      	str	r0, [r4, #0]
 800405c:	4629      	mov	r1, r5
 800405e:	4630      	mov	r0, r6
 8004060:	f000 f83c 	bl	80040dc <_sbrk_r>
 8004064:	1c43      	adds	r3, r0, #1
 8004066:	d126      	bne.n	80040b6 <_malloc_r+0x96>
 8004068:	230c      	movs	r3, #12
 800406a:	6033      	str	r3, [r6, #0]
 800406c:	4630      	mov	r0, r6
 800406e:	f000 f846 	bl	80040fe <__malloc_unlock>
 8004072:	e7e4      	b.n	800403e <_malloc_r+0x1e>
 8004074:	680b      	ldr	r3, [r1, #0]
 8004076:	1b5b      	subs	r3, r3, r5
 8004078:	d41a      	bmi.n	80040b0 <_malloc_r+0x90>
 800407a:	2b0b      	cmp	r3, #11
 800407c:	d90f      	bls.n	800409e <_malloc_r+0x7e>
 800407e:	600b      	str	r3, [r1, #0]
 8004080:	50cd      	str	r5, [r1, r3]
 8004082:	18cc      	adds	r4, r1, r3
 8004084:	4630      	mov	r0, r6
 8004086:	f000 f83a 	bl	80040fe <__malloc_unlock>
 800408a:	f104 000b 	add.w	r0, r4, #11
 800408e:	1d23      	adds	r3, r4, #4
 8004090:	f020 0007 	bic.w	r0, r0, #7
 8004094:	1ac3      	subs	r3, r0, r3
 8004096:	d01b      	beq.n	80040d0 <_malloc_r+0xb0>
 8004098:	425a      	negs	r2, r3
 800409a:	50e2      	str	r2, [r4, r3]
 800409c:	bd70      	pop	{r4, r5, r6, pc}
 800409e:	428c      	cmp	r4, r1
 80040a0:	bf0d      	iteet	eq
 80040a2:	6863      	ldreq	r3, [r4, #4]
 80040a4:	684b      	ldrne	r3, [r1, #4]
 80040a6:	6063      	strne	r3, [r4, #4]
 80040a8:	6013      	streq	r3, [r2, #0]
 80040aa:	bf18      	it	ne
 80040ac:	460c      	movne	r4, r1
 80040ae:	e7e9      	b.n	8004084 <_malloc_r+0x64>
 80040b0:	460c      	mov	r4, r1
 80040b2:	6849      	ldr	r1, [r1, #4]
 80040b4:	e7ca      	b.n	800404c <_malloc_r+0x2c>
 80040b6:	1cc4      	adds	r4, r0, #3
 80040b8:	f024 0403 	bic.w	r4, r4, #3
 80040bc:	42a0      	cmp	r0, r4
 80040be:	d005      	beq.n	80040cc <_malloc_r+0xac>
 80040c0:	1a21      	subs	r1, r4, r0
 80040c2:	4630      	mov	r0, r6
 80040c4:	f000 f80a 	bl	80040dc <_sbrk_r>
 80040c8:	3001      	adds	r0, #1
 80040ca:	d0cd      	beq.n	8004068 <_malloc_r+0x48>
 80040cc:	6025      	str	r5, [r4, #0]
 80040ce:	e7d9      	b.n	8004084 <_malloc_r+0x64>
 80040d0:	bd70      	pop	{r4, r5, r6, pc}
 80040d2:	bf00      	nop
 80040d4:	200000bc 	.word	0x200000bc
 80040d8:	200000c0 	.word	0x200000c0

080040dc <_sbrk_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	4c06      	ldr	r4, [pc, #24]	; (80040f8 <_sbrk_r+0x1c>)
 80040e0:	2300      	movs	r3, #0
 80040e2:	4605      	mov	r5, r0
 80040e4:	4608      	mov	r0, r1
 80040e6:	6023      	str	r3, [r4, #0]
 80040e8:	f000 f80a 	bl	8004100 <_sbrk>
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	d102      	bne.n	80040f6 <_sbrk_r+0x1a>
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	b103      	cbz	r3, 80040f6 <_sbrk_r+0x1a>
 80040f4:	602b      	str	r3, [r5, #0]
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
 80040f8:	200007cc 	.word	0x200007cc

080040fc <__malloc_lock>:
 80040fc:	4770      	bx	lr

080040fe <__malloc_unlock>:
 80040fe:	4770      	bx	lr

08004100 <_sbrk>:
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <_sbrk+0x14>)
 8004102:	6819      	ldr	r1, [r3, #0]
 8004104:	4602      	mov	r2, r0
 8004106:	b909      	cbnz	r1, 800410c <_sbrk+0xc>
 8004108:	4903      	ldr	r1, [pc, #12]	; (8004118 <_sbrk+0x18>)
 800410a:	6019      	str	r1, [r3, #0]
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	4402      	add	r2, r0
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	4770      	bx	lr
 8004114:	200000c4 	.word	0x200000c4
 8004118:	200007d0 	.word	0x200007d0

0800411c <_init>:
 800411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411e:	bf00      	nop
 8004120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004122:	bc08      	pop	{r3}
 8004124:	469e      	mov	lr, r3
 8004126:	4770      	bx	lr

08004128 <_fini>:
 8004128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412a:	bf00      	nop
 800412c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412e:	bc08      	pop	{r3}
 8004130:	469e      	mov	lr, r3
 8004132:	4770      	bx	lr
