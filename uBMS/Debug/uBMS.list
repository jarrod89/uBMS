
uBMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  08008a48  08008a48  00018a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008ff0  08008ff0  00018ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008ff8  08008ff8  00018ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008ffc  08008ffc  00018ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000007fc  20000000  08009000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001608  200007fc  080097fc  000207fc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001e04  080097fc  00021e04  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000207fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022cf8  00000000  00000000  0002082c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000041fa  00000000  00000000  00043524  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000838f  00000000  00000000  0004771e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e28  00000000  00000000  0004fab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001440  00000000  00000000  000508d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007cb2  00000000  00000000  00051d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000546c  00000000  00000000  000599ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005ee36  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003534  00000000  00000000  0005eeb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000084  00000000  00000000  000623e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000117  00000000  00000000  0006246c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200007fc 	.word	0x200007fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a30 	.word	0x08008a30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000800 	.word	0x20000800
 80001cc:	08008a30 	.word	0x08008a30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b97a 	b.w	8000f4c <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	468c      	mov	ip, r1
 8000c76:	460d      	mov	r5, r1
 8000c78:	4604      	mov	r4, r0
 8000c7a:	9e08      	ldr	r6, [sp, #32]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d151      	bne.n	8000d24 <__udivmoddi4+0xb4>
 8000c80:	428a      	cmp	r2, r1
 8000c82:	4617      	mov	r7, r2
 8000c84:	d96d      	bls.n	8000d62 <__udivmoddi4+0xf2>
 8000c86:	fab2 fe82 	clz	lr, r2
 8000c8a:	f1be 0f00 	cmp.w	lr, #0
 8000c8e:	d00b      	beq.n	8000ca8 <__udivmoddi4+0x38>
 8000c90:	f1ce 0c20 	rsb	ip, lr, #32
 8000c94:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c98:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c9c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ca0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ca4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ca8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cac:	0c25      	lsrs	r5, r4, #16
 8000cae:	fbbc f8fa 	udiv	r8, ip, sl
 8000cb2:	fa1f f987 	uxth.w	r9, r7
 8000cb6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cbe:	fb08 f309 	mul.w	r3, r8, r9
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x6c>
 8000cc6:	19ed      	adds	r5, r5, r7
 8000cc8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ccc:	f080 8123 	bcs.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	f240 8120 	bls.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	443d      	add	r5, r7
 8000cdc:	1aed      	subs	r5, r5, r3
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ce4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ce8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cec:	fb00 f909 	mul.w	r9, r0, r9
 8000cf0:	45a1      	cmp	r9, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x98>
 8000cf4:	19e4      	adds	r4, r4, r7
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 810a 	bcs.w	8000f12 <__udivmoddi4+0x2a2>
 8000cfe:	45a1      	cmp	r9, r4
 8000d00:	f240 8107 	bls.w	8000f12 <__udivmoddi4+0x2a2>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	eba4 0409 	sub.w	r4, r4, r9
 8000d0c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d10:	2100      	movs	r1, #0
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d061      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d16:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	6034      	str	r4, [r6, #0]
 8000d1e:	6073      	str	r3, [r6, #4]
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0xc8>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d054      	beq.n	8000dd6 <__udivmoddi4+0x166>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	f040 808e 	bne.w	8000e5e <__udivmoddi4+0x1ee>
 8000d42:	42ab      	cmp	r3, r5
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xdc>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80fa 	bhi.w	8000f40 <__udivmoddi4+0x2d0>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	46ac      	mov	ip, r5
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d03f      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d5a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	b912      	cbnz	r2, 8000d6a <__udivmoddi4+0xfa>
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d6a:	fab7 fe87 	clz	lr, r7
 8000d6e:	f1be 0f00 	cmp.w	lr, #0
 8000d72:	d134      	bne.n	8000dde <__udivmoddi4+0x16e>
 8000d74:	1beb      	subs	r3, r5, r7
 8000d76:	0c3a      	lsrs	r2, r7, #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d82:	0c25      	lsrs	r5, r4, #16
 8000d84:	fb02 3318 	mls	r3, r2, r8, r3
 8000d88:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d8c:	fb0c f308 	mul.w	r3, ip, r8
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x134>
 8000d94:	19ed      	adds	r5, r5, r7
 8000d96:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x132>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	f200 80d1 	bhi.w	8000f44 <__udivmoddi4+0x2d4>
 8000da2:	4680      	mov	r8, r0
 8000da4:	1aed      	subs	r5, r5, r3
 8000da6:	b2a3      	uxth	r3, r4
 8000da8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dac:	fb02 5510 	mls	r5, r2, r0, r5
 8000db0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000db4:	fb0c fc00 	mul.w	ip, ip, r0
 8000db8:	45a4      	cmp	ip, r4
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x15c>
 8000dbc:	19e4      	adds	r4, r4, r7
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x15a>
 8000dc4:	45a4      	cmp	ip, r4
 8000dc6:	f200 80b8 	bhi.w	8000f3a <__udivmoddi4+0x2ca>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	eba4 040c 	sub.w	r4, r4, ip
 8000dd0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd4:	e79d      	b.n	8000d12 <__udivmoddi4+0xa2>
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	f1ce 0420 	rsb	r4, lr, #32
 8000de2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000de6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dea:	fa20 f804 	lsr.w	r8, r0, r4
 8000dee:	0c3a      	lsrs	r2, r7, #16
 8000df0:	fa25 f404 	lsr.w	r4, r5, r4
 8000df4:	ea48 0803 	orr.w	r8, r8, r3
 8000df8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dfc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e00:	fb02 4411 	mls	r4, r2, r1, r4
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e0c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e10:	42ab      	cmp	r3, r5
 8000e12:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e16:	d909      	bls.n	8000e2c <__udivmoddi4+0x1bc>
 8000e18:	19ed      	adds	r5, r5, r7
 8000e1a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e1e:	f080 808a 	bcs.w	8000f36 <__udivmoddi4+0x2c6>
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	f240 8087 	bls.w	8000f36 <__udivmoddi4+0x2c6>
 8000e28:	3902      	subs	r1, #2
 8000e2a:	443d      	add	r5, r7
 8000e2c:	1aeb      	subs	r3, r5, r3
 8000e2e:	fa1f f588 	uxth.w	r5, r8
 8000e32:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e36:	fb02 3310 	mls	r3, r2, r0, r3
 8000e3a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e3e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1e6>
 8000e46:	19ed      	adds	r5, r5, r7
 8000e48:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4c:	d26f      	bcs.n	8000f2e <__udivmoddi4+0x2be>
 8000e4e:	42ab      	cmp	r3, r5
 8000e50:	d96d      	bls.n	8000f2e <__udivmoddi4+0x2be>
 8000e52:	3802      	subs	r0, #2
 8000e54:	443d      	add	r5, r7
 8000e56:	1aeb      	subs	r3, r5, r3
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	e78f      	b.n	8000d7e <__udivmoddi4+0x10e>
 8000e5e:	f1c1 0720 	rsb	r7, r1, #32
 8000e62:	fa22 f807 	lsr.w	r8, r2, r7
 8000e66:	408b      	lsls	r3, r1
 8000e68:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6c:	ea48 0303 	orr.w	r3, r8, r3
 8000e70:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e7e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e82:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e86:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e8a:	fa1f f883 	uxth.w	r8, r3
 8000e8e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e92:	fb09 f408 	mul.w	r4, r9, r8
 8000e96:	42ac      	cmp	r4, r5
 8000e98:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x244>
 8000ea2:	18ed      	adds	r5, r5, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	d243      	bcs.n	8000f32 <__udivmoddi4+0x2c2>
 8000eaa:	42ac      	cmp	r4, r5
 8000eac:	d941      	bls.n	8000f32 <__udivmoddi4+0x2c2>
 8000eae:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb2:	441d      	add	r5, r3
 8000eb4:	1b2d      	subs	r5, r5, r4
 8000eb6:	fa1f fe8e 	uxth.w	lr, lr
 8000eba:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ebe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ec2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ec6:	fb00 f808 	mul.w	r8, r0, r8
 8000eca:	45a0      	cmp	r8, r4
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x26e>
 8000ece:	18e4      	adds	r4, r4, r3
 8000ed0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ed4:	d229      	bcs.n	8000f2a <__udivmoddi4+0x2ba>
 8000ed6:	45a0      	cmp	r8, r4
 8000ed8:	d927      	bls.n	8000f2a <__udivmoddi4+0x2ba>
 8000eda:	3802      	subs	r0, #2
 8000edc:	441c      	add	r4, r3
 8000ede:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	454c      	cmp	r4, r9
 8000eec:	46c6      	mov	lr, r8
 8000eee:	464d      	mov	r5, r9
 8000ef0:	d315      	bcc.n	8000f1e <__udivmoddi4+0x2ae>
 8000ef2:	d012      	beq.n	8000f1a <__udivmoddi4+0x2aa>
 8000ef4:	b156      	cbz	r6, 8000f0c <__udivmoddi4+0x29c>
 8000ef6:	ebba 030e 	subs.w	r3, sl, lr
 8000efa:	eb64 0405 	sbc.w	r4, r4, r5
 8000efe:	fa04 f707 	lsl.w	r7, r4, r7
 8000f02:	40cb      	lsrs	r3, r1
 8000f04:	431f      	orrs	r7, r3
 8000f06:	40cc      	lsrs	r4, r1
 8000f08:	6037      	str	r7, [r6, #0]
 8000f0a:	6074      	str	r4, [r6, #4]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	4618      	mov	r0, r3
 8000f14:	e6f8      	b.n	8000d08 <__udivmoddi4+0x98>
 8000f16:	4690      	mov	r8, r2
 8000f18:	e6e0      	b.n	8000cdc <__udivmoddi4+0x6c>
 8000f1a:	45c2      	cmp	sl, r8
 8000f1c:	d2ea      	bcs.n	8000ef4 <__udivmoddi4+0x284>
 8000f1e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f22:	eb69 0503 	sbc.w	r5, r9, r3
 8000f26:	3801      	subs	r0, #1
 8000f28:	e7e4      	b.n	8000ef4 <__udivmoddi4+0x284>
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	e7d7      	b.n	8000ede <__udivmoddi4+0x26e>
 8000f2e:	4640      	mov	r0, r8
 8000f30:	e791      	b.n	8000e56 <__udivmoddi4+0x1e6>
 8000f32:	4681      	mov	r9, r0
 8000f34:	e7be      	b.n	8000eb4 <__udivmoddi4+0x244>
 8000f36:	4601      	mov	r1, r0
 8000f38:	e778      	b.n	8000e2c <__udivmoddi4+0x1bc>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	443c      	add	r4, r7
 8000f3e:	e745      	b.n	8000dcc <__udivmoddi4+0x15c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e708      	b.n	8000d56 <__udivmoddi4+0xe6>
 8000f44:	f1a8 0802 	sub.w	r8, r8, #2
 8000f48:	443d      	add	r5, r7
 8000f4a:	e72b      	b.n	8000da4 <__udivmoddi4+0x134>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_InitTick+0x24>)
{
 8000f54:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000f56:	6818      	ldr	r0, [r3, #0]
 8000f58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f60:	f000 f884 	bl	800106c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	4621      	mov	r1, r4
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f000 f83e 	bl	8000fec <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000f70:	2000      	movs	r0, #0
 8000f72:	bd10      	pop	{r4, pc}
 8000f74:	20000134 	.word	0x20000134

08000f78 <HAL_Init>:
{
 8000f78:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	f000 f824 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f7ff ffe5 	bl	8000f50 <HAL_InitTick>
  HAL_MspInit();
 8000f86:	f003 fc97 	bl	80048b8 <HAL_MspInit>
}
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	bd08      	pop	{r3, pc}
	...

08000f90 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f90:	4a02      	ldr	r2, [pc, #8]	; (8000f9c <HAL_IncTick+0xc>)
 8000f92:	6813      	ldr	r3, [r2, #0]
 8000f94:	3301      	adds	r3, #1
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000a84 	.word	0x20000a84

08000fa0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fa0:	4b01      	ldr	r3, [pc, #4]	; (8000fa8 <HAL_GetTick+0x8>)
 8000fa2:	6818      	ldr	r0, [r3, #0]
}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000a84 	.word	0x20000a84

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b538      	push	{r3, r4, r5, lr}
 8000fae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff fff6 	bl	8000fa0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000fb6:	4605      	mov	r5, r0
  {
    wait++;
 8000fb8:	bf18      	it	ne
 8000fba:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000fbc:	f7ff fff0 	bl	8000fa0 <HAL_GetTick>
 8000fc0:	1b40      	subs	r0, r0, r5
 8000fc2:	4284      	cmp	r4, r0
 8000fc4:	d8fa      	bhi.n	8000fbc <HAL_Delay+0x10>
  {
  }
}
 8000fc6:	bd38      	pop	{r3, r4, r5, pc}

08000fc8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000fca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fcc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fd0:	041b      	lsls	r3, r3, #16
 8000fd2:	0c1b      	lsrs	r3, r3, #16
 8000fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000fd8:	0200      	lsls	r0, r0, #8
 8000fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fde:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000fe2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000fe4:	60d3      	str	r3, [r2, #12]
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fee:	b530      	push	{r4, r5, lr}
 8000ff0:	68dc      	ldr	r4, [r3, #12]
 8000ff2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	2b04      	cmp	r3, #4
 8000ffe:	bf28      	it	cs
 8001000:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 0501 	mov.w	r5, #1
 8001008:	fa05 f303 	lsl.w	r3, r5, r3
 800100c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001010:	bf8c      	ite	hi
 8001012:	3c03      	subhi	r4, #3
 8001014:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001016:	4019      	ands	r1, r3
 8001018:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101a:	fa05 f404 	lsl.w	r4, r5, r4
 800101e:	3c01      	subs	r4, #1
 8001020:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001022:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	ea42 0201 	orr.w	r2, r2, r1
 8001028:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	bfaf      	iteee	ge
 800102e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	f000 000f 	andlt.w	r0, r0, #15
 8001036:	4b06      	ldrlt	r3, [pc, #24]	; (8001050 <HAL_NVIC_SetPriority+0x64>)
 8001038:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	bfa5      	ittet	ge
 800103c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001040:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001048:	bd30      	pop	{r4, r5, pc}
 800104a:	bf00      	nop
 800104c:	e000ed00 	.word	0xe000ed00
 8001050:	e000ed14 	.word	0xe000ed14

08001054 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001054:	0942      	lsrs	r2, r0, #5
 8001056:	2301      	movs	r3, #1
 8001058:	f000 001f 	and.w	r0, r0, #31
 800105c:	fa03 f000 	lsl.w	r0, r3, r0
 8001060:	4b01      	ldr	r3, [pc, #4]	; (8001068 <HAL_NVIC_EnableIRQ+0x14>)
 8001062:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100

0800106c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	3801      	subs	r0, #1
 800106e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001072:	d20a      	bcs.n	800108a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001078:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	21f0      	movs	r1, #240	; 0xf0
 800107c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800108a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800109a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800109c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800109e:	bf0c      	ite	eq
 80010a0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80010a4:	f022 0204 	bicne.w	r2, r2, #4
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	4770      	bx	lr
 80010ac:	e000e010 	.word	0xe000e010

080010b0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80010b0:	4770      	bx	lr

080010b2 <HAL_SYSTICK_IRQHandler>:
{
 80010b2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80010b4:	f7ff fffc 	bl	80010b0 <HAL_SYSTICK_Callback>
 80010b8:	bd08      	pop	{r3, pc}
	...

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80010c0:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c4:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800123c <HAL_GPIO_Init+0x180>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010c8:	4a5a      	ldr	r2, [pc, #360]	; (8001234 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00;
 80010ca:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80010cc:	fa38 f403 	lsrs.w	r4, r8, r3
 80010d0:	d102      	bne.n	80010d8 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 80010d2:	b003      	add	sp, #12
 80010d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80010d8:	2401      	movs	r4, #1
 80010da:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 80010de:	ea18 050a 	ands.w	r5, r8, sl
 80010e2:	f000 809c 	beq.w	800121e <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e6:	684c      	ldr	r4, [r1, #4]
 80010e8:	f024 0b10 	bic.w	fp, r4, #16
 80010ec:	f1bb 0f02 	cmp.w	fp, #2
 80010f0:	d114      	bne.n	800111c <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 80010f2:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80010f6:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010fa:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80010fe:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001102:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001106:	270f      	movs	r7, #15
 8001108:	fa07 f70c 	lsl.w	r7, r7, ip
 800110c:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001110:	690e      	ldr	r6, [r1, #16]
 8001112:	fa06 f60c 	lsl.w	r6, r6, ip
 8001116:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8001118:	f8ce 6020 	str.w	r6, [lr, #32]
 800111c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001120:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8001122:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001124:	fa07 f70c 	lsl.w	r7, r7, ip
 8001128:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800112a:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800112e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001130:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001134:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001138:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800113c:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8001140:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001142:	d811      	bhi.n	8001168 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8001144:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8001146:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 800114a:	68ce      	ldr	r6, [r1, #12]
 800114c:	fa06 fe0c 	lsl.w	lr, r6, ip
 8001150:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8001154:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001156:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001158:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800115c:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001160:	409e      	lsls	r6, r3
 8001162:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8001166:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001168:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 800116a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800116c:	688e      	ldr	r6, [r1, #8]
 800116e:	fa06 f60c 	lsl.w	r6, r6, ip
 8001172:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001174:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8001176:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001178:	d551      	bpl.n	800121e <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 800117e:	f046 0601 	orr.w	r6, r6, #1
 8001182:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8001186:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 800118a:	f023 0703 	bic.w	r7, r3, #3
 800118e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001192:	f006 0601 	and.w	r6, r6, #1
 8001196:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800119a:	9601      	str	r6, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800119c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a0:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80011a2:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011a4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80011a8:	f04f 0e0f 	mov.w	lr, #15
 80011ac:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80011b0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011b4:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80011b8:	d033      	beq.n	8001222 <HAL_GPIO_Init+0x166>
 80011ba:	4e1f      	ldr	r6, [pc, #124]	; (8001238 <HAL_GPIO_Init+0x17c>)
 80011bc:	42b0      	cmp	r0, r6
 80011be:	d032      	beq.n	8001226 <HAL_GPIO_Init+0x16a>
 80011c0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80011c4:	42b0      	cmp	r0, r6
 80011c6:	d030      	beq.n	800122a <HAL_GPIO_Init+0x16e>
 80011c8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80011cc:	42b0      	cmp	r0, r6
 80011ce:	d02e      	beq.n	800122e <HAL_GPIO_Init+0x172>
 80011d0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80011d4:	42b0      	cmp	r0, r6
 80011d6:	bf14      	ite	ne
 80011d8:	2607      	movne	r6, #7
 80011da:	2604      	moveq	r6, #4
 80011dc:	fa06 f60c 	lsl.w	r6, r6, ip
 80011e0:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80011e4:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 80011e6:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80011e8:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ea:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80011ee:	bf0c      	ite	eq
 80011f0:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80011f2:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 80011f4:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 80011f6:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011f8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80011fc:	bf0c      	ite	eq
 80011fe:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001200:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8001202:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 8001204:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001206:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800120a:	bf0c      	ite	eq
 800120c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800120e:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8001210:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 8001212:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001214:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001216:	bf54      	ite	pl
 8001218:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800121a:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 800121c:	60d6      	str	r6, [r2, #12]
    position++;
 800121e:	3301      	adds	r3, #1
 8001220:	e754      	b.n	80010cc <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001222:	2600      	movs	r6, #0
 8001224:	e7da      	b.n	80011dc <HAL_GPIO_Init+0x120>
 8001226:	2601      	movs	r6, #1
 8001228:	e7d8      	b.n	80011dc <HAL_GPIO_Init+0x120>
 800122a:	2602      	movs	r6, #2
 800122c:	e7d6      	b.n	80011dc <HAL_GPIO_Init+0x120>
 800122e:	2603      	movs	r6, #3
 8001230:	e7d4      	b.n	80011dc <HAL_GPIO_Init+0x120>
 8001232:	bf00      	nop
 8001234:	40010400 	.word	0x40010400
 8001238:	48000400 	.word	0x48000400
 800123c:	40021000 	.word	0x40021000

08001240 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001240:	6903      	ldr	r3, [r0, #16]
 8001242:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001244:	bf14      	ite	ne
 8001246:	2001      	movne	r0, #1
 8001248:	2000      	moveq	r0, #0
 800124a:	4770      	bx	lr

0800124c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800124c:	b10a      	cbz	r2, 8001252 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800124e:	6181      	str	r1, [r0, #24]
 8001250:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001252:	6281      	str	r1, [r0, #40]	; 0x28
 8001254:	4770      	bx	lr

08001256 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001256:	6943      	ldr	r3, [r0, #20]
 8001258:	4059      	eors	r1, r3
 800125a:	6141      	str	r1, [r0, #20]
 800125c:	4770      	bx	lr

0800125e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800125e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001262:	4604      	mov	r4, r0
{
 8001264:	b086      	sub	sp, #24
  if (hpcd == NULL)
 8001266:	2800      	cmp	r0, #0
 8001268:	d06b      	beq.n	8001342 <HAL_PCD_Init+0xe4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800126a:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 800126e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001272:	b91b      	cbnz	r3, 800127c <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001274:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001278:	f003 fc40 	bl	8004afc <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800127c:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800127e:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8001280:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001284:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 8001288:	f001 fccf 	bl	8002c2a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 800128c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128e:	466e      	mov	r6, sp
 8001290:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001292:	682b      	ldr	r3, [r5, #0]
 8001294:	6033      	str	r3, [r6, #0]
 8001296:	f104 0804 	add.w	r8, r4, #4
 800129a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800129e:	6820      	ldr	r0, [r4, #0]
 80012a0:	f001 fcb1 	bl	8002c06 <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012a4:	2100      	movs	r1, #0
 80012a6:	6820      	ldr	r0, [r4, #0]
 80012a8:	f001 fcc9 	bl	8002c3e <USB_SetCurrentMode>
 80012ac:	2100      	movs	r1, #0
 80012ae:	4622      	mov	r2, r4
 80012b0:	4623      	mov	r3, r4
 80012b2:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012b6:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012b8:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 80012ba:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012be:	86d9      	strh	r1, [r3, #54]	; 0x36
 80012c0:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 80012c2:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 80012c4:	f883 6029 	strb.w	r6, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012c8:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 80012cc:	6398      	str	r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012ce:	63d8      	str	r0, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80012d0:	6418      	str	r0, [r3, #64]	; 0x40
 80012d2:	f103 0320 	add.w	r3, r3, #32
  for (i = 0U; i < 15U; i++)
 80012d6:	d1f0      	bne.n	80012ba <HAL_PCD_Init+0x5c>
 80012d8:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012da:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 80012dc:	f882 3228 	strb.w	r3, [r2, #552]	; 0x228
 80012e0:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 80012e2:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 80012e4:	f882 7229 	strb.w	r7, [r2, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012e8:	f882 722b 	strb.w	r7, [r2, #555]	; 0x22b
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012ec:	f8c2 7238 	str.w	r7, [r2, #568]	; 0x238
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012f0:	f8c2 723c 	str.w	r7, [r2, #572]	; 0x23c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012f4:	f8c2 7240 	str.w	r7, [r2, #576]	; 0x240
 80012f8:	f102 0220 	add.w	r2, r2, #32
  for (i = 0U; i < 15U; i++)
 80012fc:	d1ee      	bne.n	80012dc <HAL_PCD_Init+0x7e>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80012fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001300:	466e      	mov	r6, sp
 8001302:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001304:	682b      	ldr	r3, [r5, #0]
 8001306:	6033      	str	r3, [r6, #0]
 8001308:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800130c:	6820      	ldr	r0, [r4, #0]
 800130e:	f001 fc98 	bl	8002c42 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 8001312:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8001314:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001318:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800131c:	69e3      	ldr	r3, [r4, #28]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d102      	bne.n	8001328 <HAL_PCD_Init+0xca>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001322:	4620      	mov	r0, r4
 8001324:	f000 fbb0 	bl	8001a88 <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8001328:	6a23      	ldr	r3, [r4, #32]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d102      	bne.n	8001334 <HAL_PCD_Init+0xd6>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 800132e:	4620      	mov	r0, r4
 8001330:	f000 fb96 	bl	8001a60 <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001334:	6820      	ldr	r0, [r4, #0]
 8001336:	f001 ff70 	bl	800321a <USB_DevDisconnect>

  return HAL_OK;
 800133a:	2000      	movs	r0, #0
}
 800133c:	b006      	add	sp, #24
 800133e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001342:	2001      	movs	r0, #1
 8001344:	e7fa      	b.n	800133c <HAL_PCD_Init+0xde>

08001346 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8001346:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 800134a:	2b01      	cmp	r3, #1
{
 800134c:	b510      	push	{r4, lr}
 800134e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001350:	d00c      	beq.n	800136c <HAL_PCD_Start+0x26>
 8001352:	2301      	movs	r3, #1
 8001354:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  (void)USB_DevConnect(hpcd->Instance);
 8001358:	6800      	ldr	r0, [r0, #0]
 800135a:	f001 ff53 	bl	8003204 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800135e:	6820      	ldr	r0, [r4, #0]
 8001360:	f001 fc58 	bl	8002c14 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001364:	2000      	movs	r0, #0
 8001366:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 800136a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800136c:	2002      	movs	r0, #2
}
 800136e:	bd10      	pop	{r4, pc}

08001370 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001370:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8001374:	2a01      	cmp	r2, #1
{
 8001376:	b510      	push	{r4, lr}
 8001378:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800137a:	d00b      	beq.n	8001394 <HAL_PCD_SetAddress+0x24>
 800137c:	2201      	movs	r2, #1
 800137e:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 8001382:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001386:	6800      	ldr	r0, [r0, #0]
 8001388:	f001 ff36 	bl	80031f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800138c:	2000      	movs	r0, #0
 800138e:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 8001392:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001394:	2002      	movs	r0, #2
  return HAL_OK;
}
 8001396:	bd10      	pop	{r4, pc}

08001398 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001398:	b570      	push	{r4, r5, r6, lr}
 800139a:	4604      	mov	r4, r0
 800139c:	f001 000f 	and.w	r0, r1, #15
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013a0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80013a4:	b2c5      	uxtb	r5, r0
 80013a6:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80013aa:	fb01 4105 	mla	r1, r1, r5, r4
    ep->is_in = 1U;
 80013ae:	bf15      	itete	ne
 80013b0:	eb04 1545 	addne.w	r5, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
    ep->is_in = 0U;
 80013b4:	eb04 1545 	addeq.w	r5, r4, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80013b8:	3128      	addne	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80013ba:	f501 710a 	addeq.w	r1, r1, #552	; 0x228
    ep->is_in = 1U;
 80013be:	bf15      	itete	ne
 80013c0:	2601      	movne	r6, #1
    ep->is_in = 0U;
 80013c2:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 80013c4:	f885 6029 	strbne.w	r6, [r5, #41]	; 0x29
    ep->is_in = 0U;
 80013c8:	f885 6229 	strbeq.w	r6, [r5, #553]	; 0x229
  }

  ep->num = ep_addr & 0xFU;
  ep->maxpacket = ep_mps;
 80013cc:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 80013ce:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 80013d0:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & 0xFU;
 80013d2:	b2c0      	uxtb	r0, r0
 80013d4:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 80013d6:	b102      	cbz	r2, 80013da <HAL_PCD_EP_Open+0x42>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80013d8:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80013da:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 80013dc:	bf04      	itt	eq
 80013de:	2300      	moveq	r3, #0
 80013e0:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 80013e2:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d009      	beq.n	80013fe <HAL_PCD_EP_Open+0x66>
 80013ea:	2301      	movs	r3, #1
 80013ec:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80013f0:	6820      	ldr	r0, [r4, #0]
 80013f2:	f001 fc43 	bl	8002c7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013f6:	2000      	movs	r0, #0
 80013f8:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428

  return ret;
 80013fc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80013fe:	2002      	movs	r0, #2
}
 8001400:	bd70      	pop	{r4, r5, r6, pc}

08001402 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001402:	f001 030f 	and.w	r3, r1, #15
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001406:	f011 0f80 	tst.w	r1, #128	; 0x80
 800140a:	b2da      	uxtb	r2, r3
 800140c:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001410:	fb01 0102 	mla	r1, r1, r2, r0
{
 8001414:	b510      	push	{r4, lr}
 8001416:	4604      	mov	r4, r0
    ep->is_in = 1U;
 8001418:	bf19      	ittee	ne
 800141a:	eb00 1242 	addne.w	r2, r0, r2, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800141e:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8001420:	f501 710a 	addeq.w	r1, r1, #552	; 0x228
    ep->is_in = 0U;
 8001424:	eb04 1242 	addeq.w	r2, r4, r2, lsl #5
    ep->is_in = 1U;
 8001428:	bf15      	itete	ne
 800142a:	2001      	movne	r0, #1
    ep->is_in = 0U;
 800142c:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 800142e:	f882 0029 	strbne.w	r0, [r2, #41]	; 0x29
    ep->is_in = 0U;
 8001432:	f882 0229 	strbeq.w	r0, [r2, #553]	; 0x229
  }
  ep->num   = ep_addr & 0xFU;
 8001436:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 8001438:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
 800143c:	2b01      	cmp	r3, #1
 800143e:	d009      	beq.n	8001454 <HAL_PCD_EP_Close+0x52>
 8001440:	2301      	movs	r3, #1
 8001442:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001446:	6820      	ldr	r0, [r4, #0]
 8001448:	f001 fd8e 	bl	8002f68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800144c:	2000      	movs	r0, #0
 800144e:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8001452:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001454:	2002      	movs	r0, #2
}
 8001456:	bd10      	pop	{r4, pc}

08001458 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001458:	b570      	push	{r4, r5, r6, lr}
 800145a:	f001 010f 	and.w	r1, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0xFU];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800145e:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 8001462:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8001464:	2500      	movs	r5, #0
  ep->is_in = 0U;
  ep->num = ep_addr & 0xFU;
 8001466:	f886 1228 	strb.w	r1, [r6, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 800146a:	f504 710a 	add.w	r1, r4, #552	; 0x228
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800146e:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8001470:	f8c6 223c 	str.w	r2, [r6, #572]	; 0x23c
  ep->xfer_len = len;
 8001474:	f8c6 3240 	str.w	r3, [r6, #576]	; 0x240
  ep->xfer_count = 0U;
 8001478:	f8c6 5244 	str.w	r5, [r6, #580]	; 0x244
  ep->is_in = 0U;
 800147c:	f886 5229 	strb.w	r5, [r6, #553]	; 0x229
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001480:	6800      	ldr	r0, [r0, #0]
 8001482:	f001 feeb 	bl	800325c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001486:	4628      	mov	r0, r5
 8001488:	bd70      	pop	{r4, r5, r6, pc}

0800148a <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return (uint16_t)hpcd->OUT_ep[ep_addr & 0xFU].xfer_count;
 800148a:	f001 010f 	and.w	r1, r1, #15
 800148e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8001492:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 8001496:	4770      	bx	lr

08001498 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001498:	b570      	push	{r4, r5, r6, lr}
 800149a:	f001 010f 	and.w	r1, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0xFU];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800149e:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 80014a2:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
 80014a4:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_count = 0U;
 80014a6:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80014a8:	2301      	movs	r3, #1
  ep->num = ep_addr & 0xFU;
 80014aa:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80014ae:	f104 0128 	add.w	r1, r4, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014b2:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80014b4:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_count = 0U;
 80014b6:	646e      	str	r6, [r5, #68]	; 0x44
  ep->is_in = 1U;
 80014b8:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014bc:	6800      	ldr	r0, [r0, #0]
 80014be:	f001 fecd 	bl	800325c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80014c2:	4630      	mov	r0, r6
 80014c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080014c8 <HAL_PCD_IRQHandler>:
{
 80014c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014cc:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80014ce:	6800      	ldr	r0, [r0, #0]
 80014d0:	f001 feab 	bl	800322a <USB_ReadInterrupts>
 80014d4:	0400      	lsls	r0, r0, #16
 80014d6:	f100 8230 	bmi.w	800193a <HAL_PCD_IRQHandler+0x472>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80014da:	6820      	ldr	r0, [r4, #0]
 80014dc:	f001 fea5 	bl	800322a <USB_ReadInterrupts>
 80014e0:	0541      	lsls	r1, r0, #21
 80014e2:	d50f      	bpl.n	8001504 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014e4:	6822      	ldr	r2, [r4, #0]
 80014e6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80014ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014ee:	041b      	lsls	r3, r3, #16
 80014f0:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 80014f2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014f4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80014f8:	f003 fb37 	bl	8004b6a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80014fc:	2100      	movs	r1, #0
 80014fe:	4620      	mov	r0, r4
 8001500:	f7ff ff36 	bl	8001370 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001504:	6820      	ldr	r0, [r4, #0]
 8001506:	f001 fe90 	bl	800322a <USB_ReadInterrupts>
 800150a:	0443      	lsls	r3, r0, #17
 800150c:	d508      	bpl.n	8001520 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800150e:	6822      	ldr	r2, [r4, #0]
 8001510:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001514:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001518:	041b      	lsls	r3, r3, #16
 800151a:	0c1b      	lsrs	r3, r3, #16
 800151c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001520:	6820      	ldr	r0, [r4, #0]
 8001522:	f001 fe82 	bl	800322a <USB_ReadInterrupts>
 8001526:	0487      	lsls	r7, r0, #18
 8001528:	d508      	bpl.n	800153c <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800152a:	6822      	ldr	r2, [r4, #0]
 800152c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001530:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001534:	041b      	lsls	r3, r3, #16
 8001536:	0c1b      	lsrs	r3, r3, #16
 8001538:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800153c:	6820      	ldr	r0, [r4, #0]
 800153e:	f001 fe74 	bl	800322a <USB_ReadInterrupts>
 8001542:	04c6      	lsls	r6, r0, #19
 8001544:	d526      	bpl.n	8001594 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001546:	6822      	ldr	r2, [r4, #0]
 8001548:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800154c:	f023 0304 	bic.w	r3, r3, #4
 8001550:	041b      	lsls	r3, r3, #16
 8001552:	0c1b      	lsrs	r3, r3, #16
 8001554:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001558:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800155c:	f023 0308 	bic.w	r3, r3, #8
 8001560:	041b      	lsls	r3, r3, #16
 8001562:	0c1b      	lsrs	r3, r3, #16
 8001564:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8001568:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
 800156c:	2b01      	cmp	r3, #1
 800156e:	d105      	bne.n	800157c <HAL_PCD_IRQHandler+0xb4>
      hpcd->LPM_State = LPM_L0;
 8001570:	2100      	movs	r1, #0
 8001572:	f884 1460 	strb.w	r1, [r4, #1120]	; 0x460
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001576:	4620      	mov	r0, r4
 8001578:	f003 fbfc 	bl	8004d74 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 800157c:	4620      	mov	r0, r4
 800157e:	f003 fb11 	bl	8004ba4 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001582:	6822      	ldr	r2, [r4, #0]
 8001584:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001588:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800158c:	041b      	lsls	r3, r3, #16
 800158e:	0c1b      	lsrs	r3, r3, #16
 8001590:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001594:	6820      	ldr	r0, [r4, #0]
 8001596:	f001 fe48 	bl	800322a <USB_ReadInterrupts>
 800159a:	0505      	lsls	r5, r0, #20
 800159c:	d51d      	bpl.n	80015da <HAL_PCD_IRQHandler+0x112>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800159e:	6820      	ldr	r0, [r4, #0]
 80015a0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	f043 0308 	orr.w	r3, r3, #8
 80015aa:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80015ae:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80015b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015b6:	041b      	lsls	r3, r3, #16
 80015b8:	0c1b      	lsrs	r3, r3, #16
 80015ba:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80015be:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	f043 0304 	orr.w	r3, r3, #4
 80015c8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 80015cc:	f001 fe2d 	bl	800322a <USB_ReadInterrupts>
 80015d0:	04c0      	lsls	r0, r0, #19
 80015d2:	d402      	bmi.n	80015da <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_SuspendCallback(hpcd);
 80015d4:	4620      	mov	r0, r4
 80015d6:	f003 fad5 	bl	8004b84 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80015da:	6820      	ldr	r0, [r4, #0]
 80015dc:	f001 fe25 	bl	800322a <USB_ReadInterrupts>
 80015e0:	0601      	lsls	r1, r0, #24
 80015e2:	d529      	bpl.n	8001638 <HAL_PCD_IRQHandler+0x170>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80015e4:	6823      	ldr	r3, [r4, #0]
 80015e6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80015ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015ee:	0412      	lsls	r2, r2, #16
 80015f0:	0c12      	lsrs	r2, r2, #16
 80015f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80015f6:	f894 2460 	ldrb.w	r2, [r4, #1120]	; 0x460
 80015fa:	2a00      	cmp	r2, #0
 80015fc:	f040 81a2 	bne.w	8001944 <HAL_PCD_IRQHandler+0x47c>
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001600:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001604:	b292      	uxth	r2, r2
 8001606:	f042 0204 	orr.w	r2, r2, #4
 800160a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800160e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001612:	b292      	uxth	r2, r2
 8001614:	f042 0208 	orr.w	r2, r2, #8
 8001618:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800161c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001620:	f3c3 038d 	ubfx	r3, r3, #2, #14
      hpcd->LPM_State = LPM_L1;
 8001624:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001626:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 800162a:	f884 1460 	strb.w	r1, [r4, #1120]	; 0x460
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800162e:	f8c4 3464 	str.w	r3, [r4, #1124]	; 0x464
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001632:	4620      	mov	r0, r4
 8001634:	f003 fb9e 	bl	8004d74 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001638:	6820      	ldr	r0, [r4, #0]
 800163a:	f001 fdf6 	bl	800322a <USB_ReadInterrupts>
 800163e:	0582      	lsls	r2, r0, #22
 8001640:	d50b      	bpl.n	800165a <HAL_PCD_IRQHandler+0x192>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001642:	6822      	ldr	r2, [r4, #0]
 8001644:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800164c:	041b      	lsls	r3, r3, #16
 800164e:	0c1b      	lsrs	r3, r3, #16
 8001650:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001654:	4620      	mov	r0, r4
 8001656:	f003 fa84 	bl	8004b62 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800165a:	6820      	ldr	r0, [r4, #0]
 800165c:	f001 fde5 	bl	800322a <USB_ReadInterrupts>
 8001660:	05c3      	lsls	r3, r0, #23
 8001662:	d508      	bpl.n	8001676 <HAL_PCD_IRQHandler+0x1ae>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001664:	6822      	ldr	r2, [r4, #0]
 8001666:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800166a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800166e:	041b      	lsls	r3, r3, #16
 8001670:	0c1b      	lsrs	r3, r3, #16
 8001672:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8001676:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 800167a:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 800167e:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 8001680:	f011 070f 	ands.w	r7, r1, #15
 8001684:	f040 80a5 	bne.w	80017d2 <HAL_PCD_IRQHandler+0x30a>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001688:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800168a:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800168e:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001690:	d129      	bne.n	80016e6 <HAL_PCD_IRQHandler+0x21e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001692:	ea03 030a 	and.w	r3, r3, sl
 8001696:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001698:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800169c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80016a0:	f200 4002 	addw	r0, r0, #1026	; 0x402
 80016a4:	fa10 f083 	uxtah	r0, r0, r3
 80016a8:	f830 3032 	ldrh.w	r3, [r0, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 80016ac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016b2:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80016b4:	4413      	add	r3, r2
 80016b6:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80016b8:	4620      	mov	r0, r4
 80016ba:	f003 fa4b 	bl	8004b54 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80016be:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80016c2:	b153      	cbz	r3, 80016da <HAL_PCD_IRQHandler+0x212>
 80016c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80016c6:	b942      	cbnz	r2, 80016da <HAL_PCD_IRQHandler+0x212>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80016c8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80016cc:	6821      	ldr	r1, [r4, #0]
 80016ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d2:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80016d6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80016da:	6820      	ldr	r0, [r4, #0]
 80016dc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80016e0:	041a      	lsls	r2, r3, #16
 80016e2:	d4ca      	bmi.n	800167a <HAL_PCD_IRQHandler+0x1b2>
 80016e4:	e6f9      	b.n	80014da <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80016e6:	051a      	lsls	r2, r3, #20
 80016e8:	d51e      	bpl.n	8001728 <HAL_PCD_IRQHandler+0x260>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016ea:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80016ee:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80016f2:	f200 4106 	addw	r1, r0, #1030	; 0x406
 80016f6:	fa11 f383 	uxtah	r3, r1, r3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 80016fa:	f504 6186 	add.w	r1, r4, #1072	; 0x430
 80016fe:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8001702:	f8b4 222e 	ldrh.w	r2, [r4, #558]	; 0x22e
 8001706:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800170a:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 800170e:	f001 fe8d 	bl	800342c <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001712:	6822      	ldr	r2, [r4, #0]
 8001714:	8813      	ldrh	r3, [r2, #0]
 8001716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800171a:	051b      	lsls	r3, r3, #20
 800171c:	0d1b      	lsrs	r3, r3, #20
 800171e:	8013      	strh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001720:	4620      	mov	r0, r4
 8001722:	f003 fa09 	bl	8004b38 <HAL_PCD_SetupStageCallback>
 8001726:	e7d8      	b.n	80016da <HAL_PCD_IRQHandler+0x212>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001728:	041f      	lsls	r7, r3, #16
 800172a:	d5d6      	bpl.n	80016da <HAL_PCD_IRQHandler+0x212>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800172c:	8803      	ldrh	r3, [r0, #0]
 800172e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001732:	051b      	lsls	r3, r3, #20
 8001734:	0d1b      	lsrs	r3, r3, #20
 8001736:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001738:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800173c:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8001740:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8001744:	fa11 f383 	uxtah	r3, r1, r3
 8001748:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 800174c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001750:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244

          if (ep->xfer_count != 0U)
 8001754:	b163      	cbz	r3, 8001770 <HAL_PCD_IRQHandler+0x2a8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 8001756:	f8b4 222e 	ldrh.w	r2, [r4, #558]	; 0x22e
 800175a:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 800175e:	f001 fe65 	bl	800342c <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001762:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8001766:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 800176a:	4413      	add	r3, r2
 800176c:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001770:	2100      	movs	r1, #0
 8001772:	4620      	mov	r0, r4
 8001774:	f003 f9e6 	bl	8004b44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001778:	6822      	ldr	r2, [r4, #0]
 800177a:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
 800177e:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001782:	f202 4506 	addw	r5, r2, #1030	; 0x406
 8001786:	b289      	uxth	r1, r1
 8001788:	b953      	cbnz	r3, 80017a0 <HAL_PCD_IRQHandler+0x2d8>
 800178a:	5a6b      	ldrh	r3, [r5, r1]
 800178c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001790:	049b      	lsls	r3, r3, #18
 8001792:	0c9b      	lsrs	r3, r3, #18
 8001794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800179c:	526b      	strh	r3, [r5, r1]
 800179e:	e007      	b.n	80017b0 <HAL_PCD_IRQHandler+0x2e8>
 80017a0:	2b3d      	cmp	r3, #61	; 0x3d
 80017a2:	d811      	bhi.n	80017c8 <HAL_PCD_IRQHandler+0x300>
 80017a4:	0858      	lsrs	r0, r3, #1
 80017a6:	07de      	lsls	r6, r3, #31
 80017a8:	bf48      	it	mi
 80017aa:	3001      	addmi	r0, #1
 80017ac:	0280      	lsls	r0, r0, #10
 80017ae:	5268      	strh	r0, [r5, r1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80017b0:	8813      	ldrh	r3, [r2, #0]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	ea03 030b 	and.w	r3, r3, fp
 80017b8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80017bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c4:	8013      	strh	r3, [r2, #0]
 80017c6:	e788      	b.n	80016da <HAL_PCD_IRQHandler+0x212>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80017c8:	4860      	ldr	r0, [pc, #384]	; (800194c <HAL_PCD_IRQHandler+0x484>)
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	ea40 2383 	orr.w	r3, r0, r3, lsl #10
 80017d0:	e7e4      	b.n	800179c <HAL_PCD_IRQHandler+0x2d4>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80017d2:	b23e      	sxth	r6, r7
 80017d4:	f830 9026 	ldrh.w	r9, [r0, r6, lsl #2]
 80017d8:	fa1f f989 	uxth.w	r9, r9
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017dc:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 80017e0:	d03e      	beq.n	8001860 <HAL_PCD_IRQHandler+0x398>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80017e2:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 80017e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017ea:	051b      	lsls	r3, r3, #20
 80017ec:	0d1b      	lsrs	r3, r3, #20
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80017ee:	ea4f 1847 	mov.w	r8, r7, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80017f2:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80017f6:	eb04 0108 	add.w	r1, r4, r8
 80017fa:	f891 3234 	ldrb.w	r3, [r1, #564]	; 0x234
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d157      	bne.n	80018b2 <HAL_PCD_IRQHandler+0x3ea>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001802:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001806:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 800180a:	f200 4506 	addw	r5, r0, #1030	; 0x406
 800180e:	fa15 f383 	uxtah	r3, r5, r3
 8001812:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8001816:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 800181a:	b135      	cbz	r5, 800182a <HAL_PCD_IRQHandler+0x362>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800181c:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
 8001820:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8001824:	462b      	mov	r3, r5
 8001826:	f001 fe01 	bl	800342c <USB_ReadPMA>
 800182a:	eb04 1346 	add.w	r3, r4, r6, lsl #5
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
        ep->xfer_buff += count;
 800182e:	eb04 0108 	add.w	r1, r4, r8
        ep->xfer_count += count;
 8001832:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8001836:	442a      	add	r2, r5
 8001838:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
        ep->xfer_buff += count;
 800183c:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
 8001840:	442a      	add	r2, r5
 8001842:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001846:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800184a:	b11b      	cbz	r3, 8001854 <HAL_PCD_IRQHandler+0x38c>
 800184c:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8001850:	4285      	cmp	r5, r0
 8001852:	d269      	bcs.n	8001928 <HAL_PCD_IRQHandler+0x460>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001854:	44a0      	add	r8, r4
 8001856:	4620      	mov	r0, r4
 8001858:	f898 1228 	ldrb.w	r1, [r8, #552]	; 0x228
 800185c:	f003 f972 	bl	8004b44 <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001860:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001864:	f43f af39 	beq.w	80016da <HAL_PCD_IRQHandler+0x212>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001868:	6823      	ldr	r3, [r4, #0]
 800186a:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 800186e:	b292      	uxth	r2, r2
 8001870:	ea02 020a 	and.w	r2, r2, sl
 8001874:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001878:	eb04 1747 	add.w	r7, r4, r7, lsl #5
 800187c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001880:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001884:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001888:	fa13 f382 	uxtah	r3, r3, r2
 800188c:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8001890:	f833 2031 	ldrh.w	r2, [r3, r1, lsl #3]
 8001894:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001898:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800189a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800189c:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80018a0:	441a      	add	r2, r3
 80018a2:	63fa      	str	r2, [r7, #60]	; 0x3c

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80018a4:	6c33      	ldr	r3, [r6, #64]	; 0x40
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80018a6:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d143      	bne.n	8001934 <HAL_PCD_IRQHandler+0x46c>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80018ac:	f003 f952 	bl	8004b54 <HAL_PCD_DataInStageCallback>
 80018b0:	e713      	b.n	80016da <HAL_PCD_IRQHandler+0x212>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80018b2:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 80018b6:	b213      	sxth	r3, r2
 80018b8:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 80018bc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018c0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80018c4:	d022      	beq.n	800190c <HAL_PCD_IRQHandler+0x444>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018c6:	f200 4502 	addw	r5, r0, #1026	; 0x402
 80018ca:	fa15 f383 	uxtah	r3, r5, r3
 80018ce:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 80018d2:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 80018d6:	b135      	cbz	r5, 80018e6 <HAL_PCD_IRQHandler+0x41e>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80018d8:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 80018dc:	462b      	mov	r3, r5
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80018de:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80018e2:	f001 fda3 	bl	800342c <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);
 80018e6:	eb04 0308 	add.w	r3, r4, r8
 80018ea:	6822      	ldr	r2, [r4, #0]
 80018ec:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 80018f0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001902:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001906:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800190a:	e78e      	b.n	800182a <HAL_PCD_IRQHandler+0x362>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800190c:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001910:	fa15 f383 	uxtah	r3, r5, r3
 8001914:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8001918:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 800191c:	2d00      	cmp	r5, #0
 800191e:	d0e2      	beq.n	80018e6 <HAL_PCD_IRQHandler+0x41e>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001920:	462b      	mov	r3, r5
 8001922:	f8b1 2232 	ldrh.w	r2, [r1, #562]	; 0x232
 8001926:	e7da      	b.n	80018de <HAL_PCD_IRQHandler+0x416>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001928:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 800192c:	4620      	mov	r0, r4
 800192e:	f7ff fd93 	bl	8001458 <HAL_PCD_EP_Receive>
 8001932:	e795      	b.n	8001860 <HAL_PCD_IRQHandler+0x398>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001934:	f7ff fdb0 	bl	8001498 <HAL_PCD_EP_Transmit>
 8001938:	e6cf      	b.n	80016da <HAL_PCD_IRQHandler+0x212>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800193a:	f8df a014 	ldr.w	sl, [pc, #20]	; 8001950 <HAL_PCD_IRQHandler+0x488>
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800193e:	f8df b014 	ldr.w	fp, [pc, #20]	; 8001954 <HAL_PCD_IRQHandler+0x48c>
 8001942:	e6ca      	b.n	80016da <HAL_PCD_IRQHandler+0x212>
      HAL_PCD_SuspendCallback(hpcd);
 8001944:	4620      	mov	r0, r4
 8001946:	f003 f91d 	bl	8004b84 <HAL_PCD_SuspendCallback>
 800194a:	e675      	b.n	8001638 <HAL_PCD_IRQHandler+0x170>
 800194c:	ffff8000 	.word	0xffff8000
 8001950:	ffff8f0f 	.word	0xffff8f0f
 8001954:	ffffbf8f 	.word	0xffffbf8f

08001958 <HAL_PCD_EP_SetStall>:
{
 8001958:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 800195a:	6843      	ldr	r3, [r0, #4]
 800195c:	f001 050f 	and.w	r5, r1, #15
 8001960:	429d      	cmp	r5, r3
{
 8001962:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8001964:	d82d      	bhi.n	80019c2 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8001966:	f011 0f80 	tst.w	r1, #128	; 0x80
 800196a:	f04f 0320 	mov.w	r3, #32
 800196e:	d01e      	beq.n	80019ae <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 8001970:	eb00 1245 	add.w	r2, r0, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001974:	fb03 0305 	mla	r3, r3, r5, r0
    ep->is_in = 1U;
 8001978:	2101      	movs	r1, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800197a:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 800197c:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
  ep->is_stall = 1U;
 8001980:	2201      	movs	r2, #1
 8001982:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 8001984:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8001986:	f894 1428 	ldrb.w	r1, [r4, #1064]	; 0x428
 800198a:	4291      	cmp	r1, r2
 800198c:	d01b      	beq.n	80019c6 <HAL_PCD_EP_SetStall+0x6e>
 800198e:	f884 2428 	strb.w	r2, [r4, #1064]	; 0x428
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001992:	4619      	mov	r1, r3
 8001994:	6820      	ldr	r0, [r4, #0]
 8001996:	f001 fbc7 	bl	8003128 <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 800199a:	b925      	cbnz	r5, 80019a6 <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800199c:	f504 6186 	add.w	r1, r4, #1072	; 0x430
 80019a0:	6820      	ldr	r0, [r4, #0]
 80019a2:	f001 fc46 	bl	8003232 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80019a6:	2000      	movs	r0, #0
 80019a8:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80019ac:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80019ae:	fb03 0301 	mla	r3, r3, r1, r0
    ep->is_in = 0U;
 80019b2:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80019b6:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80019b8:	f503 730a 	add.w	r3, r3, #552	; 0x228
    ep->is_in = 0U;
 80019bc:	f881 2229 	strb.w	r2, [r1, #553]	; 0x229
 80019c0:	e7de      	b.n	8001980 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 80019c2:	2001      	movs	r0, #1
 80019c4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80019c6:	2002      	movs	r0, #2
}
 80019c8:	bd38      	pop	{r3, r4, r5, pc}

080019ca <HAL_PCD_EP_ClrStall>:
{
 80019ca:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019cc:	6843      	ldr	r3, [r0, #4]
 80019ce:	f001 020f 	and.w	r2, r1, #15
 80019d2:	429a      	cmp	r2, r3
{
 80019d4:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019d6:	d827      	bhi.n	8001a28 <HAL_PCD_EP_ClrStall+0x5e>
  if ((0x80U & ep_addr) == 0x80U)
 80019d8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80019dc:	f04f 0120 	mov.w	r1, #32
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80019e0:	fb01 0102 	mla	r1, r1, r2, r0
 80019e4:	ea4f 1342 	mov.w	r3, r2, lsl #5
    ep->is_in = 1U;
 80019e8:	bf19      	ittee	ne
 80019ea:	181b      	addne	r3, r3, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80019ec:	3128      	addne	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80019ee:	f501 710a 	addeq.w	r1, r1, #552	; 0x228
    ep->is_in = 0U;
 80019f2:	191b      	addeq	r3, r3, r4
    ep->is_in = 1U;
 80019f4:	bf14      	ite	ne
 80019f6:	2001      	movne	r0, #1
    ep->is_in = 0U;
 80019f8:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 80019fa:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 80019fe:	bf14      	ite	ne
 8001a00:	f883 0029 	strbne.w	r0, [r3, #41]	; 0x29
    ep->is_in = 0U;
 8001a04:	f883 0229 	strbeq.w	r0, [r3, #553]	; 0x229
  ep->is_stall = 0U;
 8001a08:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & 0xFU;
 8001a0a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001a0c:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d00b      	beq.n	8001a2c <HAL_PCD_EP_ClrStall+0x62>
 8001a14:	2301      	movs	r3, #1
 8001a16:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a1a:	6820      	ldr	r0, [r4, #0]
 8001a1c:	f001 fba5 	bl	800316a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a20:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
  return HAL_OK;
 8001a24:	4628      	mov	r0, r5
 8001a26:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001a28:	2001      	movs	r0, #1
 8001a2a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001a2c:	2002      	movs	r0, #2
}
 8001a2e:	bd38      	pop	{r3, r4, r5, pc}

08001a30 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001a30:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001a34:	bf1b      	ittet	ne
 8001a36:	f001 010f 	andne.w	r1, r1, #15
 8001a3a:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a3e:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001a42:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001a44:	bf08      	it	eq
 8001a46:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001a4a:	b91a      	cbnz	r2, 8001a54 <HAL_PCDEx_PMAConfig+0x24>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001a4c:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001a4e:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8001a50:	2000      	movs	r0, #0
 8001a52:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8001a54:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001a56:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001a58:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8001a5a:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001a5c:	8143      	strh	r3, [r0, #10]
 8001a5e:	e7f7      	b.n	8001a50 <HAL_PCDEx_PMAConfig+0x20>

08001a60 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_TypeDef *USBx = hpcd->Instance;
 8001a60:	6802      	ldr	r2, [r0, #0]
  hpcd->battery_charging_active = 1U;
 8001a62:	2301      	movs	r3, #1
 8001a64:	f8c0 346c 	str.w	r3, [r0, #1132]	; 0x46c

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8001a68:	f8b2 3058 	ldrh.w	r3, [r2, #88]	; 0x58
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 8001a76:	f8b2 3058 	ldrh.w	r3, [r2, #88]	; 0x58
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58

  return HAL_OK;
}
 8001a84:	2000      	movs	r0, #0
 8001a86:	4770      	bx	lr

08001a88 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8001a88:	6802      	ldr	r2, [r0, #0]
{
 8001a8a:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	f8c0 1468 	str.w	r1, [r0, #1128]	; 0x468
  hpcd->LPM_State = LPM_L0;
 8001a92:	2000      	movs	r0, #0
 8001a94:	f883 0460 	strb.w	r0, [r3, #1120]	; 0x460

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001a98:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001aa4:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	f043 0302 	orr.w	r3, r3, #2
 8001aae:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 8001ab4:	4a02      	ldr	r2, [pc, #8]	; (8001ac0 <HAL_PWR_EnableBkUpAccess+0xc>)
 8001ab6:	6813      	ldr	r3, [r2, #0]
 8001ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	4770      	bx	lr
 8001ac0:	40007000 	.word	0x40007000

08001ac4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ac4:	4b02      	ldr	r3, [pc, #8]	; (8001ad0 <HAL_PWREx_GetVoltageRange+0xc>)
 8001ac6:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8001ac8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40007000 	.word	0x40007000

08001ad4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ad4:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad6:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001adc:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ae0:	d11a      	bne.n	8001b18 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ae2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001ae6:	d013      	beq.n	8001b10 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae8:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001aea:	4912      	ldr	r1, [pc, #72]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aec:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001af4:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001af6:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	fbb2 f1f1 	udiv	r1, r2, r1
 8001afe:	2232      	movs	r2, #50	; 0x32
 8001b00:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8001b02:	b112      	cbz	r2, 8001b0a <HAL_PWREx_ControlVoltageScaling+0x36>
 8001b04:	6959      	ldr	r1, [r3, #20]
 8001b06:	0549      	lsls	r1, r1, #21
 8001b08:	d404      	bmi.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	055b      	lsls	r3, r3, #21
 8001b0e:	d40d      	bmi.n	8001b2c <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8001b10:	2000      	movs	r0, #0
 8001b12:	4770      	bx	lr
        wait_loop_index--;
 8001b14:	3a01      	subs	r2, #1
 8001b16:	e7f4      	b.n	8001b02 <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b18:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b1c:	bf1f      	itttt	ne
 8001b1e:	681a      	ldrne	r2, [r3, #0]
 8001b20:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001b24:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001b28:	601a      	strne	r2, [r3, #0]
 8001b2a:	e7f1      	b.n	8001b10 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8001b2c:	2003      	movs	r0, #3
}  
 8001b2e:	4770      	bx	lr
 8001b30:	40007000 	.word	0x40007000
 8001b34:	000f4240 	.word	0x000f4240
 8001b38:	20000134 	.word	0x20000134

08001b3c <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.  
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001b3c:	4a02      	ldr	r2, [pc, #8]	; (8001b48 <HAL_PWREx_EnableVddUSB+0xc>)
 8001b3e:	6853      	ldr	r3, [r2, #4]
 8001b40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b44:	6053      	str	r3, [r2, #4]
 8001b46:	4770      	bx	lr
 8001b48:	40007000 	.word	0x40007000

08001b4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b4e:	4d1e      	ldr	r5, [pc, #120]	; (8001bc8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001b50:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001b52:	00da      	lsls	r2, r3, #3
{
 8001b54:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b56:	d518      	bpl.n	8001b8a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b58:	f7ff ffb4 	bl	8001ac4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b5c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001b60:	d123      	bne.n	8001baa <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b62:	2c80      	cmp	r4, #128	; 0x80
 8001b64:	d929      	bls.n	8001bba <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b66:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b68:	bf8c      	ite	hi
 8001b6a:	2002      	movhi	r0, #2
 8001b6c:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b6e:	4a17      	ldr	r2, [pc, #92]	; (8001bcc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001b70:	6813      	ldr	r3, [r2, #0]
 8001b72:	f023 0307 	bic.w	r3, r3, #7
 8001b76:	4303      	orrs	r3, r0
 8001b78:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b7a:	6813      	ldr	r3, [r2, #0]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001b80:	1a18      	subs	r0, r3, r0
 8001b82:	bf18      	it	ne
 8001b84:	2001      	movne	r0, #1
 8001b86:	b003      	add	sp, #12
 8001b88:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b90:	65ab      	str	r3, [r5, #88]	; 0x58
 8001b92:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001b9c:	f7ff ff92 	bl	8001ac4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ba0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	65ab      	str	r3, [r5, #88]	; 0x58
 8001ba8:	e7d8      	b.n	8001b5c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001baa:	2c80      	cmp	r4, #128	; 0x80
 8001bac:	d807      	bhi.n	8001bbe <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001bae:	d008      	beq.n	8001bc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001bb0:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001bb4:	4258      	negs	r0, r3
 8001bb6:	4158      	adcs	r0, r3
 8001bb8:	e7d9      	b.n	8001b6e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bba:	2000      	movs	r0, #0
 8001bbc:	e7d7      	b.n	8001b6e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001bbe:	2003      	movs	r0, #3
 8001bc0:	e7d5      	b.n	8001b6e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bc2:	2002      	movs	r0, #2
 8001bc4:	e7d3      	b.n	8001b6e <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40022000 	.word	0x40022000

08001bd0 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001bd0:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	f012 0f0c 	tst.w	r2, #12
{
 8001bd8:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001bda:	d009      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001be2:	2a0c      	cmp	r2, #12
 8001be4:	d12d      	bne.n	8001c42 <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	f002 0203 	and.w	r2, r2, #3
 8001bec:	2a01      	cmp	r2, #1
 8001bee:	d128      	bne.n	8001c42 <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001bf0:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001bf2:	4928      	ldr	r1, [pc, #160]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001bf4:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bf6:	bf55      	itete	pl
 8001bf8:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bfc:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bfe:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c02:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8001c06:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001c0a:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8001c0c:	f011 0f0c 	tst.w	r1, #12
 8001c10:	bf0c      	ite	eq
 8001c12:	4610      	moveq	r0, r2
 8001c14:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c16:	6899      	ldr	r1, [r3, #8]
 8001c18:	f001 010c 	and.w	r1, r1, #12
 8001c1c:	290c      	cmp	r1, #12
 8001c1e:	d130      	bne.n	8001c82 <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c20:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c22:	68d8      	ldr	r0, [r3, #12]
 8001c24:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001c28:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c2a:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 8001c2e:	2802      	cmp	r0, #2
 8001c30:	d019      	beq.n	8001c66 <HAL_RCC_GetSysClockFreq+0x96>
 8001c32:	2803      	cmp	r0, #3
 8001c34:	d026      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c36:	fbb2 f2f1 	udiv	r2, r2, r1
 8001c3a:	68d8      	ldr	r0, [r3, #12]
 8001c3c:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001c40:	e017      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	f002 020c 	and.w	r2, r2, #12
 8001c48:	2a04      	cmp	r2, #4
 8001c4a:	d007      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	f002 020c 	and.w	r2, r2, #12
 8001c52:	2a08      	cmp	r2, #8
 8001c54:	d104      	bne.n	8001c60 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8001c56:	4810      	ldr	r0, [pc, #64]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001c58:	2200      	movs	r2, #0
 8001c5a:	e7dc      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8001c5c:	480f      	ldr	r0, [pc, #60]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c5e:	e7fb      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8001c60:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001c62:	4602      	mov	r2, r0
 8001c64:	e7d7      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c6a:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c6e:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001c78:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c7a:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c7c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001c7e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001c82:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	4804      	ldr	r0, [pc, #16]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c88:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001c8c:	e7ef      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x9e>
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000
 8001c94:	08008c8c 	.word	0x08008c8c
 8001c98:	007a1200 	.word	0x007a1200
 8001c9c:	00f42400 	.word	0x00f42400

08001ca0 <HAL_RCC_OscConfig>:
{
 8001ca0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(RCC_OscInitStruct == NULL)
 8001ca4:	4605      	mov	r5, r0
 8001ca6:	b908      	cbnz	r0, 8001cac <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8001ca8:	2001      	movs	r0, #1
 8001caa:	e08d      	b.n	8001dc8 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cac:	6803      	ldr	r3, [r0, #0]
 8001cae:	06d8      	lsls	r0, r3, #27
 8001cb0:	d538      	bpl.n	8001d24 <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001cb2:	4cab      	ldr	r4, [pc, #684]	; (8001f60 <HAL_RCC_OscConfig+0x2c0>)
 8001cb4:	68a3      	ldr	r3, [r4, #8]
 8001cb6:	f013 0f0c 	tst.w	r3, #12
 8001cba:	d161      	bne.n	8001d80 <HAL_RCC_OscConfig+0xe0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	0799      	lsls	r1, r3, #30
 8001cc0:	d502      	bpl.n	8001cc8 <HAL_RCC_OscConfig+0x28>
 8001cc2:	69ab      	ldr	r3, [r5, #24]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0ef      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	6a28      	ldr	r0, [r5, #32]
 8001ccc:	071a      	lsls	r2, r3, #28
 8001cce:	bf56      	itet	pl
 8001cd0:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001cd4:	6823      	ldrmi	r3, [r4, #0]
 8001cd6:	091b      	lsrpl	r3, r3, #4
 8001cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cdc:	4283      	cmp	r3, r0
 8001cde:	d23a      	bcs.n	8001d56 <HAL_RCC_OscConfig+0xb6>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ce0:	f7ff ff34 	bl	8001b4c <RCC_SetFlashLatencyFromMSIRange>
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	d1df      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce8:	6823      	ldr	r3, [r4, #0]
 8001cea:	f043 0308 	orr.w	r3, r3, #8
 8001cee:	6023      	str	r3, [r4, #0]
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	6a2a      	ldr	r2, [r5, #32]
 8001cf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cfc:	6863      	ldr	r3, [r4, #4]
 8001cfe:	69ea      	ldr	r2, [r5, #28]
 8001d00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d08:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d0a:	f7ff ff61 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8001d0e:	68a3      	ldr	r3, [r4, #8]
 8001d10:	4a94      	ldr	r2, [pc, #592]	; (8001f64 <HAL_RCC_OscConfig+0x2c4>)
 8001d12:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d16:	5cd3      	ldrb	r3, [r2, r3]
 8001d18:	40d8      	lsrs	r0, r3
 8001d1a:	4b93      	ldr	r3, [pc, #588]	; (8001f68 <HAL_RCC_OscConfig+0x2c8>)
 8001d1c:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f7ff f916 	bl	8000f50 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d24:	682b      	ldr	r3, [r5, #0]
 8001d26:	07d8      	lsls	r0, r3, #31
 8001d28:	d461      	bmi.n	8001dee <HAL_RCC_OscConfig+0x14e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2a:	682b      	ldr	r3, [r5, #0]
 8001d2c:	0799      	lsls	r1, r3, #30
 8001d2e:	f100 80a9 	bmi.w	8001e84 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d32:	682b      	ldr	r3, [r5, #0]
 8001d34:	071a      	lsls	r2, r3, #28
 8001d36:	f100 80e7 	bmi.w	8001f08 <HAL_RCC_OscConfig+0x268>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d3a:	682b      	ldr	r3, [r5, #0]
 8001d3c:	075b      	lsls	r3, r3, #29
 8001d3e:	f100 8115 	bmi.w	8001f6c <HAL_RCC_OscConfig+0x2cc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d42:	682b      	ldr	r3, [r5, #0]
 8001d44:	069a      	lsls	r2, r3, #26
 8001d46:	f100 817c 	bmi.w	8002042 <HAL_RCC_OscConfig+0x3a2>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d4a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001d4c:	2a00      	cmp	r2, #0
 8001d4e:	f040 81a3 	bne.w	8002098 <HAL_RCC_OscConfig+0x3f8>
  return HAL_OK;
 8001d52:	2000      	movs	r0, #0
 8001d54:	e038      	b.n	8001dc8 <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	f043 0308 	orr.w	r3, r3, #8
 8001d5c:	6023      	str	r3, [r4, #0]
 8001d5e:	6823      	ldr	r3, [r4, #0]
 8001d60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d64:	4303      	orrs	r3, r0
 8001d66:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d68:	6863      	ldr	r3, [r4, #4]
 8001d6a:	69ea      	ldr	r2, [r5, #28]
 8001d6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d74:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d76:	f7ff fee9 	bl	8001b4c <RCC_SetFlashLatencyFromMSIRange>
 8001d7a:	2800      	cmp	r0, #0
 8001d7c:	d0c5      	beq.n	8001d0a <HAL_RCC_OscConfig+0x6a>
 8001d7e:	e793      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d80:	69ab      	ldr	r3, [r5, #24]
 8001d82:	b323      	cbz	r3, 8001dce <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_ENABLE();
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d8c:	f7ff f908 	bl	8000fa0 <HAL_GetTick>
 8001d90:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001d92:	6823      	ldr	r3, [r4, #0]
 8001d94:	079b      	lsls	r3, r3, #30
 8001d96:	d511      	bpl.n	8001dbc <HAL_RCC_OscConfig+0x11c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d98:	6823      	ldr	r3, [r4, #0]
 8001d9a:	f043 0308 	orr.w	r3, r3, #8
 8001d9e:	6023      	str	r3, [r4, #0]
 8001da0:	6823      	ldr	r3, [r4, #0]
 8001da2:	6a2a      	ldr	r2, [r5, #32]
 8001da4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001da8:	4313      	orrs	r3, r2
 8001daa:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dac:	6863      	ldr	r3, [r4, #4]
 8001dae:	69ea      	ldr	r2, [r5, #28]
 8001db0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001db4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001db8:	6063      	str	r3, [r4, #4]
 8001dba:	e7b3      	b.n	8001d24 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dbc:	f7ff f8f0 	bl	8000fa0 <HAL_GetTick>
 8001dc0:	1b80      	subs	r0, r0, r6
 8001dc2:	2802      	cmp	r0, #2
 8001dc4:	d9e5      	bls.n	8001d92 <HAL_RCC_OscConfig+0xf2>
            return HAL_TIMEOUT;
 8001dc6:	2003      	movs	r0, #3
}
 8001dc8:	b002      	add	sp, #8
 8001dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_MSI_DISABLE();
 8001dce:	6823      	ldr	r3, [r4, #0]
 8001dd0:	f023 0301 	bic.w	r3, r3, #1
 8001dd4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001dd6:	f7ff f8e3 	bl	8000fa0 <HAL_GetTick>
 8001dda:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	079f      	lsls	r7, r3, #30
 8001de0:	d5a0      	bpl.n	8001d24 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001de2:	f7ff f8dd 	bl	8000fa0 <HAL_GetTick>
 8001de6:	1b80      	subs	r0, r0, r6
 8001de8:	2802      	cmp	r0, #2
 8001dea:	d9f7      	bls.n	8001ddc <HAL_RCC_OscConfig+0x13c>
 8001dec:	e7eb      	b.n	8001dc6 <HAL_RCC_OscConfig+0x126>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001dee:	4c5c      	ldr	r4, [pc, #368]	; (8001f60 <HAL_RCC_OscConfig+0x2c0>)
 8001df0:	68a3      	ldr	r3, [r4, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d009      	beq.n	8001e0e <HAL_RCC_OscConfig+0x16e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dfa:	68a3      	ldr	r3, [r4, #8]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001e00:	2b0c      	cmp	r3, #12
 8001e02:	d10b      	bne.n	8001e1c <HAL_RCC_OscConfig+0x17c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e04:	68e3      	ldr	r3, [r4, #12]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d106      	bne.n	8001e1c <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0e:	6823      	ldr	r3, [r4, #0]
 8001e10:	039a      	lsls	r2, r3, #14
 8001e12:	d58a      	bpl.n	8001d2a <HAL_RCC_OscConfig+0x8a>
 8001e14:	686b      	ldr	r3, [r5, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d187      	bne.n	8001d2a <HAL_RCC_OscConfig+0x8a>
 8001e1a:	e745      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e1c:	686b      	ldr	r3, [r5, #4]
 8001e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e22:	d110      	bne.n	8001e46 <HAL_RCC_OscConfig+0x1a6>
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f8b8 	bl	8000fa0 <HAL_GetTick>
 8001e30:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001e32:	6823      	ldr	r3, [r4, #0]
 8001e34:	039b      	lsls	r3, r3, #14
 8001e36:	f53f af78 	bmi.w	8001d2a <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e3a:	f7ff f8b1 	bl	8000fa0 <HAL_GetTick>
 8001e3e:	1b80      	subs	r0, r0, r6
 8001e40:	2864      	cmp	r0, #100	; 0x64
 8001e42:	d9f6      	bls.n	8001e32 <HAL_RCC_OscConfig+0x192>
 8001e44:	e7bf      	b.n	8001dc6 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e4a:	d104      	bne.n	8001e56 <HAL_RCC_OscConfig+0x1b6>
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e52:	6023      	str	r3, [r4, #0]
 8001e54:	e7e6      	b.n	8001e24 <HAL_RCC_OscConfig+0x184>
 8001e56:	6822      	ldr	r2, [r4, #0]
 8001e58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e5c:	6022      	str	r2, [r4, #0]
 8001e5e:	6822      	ldr	r2, [r4, #0]
 8001e60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e64:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1e0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8001e6a:	f7ff f899 	bl	8000fa0 <HAL_GetTick>
 8001e6e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001e70:	6823      	ldr	r3, [r4, #0]
 8001e72:	039f      	lsls	r7, r3, #14
 8001e74:	f57f af59 	bpl.w	8001d2a <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e78:	f7ff f892 	bl	8000fa0 <HAL_GetTick>
 8001e7c:	1b80      	subs	r0, r0, r6
 8001e7e:	2864      	cmp	r0, #100	; 0x64
 8001e80:	d9f6      	bls.n	8001e70 <HAL_RCC_OscConfig+0x1d0>
 8001e82:	e7a0      	b.n	8001dc6 <HAL_RCC_OscConfig+0x126>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001e84:	4c36      	ldr	r4, [pc, #216]	; (8001f60 <HAL_RCC_OscConfig+0x2c0>)
 8001e86:	68a3      	ldr	r3, [r4, #8]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d009      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x204>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e90:	68a3      	ldr	r3, [r4, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001e96:	2b0c      	cmp	r3, #12
 8001e98:	d113      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x222>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e9a:	68e3      	ldr	r3, [r4, #12]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d10e      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x222>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	055e      	lsls	r6, r3, #21
 8001ea8:	d503      	bpl.n	8001eb2 <HAL_RCC_OscConfig+0x212>
 8001eaa:	68eb      	ldr	r3, [r5, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f43f aefb 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb2:	6863      	ldr	r3, [r4, #4]
 8001eb4:	692a      	ldr	r2, [r5, #16]
 8001eb6:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001eba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ebe:	6063      	str	r3, [r4, #4]
 8001ec0:	e737      	b.n	8001d32 <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec2:	68eb      	ldr	r3, [r5, #12]
 8001ec4:	b17b      	cbz	r3, 8001ee6 <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_HSI_ENABLE();
 8001ec6:	6823      	ldr	r3, [r4, #0]
 8001ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ecc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ece:	f7ff f867 	bl	8000fa0 <HAL_GetTick>
 8001ed2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	0558      	lsls	r0, r3, #21
 8001ed8:	d4eb      	bmi.n	8001eb2 <HAL_RCC_OscConfig+0x212>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eda:	f7ff f861 	bl	8000fa0 <HAL_GetTick>
 8001ede:	1b80      	subs	r0, r0, r6
 8001ee0:	2802      	cmp	r0, #2
 8001ee2:	d9f7      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x234>
 8001ee4:	e76f      	b.n	8001dc6 <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_HSI_DISABLE();
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001eee:	f7ff f857 	bl	8000fa0 <HAL_GetTick>
 8001ef2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001ef4:	6823      	ldr	r3, [r4, #0]
 8001ef6:	0559      	lsls	r1, r3, #21
 8001ef8:	f57f af1b 	bpl.w	8001d32 <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001efc:	f7ff f850 	bl	8000fa0 <HAL_GetTick>
 8001f00:	1b80      	subs	r0, r0, r6
 8001f02:	2802      	cmp	r0, #2
 8001f04:	d9f6      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x254>
 8001f06:	e75e      	b.n	8001dc6 <HAL_RCC_OscConfig+0x126>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f08:	696b      	ldr	r3, [r5, #20]
 8001f0a:	4c15      	ldr	r4, [pc, #84]	; (8001f60 <HAL_RCC_OscConfig+0x2c0>)
 8001f0c:	b19b      	cbz	r3, 8001f36 <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 8001f0e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001f1a:	f7ff f841 	bl	8000fa0 <HAL_GetTick>
 8001f1e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001f20:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f24:	079f      	lsls	r7, r3, #30
 8001f26:	f53f af08 	bmi.w	8001d3a <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f2a:	f7ff f839 	bl	8000fa0 <HAL_GetTick>
 8001f2e:	1b80      	subs	r0, r0, r6
 8001f30:	2802      	cmp	r0, #2
 8001f32:	d9f5      	bls.n	8001f20 <HAL_RCC_OscConfig+0x280>
 8001f34:	e747      	b.n	8001dc6 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_LSI_DISABLE();
 8001f36:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f3a:	f023 0301 	bic.w	r3, r3, #1
 8001f3e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001f42:	f7ff f82d 	bl	8000fa0 <HAL_GetTick>
 8001f46:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8001f48:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f4c:	0798      	lsls	r0, r3, #30
 8001f4e:	f57f aef4 	bpl.w	8001d3a <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f52:	f7ff f825 	bl	8000fa0 <HAL_GetTick>
 8001f56:	1b80      	subs	r0, r0, r6
 8001f58:	2802      	cmp	r0, #2
 8001f5a:	d9f5      	bls.n	8001f48 <HAL_RCC_OscConfig+0x2a8>
 8001f5c:	e733      	b.n	8001dc6 <HAL_RCC_OscConfig+0x126>
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
 8001f64:	08008c7a 	.word	0x08008c7a
 8001f68:	20000134 	.word	0x20000134
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f6c:	4c79      	ldr	r4, [pc, #484]	; (8002154 <HAL_RCC_OscConfig+0x4b4>)
 8001f6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f70:	00d9      	lsls	r1, r3, #3
 8001f72:	d427      	bmi.n	8001fc4 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	65a3      	str	r3, [r4, #88]	; 0x58
 8001f7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001f86:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f88:	4e73      	ldr	r6, [pc, #460]	; (8002158 <HAL_RCC_OscConfig+0x4b8>)
 8001f8a:	6833      	ldr	r3, [r6, #0]
 8001f8c:	05da      	lsls	r2, r3, #23
 8001f8e:	d51b      	bpl.n	8001fc8 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f90:	68ab      	ldr	r3, [r5, #8]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d129      	bne.n	8001fea <HAL_RCC_OscConfig+0x34a>
 8001f96:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001fa2:	f7fe fffd 	bl	8000fa0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001faa:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001fac:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001fb0:	0798      	lsls	r0, r3, #30
 8001fb2:	d540      	bpl.n	8002036 <HAL_RCC_OscConfig+0x396>
    if(pwrclkchanged == SET)
 8001fb4:	2f00      	cmp	r7, #0
 8001fb6:	f43f aec4 	beq.w	8001d42 <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	65a3      	str	r3, [r4, #88]	; 0x58
 8001fc2:	e6be      	b.n	8001d42 <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 8001fc4:	2700      	movs	r7, #0
 8001fc6:	e7df      	b.n	8001f88 <HAL_RCC_OscConfig+0x2e8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fc8:	6833      	ldr	r3, [r6, #0]
 8001fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fce:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001fd0:	f7fe ffe6 	bl	8000fa0 <HAL_GetTick>
 8001fd4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd6:	6833      	ldr	r3, [r6, #0]
 8001fd8:	05db      	lsls	r3, r3, #23
 8001fda:	d4d9      	bmi.n	8001f90 <HAL_RCC_OscConfig+0x2f0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fdc:	f7fe ffe0 	bl	8000fa0 <HAL_GetTick>
 8001fe0:	eba0 0008 	sub.w	r0, r0, r8
 8001fe4:	2802      	cmp	r0, #2
 8001fe6:	d9f6      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x336>
 8001fe8:	e6ed      	b.n	8001dc6 <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	d106      	bne.n	8001ffc <HAL_RCC_OscConfig+0x35c>
 8001fee:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001ffa:	e7cc      	b.n	8001f96 <HAL_RCC_OscConfig+0x2f6>
 8001ffc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002000:	f022 0201 	bic.w	r2, r2, #1
 8002004:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002008:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800200c:	f022 0204 	bic.w	r2, r2, #4
 8002010:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1c4      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x302>
      tickstart = HAL_GetTick();
 8002018:	f7fe ffc2 	bl	8000fa0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002020:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8002022:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002026:	0799      	lsls	r1, r3, #30
 8002028:	d5c4      	bpl.n	8001fb4 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7fe ffb9 	bl	8000fa0 <HAL_GetTick>
 800202e:	1b80      	subs	r0, r0, r6
 8002030:	4540      	cmp	r0, r8
 8002032:	d9f6      	bls.n	8002022 <HAL_RCC_OscConfig+0x382>
 8002034:	e6c7      	b.n	8001dc6 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002036:	f7fe ffb3 	bl	8000fa0 <HAL_GetTick>
 800203a:	1b80      	subs	r0, r0, r6
 800203c:	4540      	cmp	r0, r8
 800203e:	d9b5      	bls.n	8001fac <HAL_RCC_OscConfig+0x30c>
 8002040:	e6c1      	b.n	8001dc6 <HAL_RCC_OscConfig+0x126>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002042:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002044:	4c43      	ldr	r4, [pc, #268]	; (8002154 <HAL_RCC_OscConfig+0x4b4>)
 8002046:	b19b      	cbz	r3, 8002070 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_HSI48_ENABLE();
 8002048:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002054:	f7fe ffa4 	bl	8000fa0 <HAL_GetTick>
 8002058:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 800205a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800205e:	079b      	lsls	r3, r3, #30
 8002060:	f53f ae73 	bmi.w	8001d4a <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002064:	f7fe ff9c 	bl	8000fa0 <HAL_GetTick>
 8002068:	1b80      	subs	r0, r0, r6
 800206a:	2802      	cmp	r0, #2
 800206c:	d9f5      	bls.n	800205a <HAL_RCC_OscConfig+0x3ba>
 800206e:	e6aa      	b.n	8001dc6 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSI48_DISABLE();
 8002070:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 800207c:	f7fe ff90 	bl	8000fa0 <HAL_GetTick>
 8002080:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8002082:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002086:	079f      	lsls	r7, r3, #30
 8002088:	f57f ae5f 	bpl.w	8001d4a <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800208c:	f7fe ff88 	bl	8000fa0 <HAL_GetTick>
 8002090:	1b80      	subs	r0, r0, r6
 8002092:	2802      	cmp	r0, #2
 8002094:	d9f5      	bls.n	8002082 <HAL_RCC_OscConfig+0x3e2>
 8002096:	e696      	b.n	8001dc6 <HAL_RCC_OscConfig+0x126>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002098:	4c2e      	ldr	r4, [pc, #184]	; (8002154 <HAL_RCC_OscConfig+0x4b4>)
 800209a:	68a3      	ldr	r3, [r4, #8]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b0c      	cmp	r3, #12
 80020a2:	f43f ae01 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80020a6:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020a8:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80020aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ae:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020b0:	d136      	bne.n	8002120 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 80020b2:	f7fe ff75 	bl	8000fa0 <HAL_GetTick>
 80020b6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80020b8:	6823      	ldr	r3, [r4, #0]
 80020ba:	0198      	lsls	r0, r3, #6
 80020bc:	d42a      	bmi.n	8002114 <HAL_RCC_OscConfig+0x474>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020be:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80020c0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80020c2:	06db      	lsls	r3, r3, #27
 80020c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80020c8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80020ca:	4313      	orrs	r3, r2
 80020cc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80020ce:	3a01      	subs	r2, #1
 80020d0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80020d4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80020d6:	0852      	lsrs	r2, r2, #1
 80020d8:	3a01      	subs	r2, #1
 80020da:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80020de:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80020e0:	0852      	lsrs	r2, r2, #1
 80020e2:	3a01      	subs	r2, #1
 80020e4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80020e8:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80020ea:	6823      	ldr	r3, [r4, #0]
 80020ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020f0:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020f2:	68e3      	ldr	r3, [r4, #12]
 80020f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020f8:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80020fa:	f7fe ff51 	bl	8000fa0 <HAL_GetTick>
 80020fe:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002100:	6823      	ldr	r3, [r4, #0]
 8002102:	0199      	lsls	r1, r3, #6
 8002104:	f53f ae25 	bmi.w	8001d52 <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002108:	f7fe ff4a 	bl	8000fa0 <HAL_GetTick>
 800210c:	1b40      	subs	r0, r0, r5
 800210e:	2802      	cmp	r0, #2
 8002110:	d9f6      	bls.n	8002100 <HAL_RCC_OscConfig+0x460>
 8002112:	e658      	b.n	8001dc6 <HAL_RCC_OscConfig+0x126>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002114:	f7fe ff44 	bl	8000fa0 <HAL_GetTick>
 8002118:	1b80      	subs	r0, r0, r6
 800211a:	2802      	cmp	r0, #2
 800211c:	d9cc      	bls.n	80020b8 <HAL_RCC_OscConfig+0x418>
 800211e:	e652      	b.n	8001dc6 <HAL_RCC_OscConfig+0x126>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8002120:	6823      	ldr	r3, [r4, #0]
 8002122:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002124:	bf5e      	ittt	pl
 8002126:	68e3      	ldrpl	r3, [r4, #12]
 8002128:	f023 0303 	bicpl.w	r3, r3, #3
 800212c:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800212e:	68e3      	ldr	r3, [r4, #12]
 8002130:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002138:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800213a:	f7fe ff31 	bl	8000fa0 <HAL_GetTick>
 800213e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	019b      	lsls	r3, r3, #6
 8002144:	f57f ae05 	bpl.w	8001d52 <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002148:	f7fe ff2a 	bl	8000fa0 <HAL_GetTick>
 800214c:	1b40      	subs	r0, r0, r5
 800214e:	2802      	cmp	r0, #2
 8002150:	d9f6      	bls.n	8002140 <HAL_RCC_OscConfig+0x4a0>
 8002152:	e638      	b.n	8001dc6 <HAL_RCC_OscConfig+0x126>
 8002154:	40021000 	.word	0x40021000
 8002158:	40007000 	.word	0x40007000

0800215c <HAL_RCC_ClockConfig>:
{
 800215c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002160:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8002162:	4604      	mov	r4, r0
 8002164:	b910      	cbnz	r0, 800216c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002166:	2001      	movs	r0, #1
 8002168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800216c:	4a40      	ldr	r2, [pc, #256]	; (8002270 <HAL_RCC_ClockConfig+0x114>)
 800216e:	6813      	ldr	r3, [r2, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	428b      	cmp	r3, r1
 8002176:	d328      	bcc.n	80021ca <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002178:	6823      	ldr	r3, [r4, #0]
 800217a:	07d9      	lsls	r1, r3, #31
 800217c:	d430      	bmi.n	80021e0 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800217e:	6821      	ldr	r1, [r4, #0]
 8002180:	078a      	lsls	r2, r1, #30
 8002182:	d45a      	bmi.n	800223a <HAL_RCC_ClockConfig+0xde>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002184:	4a3a      	ldr	r2, [pc, #232]	; (8002270 <HAL_RCC_ClockConfig+0x114>)
 8002186:	6813      	ldr	r3, [r2, #0]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	429e      	cmp	r6, r3
 800218e:	d35c      	bcc.n	800224a <HAL_RCC_ClockConfig+0xee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	f011 0f04 	tst.w	r1, #4
 8002194:	4d37      	ldr	r5, [pc, #220]	; (8002274 <HAL_RCC_ClockConfig+0x118>)
 8002196:	d163      	bne.n	8002260 <HAL_RCC_ClockConfig+0x104>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002198:	070b      	lsls	r3, r1, #28
 800219a:	d506      	bpl.n	80021aa <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800219c:	68ab      	ldr	r3, [r5, #8]
 800219e:	6922      	ldr	r2, [r4, #16]
 80021a0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80021a4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80021a8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021aa:	f7ff fd11 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 80021ae:	68ab      	ldr	r3, [r5, #8]
 80021b0:	4a31      	ldr	r2, [pc, #196]	; (8002278 <HAL_RCC_ClockConfig+0x11c>)
 80021b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80021b6:	5cd3      	ldrb	r3, [r2, r3]
 80021b8:	40d8      	lsrs	r0, r3
 80021ba:	4b30      	ldr	r3, [pc, #192]	; (800227c <HAL_RCC_ClockConfig+0x120>)
 80021bc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80021be:	2000      	movs	r0, #0
 80021c0:	f7fe fec6 	bl	8000f50 <HAL_InitTick>
  return HAL_OK;
 80021c4:	2000      	movs	r0, #0
 80021c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	6813      	ldr	r3, [r2, #0]
 80021cc:	f023 0307 	bic.w	r3, r3, #7
 80021d0:	430b      	orrs	r3, r1
 80021d2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d4:	6813      	ldr	r3, [r2, #0]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	4299      	cmp	r1, r3
 80021dc:	d1c3      	bne.n	8002166 <HAL_RCC_ClockConfig+0xa>
 80021de:	e7cb      	b.n	8002178 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e0:	6862      	ldr	r2, [r4, #4]
 80021e2:	4d24      	ldr	r5, [pc, #144]	; (8002274 <HAL_RCC_ClockConfig+0x118>)
 80021e4:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80021e6:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e8:	d11b      	bne.n	8002222 <HAL_RCC_ClockConfig+0xc6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80021ea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80021ee:	d0ba      	beq.n	8002166 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021f0:	68ab      	ldr	r3, [r5, #8]
 80021f2:	f023 0303 	bic.w	r3, r3, #3
 80021f6:	4313      	orrs	r3, r2
 80021f8:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80021fa:	f7fe fed1 	bl	8000fa0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fe:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002202:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002204:	68ab      	ldr	r3, [r5, #8]
 8002206:	6862      	ldr	r2, [r4, #4]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002210:	d0b5      	beq.n	800217e <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002212:	f7fe fec5 	bl	8000fa0 <HAL_GetTick>
 8002216:	1bc0      	subs	r0, r0, r7
 8002218:	4540      	cmp	r0, r8
 800221a:	d9f3      	bls.n	8002204 <HAL_RCC_ClockConfig+0xa8>
        return HAL_TIMEOUT;
 800221c:	2003      	movs	r0, #3
}
 800221e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002222:	2a02      	cmp	r2, #2
 8002224:	d102      	bne.n	800222c <HAL_RCC_ClockConfig+0xd0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8002226:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800222a:	e7e0      	b.n	80021ee <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800222c:	b912      	cbnz	r2, 8002234 <HAL_RCC_ClockConfig+0xd8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800222e:	f013 0f02 	tst.w	r3, #2
 8002232:	e7dc      	b.n	80021ee <HAL_RCC_ClockConfig+0x92>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002234:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002238:	e7d9      	b.n	80021ee <HAL_RCC_ClockConfig+0x92>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800223a:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <HAL_RCC_ClockConfig+0x118>)
 800223c:	68a0      	ldr	r0, [r4, #8]
 800223e:	6893      	ldr	r3, [r2, #8]
 8002240:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002244:	4303      	orrs	r3, r0
 8002246:	6093      	str	r3, [r2, #8]
 8002248:	e79c      	b.n	8002184 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224a:	6813      	ldr	r3, [r2, #0]
 800224c:	f023 0307 	bic.w	r3, r3, #7
 8002250:	4333      	orrs	r3, r6
 8002252:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002254:	6813      	ldr	r3, [r2, #0]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	429e      	cmp	r6, r3
 800225c:	d183      	bne.n	8002166 <HAL_RCC_ClockConfig+0xa>
 800225e:	e797      	b.n	8002190 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002260:	68ab      	ldr	r3, [r5, #8]
 8002262:	68e2      	ldr	r2, [r4, #12]
 8002264:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002268:	4313      	orrs	r3, r2
 800226a:	60ab      	str	r3, [r5, #8]
 800226c:	e794      	b.n	8002198 <HAL_RCC_ClockConfig+0x3c>
 800226e:	bf00      	nop
 8002270:	40022000 	.word	0x40022000
 8002274:	40021000 	.word	0x40021000
 8002278:	08008c7a 	.word	0x08008c7a
 800227c:	20000134 	.word	0x20000134

08002280 <HAL_RCC_GetHCLKFreq>:
}
 8002280:	4b01      	ldr	r3, [pc, #4]	; (8002288 <HAL_RCC_GetHCLKFreq+0x8>)
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000134 	.word	0x20000134

0800228c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800228e:	4b44      	ldr	r3, [pc, #272]	; (80023a0 <RCCEx_PLLSAI1_Config+0x114>)
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	f012 0f03 	tst.w	r2, #3
{
 8002296:	4605      	mov	r5, r0
 8002298:	460e      	mov	r6, r1
 800229a:	461c      	mov	r4, r3
 800229c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800229e:	d039      	beq.n	8002314 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	f002 0203 	and.w	r2, r2, #3
 80022a6:	4282      	cmp	r2, r0
 80022a8:	d14b      	bne.n	8002342 <RCCEx_PLLSAI1_Config+0xb6>
       ||
 80022aa:	2a00      	cmp	r2, #0
 80022ac:	d049      	beq.n	8002342 <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80022ae:	68db      	ldr	r3, [r3, #12]
       ||
 80022b0:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80022b2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80022b6:	3301      	adds	r3, #1
       ||
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d142      	bne.n	8002342 <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022bc:	6823      	ldr	r3, [r4, #0]
 80022be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022c2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022c4:	f7fe fe6c 	bl	8000fa0 <HAL_GetTick>
 80022c8:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80022ca:	6823      	ldr	r3, [r4, #0]
 80022cc:	011a      	lsls	r2, r3, #4
 80022ce:	d441      	bmi.n	8002354 <RCCEx_PLLSAI1_Config+0xc8>
 80022d0:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80022d2:	2e00      	cmp	r6, #0
 80022d4:	d045      	beq.n	8002362 <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80022d6:	2e01      	cmp	r6, #1
 80022d8:	d14f      	bne.n	800237a <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022da:	6922      	ldr	r2, [r4, #16]
 80022dc:	6928      	ldr	r0, [r5, #16]
 80022de:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80022e2:	0840      	lsrs	r0, r0, #1
 80022e4:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80022e8:	3801      	subs	r0, #1
 80022ea:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80022ee:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80022f2:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022fa:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fc:	f7fe fe50 	bl	8000fa0 <HAL_GetTick>
 8002300:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8002302:	6823      	ldr	r3, [r4, #0]
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	d545      	bpl.n	8002394 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002308:	6923      	ldr	r3, [r4, #16]
 800230a:	69aa      	ldr	r2, [r5, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	6123      	str	r3, [r4, #16]
 8002310:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8002314:	2802      	cmp	r0, #2
 8002316:	d010      	beq.n	800233a <RCCEx_PLLSAI1_Config+0xae>
 8002318:	2803      	cmp	r0, #3
 800231a:	d014      	beq.n	8002346 <RCCEx_PLLSAI1_Config+0xba>
 800231c:	2801      	cmp	r0, #1
 800231e:	d110      	bne.n	8002342 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	079f      	lsls	r7, r3, #30
 8002324:	d5f5      	bpl.n	8002312 <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002326:	68e3      	ldr	r3, [r4, #12]
 8002328:	686a      	ldr	r2, [r5, #4]
 800232a:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800232e:	3a01      	subs	r2, #1
 8002330:	4318      	orrs	r0, r3
 8002332:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002336:	60e0      	str	r0, [r4, #12]
 8002338:	e7c0      	b.n	80022bc <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002340:	d1f1      	bne.n	8002326 <RCCEx_PLLSAI1_Config+0x9a>
 8002342:	2001      	movs	r0, #1
 8002344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	0391      	lsls	r1, r2, #14
 800234a:	d4ec      	bmi.n	8002326 <RCCEx_PLLSAI1_Config+0x9a>
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002352:	e7f5      	b.n	8002340 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002354:	f7fe fe24 	bl	8000fa0 <HAL_GetTick>
 8002358:	1bc0      	subs	r0, r0, r7
 800235a:	2802      	cmp	r0, #2
 800235c:	d9b5      	bls.n	80022ca <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800235e:	2003      	movs	r0, #3
 8002360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002362:	6922      	ldr	r2, [r4, #16]
 8002364:	68e9      	ldr	r1, [r5, #12]
 8002366:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 800236a:	06c9      	lsls	r1, r1, #27
 800236c:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 8002370:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002374:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002376:	6123      	str	r3, [r4, #16]
 8002378:	e7bc      	b.n	80022f4 <RCCEx_PLLSAI1_Config+0x68>
 800237a:	6923      	ldr	r3, [r4, #16]
 800237c:	6968      	ldr	r0, [r5, #20]
 800237e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002382:	0840      	lsrs	r0, r0, #1
 8002384:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002388:	3801      	subs	r0, #1
 800238a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800238e:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002392:	e7f0      	b.n	8002376 <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002394:	f7fe fe04 	bl	8000fa0 <HAL_GetTick>
 8002398:	1b80      	subs	r0, r0, r6
 800239a:	2802      	cmp	r0, #2
 800239c:	d9b1      	bls.n	8002302 <RCCEx_PLLSAI1_Config+0x76>
 800239e:	e7de      	b.n	800235e <RCCEx_PLLSAI1_Config+0xd2>
 80023a0:	40021000 	.word	0x40021000

080023a4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80023a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023a8:	6805      	ldr	r5, [r0, #0]
 80023aa:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 80023ae:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023b0:	d00e      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80023b2:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80023b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80023b8:	d05b      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80023ba:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80023be:	d05d      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80023c0:	2900      	cmp	r1, #0
 80023c2:	d166      	bne.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0xee>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023c4:	3004      	adds	r0, #4
 80023c6:	f7ff ff61 	bl	800228c <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 80023ca:	4605      	mov	r5, r0
 80023cc:	2800      	cmp	r0, #0
 80023ce:	d055      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	039e      	lsls	r6, r3, #14
 80023d4:	d56d      	bpl.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4eac      	ldr	r6, [pc, #688]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023d8:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80023da:	00d8      	lsls	r0, r3, #3
 80023dc:	d45b      	bmi.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80023e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e4:	65b3      	str	r3, [r6, #88]	; 0x58
 80023e6:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80023e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80023f0:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023f2:	f8df 8298 	ldr.w	r8, [pc, #664]	; 800268c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80023f6:	f8d8 3000 	ldr.w	r3, [r8]
 80023fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fe:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8002402:	f7fe fdcd 	bl	8000fa0 <HAL_GetTick>
 8002406:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8002408:	f8d8 3000 	ldr.w	r3, [r8]
 800240c:	05d9      	lsls	r1, r3, #23
 800240e:	d544      	bpl.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    if(ret == HAL_OK)
 8002410:	2d00      	cmp	r5, #0
 8002412:	d149      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x104>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002414:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002418:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800241c:	d014      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800241e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002420:	4293      	cmp	r3, r2
 8002422:	d011      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002424:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002428:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800242c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002430:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002434:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800243c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002440:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002444:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002448:	07da      	lsls	r2, r3, #31
 800244a:	d509      	bpl.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800244c:	f7fe fda8 	bl	8000fa0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002450:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002454:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002456:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800245a:	079b      	lsls	r3, r3, #30
 800245c:	f140 80eb 	bpl.w	8002636 <HAL_RCCEx_PeriphCLKConfig+0x292>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002460:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002464:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8002470:	e01a      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002472:	4a85      	ldr	r2, [pc, #532]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002474:	68d3      	ldr	r3, [r2, #12]
 8002476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247a:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800247c:	4a82      	ldr	r2, [pc, #520]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800247e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002480:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002484:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002488:	430b      	orrs	r3, r1
 800248a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800248e:	2500      	movs	r5, #0
 8002490:	e79e      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 8002492:	2501      	movs	r5, #1
 8002494:	e79c      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002496:	2700      	movs	r7, #0
 8002498:	e7ab      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249a:	f7fe fd81 	bl	8000fa0 <HAL_GetTick>
 800249e:	eba0 0009 	sub.w	r0, r0, r9
 80024a2:	2802      	cmp	r0, #2
 80024a4:	d9b0      	bls.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x64>
        ret = HAL_TIMEOUT;
 80024a6:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80024a8:	b11f      	cbz	r7, 80024b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024aa:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80024ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b0:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024b2:	6823      	ldr	r3, [r4, #0]
 80024b4:	07d8      	lsls	r0, r3, #31
 80024b6:	d508      	bpl.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024b8:	4973      	ldr	r1, [pc, #460]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024ba:	6a20      	ldr	r0, [r4, #32]
 80024bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024c0:	f022 0203 	bic.w	r2, r2, #3
 80024c4:	4302      	orrs	r2, r0
 80024c6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024ca:	0799      	lsls	r1, r3, #30
 80024cc:	d508      	bpl.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024ce:	496e      	ldr	r1, [pc, #440]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80024d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024d6:	f022 020c 	bic.w	r2, r2, #12
 80024da:	4302      	orrs	r2, r0
 80024dc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024e0:	075a      	lsls	r2, r3, #29
 80024e2:	d508      	bpl.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024e4:	4968      	ldr	r1, [pc, #416]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80024e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024ec:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80024f0:	4302      	orrs	r2, r0
 80024f2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024f6:	069f      	lsls	r7, r3, #26
 80024f8:	d508      	bpl.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024fa:	4963      	ldr	r1, [pc, #396]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80024fe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002502:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002506:	4302      	orrs	r2, r0
 8002508:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800250c:	059e      	lsls	r6, r3, #22
 800250e:	d508      	bpl.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002510:	495d      	ldr	r1, [pc, #372]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002512:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002514:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002518:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800251c:	4302      	orrs	r2, r0
 800251e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002522:	0558      	lsls	r0, r3, #21
 8002524:	d508      	bpl.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002526:	4958      	ldr	r1, [pc, #352]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002528:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800252a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800252e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002532:	4302      	orrs	r2, r0
 8002534:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002538:	0659      	lsls	r1, r3, #25
 800253a:	d508      	bpl.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800253c:	4952      	ldr	r1, [pc, #328]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800253e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002540:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002544:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002548:	4302      	orrs	r2, r0
 800254a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800254e:	061a      	lsls	r2, r3, #24
 8002550:	d508      	bpl.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002552:	494d      	ldr	r1, [pc, #308]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002554:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002556:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800255a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800255e:	4302      	orrs	r2, r0
 8002560:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002564:	05df      	lsls	r7, r3, #23
 8002566:	d508      	bpl.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002568:	4947      	ldr	r1, [pc, #284]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800256a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800256c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002570:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002574:	4302      	orrs	r2, r0
 8002576:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800257a:	049e      	lsls	r6, r3, #18
 800257c:	d50f      	bpl.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800257e:	4a42      	ldr	r2, [pc, #264]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002580:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002582:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002586:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800258a:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800258c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002594:	d157      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002596:	68d3      	ldr	r3, [r2, #12]
 8002598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800259c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800259e:	6823      	ldr	r3, [r4, #0]
 80025a0:	0318      	lsls	r0, r3, #12
 80025a2:	d50f      	bpl.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025a4:	4a38      	ldr	r2, [pc, #224]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025a6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80025a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025ac:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80025b0:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025b2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025ba:	d14f      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025bc:	68d3      	ldr	r3, [r2, #12]
 80025be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025c2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	0359      	lsls	r1, r3, #13
 80025c8:	d50f      	bpl.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x246>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025ca:	4a2f      	ldr	r2, [pc, #188]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025cc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80025ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025d2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80025d6:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025d8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025e0:	d147      	bne.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e2:	68d3      	ldr	r3, [r2, #12]
 80025e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025e8:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025ea:	6823      	ldr	r3, [r4, #0]
 80025ec:	045a      	lsls	r2, r3, #17
 80025ee:	d512      	bpl.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x272>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025f0:	4925      	ldr	r1, [pc, #148]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025f2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80025f4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80025f8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80025fc:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025fe:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002606:	d106      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x272>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002608:	2102      	movs	r1, #2
 800260a:	1d20      	adds	r0, r4, #4
 800260c:	f7ff fe3e 	bl	800228c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002610:	2800      	cmp	r0, #0
 8002612:	bf18      	it	ne
 8002614:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002616:	6823      	ldr	r3, [r4, #0]
 8002618:	041b      	lsls	r3, r3, #16
 800261a:	d508      	bpl.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800261c:	4a1a      	ldr	r2, [pc, #104]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800261e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002620:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002624:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002628:	430b      	orrs	r3, r1
 800262a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800262e:	4628      	mov	r0, r5
 8002630:	b003      	add	sp, #12
 8002632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002636:	f7fe fcb3 	bl	8000fa0 <HAL_GetTick>
 800263a:	eba0 0008 	sub.w	r0, r0, r8
 800263e:	4548      	cmp	r0, r9
 8002640:	f67f af09 	bls.w	8002456 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8002644:	e72f      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002646:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800264a:	d1a8      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800264c:	2101      	movs	r1, #1
 800264e:	1d20      	adds	r0, r4, #4
 8002650:	f7ff fe1c 	bl	800228c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002654:	2800      	cmp	r0, #0
 8002656:	bf18      	it	ne
 8002658:	4605      	movne	r5, r0
 800265a:	e7a0      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800265c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002660:	d1b0      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002662:	2101      	movs	r1, #1
 8002664:	1d20      	adds	r0, r4, #4
 8002666:	f7ff fe11 	bl	800228c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800266a:	2800      	cmp	r0, #0
 800266c:	bf18      	it	ne
 800266e:	4605      	movne	r5, r0
 8002670:	e7a8      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x220>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002672:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002676:	d1b8      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x246>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002678:	2101      	movs	r1, #1
 800267a:	1d20      	adds	r0, r4, #4
 800267c:	f7ff fe06 	bl	800228c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002680:	2800      	cmp	r0, #0
 8002682:	bf18      	it	ne
 8002684:	4605      	movne	r5, r0
 8002686:	e7b0      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x246>
 8002688:	40021000 	.word	0x40021000
 800268c:	40007000 	.word	0x40007000

08002690 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002690:	4a02      	ldr	r2, [pc, #8]	; (800269c <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8002692:	6813      	ldr	r3, [r2, #0]
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	4770      	bx	lr
 800269c:	40021000 	.word	0x40021000

080026a0 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026a0:	6803      	ldr	r3, [r0, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026aa:	6842      	ldr	r2, [r0, #4]
 80026ac:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80026b0:	d10a      	bne.n	80026c8 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 80026b2:	6882      	ldr	r2, [r0, #8]
 80026b4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80026b8:	d002      	beq.n	80026c0 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026ba:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80026be:	d103      	bne.n	80026c8 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026c8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80026ca:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80026ce:	d107      	bne.n	80026e0 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026e0:	2301      	movs	r3, #1
 80026e2:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026e6:	2300      	movs	r3, #0
 80026e8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 80026ec:	2003      	movs	r0, #3
 80026ee:	4770      	bx	lr

080026f0 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	4605      	mov	r5, r0
 80026f4:	460c      	mov	r4, r1
 80026f6:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026f8:	682b      	ldr	r3, [r5, #0]
 80026fa:	6898      	ldr	r0, [r3, #8]
 80026fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002700:	d00d      	beq.n	800271e <SPI_WaitFlagStateUntilTimeout.constprop.10+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 8002702:	1c62      	adds	r2, r4, #1
 8002704:	d0f9      	beq.n	80026fa <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002706:	b924      	cbnz	r4, 8002712 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x22>
 8002708:	4628      	mov	r0, r5
}
 800270a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800270e:	f7ff bfc7 	b.w	80026a0 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002712:	f7fe fc45 	bl	8000fa0 <HAL_GetTick>
 8002716:	1b80      	subs	r0, r0, r6
 8002718:	4284      	cmp	r4, r0
 800271a:	d8ed      	bhi.n	80026f8 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 800271c:	e7f4      	b.n	8002708 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x18>
}
 800271e:	bd70      	pop	{r4, r5, r6, pc}

08002720 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002722:	4606      	mov	r6, r0
 8002724:	460c      	mov	r4, r1
 8002726:	4615      	mov	r5, r2
 8002728:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 800272a:	6831      	ldr	r1, [r6, #0]
 800272c:	6888      	ldr	r0, [r1, #8]
 800272e:	4020      	ands	r0, r4
 8002730:	d00e      	beq.n	8002750 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002732:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8002736:	bf01      	itttt	eq
 8002738:	7b0a      	ldrbeq	r2, [r1, #12]
 800273a:	b2d2      	uxtbeq	r2, r2
 800273c:	f88d 2007 	strbeq.w	r2, [sp, #7]
      UNUSED(tmpreg);
 8002740:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 8002744:	1c6b      	adds	r3, r5, #1
 8002746:	d0f1      	beq.n	800272c <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002748:	b925      	cbnz	r5, 8002754 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x34>
 800274a:	4630      	mov	r0, r6
 800274c:	f7ff ffa8 	bl	80026a0 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8002750:	b003      	add	sp, #12
 8002752:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002754:	f7fe fc24 	bl	8000fa0 <HAL_GetTick>
 8002758:	1bc0      	subs	r0, r0, r7
 800275a:	4285      	cmp	r5, r0
 800275c:	d8e5      	bhi.n	800272a <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 800275e:	e7f4      	b.n	800274a <SPI_WaitFifoStateUntilTimeout.constprop.11+0x2a>

08002760 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002760:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002762:	4613      	mov	r3, r2
{
 8002764:	460d      	mov	r5, r1
 8002766:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002768:	460a      	mov	r2, r1
 800276a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800276e:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002770:	f7ff ffd6 	bl	8002720 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8002774:	b128      	cbz	r0, 8002782 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002776:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002778:	f043 0320 	orr.w	r3, r3, #32
 800277c:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800277e:	2003      	movs	r0, #3
 8002780:	e00f      	b.n	80027a2 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002782:	4632      	mov	r2, r6
 8002784:	4629      	mov	r1, r5
 8002786:	4620      	mov	r0, r4
 8002788:	f7ff ffb2 	bl	80026f0 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 800278c:	2800      	cmp	r0, #0
 800278e:	d1f2      	bne.n	8002776 <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002790:	4633      	mov	r3, r6
 8002792:	462a      	mov	r2, r5
 8002794:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002798:	4620      	mov	r0, r4
 800279a:	f7ff ffc1 	bl	8002720 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 800279e:	2800      	cmp	r0, #0
 80027a0:	d1e9      	bne.n	8002776 <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80027a2:	bd70      	pop	{r4, r5, r6, pc}

080027a4 <HAL_SPI_Init>:
{
 80027a4:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 80027a6:	4604      	mov	r4, r0
 80027a8:	2800      	cmp	r0, #0
 80027aa:	d04a      	beq.n	8002842 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80027b0:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80027b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027b8:	b91b      	cbnz	r3, 80027c2 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80027ba:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80027be:	f002 f8c1 	bl	8004944 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80027c2:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80027c4:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80027c6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80027ca:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027cc:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80027ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027d2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80027d6:	600b      	str	r3, [r1, #0]
 80027d8:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027dc:	d92e      	bls.n	800283c <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80027de:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80027e0:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027e4:	bf18      	it	ne
 80027e6:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80027e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80027ea:	b92b      	cbnz	r3, 80027f8 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027ec:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80027f0:	bf8c      	ite	hi
 80027f2:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80027f4:	2301      	movls	r3, #1
 80027f6:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80027f8:	68a6      	ldr	r6, [r4, #8]
 80027fa:	6863      	ldr	r3, [r4, #4]
 80027fc:	69a5      	ldr	r5, [r4, #24]
 80027fe:	4333      	orrs	r3, r6
 8002800:	6926      	ldr	r6, [r4, #16]
 8002802:	4333      	orrs	r3, r6
 8002804:	6966      	ldr	r6, [r4, #20]
 8002806:	4333      	orrs	r3, r6
 8002808:	69e6      	ldr	r6, [r4, #28]
 800280a:	4333      	orrs	r3, r6
 800280c:	6a26      	ldr	r6, [r4, #32]
 800280e:	4333      	orrs	r3, r6
 8002810:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002812:	4333      	orrs	r3, r6
 8002814:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8002818:	4333      	orrs	r3, r6
 800281a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800281c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800281e:	431a      	orrs	r2, r3
 8002820:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002822:	0c2d      	lsrs	r5, r5, #16
 8002824:	431a      	orrs	r2, r3
 8002826:	f005 0504 	and.w	r5, r5, #4
 800282a:	432a      	orrs	r2, r5
 800282c:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 800282e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002830:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002832:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002834:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002836:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 800283a:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800283c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002840:	e7d0      	b.n	80027e4 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8002842:	2001      	movs	r0, #1
}
 8002844:	bd70      	pop	{r4, r5, r6, pc}

08002846 <HAL_SPI_Transmit>:
{
 8002846:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800284a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800284c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8002850:	2b01      	cmp	r3, #1
{
 8002852:	4604      	mov	r4, r0
 8002854:	460d      	mov	r5, r1
 8002856:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002858:	f000 80b1 	beq.w	80029be <HAL_SPI_Transmit+0x178>
 800285c:	2301      	movs	r3, #1
 800285e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002862:	f7fe fb9d 	bl	8000fa0 <HAL_GetTick>
 8002866:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002868:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800286c:	b2c0      	uxtb	r0, r0
 800286e:	2801      	cmp	r0, #1
 8002870:	f040 80a3 	bne.w	80029ba <HAL_SPI_Transmit+0x174>
  if ((pData == NULL) || (Size == 0U))
 8002874:	2d00      	cmp	r5, #0
 8002876:	d057      	beq.n	8002928 <HAL_SPI_Transmit+0xe2>
 8002878:	f1b8 0f00 	cmp.w	r8, #0
 800287c:	d054      	beq.n	8002928 <HAL_SPI_Transmit+0xe2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800287e:	2303      	movs	r3, #3
 8002880:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002884:	2300      	movs	r3, #0
 8002886:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002888:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800288a:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 800288e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002892:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002896:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002898:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800289a:	68a3      	ldr	r3, [r4, #8]
 800289c:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800289e:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 80028a4:	bf08      	it	eq
 80028a6:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 80028a8:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 80028ac:	bf04      	itt	eq
 80028ae:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 80028b2:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028b4:	6803      	ldr	r3, [r0, #0]
 80028b6:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80028b8:	bf5e      	ittt	pl
 80028ba:	6803      	ldrpl	r3, [r0, #0]
 80028bc:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80028c0:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028c2:	68e3      	ldr	r3, [r4, #12]
 80028c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028c8:	6863      	ldr	r3, [r4, #4]
 80028ca:	d93e      	bls.n	800294a <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80028cc:	b11b      	cbz	r3, 80028d6 <HAL_SPI_Transmit+0x90>
 80028ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d106      	bne.n	80028e4 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)pData);
 80028d6:	f835 3b02 	ldrh.w	r3, [r5], #2
 80028da:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 80028dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80028e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	b9a3      	cbnz	r3, 8002914 <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028ea:	463a      	mov	r2, r7
 80028ec:	4631      	mov	r1, r6
 80028ee:	4620      	mov	r0, r4
 80028f0:	f7ff ff36 	bl	8002760 <SPI_EndRxTxTransaction>
 80028f4:	2800      	cmp	r0, #0
 80028f6:	d15d      	bne.n	80029b4 <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028f8:	68a3      	ldr	r3, [r4, #8]
 80028fa:	b933      	cbnz	r3, 800290a <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028fc:	9301      	str	r3, [sp, #4]
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	9201      	str	r2, [sp, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	9301      	str	r3, [sp, #4]
 8002908:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800290a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800290c:	3000      	adds	r0, #0
 800290e:	bf18      	it	ne
 8002910:	2001      	movne	r0, #1
 8002912:	e009      	b.n	8002928 <HAL_SPI_Transmit+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002914:	6823      	ldr	r3, [r4, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	0790      	lsls	r0, r2, #30
 800291a:	d503      	bpl.n	8002924 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)pData);
 800291c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	e7db      	b.n	80028dc <HAL_SPI_Transmit+0x96>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002924:	b94e      	cbnz	r6, 800293a <HAL_SPI_Transmit+0xf4>
          errorcode = HAL_TIMEOUT;
 8002926:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002928:	2301      	movs	r3, #1
 800292a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800292e:	2300      	movs	r3, #0
 8002930:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002934:	b002      	add	sp, #8
 8002936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800293a:	1c71      	adds	r1, r6, #1
 800293c:	d0d2      	beq.n	80028e4 <HAL_SPI_Transmit+0x9e>
 800293e:	f7fe fb2f 	bl	8000fa0 <HAL_GetTick>
 8002942:	1bc0      	subs	r0, r0, r7
 8002944:	4286      	cmp	r6, r0
 8002946:	d8cd      	bhi.n	80028e4 <HAL_SPI_Transmit+0x9e>
 8002948:	e7ed      	b.n	8002926 <HAL_SPI_Transmit+0xe0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800294a:	b11b      	cbz	r3, 8002954 <HAL_SPI_Transmit+0x10e>
 800294c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800294e:	b29b      	uxth	r3, r3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d10a      	bne.n	800296a <HAL_SPI_Transmit+0x124>
      if (hspi->TxXferCount > 1U)
 8002954:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b01      	cmp	r3, #1
 800295a:	d916      	bls.n	800298a <HAL_SPI_Transmit+0x144>
        hspi->Instance->DR = *((uint16_t *)pData);
 800295c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002960:	60c3      	str	r3, [r0, #12]
          hspi->TxXferCount -= 2U;
 8002962:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002964:	3b02      	subs	r3, #2
 8002966:	b29b      	uxth	r3, r3
 8002968:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800296a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800296c:	b29b      	uxth	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0bb      	beq.n	80028ea <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	0792      	lsls	r2, r2, #30
 8002978:	d512      	bpl.n	80029a0 <HAL_SPI_Transmit+0x15a>
        if (hspi->TxXferCount > 1U)
 800297a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800297c:	b292      	uxth	r2, r2
 800297e:	2a01      	cmp	r2, #1
 8002980:	d90b      	bls.n	800299a <HAL_SPI_Transmit+0x154>
          hspi->Instance->DR = *((uint16_t *)pData);
 8002982:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002986:	60da      	str	r2, [r3, #12]
 8002988:	e7eb      	b.n	8002962 <HAL_SPI_Transmit+0x11c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800298a:	782b      	ldrb	r3, [r5, #0]
 800298c:	7303      	strb	r3, [r0, #12]
          hspi->TxXferCount--;
 800298e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002990:	3b01      	subs	r3, #1
 8002992:	b29b      	uxth	r3, r3
 8002994:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002996:	3501      	adds	r5, #1
 8002998:	e7e7      	b.n	800296a <HAL_SPI_Transmit+0x124>
 800299a:	782a      	ldrb	r2, [r5, #0]
 800299c:	731a      	strb	r2, [r3, #12]
 800299e:	e7f6      	b.n	800298e <HAL_SPI_Transmit+0x148>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80029a0:	2e00      	cmp	r6, #0
 80029a2:	d0c0      	beq.n	8002926 <HAL_SPI_Transmit+0xe0>
 80029a4:	1c73      	adds	r3, r6, #1
 80029a6:	d0e0      	beq.n	800296a <HAL_SPI_Transmit+0x124>
 80029a8:	f7fe fafa 	bl	8000fa0 <HAL_GetTick>
 80029ac:	1bc0      	subs	r0, r0, r7
 80029ae:	4286      	cmp	r6, r0
 80029b0:	d8db      	bhi.n	800296a <HAL_SPI_Transmit+0x124>
 80029b2:	e7b8      	b.n	8002926 <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029b4:	2320      	movs	r3, #32
 80029b6:	6623      	str	r3, [r4, #96]	; 0x60
 80029b8:	e79e      	b.n	80028f8 <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 80029ba:	2002      	movs	r0, #2
 80029bc:	e7b4      	b.n	8002928 <HAL_SPI_Transmit+0xe2>
  __HAL_LOCK(hspi);
 80029be:	2002      	movs	r0, #2
 80029c0:	e7b8      	b.n	8002934 <HAL_SPI_Transmit+0xee>

080029c2 <HAL_SPI_TransmitReceive>:
{
 80029c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029c6:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 80029c8:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 80029cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 80029d0:	2b01      	cmp	r3, #1
{
 80029d2:	4604      	mov	r4, r0
 80029d4:	460d      	mov	r5, r1
 80029d6:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 80029d8:	f000 8112 	beq.w	8002c00 <HAL_SPI_TransmitReceive+0x23e>
 80029dc:	2301      	movs	r3, #1
 80029de:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80029e2:	f7fe fadd 	bl	8000fa0 <HAL_GetTick>
  tmp  = hspi->State;
 80029e6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp1 = hspi->Init.Mode;
 80029ea:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 80029ec:	b2db      	uxtb	r3, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 80029ee:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80029f0:	4681      	mov	r9, r0
  if (!((tmp == HAL_SPI_STATE_READY) || \
 80029f2:	d00a      	beq.n	8002a0a <HAL_SPI_TransmitReceive+0x48>
 80029f4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80029f8:	f040 8100 	bne.w	8002bfc <HAL_SPI_TransmitReceive+0x23a>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80029fc:	68a2      	ldr	r2, [r4, #8]
 80029fe:	2a00      	cmp	r2, #0
 8002a00:	f040 80fc 	bne.w	8002bfc <HAL_SPI_TransmitReceive+0x23a>
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	f040 80f9 	bne.w	8002bfc <HAL_SPI_TransmitReceive+0x23a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a0a:	2d00      	cmp	r5, #0
 8002a0c:	d04b      	beq.n	8002aa6 <HAL_SPI_TransmitReceive+0xe4>
 8002a0e:	2e00      	cmp	r6, #0
 8002a10:	d049      	beq.n	8002aa6 <HAL_SPI_TransmitReceive+0xe4>
 8002a12:	2f00      	cmp	r7, #0
 8002a14:	d047      	beq.n	8002aa6 <HAL_SPI_TransmitReceive+0xe4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a16:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8002a1a:	68e0      	ldr	r0, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a1c:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a1e:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a20:	bf1c      	itt	ne
 8002a22:	2305      	movne	r3, #5
 8002a24:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a28:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8002a2a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a2e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 8002a30:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 8002a32:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002a36:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 8002a38:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a3c:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002a3e:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002a40:	87a7      	strh	r7, [r4, #60]	; 0x3c
 8002a42:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8002a44:	d804      	bhi.n	8002a50 <HAL_SPI_TransmitReceive+0x8e>
 8002a46:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002a4a:	b292      	uxth	r2, r2
 8002a4c:	2a01      	cmp	r2, #1
 8002a4e:	d92c      	bls.n	8002aaa <HAL_SPI_TransmitReceive+0xe8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a56:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002a5c:	bf5e      	ittt	pl
 8002a5e:	681a      	ldrpl	r2, [r3, #0]
 8002a60:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002a64:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a66:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8002a6a:	d956      	bls.n	8002b1a <HAL_SPI_TransmitReceive+0x158>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002a6c:	b119      	cbz	r1, 8002a76 <HAL_SPI_TransmitReceive+0xb4>
 8002a6e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002a70:	b292      	uxth	r2, r2
 8002a72:	2a01      	cmp	r2, #1
 8002a74:	d106      	bne.n	8002a84 <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002a76:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002a7a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002a7c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002a84:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a86:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	b993      	cbnz	r3, 8002ab2 <HAL_SPI_TransmitReceive+0xf0>
 8002a8c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	b973      	cbnz	r3, 8002ab2 <HAL_SPI_TransmitReceive+0xf0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a94:	464a      	mov	r2, r9
 8002a96:	4641      	mov	r1, r8
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f7ff fe61 	bl	8002760 <SPI_EndRxTxTransaction>
 8002a9e:	2800      	cmp	r0, #0
 8002aa0:	d033      	beq.n	8002b0a <HAL_SPI_TransmitReceive+0x148>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002aa2:	2320      	movs	r3, #32
 8002aa4:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	e02f      	b.n	8002b0a <HAL_SPI_TransmitReceive+0x148>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ab0:	e7d1      	b.n	8002a56 <HAL_SPI_TransmitReceive+0x94>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002ab2:	b177      	cbz	r7, 8002ad2 <HAL_SPI_TransmitReceive+0x110>
 8002ab4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	b15b      	cbz	r3, 8002ad2 <HAL_SPI_TransmitReceive+0x110>
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	0792      	lsls	r2, r2, #30
 8002ac0:	d507      	bpl.n	8002ad2 <HAL_SPI_TransmitReceive+0x110>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002ac2:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002ac6:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8002ac8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002ad0:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002ad2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	b16b      	cbz	r3, 8002af6 <HAL_SPI_TransmitReceive+0x134>
 8002ada:	6823      	ldr	r3, [r4, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	07d0      	lsls	r0, r2, #31
 8002ae0:	d509      	bpl.n	8002af6 <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8002ae8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8002af4:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002af6:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002afa:	d0c4      	beq.n	8002a86 <HAL_SPI_TransmitReceive+0xc4>
 8002afc:	f7fe fa50 	bl	8000fa0 <HAL_GetTick>
 8002b00:	eba0 0009 	sub.w	r0, r0, r9
 8002b04:	4580      	cmp	r8, r0
 8002b06:	d8be      	bhi.n	8002a86 <HAL_SPI_TransmitReceive+0xc4>
        errorcode = HAL_TIMEOUT;
 8002b08:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002b10:	2300      	movs	r3, #0
 8002b12:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8002b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002b1a:	b119      	cbz	r1, 8002b24 <HAL_SPI_TransmitReceive+0x162>
 8002b1c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002b1e:	b292      	uxth	r2, r2
 8002b20:	2a01      	cmp	r2, #1
 8002b22:	d10a      	bne.n	8002b3a <HAL_SPI_TransmitReceive+0x178>
      if (hspi->TxXferCount > 1U)
 8002b24:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002b26:	b292      	uxth	r2, r2
 8002b28:	2a01      	cmp	r2, #1
 8002b2a:	d94d      	bls.n	8002bc8 <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002b2c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002b30:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8002b32:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b34:	3b02      	subs	r3, #2
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002b3a:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b3c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	b923      	cbnz	r3, 8002b4c <HAL_SPI_TransmitReceive+0x18a>
 8002b42:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0a3      	beq.n	8002a94 <HAL_SPI_TransmitReceive+0xd2>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002b4c:	b197      	cbz	r7, 8002b74 <HAL_SPI_TransmitReceive+0x1b2>
 8002b4e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	b17b      	cbz	r3, 8002b74 <HAL_SPI_TransmitReceive+0x1b2>
 8002b54:	6823      	ldr	r3, [r4, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	0791      	lsls	r1, r2, #30
 8002b5a:	d50b      	bpl.n	8002b74 <HAL_SPI_TransmitReceive+0x1b2>
        if (hspi->TxXferCount > 1U)
 8002b5c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002b5e:	b292      	uxth	r2, r2
 8002b60:	2a01      	cmp	r2, #1
 8002b62:	d939      	bls.n	8002bd8 <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8002b64:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002b68:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8002b6a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b6c:	3b02      	subs	r3, #2
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002b72:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002b74:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	b1db      	cbz	r3, 8002bb4 <HAL_SPI_TransmitReceive+0x1f2>
 8002b7c:	6823      	ldr	r3, [r4, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	07d2      	lsls	r2, r2, #31
 8002b82:	d517      	bpl.n	8002bb4 <HAL_SPI_TransmitReceive+0x1f2>
        if (hspi->RxXferCount > 1U)
 8002b84:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002b88:	b292      	uxth	r2, r2
 8002b8a:	2a01      	cmp	r2, #1
 8002b8c:	d92c      	bls.n	8002be8 <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	f826 2b02 	strh.w	r2, [r6], #2
          hspi->RxXferCount -= 2U;
 8002b94:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002b98:	3a02      	subs	r2, #2
 8002b9a:	b292      	uxth	r2, r2
 8002b9c:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002ba0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002ba4:	b292      	uxth	r2, r2
 8002ba6:	2a01      	cmp	r2, #1
 8002ba8:	d803      	bhi.n	8002bb2 <HAL_SPI_TransmitReceive+0x1f0>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bb0:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 8002bb2:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002bb4:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002bb8:	d0c0      	beq.n	8002b3c <HAL_SPI_TransmitReceive+0x17a>
 8002bba:	f7fe f9f1 	bl	8000fa0 <HAL_GetTick>
 8002bbe:	eba0 0009 	sub.w	r0, r0, r9
 8002bc2:	4580      	cmp	r8, r0
 8002bc4:	d8ba      	bhi.n	8002b3c <HAL_SPI_TransmitReceive+0x17a>
 8002bc6:	e79f      	b.n	8002b08 <HAL_SPI_TransmitReceive+0x146>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002bc8:	782a      	ldrb	r2, [r5, #0]
 8002bca:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002bcc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002bd4:	3501      	adds	r5, #1
 8002bd6:	e7b0      	b.n	8002b3a <HAL_SPI_TransmitReceive+0x178>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002bd8:	782a      	ldrb	r2, [r5, #0]
 8002bda:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8002bdc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002be4:	3501      	adds	r5, #1
 8002be6:	e7c4      	b.n	8002b72 <HAL_SPI_TransmitReceive+0x1b0>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002be8:	7b1b      	ldrb	r3, [r3, #12]
 8002bea:	7033      	strb	r3, [r6, #0]
          hspi->RxXferCount--;
 8002bec:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bf8:	3601      	adds	r6, #1
 8002bfa:	e7da      	b.n	8002bb2 <HAL_SPI_TransmitReceive+0x1f0>
    errorcode = HAL_BUSY;
 8002bfc:	2002      	movs	r0, #2
 8002bfe:	e784      	b.n	8002b0a <HAL_SPI_TransmitReceive+0x148>
  __HAL_LOCK(hspi);
 8002c00:	2002      	movs	r0, #2
}
 8002c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002c06 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c06:	b084      	sub	sp, #16
 8002c08:	a801      	add	r0, sp, #4
 8002c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002c0e:	b004      	add	sp, #16
 8002c10:	2000      	movs	r0, #0
 8002c12:	4770      	bx	lr

08002c14 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002c14:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8002c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c22:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002c26:	2000      	movs	r0, #0
 8002c28:	4770      	bx	lr

08002c2a <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002c2a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002c2e:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8002c32:	045b      	lsls	r3, r3, #17
 8002c34:	0c5b      	lsrs	r3, r3, #17
 8002c36:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	4770      	bx	lr

08002c3e <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002c3e:	2000      	movs	r0, #0
 8002c40:	4770      	bx	lr

08002c42 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c42:	b084      	sub	sp, #16
 8002c44:	b510      	push	{r4, lr}
 8002c46:	ac03      	add	r4, sp, #12
 8002c48:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002c4c:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8002c54:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002c58:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002c5c:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8002c60:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8002c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR |= winterruptmask;
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8002c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c72:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8002c76:	b004      	add	sp, #16
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4770      	bx	lr

08002c7c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002c7e:	780c      	ldrb	r4, [r1, #0]
 8002c80:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002c84:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
{
 8002c88:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002c8a:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8002c8e:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002c90:	0412      	lsls	r2, r2, #16
 8002c92:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8002c94:	2803      	cmp	r0, #3
 8002c96:	d850      	bhi.n	8002d3a <USB_ActivateEndpoint+0xbe>
 8002c98:	e8df f000 	tbb	[pc, r0]
 8002c9c:	49044c02 	.word	0x49044c02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8002ca4:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal);
 8002ca6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002caa:	780e      	ldrb	r6, [r1, #0]
 8002cac:	4cab      	ldr	r4, [pc, #684]	; (8002f5c <USB_ActivateEndpoint+0x2e0>)
 8002cae:	b235      	sxth	r5, r6
 8002cb0:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8002cb4:	b292      	uxth	r2, r2
 8002cb6:	4022      	ands	r2, r4
 8002cb8:	4332      	orrs	r2, r6
 8002cba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cc2:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  if (ep->doublebuffer == 0U)
 8002cc6:	7b0d      	ldrb	r5, [r1, #12]
 8002cc8:	780a      	ldrb	r2, [r1, #0]
 8002cca:	2d00      	cmp	r5, #0
 8002ccc:	f040 8082 	bne.w	8002dd4 <USB_ActivateEndpoint+0x158>
  {
    if (ep->is_in != 0U)
 8002cd0:	784f      	ldrb	r7, [r1, #1]
 8002cd2:	88ce      	ldrh	r6, [r1, #6]
 8002cd4:	2508      	movs	r5, #8
 8002cd6:	b397      	cbz	r7, 8002d3e <USB_ActivateEndpoint+0xc2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002cd8:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8002cdc:	fb15 3202 	smlabb	r2, r5, r2, r3
 8002ce0:	fa12 f287 	uxtah	r2, r2, r7
 8002ce4:	f026 0601 	bic.w	r6, r6, #1
 8002ce8:	f8a2 6400 	strh.w	r6, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002cec:	780d      	ldrb	r5, [r1, #0]
 8002cee:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8002cf2:	0656      	lsls	r6, r2, #25
 8002cf4:	d509      	bpl.n	8002d0a <USB_ActivateEndpoint+0x8e>
 8002cf6:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8002cfa:	b292      	uxth	r2, r2
 8002cfc:	4014      	ands	r4, r2
 8002cfe:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8002d02:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8002d06:	f823 4025 	strh.w	r4, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002d0a:	78ca      	ldrb	r2, [r1, #3]
 8002d0c:	7809      	ldrb	r1, [r1, #0]
 8002d0e:	4c94      	ldr	r4, [pc, #592]	; (8002f60 <USB_ActivateEndpoint+0x2e4>)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002d10:	b209      	sxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8002d12:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002d14:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002d18:	b292      	uxth	r2, r2
 8002d1a:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 8002d1e:	d001      	beq.n	8002d24 <USB_ActivateEndpoint+0xa8>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002d20:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002d24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d2c:	e0c5      	b.n	8002eba <USB_ActivateEndpoint+0x23e>
      wEpRegVal |= USB_EP_INTERRUPT;
 8002d2e:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8002d32:	e7b7      	b.n	8002ca4 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002d34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d38:	e7b4      	b.n	8002ca4 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8002d3a:	2001      	movs	r0, #1
 8002d3c:	e7b3      	b.n	8002ca6 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002d3e:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8002d42:	fb15 3202 	smlabb	r2, r5, r2, r3
 8002d46:	fa12 f284 	uxtah	r2, r2, r4
 8002d4a:	f026 0601 	bic.w	r6, r6, #1
 8002d4e:	f8a2 6404 	strh.w	r6, [r2, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002d52:	780a      	ldrb	r2, [r1, #0]
 8002d54:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002d58:	690c      	ldr	r4, [r1, #16]
 8002d5a:	fb15 3202 	smlabb	r2, r5, r2, r3
 8002d5e:	b2b6      	uxth	r6, r6
 8002d60:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8002d64:	b954      	cbnz	r4, 8002d7c <USB_ActivateEndpoint+0x100>
 8002d66:	5b94      	ldrh	r4, [r2, r6]
 8002d68:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 8002d6c:	04a4      	lsls	r4, r4, #18
 8002d6e:	0ca4      	lsrs	r4, r4, #18
 8002d70:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8002d74:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002d78:	5394      	strh	r4, [r2, r6]
 8002d7a:	e007      	b.n	8002d8c <USB_ActivateEndpoint+0x110>
 8002d7c:	2c3d      	cmp	r4, #61	; 0x3d
 8002d7e:	d824      	bhi.n	8002dca <USB_ActivateEndpoint+0x14e>
 8002d80:	0865      	lsrs	r5, r4, #1
 8002d82:	07e4      	lsls	r4, r4, #31
 8002d84:	bf48      	it	mi
 8002d86:	3501      	addmi	r5, #1
 8002d88:	02ad      	lsls	r5, r5, #10
 8002d8a:	5395      	strh	r5, [r2, r6]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d8c:	780c      	ldrb	r4, [r1, #0]
 8002d8e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002d92:	0452      	lsls	r2, r2, #17
 8002d94:	d50d      	bpl.n	8002db2 <USB_ActivateEndpoint+0x136>
 8002d96:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002d9a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002d9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002da2:	0412      	lsls	r2, r2, #16
 8002da4:	0c12      	lsrs	r2, r2, #16
 8002da6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002daa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dae:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002db2:	7809      	ldrb	r1, [r1, #0]
 8002db4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002db8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002dbc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002dc0:	0412      	lsls	r2, r2, #16
 8002dc2:	0c12      	lsrs	r2, r2, #16
 8002dc4:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002dc8:	e7ac      	b.n	8002d24 <USB_ActivateEndpoint+0xa8>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002dca:	4d66      	ldr	r5, [pc, #408]	; (8002f64 <USB_ActivateEndpoint+0x2e8>)
 8002dcc:	0964      	lsrs	r4, r4, #5
 8002dce:	ea45 2484 	orr.w	r4, r5, r4, lsl #10
 8002dd2:	e7d1      	b.n	8002d78 <USB_ActivateEndpoint+0xfc>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002dd4:	b212      	sxth	r2, r2
 8002dd6:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8002dda:	b2ad      	uxth	r5, r5
 8002ddc:	4025      	ands	r5, r4
 8002dde:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 8002de2:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002de6:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002dea:	780e      	ldrb	r6, [r1, #0]
 8002dec:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8002df0:	2208      	movs	r2, #8
 8002df2:	fb12 3606 	smlabb	r6, r2, r6, r3
 8002df6:	fa16 f585 	uxtah	r5, r6, r5
 8002dfa:	890e      	ldrh	r6, [r1, #8]
 8002dfc:	f026 0601 	bic.w	r6, r6, #1
 8002e00:	f8a5 6400 	strh.w	r6, [r5, #1024]	; 0x400
 8002e04:	780e      	ldrb	r6, [r1, #0]
 8002e06:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8002e0a:	fb12 3206 	smlabb	r2, r2, r6, r3
 8002e0e:	fa12 f285 	uxtah	r2, r2, r5
 8002e12:	894d      	ldrh	r5, [r1, #10]
 8002e14:	f025 0501 	bic.w	r5, r5, #1
 8002e18:	f8a2 5404 	strh.w	r5, [r2, #1028]	; 0x404
 8002e1c:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 8002e1e:	784d      	ldrb	r5, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e20:	b212      	sxth	r2, r2
    if (ep->is_in == 0U)
 8002e22:	2d00      	cmp	r5, #0
 8002e24:	d14c      	bne.n	8002ec0 <USB_ActivateEndpoint+0x244>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e26:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8002e2a:	046f      	lsls	r7, r5, #17
 8002e2c:	d509      	bpl.n	8002e42 <USB_ActivateEndpoint+0x1c6>
 8002e2e:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8002e32:	b2ad      	uxth	r5, r5
 8002e34:	402c      	ands	r4, r5
 8002e36:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8002e3a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8002e3e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e42:	780c      	ldrb	r4, [r1, #0]
 8002e44:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002e48:	0656      	lsls	r6, r2, #25
 8002e4a:	d50d      	bpl.n	8002e68 <USB_ActivateEndpoint+0x1ec>
 8002e4c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002e50:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002e54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e58:	0412      	lsls	r2, r2, #16
 8002e5a:	0c12      	lsrs	r2, r2, #16
 8002e5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e60:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002e64:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002e68:	780c      	ldrb	r4, [r1, #0]
 8002e6a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002e6e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002e72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e76:	0412      	lsls	r2, r2, #16
 8002e78:	0c12      	lsrs	r2, r2, #16
 8002e7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e7e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002e82:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e86:	780d      	ldrb	r5, [r1, #0]
 8002e88:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8002e8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e94:	0412      	lsls	r2, r2, #16
 8002e96:	0c12      	lsrs	r2, r2, #16
 8002e98:	f248 0480 	movw	r4, #32896	; 0x8080
 8002e9c:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002ea0:	4322      	orrs	r2, r4
 8002ea2:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ea6:	7809      	ldrb	r1, [r1, #0]
 8002ea8:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002eac:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb4:	0412      	lsls	r2, r2, #16
 8002eb6:	0c12      	lsrs	r2, r2, #16
 8002eb8:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002eba:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 8002ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ec0:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8002ec4:	046d      	lsls	r5, r5, #17
 8002ec6:	d509      	bpl.n	8002edc <USB_ActivateEndpoint+0x260>
 8002ec8:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8002ecc:	b2ad      	uxth	r5, r5
 8002ece:	402c      	ands	r4, r5
 8002ed0:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8002ed4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8002ed8:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002edc:	780c      	ldrb	r4, [r1, #0]
 8002ede:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002ee2:	0652      	lsls	r2, r2, #25
 8002ee4:	d50d      	bpl.n	8002f02 <USB_ActivateEndpoint+0x286>
 8002ee6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002eea:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002eee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002ef2:	0412      	lsls	r2, r2, #16
 8002ef4:	0c12      	lsrs	r2, r2, #16
 8002ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002efa:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002efe:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002f02:	780c      	ldrb	r4, [r1, #0]
 8002f04:	4d16      	ldr	r5, [pc, #88]	; (8002f60 <USB_ActivateEndpoint+0x2e4>)
 8002f06:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002f0a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002f0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f12:	0412      	lsls	r2, r2, #16
 8002f14:	0c12      	lsrs	r2, r2, #16
 8002f16:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f1e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8002f22:	780c      	ldrb	r4, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 8002f24:	78ca      	ldrb	r2, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002f26:	b224      	sxth	r4, r4
      if (ep->type != EP_TYPE_ISOC)
 8002f28:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002f2a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002f2e:	b292      	uxth	r2, r2
 8002f30:	ea02 0205 	and.w	r2, r2, r5
 8002f34:	bf18      	it	ne
 8002f36:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f42:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002f46:	7809      	ldrb	r1, [r1, #0]
 8002f48:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002f4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f50:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f54:	0412      	lsls	r2, r2, #16
 8002f56:	0c12      	lsrs	r2, r2, #16
 8002f58:	e6e4      	b.n	8002d24 <USB_ActivateEndpoint+0xa8>
 8002f5a:	bf00      	nop
 8002f5c:	ffff8f8f 	.word	0xffff8f8f
 8002f60:	ffff8fbf 	.word	0xffff8fbf
 8002f64:	ffff8000 	.word	0xffff8000

08002f68 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002f68:	b510      	push	{r4, lr}
 8002f6a:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8002f6c:	7b0c      	ldrb	r4, [r1, #12]
 8002f6e:	784a      	ldrb	r2, [r1, #1]
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f70:	b21b      	sxth	r3, r3
  if (ep->doublebuffer == 0U)
 8002f72:	2c00      	cmp	r4, #0
 8002f74:	d13d      	bne.n	8002ff2 <USB_DeactivateEndpoint+0x8a>
    if (ep->is_in != 0U)
 8002f76:	b312      	cbz	r2, 8002fbe <USB_DeactivateEndpoint+0x56>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f78:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002f7c:	0652      	lsls	r2, r2, #25
 8002f7e:	d50d      	bpl.n	8002f9c <USB_DeactivateEndpoint+0x34>
 8002f80:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002f84:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002f88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f8c:	0412      	lsls	r2, r2, #16
 8002f8e:	0c12      	lsrs	r2, r2, #16
 8002f90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f94:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002f98:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f9c:	780a      	ldrb	r2, [r1, #0]
 8002f9e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002faa:	041b      	lsls	r3, r3, #16
 8002fac:	0c1b      	lsrs	r3, r3, #16
 8002fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8002fba:	2000      	movs	r0, #0
 8002fbc:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002fbe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002fc2:	0454      	lsls	r4, r2, #17
 8002fc4:	d50d      	bpl.n	8002fe2 <USB_DeactivateEndpoint+0x7a>
 8002fc6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002fca:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002fce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002fd2:	0412      	lsls	r2, r2, #16
 8002fd4:	0c12      	lsrs	r2, r2, #16
 8002fd6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002fda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fde:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002fe2:	780a      	ldrb	r2, [r1, #0]
 8002fe4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002fe8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff0:	e7db      	b.n	8002faa <USB_DeactivateEndpoint+0x42>
    if (ep->is_in == 0U)
 8002ff2:	2a00      	cmp	r2, #0
 8002ff4:	d14e      	bne.n	8003094 <USB_DeactivateEndpoint+0x12c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ff6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002ffa:	0452      	lsls	r2, r2, #17
 8002ffc:	d50d      	bpl.n	800301a <USB_DeactivateEndpoint+0xb2>
 8002ffe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003002:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003006:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800300a:	0412      	lsls	r2, r2, #16
 800300c:	0c12      	lsrs	r2, r2, #16
 800300e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003012:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003016:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800301a:	780a      	ldrb	r2, [r1, #0]
 800301c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003020:	065c      	lsls	r4, r3, #25
 8003022:	d50d      	bpl.n	8003040 <USB_DeactivateEndpoint+0xd8>
 8003024:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800302c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003030:	041b      	lsls	r3, r3, #16
 8003032:	0c1b      	lsrs	r3, r3, #16
 8003034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003038:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800303c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003040:	780a      	ldrb	r2, [r1, #0]
 8003042:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800304a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800304e:	041b      	lsls	r3, r3, #16
 8003050:	0c1b      	lsrs	r3, r3, #16
 8003052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003056:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800305a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800305e:	780c      	ldrb	r4, [r1, #0]
 8003060:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003064:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306c:	041b      	lsls	r3, r3, #16
 800306e:	0c1b      	lsrs	r3, r3, #16
 8003070:	f248 0280 	movw	r2, #32896	; 0x8080
 8003074:	4313      	orrs	r3, r2
 8003076:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800307a:	7809      	ldrb	r1, [r1, #0]
 800307c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003088:	041b      	lsls	r3, r3, #16
 800308a:	0c1b      	lsrs	r3, r3, #16
 800308c:	4313      	orrs	r3, r2
 800308e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8003092:	e792      	b.n	8002fba <USB_DeactivateEndpoint+0x52>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003094:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003098:	0452      	lsls	r2, r2, #17
 800309a:	d50d      	bpl.n	80030b8 <USB_DeactivateEndpoint+0x150>
 800309c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80030a0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80030a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030a8:	0412      	lsls	r2, r2, #16
 80030aa:	0c12      	lsrs	r2, r2, #16
 80030ac:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80030b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030b4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030b8:	780a      	ldrb	r2, [r1, #0]
 80030ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80030be:	065b      	lsls	r3, r3, #25
 80030c0:	d50d      	bpl.n	80030de <USB_DeactivateEndpoint+0x176>
 80030c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80030c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ce:	041b      	lsls	r3, r3, #16
 80030d0:	0c1b      	lsrs	r3, r3, #16
 80030d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030da:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80030de:	780a      	ldrb	r2, [r1, #0]
 80030e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80030e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	0c1b      	lsrs	r3, r3, #16
 80030f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030fc:	780c      	ldrb	r4, [r1, #0]
 80030fe:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800310a:	041b      	lsls	r3, r3, #16
 800310c:	0c1b      	lsrs	r3, r3, #16
 800310e:	f248 0280 	movw	r2, #32896	; 0x8080
 8003112:	4313      	orrs	r3, r2
 8003114:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003118:	7809      	ldrb	r1, [r1, #0]
 800311a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800311e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003126:	e7af      	b.n	8003088 <USB_DeactivateEndpoint+0x120>

08003128 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003128:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800312a:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800312c:	b212      	sxth	r2, r2
  if (ep->is_in != 0U)
 800312e:	b18b      	cbz	r3, 8003154 <USB_EPSetStall+0x2c>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003130:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800313c:	041b      	lsls	r3, r3, #16
 800313e:	0c1b      	lsrs	r3, r3, #16
 8003140:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800314c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8003150:	2000      	movs	r0, #0
 8003152:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003154:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800315c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003160:	041b      	lsls	r3, r3, #16
 8003162:	0c1b      	lsrs	r3, r3, #16
 8003164:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003168:	e7ec      	b.n	8003144 <USB_EPSetStall+0x1c>

0800316a <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800316a:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800316c:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800316e:	b212      	sxth	r2, r2
  if (ep->is_in != 0U)
 8003170:	b323      	cbz	r3, 80031bc <USB_EPClearStall+0x52>
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003172:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003176:	065b      	lsls	r3, r3, #25
 8003178:	d50d      	bpl.n	8003196 <USB_EPClearStall+0x2c>
 800317a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800317e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003186:	041b      	lsls	r3, r3, #16
 8003188:	0c1b      	lsrs	r3, r3, #16
 800318a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800318e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003192:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003196:	780a      	ldrb	r2, [r1, #0]
 8003198:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800319c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a4:	041b      	lsls	r3, r3, #16
 80031a6:	0c1b      	lsrs	r3, r3, #16
 80031a8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80031ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 80031b8:	2000      	movs	r0, #0
 80031ba:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80031bc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031c0:	045b      	lsls	r3, r3, #17
 80031c2:	d50d      	bpl.n	80031e0 <USB_EPClearStall+0x76>
 80031c4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d0:	041b      	lsls	r3, r3, #16
 80031d2:	0c1b      	lsrs	r3, r3, #16
 80031d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031dc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80031e0:	780a      	ldrb	r2, [r1, #0]
 80031e2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ee:	041b      	lsls	r3, r3, #16
 80031f0:	0c1b      	lsrs	r3, r3, #16
 80031f2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80031f6:	e7d9      	b.n	80031ac <USB_EPClearStall+0x42>

080031f8 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80031f8:	b911      	cbnz	r1, 8003200 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8003200:	2000      	movs	r0, #0
 8003202:	4770      	bx	lr

08003204 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8003204:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8003208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800320c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003210:	b29b      	uxth	r3, r3
 8003212:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8003216:	2000      	movs	r0, #0
 8003218:	4770      	bx	lr

0800321a <USB_DevDisconnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800321a:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 800321e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003222:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8003226:	2000      	movs	r0, #0
 8003228:	4770      	bx	lr

0800322a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800322a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800322e:	b280      	uxth	r0, r0
 8003230:	4770      	bx	lr

08003232 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003232:	2000      	movs	r0, #0
 8003234:	4770      	bx	lr

08003236 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003236:	b510      	push	{r4, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003238:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800323c:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800323e:	4410      	add	r0, r2
 8003240:	f023 0301 	bic.w	r3, r3, #1
 8003244:	4602      	mov	r2, r0
 8003246:	4403      	add	r3, r0
 8003248:	1a14      	subs	r4, r2, r0

  for (i = n; i != 0U; i--)
 800324a:	429a      	cmp	r2, r3
 800324c:	440c      	add	r4, r1
 800324e:	d100      	bne.n	8003252 <USB_WritePMA+0x1c>
    {
      pdwVal++;
    }
    pBuf++;
  }
}
 8003250:	bd10      	pop	{r4, pc}
 8003252:	8824      	ldrh	r4, [r4, #0]
    *pdwVal = (uint16_t)temp2;
 8003254:	f822 4b02 	strh.w	r4, [r2], #2
 8003258:	e7f6      	b.n	8003248 <USB_WritePMA+0x12>
	...

0800325c <USB_EPStartXfer>:
{
 800325c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325e:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8003260:	7848      	ldrb	r0, [r1, #1]
  uint32_t len = ep->xfer_len;
 8003262:	698a      	ldr	r2, [r1, #24]
 8003264:	690b      	ldr	r3, [r1, #16]
 8003266:	7b0f      	ldrb	r7, [r1, #12]
  if (ep->is_in == 1U)
 8003268:	2801      	cmp	r0, #1
{
 800326a:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 800326c:	d16b      	bne.n	8003346 <USB_EPStartXfer+0xea>
    if (ep->xfer_len > ep->maxpacket)
 800326e:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8003270:	bf97      	itett	ls
 8003272:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8003274:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 8003276:	618b      	strls	r3, [r1, #24]
 8003278:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 800327a:	bf88      	it	hi
 800327c:	618a      	strhi	r2, [r1, #24]
 800327e:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 8003280:	bb0f      	cbnz	r7, 80032c6 <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003282:	88ca      	ldrh	r2, [r1, #6]
 8003284:	6949      	ldr	r1, [r1, #20]
 8003286:	4633      	mov	r3, r6
 8003288:	4620      	mov	r0, r4
 800328a:	f7ff ffd4 	bl	8003236 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800328e:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8003292:	782a      	ldrb	r2, [r5, #0]
 8003294:	f204 4102 	addw	r1, r4, #1026	; 0x402
 8003298:	fa11 f383 	uxtah	r3, r1, r3
 800329c:	f823 6032 	strh.w	r6, [r3, r2, lsl #3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80032a0:	782a      	ldrb	r2, [r5, #0]
 80032a2:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80032a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ae:	041b      	lsls	r3, r3, #16
 80032b0:	0c1b      	lsrs	r3, r3, #16
 80032b2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80032b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032be:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 80032c2:	2000      	movs	r0, #0
 80032c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80032c6:	7809      	ldrb	r1, [r1, #0]
 80032c8:	b20a      	sxth	r2, r1
 80032ca:	f834 2022 	ldrh.w	r2, [r4, r2, lsl #2]
 80032ce:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80032d2:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80032d6:	bf15      	itete	ne
 80032d8:	f204 4006 	addwne	r0, r4, #1030	; 0x406
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80032dc:	f204 4002 	addweq	r0, r4, #1026	; 0x402
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80032e0:	fa10 f282 	uxtahne	r2, r0, r2
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80032e4:	fa10 f282 	uxtaheq	r2, r0, r2
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80032e8:	bf15      	itete	ne
 80032ea:	f822 3031 	strhne.w	r3, [r2, r1, lsl #3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80032ee:	f822 3031 	strheq.w	r3, [r2, r1, lsl #3]
        pmabuffer = ep->pmaaddr1;
 80032f2:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 80032f4:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80032f6:	6969      	ldr	r1, [r5, #20]
 80032f8:	4633      	mov	r3, r6
 80032fa:	4620      	mov	r0, r4
 80032fc:	f7ff ff9b 	bl	8003236 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003300:	786b      	ldrb	r3, [r5, #1]
 8003302:	782a      	ldrb	r2, [r5, #0]
 8003304:	b97b      	cbnz	r3, 8003326 <USB_EPStartXfer+0xca>
 8003306:	b212      	sxth	r2, r2
 8003308:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800330c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003314:	041b      	lsls	r3, r3, #16
 8003316:	0c1b      	lsrs	r3, r3, #16
 8003318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800331c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003320:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8003324:	e7bc      	b.n	80032a0 <USB_EPStartXfer+0x44>
 8003326:	2b01      	cmp	r3, #1
 8003328:	d1ba      	bne.n	80032a0 <USB_EPStartXfer+0x44>
 800332a:	b212      	sxth	r2, r2
 800332c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003338:	041b      	lsls	r3, r3, #16
 800333a:	0c1b      	lsrs	r3, r3, #16
 800333c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003344:	e7ec      	b.n	8003320 <USB_EPStartXfer+0xc4>
    if (ep->xfer_len > ep->maxpacket)
 8003346:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8003348:	bf95      	itete	ls
 800334a:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 800334c:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 800334e:	618b      	strls	r3, [r1, #24]
      ep->xfer_len -= len;
 8003350:	618a      	strhi	r2, [r1, #24]
      ep->xfer_len = 0U;
 8003352:	bf98      	it	ls
 8003354:	4613      	movls	r3, r2
 8003356:	7809      	ldrb	r1, [r1, #0]
    if (ep->doublebuffer == 0U)
 8003358:	b9a7      	cbnz	r7, 8003384 <USB_EPStartXfer+0x128>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800335a:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 800335e:	f204 4006 	addw	r0, r4, #1030	; 0x406
 8003362:	fa10 f282 	uxtah	r2, r0, r2
 8003366:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800336a:	2b00      	cmp	r3, #0
 800336c:	d137      	bne.n	80033de <USB_EPStartXfer+0x182>
 800336e:	8813      	ldrh	r3, [r2, #0]
 8003370:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003374:	049b      	lsls	r3, r3, #18
 8003376:	0c9b      	lsrs	r3, r3, #18
 8003378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800337c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003380:	8013      	strh	r3, [r2, #0]
 8003382:	e034      	b.n	80033ee <USB_EPStartXfer+0x192>
 8003384:	b990      	cbnz	r0, 80033ac <USB_EPStartXfer+0x150>
 8003386:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 800338a:	f204 4002 	addw	r0, r4, #1026	; 0x402
 800338e:	fa10 f282 	uxtah	r2, r0, r2
 8003392:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003396:	b9ab      	cbnz	r3, 80033c4 <USB_EPStartXfer+0x168>
 8003398:	8811      	ldrh	r1, [r2, #0]
 800339a:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 800339e:	0489      	lsls	r1, r1, #18
 80033a0:	0c89      	lsrs	r1, r1, #18
 80033a2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80033a6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80033aa:	8011      	strh	r1, [r2, #0]
 80033ac:	786a      	ldrb	r2, [r5, #1]
 80033ae:	7828      	ldrb	r0, [r5, #0]
 80033b0:	bb72      	cbnz	r2, 8003410 <USB_EPStartXfer+0x1b4>
 80033b2:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80033b6:	f204 4106 	addw	r1, r4, #1030	; 0x406
 80033ba:	fa11 f282 	uxtah	r2, r1, r2
 80033be:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80033c2:	e7d2      	b.n	800336a <USB_EPStartXfer+0x10e>
 80033c4:	2b3d      	cmp	r3, #61	; 0x3d
 80033c6:	d805      	bhi.n	80033d4 <USB_EPStartXfer+0x178>
 80033c8:	0859      	lsrs	r1, r3, #1
 80033ca:	07d8      	lsls	r0, r3, #31
 80033cc:	bf48      	it	mi
 80033ce:	3101      	addmi	r1, #1
 80033d0:	0289      	lsls	r1, r1, #10
 80033d2:	e7ea      	b.n	80033aa <USB_EPStartXfer+0x14e>
 80033d4:	4814      	ldr	r0, [pc, #80]	; (8003428 <USB_EPStartXfer+0x1cc>)
 80033d6:	0959      	lsrs	r1, r3, #5
 80033d8:	ea40 2181 	orr.w	r1, r0, r1, lsl #10
 80033dc:	e7e5      	b.n	80033aa <USB_EPStartXfer+0x14e>
 80033de:	2b3d      	cmp	r3, #61	; 0x3d
 80033e0:	d811      	bhi.n	8003406 <USB_EPStartXfer+0x1aa>
 80033e2:	0859      	lsrs	r1, r3, #1
 80033e4:	07db      	lsls	r3, r3, #31
 80033e6:	bf48      	it	mi
 80033e8:	3101      	addmi	r1, #1
 80033ea:	0289      	lsls	r1, r1, #10
 80033ec:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80033ee:	782a      	ldrb	r2, [r5, #0]
 80033f0:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80033f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fc:	041b      	lsls	r3, r3, #16
 80033fe:	0c1b      	lsrs	r3, r3, #16
 8003400:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003404:	e757      	b.n	80032b6 <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003406:	0959      	lsrs	r1, r3, #5
 8003408:	4b07      	ldr	r3, [pc, #28]	; (8003428 <USB_EPStartXfer+0x1cc>)
 800340a:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800340e:	e7b7      	b.n	8003380 <USB_EPStartXfer+0x124>
 8003410:	2a01      	cmp	r2, #1
 8003412:	bf01      	itttt	eq
 8003414:	f8b4 1050 	ldrheq.w	r1, [r4, #80]	; 0x50
 8003418:	f204 4206 	addweq	r2, r4, #1030	; 0x406
 800341c:	fa12 f181 	uxtaheq	r1, r2, r1
 8003420:	f821 3030 	strheq.w	r3, [r1, r0, lsl #3]
 8003424:	e7e3      	b.n	80033ee <USB_EPStartXfer+0x192>
 8003426:	bf00      	nop
 8003428:	ffff8000 	.word	0xffff8000

0800342c <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800342c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 8003430:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003432:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003434:	085d      	lsrs	r5, r3, #1
 8003436:	460a      	mov	r2, r1
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003438:	4607      	mov	r7, r0

  for (i = n; i != 0U; i--)
 800343a:	462e      	mov	r6, r5
 800343c:	3202      	adds	r2, #2
 800343e:	b936      	cbnz	r6, 800344e <USB_ReadPMA+0x22>
    {
      pdwVal++;
    }
  }

  if ((wNBytes % 2U) != 0U)
 8003440:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003442:	bf44      	itt	mi
 8003444:	f830 3015 	ldrhmi.w	r3, [r0, r5, lsl #1]
 8003448:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
 800344c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *pdwVal;
 800344e:	f837 4b02 	ldrh.w	r4, [r7], #2
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003452:	f802 4c02 	strb.w	r4, [r2, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003456:	0a24      	lsrs	r4, r4, #8
 8003458:	f802 4c01 	strb.w	r4, [r2, #-1]
  for (i = n; i != 0U; i--)
 800345c:	3e01      	subs	r6, #1
 800345e:	e7ed      	b.n	800343c <USB_ReadPMA+0x10>

08003460 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003460:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
{
 8003464:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003466:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800346a:	b15b      	cbz	r3, 8003484 <USBD_CDC_EP0_RxReady+0x24>
 800346c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003470:	28ff      	cmp	r0, #255	; 0xff
 8003472:	d007      	beq.n	8003484 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800347a:	4621      	mov	r1, r4
 800347c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 800347e:	23ff      	movs	r3, #255	; 0xff
 8003480:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003484:	2000      	movs	r0, #0
 8003486:	bd10      	pop	{r4, pc}

08003488 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8003488:	2343      	movs	r3, #67	; 0x43
 800348a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800348c:	4800      	ldr	r0, [pc, #0]	; (8003490 <USBD_CDC_GetFSCfgDesc+0x8>)
 800348e:	4770      	bx	lr
 8003490:	20000038 	.word	0x20000038

08003494 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8003494:	2343      	movs	r3, #67	; 0x43
 8003496:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003498:	4800      	ldr	r0, [pc, #0]	; (800349c <USBD_CDC_GetHSCfgDesc+0x8>)
 800349a:	4770      	bx	lr
 800349c:	2000007c 	.word	0x2000007c

080034a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80034a0:	2343      	movs	r3, #67	; 0x43
 80034a2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80034a4:	4800      	ldr	r0, [pc, #0]	; (80034a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80034a6:	4770      	bx	lr
 80034a8:	200000cc 	.word	0x200000cc

080034ac <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80034ac:	230a      	movs	r3, #10
 80034ae:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80034b0:	4800      	ldr	r0, [pc, #0]	; (80034b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80034b2:	4770      	bx	lr
 80034b4:	200000c0 	.word	0x200000c0

080034b8 <USBD_CDC_DataOut>:
{
 80034b8:	b538      	push	{r3, r4, r5, lr}
 80034ba:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80034bc:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80034c0:	f001 fc52 	bl	8004d68 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 80034c4:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80034c8:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 80034cc:	b14b      	cbz	r3, 80034e2 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80034ce:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 80034d2:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80034dc:	4798      	blx	r3
    return USBD_OK;
 80034de:	2000      	movs	r0, #0
 80034e0:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80034e2:	2002      	movs	r0, #2
}
 80034e4:	bd38      	pop	{r3, r4, r5, pc}

080034e6 <USBD_CDC_DataIn>:
{
 80034e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80034e8:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 80034ec:	b1ce      	cbz	r6, 8003522 <USBD_CDC_DataIn+0x3c>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80034ee:	2314      	movs	r3, #20
 80034f0:	fb03 0301 	mla	r3, r3, r1, r0
 80034f4:	69da      	ldr	r2, [r3, #28]
 80034f6:	b182      	cbz	r2, 800351a <USBD_CDC_DataIn+0x34>
 80034f8:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 80034fc:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8003500:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003502:	fbb2 f4f5 	udiv	r4, r2, r5
 8003506:	fb05 2414 	mls	r4, r5, r4, r2
 800350a:	b934      	cbnz	r4, 800351a <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 800350c:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800350e:	4622      	mov	r2, r4
 8003510:	4623      	mov	r3, r4
 8003512:	f001 fc0d 	bl	8004d30 <USBD_LL_Transmit>
    return USBD_OK;
 8003516:	4620      	mov	r0, r4
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8003518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 800351a:	2000      	movs	r0, #0
 800351c:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8003520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8003522:	2002      	movs	r0, #2
}
 8003524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003526 <USBD_CDC_Setup>:
{
 8003526:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800352a:	780a      	ldrb	r2, [r1, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800352c:	f8d0 7290 	ldr.w	r7, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 8003530:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003534:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8003538:	4605      	mov	r5, r0
 800353a:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 800353c:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8003540:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003544:	d028      	beq.n	8003598 <USBD_CDC_Setup+0x72>
 8003546:	2c20      	cmp	r4, #32
 8003548:	d147      	bne.n	80035da <USBD_CDC_Setup+0xb4>
    if (req->wLength)
 800354a:	88cc      	ldrh	r4, [r1, #6]
 800354c:	784b      	ldrb	r3, [r1, #1]
 800354e:	b1e4      	cbz	r4, 800358a <USBD_CDC_Setup+0x64>
      if (req->bmRequest & 0x80U)
 8003550:	0612      	lsls	r2, r2, #24
 8003552:	d511      	bpl.n	8003578 <USBD_CDC_Setup+0x52>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003554:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003558:	4639      	mov	r1, r7
 800355a:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800355e:	4618      	mov	r0, r3
 8003560:	4622      	mov	r2, r4
 8003562:	47c8      	blx	r9
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003564:	88f2      	ldrh	r2, [r6, #6]
 8003566:	4639      	mov	r1, r7
 8003568:	4628      	mov	r0, r5
 800356a:	f000 fc3f 	bl	8003dec <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800356e:	4644      	mov	r4, r8
}
 8003570:	4620      	mov	r0, r4
 8003572:	b003      	add	sp, #12
 8003574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hcdc->CmdOpCode = req->bRequest;
 8003578:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800357c:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003580:	4622      	mov	r2, r4
 8003582:	4639      	mov	r1, r7
 8003584:	f000 fc47 	bl	8003e16 <USBD_CtlPrepareRx>
 8003588:	e7f1      	b.n	800356e <USBD_CDC_Setup+0x48>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800358a:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800358e:	4618      	mov	r0, r3
 8003590:	6895      	ldr	r5, [r2, #8]
 8003592:	4622      	mov	r2, r4
 8003594:	47a8      	blx	r5
 8003596:	e7eb      	b.n	8003570 <USBD_CDC_Setup+0x4a>
    switch (req->bRequest)
 8003598:	784f      	ldrb	r7, [r1, #1]
 800359a:	2f0a      	cmp	r7, #10
 800359c:	d00d      	beq.n	80035ba <USBD_CDC_Setup+0x94>
 800359e:	2f0b      	cmp	r7, #11
 80035a0:	d015      	beq.n	80035ce <USBD_CDC_Setup+0xa8>
 80035a2:	b9d7      	cbnz	r7, 80035da <USBD_CDC_Setup+0xb4>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80035a4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d114      	bne.n	80035d6 <USBD_CDC_Setup+0xb0>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80035ac:	2202      	movs	r2, #2
 80035ae:	f10d 0106 	add.w	r1, sp, #6
 80035b2:	f000 fc1b 	bl	8003dec <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80035b6:	463c      	mov	r4, r7
 80035b8:	e7da      	b.n	8003570 <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80035ba:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d109      	bne.n	80035d6 <USBD_CDC_Setup+0xb0>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80035c2:	2201      	movs	r2, #1
 80035c4:	f10d 0105 	add.w	r1, sp, #5
 80035c8:	f000 fc10 	bl	8003dec <USBD_CtlSendData>
 80035cc:	e7d0      	b.n	8003570 <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80035ce:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d0cc      	beq.n	8003570 <USBD_CDC_Setup+0x4a>
        USBD_CtlError (pdev, req);
 80035d6:	4631      	mov	r1, r6
 80035d8:	4628      	mov	r0, r5
    USBD_CtlError (pdev, req);
 80035da:	f000 fbe0 	bl	8003d9e <USBD_CtlError>
    ret = USBD_FAIL;
 80035de:	2402      	movs	r4, #2
    break;
 80035e0:	e7c6      	b.n	8003570 <USBD_CDC_Setup+0x4a>

080035e2 <USBD_CDC_DeInit>:
{
 80035e2:	b538      	push	{r3, r4, r5, lr}
 80035e4:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80035e6:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80035e8:	2181      	movs	r1, #129	; 0x81
 80035ea:	f001 fb59 	bl	8004ca0 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80035ee:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80035f0:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80035f2:	4620      	mov	r0, r4
 80035f4:	f001 fb54 	bl	8004ca0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80035f8:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80035fc:	2182      	movs	r1, #130	; 0x82
 80035fe:	4620      	mov	r0, r4
 8003600:	f001 fb4e 	bl	8004ca0 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8003604:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003608:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 800360a:	b14b      	cbz	r3, 8003620 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800360c:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003614:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8003618:	f001 fbd4 	bl	8004dc4 <USBD_static_free>
    pdev->pClassData = NULL;
 800361c:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8003620:	2000      	movs	r0, #0
 8003622:	bd38      	pop	{r3, r4, r5, pc}

08003624 <USBD_CDC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003624:	7c03      	ldrb	r3, [r0, #16]
{
 8003626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800362a:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800362c:	bbcb      	cbnz	r3, 80036a2 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800362e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003632:	2202      	movs	r2, #2
 8003634:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003636:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003638:	f001 fb22 	bl	8004c80 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800363c:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800363e:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003642:	4629      	mov	r1, r5
 8003644:	2202      	movs	r2, #2
 8003646:	4620      	mov	r0, r4
 8003648:	f001 fb1a 	bl	8004c80 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800364c:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003650:	2308      	movs	r3, #8
 8003652:	2203      	movs	r2, #3
 8003654:	2182      	movs	r1, #130	; 0x82
 8003656:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003658:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800365a:	f001 fb11 	bl	8004c80 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800365e:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003660:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003664:	f001 fbaa 	bl	8004dbc <USBD_static_malloc>
 8003668:	4606      	mov	r6, r0
 800366a:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 800366e:	b358      	cbz	r0, 80036c8 <USBD_CDC_Init+0xa4>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003670:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003678:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 800367c:	2700      	movs	r7, #0
 800367e:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8003682:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003686:	f1b8 0f00 	cmp.w	r8, #0
 800368a:	d113      	bne.n	80036b4 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800368c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003690:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003694:	4629      	mov	r1, r5
 8003696:	4620      	mov	r0, r4
 8003698:	f001 fb58 	bl	8004d4c <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800369c:	4640      	mov	r0, r8
 800369e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80036a2:	2340      	movs	r3, #64	; 0x40
 80036a4:	2202      	movs	r2, #2
 80036a6:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80036a8:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80036aa:	f001 fae9 	bl	8004c80 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80036ae:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80036b0:	2340      	movs	r3, #64	; 0x40
 80036b2:	e7c6      	b.n	8003642 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80036b4:	2340      	movs	r3, #64	; 0x40
 80036b6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80036ba:	4629      	mov	r1, r5
 80036bc:	4620      	mov	r0, r4
 80036be:	f001 fb45 	bl	8004d4c <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80036c2:	4638      	mov	r0, r7
 80036c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 80036c8:	4628      	mov	r0, r5
}
 80036ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080036ce <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 80036ce:	b119      	cbz	r1, 80036d8 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80036d0:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 80036d4:	2000      	movs	r0, #0
 80036d6:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80036d8:	2002      	movs	r0, #2
  }

  return ret;
}
 80036da:	4770      	bx	lr

080036dc <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80036dc:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80036e0:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80036e2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80036e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80036ea:	4770      	bx	lr

080036ec <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80036ec:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  return USBD_OK;
}
 80036f0:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80036f2:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80036f6:	4770      	bx	lr

080036f8 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80036f8:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 80036fc:	b510      	push	{r4, lr}

  if(pdev->pClassData != NULL)
 80036fe:	b182      	cbz	r2, 8003722 <USBD_CDC_TransmitPacket+0x2a>
  {
    if(hcdc->TxState == 0U)
 8003700:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8003704:	2301      	movs	r3, #1
 8003706:	b974      	cbnz	r4, 8003726 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8003708:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800370c:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8003710:	6303      	str	r3, [r0, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003712:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8003716:	b29b      	uxth	r3, r3
 8003718:	2181      	movs	r1, #129	; 0x81
 800371a:	f001 fb09 	bl	8004d30 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 800371e:	4620      	mov	r0, r4
 8003720:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8003722:	2002      	movs	r0, #2
 8003724:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8003726:	4618      	mov	r0, r3
  }
}
 8003728:	bd10      	pop	{r4, pc}

0800372a <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800372a:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 800372e:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8003730:	b162      	cbz	r2, 800374c <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003732:	7c04      	ldrb	r4, [r0, #16]
 8003734:	b944      	cbnz	r4, 8003748 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003736:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800373a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800373e:	2101      	movs	r1, #1
 8003740:	f001 fb04 	bl	8004d4c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003744:	2000      	movs	r0, #0
 8003746:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003748:	2340      	movs	r3, #64	; 0x40
 800374a:	e7f6      	b.n	800373a <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 800374c:	2002      	movs	r0, #2
  }
}
 800374e:	bd10      	pop	{r4, pc}

08003750 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003750:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8003752:	b180      	cbz	r0, 8003776 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003754:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003758:	b113      	cbz	r3, 8003760 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800375a:	2300      	movs	r3, #0
 800375c:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8003760:	b109      	cbz	r1, 8003766 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003762:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003766:	2301      	movs	r3, #1
 8003768:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 800376c:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800376e:	f001 fa2d 	bl	8004bcc <USBD_LL_Init>

  return USBD_OK;
 8003772:	2000      	movs	r0, #0
 8003774:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003776:	2002      	movs	r0, #2
}
 8003778:	bd08      	pop	{r3, pc}

0800377a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800377a:	b119      	cbz	r1, 8003784 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800377c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8003780:	2000      	movs	r0, #0
 8003782:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003784:	2002      	movs	r0, #2
  }

  return status;
}
 8003786:	4770      	bx	lr

08003788 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003788:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800378a:	f001 fa6b 	bl	8004c64 <USBD_LL_Start>

  return USBD_OK;
}
 800378e:	2000      	movs	r0, #0
 8003790:	bd08      	pop	{r3, pc}

08003792 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003792:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8003794:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003798:	b90b      	cbnz	r3, 800379e <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800379a:	2002      	movs	r0, #2
 800379c:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4798      	blx	r3
 80037a2:	2800      	cmp	r0, #0
 80037a4:	d1f9      	bne.n	800379a <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 80037a6:	bd08      	pop	{r3, pc}

080037a8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80037a8:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80037aa:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4798      	blx	r3
  return USBD_OK;
}
 80037b2:	2000      	movs	r0, #0
 80037b4:	bd08      	pop	{r3, pc}

080037b6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80037b6:	b538      	push	{r3, r4, r5, lr}
 80037b8:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80037ba:	f500 7520 	add.w	r5, r0, #640	; 0x280
 80037be:	4628      	mov	r0, r5
 80037c0:	f000 fad9 	bl	8003d76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80037c4:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80037c6:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 80037ca:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 80037ce:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 80037d2:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 80037d6:	f001 031f 	and.w	r3, r1, #31
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d00e      	beq.n	80037fc <USBD_LL_SetupStage+0x46>
 80037de:	d307      	bcc.n	80037f0 <USBD_LL_SetupStage+0x3a>
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d010      	beq.n	8003806 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80037e4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80037e8:	4620      	mov	r0, r4
 80037ea:	f001 fa67 	bl	8004cbc <USBD_LL_StallEP>
    break;
 80037ee:	e003      	b.n	80037f8 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80037f0:	4629      	mov	r1, r5
 80037f2:	4620      	mov	r0, r4
 80037f4:	f000 f8f0 	bl	80039d8 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80037f8:	2000      	movs	r0, #0
 80037fa:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80037fc:	4629      	mov	r1, r5
 80037fe:	4620      	mov	r0, r4
 8003800:	f000 fa0c 	bl	8003c1c <USBD_StdItfReq>
    break;
 8003804:	e7f8      	b.n	80037f8 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8003806:	4629      	mov	r1, r5
 8003808:	4620      	mov	r0, r4
 800380a:	f000 fa2c 	bl	8003c66 <USBD_StdEPReq>
    break;
 800380e:	e7f3      	b.n	80037f8 <USBD_LL_SetupStage+0x42>

08003810 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003810:	b570      	push	{r4, r5, r6, lr}
 8003812:	4605      	mov	r5, r0
 8003814:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8003816:	bb39      	cbnz	r1, 8003868 <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003818:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800381c:	2b03      	cmp	r3, #3
 800381e:	d11e      	bne.n	800385e <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 8003820:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8003824:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8003828:	4293      	cmp	r3, r2
 800382a:	d90b      	bls.n	8003844 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 800382c:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 800382e:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8003830:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 8003834:	bf8c      	ite	hi
 8003836:	b29a      	uxthhi	r2, r3
 8003838:	b292      	uxthls	r2, r2
 800383a:	4631      	mov	r1, r6
 800383c:	f000 fafa 	bl	8003e34 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003840:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8003842:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003844:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	b123      	cbz	r3, 8003856 <USBD_LL_DataOutStage+0x46>
 800384c:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8003850:	2a03      	cmp	r2, #3
 8003852:	d100      	bne.n	8003856 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8003854:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003856:	4628      	mov	r0, r5
 8003858:	f000 faf4 	bl	8003e44 <USBD_CtlSendStatus>
 800385c:	e7f0      	b.n	8003840 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800385e:	2b05      	cmp	r3, #5
 8003860:	d1ee      	bne.n	8003840 <USBD_LL_DataOutStage+0x30>
        USBD_LL_StallEP(pdev, 0U);
 8003862:	f001 fa2b 	bl	8004cbc <USBD_LL_StallEP>
 8003866:	e7eb      	b.n	8003840 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 8003868:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	b12b      	cbz	r3, 800387c <USBD_LL_DataOutStage+0x6c>
 8003870:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8003874:	2a03      	cmp	r2, #3
 8003876:	d101      	bne.n	800387c <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8003878:	4798      	blx	r3
 800387a:	e7e1      	b.n	8003840 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 800387c:	2002      	movs	r0, #2
}
 800387e:	bd70      	pop	{r4, r5, r6, pc}

08003880 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8003880:	b570      	push	{r4, r5, r6, lr}
 8003882:	4613      	mov	r3, r2
 8003884:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8003886:	460e      	mov	r6, r1
 8003888:	2900      	cmp	r1, #0
 800388a:	d148      	bne.n	800391e <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800388c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8003890:	2a02      	cmp	r2, #2
 8003892:	d13d      	bne.n	8003910 <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8003894:	6a05      	ldr	r5, [r0, #32]
 8003896:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003898:	4295      	cmp	r5, r2
 800389a:	d914      	bls.n	80038c6 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 800389c:	1aaa      	subs	r2, r5, r2
 800389e:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80038a0:	4619      	mov	r1, r3
 80038a2:	b292      	uxth	r2, r2
 80038a4:	f000 faaf 	bl	8003e06 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80038a8:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80038aa:	461a      	mov	r2, r3
 80038ac:	4619      	mov	r1, r3
 80038ae:	4620      	mov	r0, r4
 80038b0:	f001 fa4c 	bl	8004d4c <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80038b4:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	f04f 0000 	mov.w	r0, #0
 80038be:	d13a      	bne.n	8003936 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80038c0:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 80038c4:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 80038c6:	69c3      	ldr	r3, [r0, #28]
 80038c8:	fbb3 f5f2 	udiv	r5, r3, r2
 80038cc:	fb02 3515 	mls	r5, r2, r5, r3
 80038d0:	b965      	cbnz	r5, 80038ec <USBD_LL_DataInStage+0x6c>
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d80a      	bhi.n	80038ec <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80038d6:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80038da:	4293      	cmp	r3, r2
 80038dc:	d206      	bcs.n	80038ec <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80038de:	462a      	mov	r2, r5
 80038e0:	f000 fa91 	bl	8003e06 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80038e4:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80038e8:	462b      	mov	r3, r5
 80038ea:	e7de      	b.n	80038aa <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80038ec:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	b12b      	cbz	r3, 8003900 <USBD_LL_DataInStage+0x80>
 80038f4:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 80038f8:	2a03      	cmp	r2, #3
 80038fa:	d101      	bne.n	8003900 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 80038fc:	4620      	mov	r0, r4
 80038fe:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8003900:	2180      	movs	r1, #128	; 0x80
 8003902:	4620      	mov	r0, r4
 8003904:	f001 f9da 	bl	8004cbc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003908:	4620      	mov	r0, r4
 800390a:	f000 faa6 	bl	8003e5a <USBD_CtlReceiveStatus>
 800390e:	e7d1      	b.n	80038b4 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003910:	f032 0304 	bics.w	r3, r2, #4
 8003914:	d1ce      	bne.n	80038b4 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8003916:	2180      	movs	r1, #128	; 0x80
 8003918:	f001 f9d0 	bl	8004cbc <USBD_LL_StallEP>
 800391c:	e7ca      	b.n	80038b4 <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800391e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	b133      	cbz	r3, 8003934 <USBD_LL_DataInStage+0xb4>
 8003926:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800392a:	2a03      	cmp	r2, #3
 800392c:	d102      	bne.n	8003934 <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 800392e:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003930:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8003932:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8003934:	2002      	movs	r0, #2
}
 8003936:	bd70      	pop	{r4, r5, r6, pc}

08003938 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8003938:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800393a:	2200      	movs	r2, #0
{
 800393c:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800393e:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003940:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003942:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003944:	2340      	movs	r3, #64	; 0x40
 8003946:	f001 f99b 	bl	8004c80 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800394a:	4633      	mov	r3, r6
 800394c:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800394e:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003952:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003956:	2200      	movs	r2, #0
 8003958:	4620      	mov	r0, r4
 800395a:	f001 f991 	bl	8004c80 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800395e:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003962:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 8003964:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003966:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003968:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800396c:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8003970:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8003972:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 8003976:	b123      	cbz	r3, 8003982 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003978:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800397c:	4620      	mov	r0, r4
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003982:	2000      	movs	r0, #0
 8003984:	bd70      	pop	{r4, r5, r6, pc}

08003986 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003986:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8003988:	2000      	movs	r0, #0
 800398a:	4770      	bx	lr

0800398c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800398c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003990:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003994:	2304      	movs	r3, #4
 8003996:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 800399a:	2000      	movs	r0, #0
 800399c:	4770      	bx	lr

0800399e <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 800399e:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 80039a2:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 80039a6:	2000      	movs	r0, #0
 80039a8:	4770      	bx	lr

080039aa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80039aa:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80039ac:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80039b0:	2a03      	cmp	r2, #3
 80039b2:	d104      	bne.n	80039be <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 80039b4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	b103      	cbz	r3, 80039be <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80039bc:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80039be:	2000      	movs	r0, #0
 80039c0:	bd08      	pop	{r3, pc}

080039c2 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80039c2:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 80039c4:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80039c6:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 80039c8:	f001 f978 	bl	8004cbc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80039cc:	4620      	mov	r0, r4
 80039ce:	2100      	movs	r1, #0
}
 80039d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 80039d4:	f001 b972 	b.w	8004cbc <USBD_LL_StallEP>

080039d8 <USBD_StdDevReq>:
{
 80039d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80039da:	780b      	ldrb	r3, [r1, #0]
 80039dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80039e0:	2b20      	cmp	r3, #32
{
 80039e2:	4604      	mov	r4, r0
 80039e4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80039e6:	d014      	beq.n	8003a12 <USBD_StdDevReq+0x3a>
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d012      	beq.n	8003a12 <USBD_StdDevReq+0x3a>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f040 8095 	bne.w	8003b1c <USBD_StdDevReq+0x144>
    switch (req->bRequest)
 80039f2:	784b      	ldrb	r3, [r1, #1]
 80039f4:	2b09      	cmp	r3, #9
 80039f6:	f200 8090 	bhi.w	8003b1a <USBD_StdDevReq+0x142>
 80039fa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80039fe:	00e7      	.short	0x00e7
 8003a00:	008e0101 	.word	0x008e0101
 8003a04:	008e00fa 	.word	0x008e00fa
 8003a08:	00130082 	.word	0x00130082
 8003a0c:	00d2008e 	.word	0x00d2008e
 8003a10:	00a0      	.short	0x00a0
    pdev->pClass->Setup(pdev, req);
 8003a12:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8003a16:	4629      	mov	r1, r5
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	4798      	blx	r3
}
 8003a1e:	2000      	movs	r0, #0
 8003a20:	b003      	add	sp, #12
 8003a22:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 8003a24:	884b      	ldrh	r3, [r1, #2]
 8003a26:	0a1a      	lsrs	r2, r3, #8
 8003a28:	3a01      	subs	r2, #1
 8003a2a:	2a0e      	cmp	r2, #14
 8003a2c:	d875      	bhi.n	8003b1a <USBD_StdDevReq+0x142>
 8003a2e:	e8df f002 	tbb	[pc, r2]
 8003a32:	2824      	.short	0x2824
 8003a34:	55747435 	.word	0x55747435
 8003a38:	7474745e 	.word	0x7474745e
 8003a3c:	74747474 	.word	0x74747474
 8003a40:	08          	.byte	0x08
 8003a41:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8003a42:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8003a46:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003a48:	7c20      	ldrb	r0, [r4, #16]
 8003a4a:	f10d 0106 	add.w	r1, sp, #6
 8003a4e:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 8003a50:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003a54:	b152      	cbz	r2, 8003a6c <USBD_StdDevReq+0x94>
 8003a56:	88eb      	ldrh	r3, [r5, #6]
 8003a58:	b143      	cbz	r3, 8003a6c <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	bf28      	it	cs
 8003a5e:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8003a60:	4601      	mov	r1, r0
 8003a62:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8003a64:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8003a68:	f000 f9c0 	bl	8003dec <USBD_CtlSendData>
  if(req->wLength == 0U)
 8003a6c:	88eb      	ldrh	r3, [r5, #6]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1d5      	bne.n	8003a1e <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 8003a72:	4620      	mov	r0, r4
 8003a74:	f000 f9e6 	bl	8003e44 <USBD_CtlSendStatus>
 8003a78:	e7d1      	b.n	8003a1e <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003a7a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	e7e2      	b.n	8003a48 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8003a82:	7c02      	ldrb	r2, [r0, #16]
 8003a84:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003a88:	b932      	cbnz	r2, 8003a98 <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003a8c:	f10d 0006 	add.w	r0, sp, #6
 8003a90:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003a92:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003a94:	7043      	strb	r3, [r0, #1]
 8003a96:	e7db      	b.n	8003a50 <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	e7f7      	b.n	8003a8c <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b05      	cmp	r3, #5
 8003aa0:	d83b      	bhi.n	8003b1a <USBD_StdDevReq+0x142>
 8003aa2:	e8df f003 	tbb	[pc, r3]
 8003aa6:	0703      	.short	0x0703
 8003aa8:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8003aac:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	e7c9      	b.n	8003a48 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003ab4:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	e7c5      	b.n	8003a48 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003abc:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	e7c1      	b.n	8003a48 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003ac4:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	e7bd      	b.n	8003a48 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003acc:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	e7b9      	b.n	8003a48 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003ad4:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	e7b5      	b.n	8003a48 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003adc:	7c03      	ldrb	r3, [r0, #16]
 8003ade:	b9e3      	cbnz	r3, 8003b1a <USBD_StdDevReq+0x142>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003ae0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003ae4:	f10d 0006 	add.w	r0, sp, #6
 8003ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aea:	4798      	blx	r3
 8003aec:	e7b0      	b.n	8003a50 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003aee:	7c03      	ldrb	r3, [r0, #16]
 8003af0:	b99b      	cbnz	r3, 8003b1a <USBD_StdDevReq+0x142>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003af2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003af6:	f10d 0006 	add.w	r0, sp, #6
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003afe:	2307      	movs	r3, #7
 8003b00:	e7c8      	b.n	8003a94 <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003b02:	888b      	ldrh	r3, [r1, #4]
 8003b04:	b94b      	cbnz	r3, 8003b1a <USBD_StdDevReq+0x142>
 8003b06:	88cb      	ldrh	r3, [r1, #6]
 8003b08:	b93b      	cbnz	r3, 8003b1a <USBD_StdDevReq+0x142>
 8003b0a:	884d      	ldrh	r5, [r1, #2]
 8003b0c:	2d7f      	cmp	r5, #127	; 0x7f
 8003b0e:	d804      	bhi.n	8003b1a <USBD_StdDevReq+0x142>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003b10:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003b14:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003b16:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003b18:	d103      	bne.n	8003b22 <USBD_StdDevReq+0x14a>
      USBD_CtlError(pdev, req);
 8003b1a:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8003b1c:	f7ff ff51 	bl	80039c2 <USBD_CtlError.constprop.1>
    break;
 8003b20:	e77d      	b.n	8003a1e <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 8003b22:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003b26:	f001 f8f5 	bl	8004d14 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f000 f98a 	bl	8003e44 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003b30:	b11d      	cbz	r5, 8003b3a <USBD_StdDevReq+0x162>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003b32:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003b34:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8003b38:	e771      	b.n	8003a1e <USBD_StdDevReq+0x46>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e7fa      	b.n	8003b34 <USBD_StdDevReq+0x15c>
  cfgidx = (uint8_t)(req->wValue);
 8003b3e:	7889      	ldrb	r1, [r1, #2]
 8003b40:	4d35      	ldr	r5, [pc, #212]	; (8003c18 <USBD_StdDevReq+0x240>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003b42:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8003b44:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003b46:	d8e8      	bhi.n	8003b1a <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 8003b48:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d008      	beq.n	8003b62 <USBD_StdDevReq+0x18a>
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d014      	beq.n	8003b7e <USBD_StdDevReq+0x1a6>
      USBD_CtlError(pdev, req);
 8003b54:	f7ff ff35 	bl	80039c2 <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 8003b58:	7829      	ldrb	r1, [r5, #0]
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f7ff fe24 	bl	80037a8 <USBD_ClrClassConfig>
 8003b60:	e75d      	b.n	8003a1e <USBD_StdDevReq+0x46>
      if (cfgidx)
 8003b62:	2900      	cmp	r1, #0
 8003b64:	d085      	beq.n	8003a72 <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 8003b66:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003b68:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8003b6a:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003b6c:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003b70:	4620      	mov	r0, r4
 8003b72:	f7ff fe0e 	bl	8003792 <USBD_SetClassConfig>
 8003b76:	2802      	cmp	r0, #2
 8003b78:	f47f af7b 	bne.w	8003a72 <USBD_StdDevReq+0x9a>
 8003b7c:	e7cd      	b.n	8003b1a <USBD_StdDevReq+0x142>
      if (cfgidx == 0U)
 8003b7e:	b931      	cbnz	r1, 8003b8e <USBD_StdDevReq+0x1b6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003b80:	2302      	movs	r3, #2
 8003b82:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8003b86:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8003b88:	f7ff fe0e 	bl	80037a8 <USBD_ClrClassConfig>
 8003b8c:	e771      	b.n	8003a72 <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 8003b8e:	6841      	ldr	r1, [r0, #4]
 8003b90:	2901      	cmp	r1, #1
 8003b92:	f43f af6e 	beq.w	8003a72 <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003b96:	b2c9      	uxtb	r1, r1
 8003b98:	f7ff fe06 	bl	80037a8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003b9c:	7829      	ldrb	r1, [r5, #0]
 8003b9e:	6061      	str	r1, [r4, #4]
 8003ba0:	e7e6      	b.n	8003b70 <USBD_StdDevReq+0x198>
  if (req->wLength != 1U)
 8003ba2:	88ca      	ldrh	r2, [r1, #6]
 8003ba4:	2a01      	cmp	r2, #1
 8003ba6:	d1b8      	bne.n	8003b1a <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 8003ba8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0b4      	beq.n	8003b1a <USBD_StdDevReq+0x142>
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d903      	bls.n	8003bbc <USBD_StdDevReq+0x1e4>
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d1b0      	bne.n	8003b1a <USBD_StdDevReq+0x142>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003bb8:	1d01      	adds	r1, r0, #4
 8003bba:	e003      	b.n	8003bc4 <USBD_StdDevReq+0x1ec>
      pdev->dev_default_config = 0U;
 8003bbc:	4601      	mov	r1, r0
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	f000 f911 	bl	8003dec <USBD_CtlSendData>
 8003bca:	e728      	b.n	8003a1e <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8003bcc:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d8a1      	bhi.n	8003b1a <USBD_StdDevReq+0x142>
    if(req->wLength != 0x2U)
 8003bd6:	88cb      	ldrh	r3, [r1, #6]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d19e      	bne.n	8003b1a <USBD_StdDevReq+0x142>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8003be0:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8003be4:	b10b      	cbz	r3, 8003bea <USBD_StdDevReq+0x212>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003be6:	2303      	movs	r3, #3
 8003be8:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003bea:	2202      	movs	r2, #2
 8003bec:	f104 010c 	add.w	r1, r4, #12
 8003bf0:	e7e8      	b.n	8003bc4 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003bf2:	884b      	ldrh	r3, [r1, #2]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	f47f af12 	bne.w	8003a1e <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 8003bfa:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 8003bfe:	e738      	b.n	8003a72 <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 8003c00:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003c04:	3b01      	subs	r3, #1
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d887      	bhi.n	8003b1a <USBD_StdDevReq+0x142>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003c0a:	884b      	ldrh	r3, [r1, #2]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	f47f af06 	bne.w	8003a1e <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	e7f1      	b.n	8003bfa <USBD_StdDevReq+0x222>
 8003c16:	bf00      	nop
 8003c18:	20000818 	.word	0x20000818

08003c1c <USBD_StdItfReq>:
{
 8003c1c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003c1e:	780b      	ldrb	r3, [r1, #0]
 8003c20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003c24:	2b20      	cmp	r3, #32
{
 8003c26:	4604      	mov	r4, r0
 8003c28:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003c2a:	d002      	beq.n	8003c32 <USBD_StdItfReq+0x16>
 8003c2c:	2b40      	cmp	r3, #64	; 0x40
 8003c2e:	d000      	beq.n	8003c32 <USBD_StdItfReq+0x16>
 8003c30:	b9b3      	cbnz	r3, 8003c60 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 8003c32:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8003c36:	3b01      	subs	r3, #1
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d810      	bhi.n	8003c5e <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003c3c:	792b      	ldrb	r3, [r5, #4]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d80d      	bhi.n	8003c5e <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8003c42:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8003c46:	4629      	mov	r1, r5
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8003c4e:	88eb      	ldrh	r3, [r5, #6]
 8003c50:	b91b      	cbnz	r3, 8003c5a <USBD_StdItfReq+0x3e>
 8003c52:	b910      	cbnz	r0, 8003c5a <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 8003c54:	4620      	mov	r0, r4
 8003c56:	f000 f8f5 	bl	8003e44 <USBD_CtlSendStatus>
}
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 8003c5e:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8003c60:	f7ff feaf 	bl	80039c2 <USBD_CtlError.constprop.1>
    break;
 8003c64:	e7f9      	b.n	8003c5a <USBD_StdItfReq+0x3e>

08003c66 <USBD_StdEPReq>:
{
 8003c66:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003c68:	780a      	ldrb	r2, [r1, #0]
 8003c6a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003c6e:	2a20      	cmp	r2, #32
{
 8003c70:	4604      	mov	r4, r0
 8003c72:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003c74:	d013      	beq.n	8003c9e <USBD_StdEPReq+0x38>
 8003c76:	2a40      	cmp	r2, #64	; 0x40
 8003c78:	d011      	beq.n	8003c9e <USBD_StdEPReq+0x38>
 8003c7a:	b96a      	cbnz	r2, 8003c98 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8003c7c:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8003c7e:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8003c80:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8003c82:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8003c84:	d01f      	beq.n	8003cc6 <USBD_StdEPReq+0x60>
 8003c86:	d335      	bcc.n	8003cf4 <USBD_StdEPReq+0x8e>
 8003c88:	2d03      	cmp	r5, #3
 8003c8a:	d105      	bne.n	8003c98 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8003c8c:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8003c90:	2a02      	cmp	r2, #2
 8003c92:	d026      	beq.n	8003ce2 <USBD_StdEPReq+0x7c>
 8003c94:	2a03      	cmp	r2, #3
 8003c96:	d00a      	beq.n	8003cae <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 8003c98:	f7ff fe93 	bl	80039c2 <USBD_CtlError.constprop.1>
    break;
 8003c9c:	e005      	b.n	8003caa <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 8003c9e:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	6892      	ldr	r2, [r2, #8]
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	4790      	blx	r2
}
 8003caa:	2000      	movs	r0, #0
 8003cac:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 8003cae:	885a      	ldrh	r2, [r3, #2]
 8003cb0:	b92a      	cbnz	r2, 8003cbe <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003cb2:	064a      	lsls	r2, r1, #25
 8003cb4:	d003      	beq.n	8003cbe <USBD_StdEPReq+0x58>
 8003cb6:	88db      	ldrh	r3, [r3, #6]
 8003cb8:	b90b      	cbnz	r3, 8003cbe <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 8003cba:	f000 ffff 	bl	8004cbc <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	f000 f8c0 	bl	8003e44 <USBD_CtlSendStatus>
        break;
 8003cc4:	e7f1      	b.n	8003caa <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8003cc6:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8003cca:	2a02      	cmp	r2, #2
 8003ccc:	d009      	beq.n	8003ce2 <USBD_StdEPReq+0x7c>
 8003cce:	2a03      	cmp	r2, #3
 8003cd0:	d1e2      	bne.n	8003c98 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8003cd2:	885b      	ldrh	r3, [r3, #2]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1e8      	bne.n	8003caa <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 8003cd8:	064d      	lsls	r5, r1, #25
 8003cda:	d0f0      	beq.n	8003cbe <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8003cdc:	f000 fffc 	bl	8004cd8 <USBD_LL_ClearStallEP>
 8003ce0:	e7ed      	b.n	8003cbe <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003ce2:	064b      	lsls	r3, r1, #25
 8003ce4:	d017      	beq.n	8003d16 <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 8003ce6:	f000 ffe9 	bl	8004cbc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8003cea:	2180      	movs	r1, #128	; 0x80
 8003cec:	4620      	mov	r0, r4
 8003cee:	f000 ffe5 	bl	8004cbc <USBD_LL_StallEP>
 8003cf2:	e7da      	b.n	8003caa <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8003cf4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d00e      	beq.n	8003d1a <USBD_StdEPReq+0xb4>
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d1cb      	bne.n	8003c98 <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 8003d00:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003d04:	f04f 0314 	mov.w	r3, #20
 8003d08:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003d0c:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 8003d10:	d012      	beq.n	8003d38 <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003d12:	6992      	ldr	r2, [r2, #24]
 8003d14:	b9da      	cbnz	r2, 8003d4e <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 8003d16:	4620      	mov	r0, r4
 8003d18:	e7be      	b.n	8003c98 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003d1a:	0649      	lsls	r1, r1, #25
 8003d1c:	d1fb      	bne.n	8003d16 <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003d1e:	0613      	lsls	r3, r2, #24
 8003d20:	bf4c      	ite	mi
 8003d22:	f100 0114 	addmi.w	r1, r0, #20
 8003d26:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003d2e:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003d30:	4620      	mov	r0, r4
 8003d32:	f000 f85b 	bl	8003dec <USBD_CtlSendData>
          break;
 8003d36:	e7b8      	b.n	8003caa <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003d38:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 8003d3c:	2a00      	cmp	r2, #0
 8003d3e:	d0ea      	beq.n	8003d16 <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003d40:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8003d44:	fb03 0505 	mla	r5, r3, r5, r0
 8003d48:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 8003d4c:	e004      	b.n	8003d58 <USBD_StdEPReq+0xf2>
 8003d4e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8003d52:	fb05 3503 	mla	r5, r5, r3, r3
 8003d56:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003d58:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8003d5c:	d103      	bne.n	8003d66 <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 8003d5e:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003d60:	2202      	movs	r2, #2
 8003d62:	4629      	mov	r1, r5
 8003d64:	e7e4      	b.n	8003d30 <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003d66:	4620      	mov	r0, r4
 8003d68:	f000 ffc4 	bl	8004cf4 <USBD_LL_IsStallEP>
 8003d6c:	b108      	cbz	r0, 8003d72 <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e7f5      	b.n	8003d5e <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 8003d72:	6028      	str	r0, [r5, #0]
 8003d74:	e7f4      	b.n	8003d60 <USBD_StdEPReq+0xfa>

08003d76 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8003d76:	780b      	ldrb	r3, [r1, #0]
 8003d78:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003d7a:	784b      	ldrb	r3, [r1, #1]
 8003d7c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003d7e:	78ca      	ldrb	r2, [r1, #3]
 8003d80:	788b      	ldrb	r3, [r1, #2]
 8003d82:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003d86:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003d88:	794a      	ldrb	r2, [r1, #5]
 8003d8a:	790b      	ldrb	r3, [r1, #4]
 8003d8c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003d90:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8003d92:	79ca      	ldrb	r2, [r1, #7]
 8003d94:	798b      	ldrb	r3, [r1, #6]
 8003d96:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003d9a:	80c3      	strh	r3, [r0, #6]
 8003d9c:	4770      	bx	lr

08003d9e <USBD_CtlError>:
{
 8003d9e:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8003da0:	2180      	movs	r1, #128	; 0x80
{
 8003da2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8003da4:	f000 ff8a 	bl	8004cbc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8003da8:	4620      	mov	r0, r4
 8003daa:	2100      	movs	r1, #0
}
 8003dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8003db0:	f000 bf84 	b.w	8004cbc <USBD_LL_StallEP>

08003db4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003db4:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8003db6:	b188      	cbz	r0, 8003ddc <USBD_GetString+0x28>
 8003db8:	4605      	mov	r5, r0
 8003dba:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8003dbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2c00      	cmp	r4, #0
 8003dc4:	d1f9      	bne.n	8003dba <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003dcc:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	704b      	strb	r3, [r1, #1]
 8003dd2:	3801      	subs	r0, #1
 8003dd4:	2302      	movs	r3, #2
    while (*desc != '\0')
 8003dd6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003dda:	b905      	cbnz	r5, 8003dde <USBD_GetString+0x2a>
 8003ddc:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8003de4:	3302      	adds	r3, #2
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	548c      	strb	r4, [r1, r2]
 8003dea:	e7f4      	b.n	8003dd6 <USBD_GetString+0x22>

08003dec <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8003dec:	b510      	push	{r4, lr}
 8003dee:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003df0:	2202      	movs	r2, #2
 8003df2:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8003df6:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003df8:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8003dfa:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	f000 ff97 	bl	8004d30 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003e02:	2000      	movs	r0, #0
 8003e04:	bd10      	pop	{r4, pc}

08003e06 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8003e06:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003e08:	4613      	mov	r3, r2
 8003e0a:	460a      	mov	r2, r1
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	f000 ff8f 	bl	8004d30 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003e12:	2000      	movs	r0, #0
 8003e14:	bd08      	pop	{r3, pc}

08003e16 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8003e16:	b510      	push	{r4, lr}
 8003e18:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8003e20:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8003e24:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8003e26:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	f000 ff8e 	bl	8004d4c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003e30:	2000      	movs	r0, #0
 8003e32:	bd10      	pop	{r4, pc}

08003e34 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8003e34:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003e36:	4613      	mov	r3, r2
 8003e38:	460a      	mov	r2, r1
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	f000 ff86 	bl	8004d4c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003e40:	2000      	movs	r0, #0
 8003e42:	bd08      	pop	{r3, pc}

08003e44 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8003e44:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003e46:	2304      	movs	r3, #4
 8003e48:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	461a      	mov	r2, r3
 8003e50:	4619      	mov	r1, r3
 8003e52:	f000 ff6d 	bl	8004d30 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003e56:	2000      	movs	r0, #0
 8003e58:	bd08      	pop	{r3, pc}

08003e5a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8003e5a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003e5c:	2305      	movs	r3, #5
 8003e5e:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8003e62:	2300      	movs	r3, #0
 8003e64:	461a      	mov	r2, r3
 8003e66:	4619      	mov	r1, r3
 8003e68:	f000 ff70 	bl	8004d4c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	bd08      	pop	{r3, pc}

08003e70 <LTC_wake>:
*/
  }
}

void LTC_wake(uint16_t numChips)
{
 8003e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	for(int i=0; i<numChips; i++)
 8003e72:	2400      	movs	r4, #0
		//HAL_Delay(1);
		uint8_t cmd[]={0x00, 0x00};
		//for(int x=0;x<10;x++)
		//{
			HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
			HAL_SPI_Transmit(&hspi1, (uint8_t*)cmd, 1, 100);
 8003e74:	4f12      	ldr	r7, [pc, #72]	; (8003ec0 <LTC_wake+0x50>)
{
 8003e76:	4606      	mov	r6, r0
		HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 8003e78:	4625      	mov	r5, r4
	for(int i=0; i<numChips; i++)
 8003e7a:	42b4      	cmp	r4, r6
 8003e7c:	db01      	blt.n	8003e82 <LTC_wake+0x12>
			HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, HIGH);
	//}
	}
}
 8003e7e:	b003      	add	sp, #12
 8003e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 8003e82:	2200      	movs	r2, #0
 8003e84:	2110      	movs	r1, #16
 8003e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e8a:	f7fd f9df 	bl	800124c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2110      	movs	r1, #16
 8003e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		uint8_t cmd[]={0x00, 0x00};
 8003e96:	f88d 5004 	strb.w	r5, [sp, #4]
 8003e9a:	f88d 5005 	strb.w	r5, [sp, #5]
			HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 8003e9e:	f7fd f9d5 	bl	800124c <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, (uint8_t*)cmd, 1, 100);
 8003ea2:	2364      	movs	r3, #100	; 0x64
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	a901      	add	r1, sp, #4
 8003ea8:	4638      	mov	r0, r7
 8003eaa:	f7fe fccc 	bl	8002846 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, HIGH);
 8003eae:	2201      	movs	r2, #1
 8003eb0:	2110      	movs	r1, #16
 8003eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eb6:	f7fd f9c9 	bl	800124c <HAL_GPIO_WritePin>
	for(int i=0; i<numChips; i++)
 8003eba:	3401      	adds	r4, #1
 8003ebc:	e7dd      	b.n	8003e7a <LTC_wake+0xa>
 8003ebe:	bf00      	nop
 8003ec0:	20000c48 	.word	0x20000c48

08003ec4 <_write>:
	HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, HIGH);
}

//redirect STDIO (printf) to the USB virtual serial port.
int _write(int file,char *ptr, int len)
{
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	4608      	mov	r0, r1
 8003ec8:	4614      	mov	r4, r2
    CDC_Transmit_FS((uint8_t*)ptr, len);
 8003eca:	4611      	mov	r1, r2
 8003ecc:	f000 fe00 	bl	8004ad0 <CDC_Transmit_FS>
    return len;
}
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	bd10      	pop	{r4, pc}

08003ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ed4:	b570      	push	{r4, r5, r6, lr}
 8003ed6:	b0ae      	sub	sp, #184	; 0xb8
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability
    */
  HAL_PWR_EnableBkUpAccess();
 8003ed8:	f7fd fdec 	bl	8001ab4 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003edc:	4a30      	ldr	r2, [pc, #192]	; (8003fa0 <SystemClock_Config+0xcc>)
 8003ede:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003ee2:	f023 0318 	bic.w	r3, r3, #24
 8003ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003eea:	2314      	movs	r3, #20
 8003eec:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003ef2:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003ef4:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ef6:	2502      	movs	r5, #2
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003ef8:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003efa:	2607      	movs	r6, #7
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003efc:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003efe:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003f00:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003f02:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f04:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003f06:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003f08:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003f0a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003f0c:	9613      	str	r6, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003f0e:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003f10:	9515      	str	r5, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f12:	f7fd fec5 	bl	8001ca0 <HAL_RCC_OscConfig>
 8003f16:	b100      	cbz	r0, 8003f1a <SystemClock_Config+0x46>
 8003f18:	e7fe      	b.n	8003f18 <SystemClock_Config+0x44>

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f1a:	220f      	movs	r2, #15
 8003f1c:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f1e:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f20:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f22:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003f24:	2104      	movs	r1, #4
 8003f26:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f28:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003f2c:	f7fe f916 	bl	800215c <HAL_RCC_ClockConfig>
 8003f30:	b100      	cbz	r0, 8003f34 <SystemClock_Config+0x60>
 8003f32:	e7fe      	b.n	8003f32 <SystemClock_Config+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8003f34:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <SystemClock_Config+0xd0>)
 8003f36:	9316      	str	r3, [sp, #88]	; 0x58
                              |RCC_PERIPHCLK_LPTIM1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f3c:	932d      	str	r3, [sp, #180]	; 0xb4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003f3e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f42:	9328      	str	r3, [sp, #160]	; 0xa0
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8003f44:	2318      	movs	r3, #24
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003f46:	901e      	str	r0, [sp, #120]	; 0x78
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8003f48:	9025      	str	r0, [sp, #148]	; 0x94
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8003f4a:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f4c:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003f4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003f52:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003f54:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003f56:	961a      	str	r6, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003f58:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003f5a:	951c      	str	r5, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003f5c:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f5e:	f7fe fa21 	bl	80023a4 <HAL_RCCEx_PeriphCLKConfig>
 8003f62:	b100      	cbz	r0, 8003f66 <SystemClock_Config+0x92>
 8003f64:	e7fe      	b.n	8003f64 <SystemClock_Config+0x90>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003f66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003f6a:	f7fd fdb3 	bl	8001ad4 <HAL_PWREx_ControlVoltageScaling>
 8003f6e:	4604      	mov	r4, r0
 8003f70:	b100      	cbz	r0, 8003f74 <SystemClock_Config+0xa0>
 8003f72:	e7fe      	b.n	8003f72 <SystemClock_Config+0x9e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/10000);//100us
 8003f74:	f7fe f984 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 8003f78:	f242 7310 	movw	r3, #10000	; 0x2710
 8003f7c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003f80:	f7fd f874 	bl	800106c <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003f84:	2004      	movs	r0, #4
 8003f86:	f7fd f887 	bl	8001098 <HAL_SYSTICK_CLKSourceConfig>

    /**Enable MSI Auto calibration
    */
  HAL_RCCEx_EnableMSIPLLMode();
 8003f8a:	f7fe fb81 	bl	8002690 <HAL_RCCEx_EnableMSIPLLMode>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003f8e:	4622      	mov	r2, r4
 8003f90:	4621      	mov	r1, r4
 8003f92:	f04f 30ff 	mov.w	r0, #4294967295
 8003f96:	f7fd f829 	bl	8000fec <HAL_NVIC_SetPriority>
}
 8003f9a:	b02e      	add	sp, #184	; 0xb8
 8003f9c:	bd70      	pop	{r4, r5, r6, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	00022201 	.word	0x00022201

08003fa8 <MX_SPI1_Init>:
/* SPI1 init function */
void MX_SPI1_Init(void)
{

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003fa8:	480f      	ldr	r0, [pc, #60]	; (8003fe8 <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003faa:	4910      	ldr	r1, [pc, #64]	; (8003fec <MX_SPI1_Init+0x44>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;//SPI_DATASIZE_4BIT;
 8003fac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
{
 8003fb0:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003fb2:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;//SPI_DATASIZE_4BIT;
 8003fb6:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003fbc:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003fc0:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003fc2:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;//SPI_BAUDRATEPRESCALER_2;
 8003fc4:	2238      	movs	r2, #56	; 0x38
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003fc6:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fc8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fca:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;//SPI_BAUDRATEPRESCALER_2;
 8003fcc:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fce:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fd0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fd2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003fd4:	2207      	movs	r2, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003fd6:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003fd8:	2308      	movs	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 8003fda:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003fdc:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003fde:	f7fe fbe1 	bl	80027a4 <HAL_SPI_Init>
 8003fe2:	b100      	cbz	r0, 8003fe6 <MX_SPI1_Init+0x3e>
 8003fe4:	e7fe      	b.n	8003fe4 <MX_SPI1_Init+0x3c>
 8003fe6:	bd08      	pop	{r3, pc}
 8003fe8:	20000c48 	.word	0x20000c48
 8003fec:	40013000 	.word	0x40013000

08003ff0 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ff0:	4b38      	ldr	r3, [pc, #224]	; (80040d4 <MX_GPIO_Init+0xe4>)
{
 8003ff2:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ff4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003ff6:	4f38      	ldr	r7, [pc, #224]	; (80040d8 <MX_GPIO_Init+0xe8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3 
 8003ff8:	4d38      	ldr	r5, [pc, #224]	; (80040dc <MX_GPIO_Init+0xec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ffa:	f042 0204 	orr.w	r2, r2, #4
 8003ffe:	64da      	str	r2, [r3, #76]	; 0x4c
 8004000:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 8004002:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004004:	f002 0204 	and.w	r2, r2, #4
 8004008:	9201      	str	r2, [sp, #4]
 800400a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800400c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800400e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004012:	64da      	str	r2, [r3, #76]	; 0x4c
 8004014:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004016:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800401a:	9202      	str	r2, [sp, #8]
 800401c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800401e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004020:	f042 0201 	orr.w	r2, r2, #1
 8004024:	64da      	str	r2, [r3, #76]	; 0x4c
 8004026:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004028:	f002 0201 	and.w	r2, r2, #1
 800402c:	9203      	str	r2, [sp, #12]
 800402e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004030:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004032:	f042 0202 	orr.w	r2, r2, #2
 8004036:	64da      	str	r2, [r3, #76]	; 0x4c
 8004038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004040:	4638      	mov	r0, r7
 8004042:	2200      	movs	r2, #0
 8004044:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004048:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800404a:	f7fd f8ff 	bl	800124c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 800404e:	2200      	movs	r2, #0
 8004050:	f248 0118 	movw	r1, #32792	; 0x8018
 8004054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004058:	f7fd f8f8 	bl	800124c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3 
 800405c:	2200      	movs	r2, #0
 800405e:	4628      	mov	r0, r5
 8004060:	f241 41fc 	movw	r1, #5372	; 0x14fc
 8004064:	f7fd f8f2 	bl	800124c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004068:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800406a:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800406c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004070:	a905      	add	r1, sp, #20
 8004072:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004074:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004076:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004078:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800407a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800407c:	f7fd f81e 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8;
 8004080:	f240 1307 	movw	r3, #263	; 0x107
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004084:	a905      	add	r1, sp, #20
 8004086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8;
 800408a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800408c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004090:	f7fd f814 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15;
 8004094:	f248 0318 	movw	r3, #32792	; 0x8018
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004098:	a905      	add	r1, sp, #20
 800409a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15;
 800409e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040a0:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a6:	f7fd f809 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11;
 80040aa:	f640 0303 	movw	r3, #2051	; 0x803
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ae:	a905      	add	r1, sp, #20
 80040b0:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11;
 80040b2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040b4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040b8:	f7fd f800 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB12 PB3 
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3 
 80040bc:	f241 43fc 	movw	r3, #5372	; 0x14fc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040c0:	a905      	add	r1, sp, #20
 80040c2:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3 
 80040c4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040c6:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ca:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040cc:	f7fc fff6 	bl	80010bc <HAL_GPIO_Init>

}
 80040d0:	b00b      	add	sp, #44	; 0x2c
 80040d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040d4:	40021000 	.word	0x40021000
 80040d8:	48000800 	.word	0x48000800
 80040dc:	48000400 	.word	0x48000400

080040e0 <pec15_calc>:
  Calculates  and returns the CRC15
  */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 80040e0:	b530      	push	{r4, r5, lr}

  remainder = 16;//initialize the PEC
  for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
  {
    addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
    remainder = (remainder<<8)^crc15Table[addr];
 80040e2:	4d0a      	ldr	r5, [pc, #40]	; (800410c <pec15_calc+0x2c>)
  for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 80040e4:	460c      	mov	r4, r1
  remainder = 16;//initialize the PEC
 80040e6:	2310      	movs	r3, #16
  for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 80040e8:	1a62      	subs	r2, r4, r1
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	4290      	cmp	r0, r2
 80040ee:	d802      	bhi.n	80040f6 <pec15_calc+0x16>
  }
  return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80040f0:	0058      	lsls	r0, r3, #1
 80040f2:	b280      	uxth	r0, r0
}
 80040f4:	bd30      	pop	{r4, r5, pc}
    addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 80040f6:	f814 2b01 	ldrb.w	r2, [r4], #1
 80040fa:	ea82 12d3 	eor.w	r2, r2, r3, lsr #7
    remainder = (remainder<<8)^crc15Table[addr];
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 8004104:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
 8004108:	b29b      	uxth	r3, r3
 800410a:	e7ed      	b.n	80040e8 <pec15_calc+0x8>
 800410c:	08008a48 	.word	0x08008a48

08004110 <LTC_Send>:
{
 8004110:	b530      	push	{r4, r5, lr}
 8004112:	b085      	sub	sp, #20
	cmd[0] = (uint8_t)(cmd16 >> 8);
 8004114:	0a03      	lsrs	r3, r0, #8
	cmd[1] = (uint8_t)(cmd16);
 8004116:	f88d 000d 	strb.w	r0, [sp, #13]
	uint16_t cmd_pec = pec15_calc(2, cmd);
 800411a:	a903      	add	r1, sp, #12
 800411c:	2002      	movs	r0, #2
	cmd[0] = (uint8_t)(cmd16 >> 8);
 800411e:	f88d 300c 	strb.w	r3, [sp, #12]
	uint16_t cmd_pec = pec15_calc(2, cmd);
 8004122:	f7ff ffdd 	bl	80040e0 <pec15_calc>
    uint8_t pRxData[]={0x00, 0x00};
 8004126:	2200      	movs	r2, #0
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8004128:	0a03      	lsrs	r3, r0, #8
	cmd[3] = (uint8_t)(cmd_pec);
 800412a:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 800412e:	2110      	movs	r1, #16
 8004130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8004134:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t pRxData[]={0x00, 0x00};
 8004138:	f88d 2008 	strb.w	r2, [sp, #8]
 800413c:	f88d 2009 	strb.w	r2, [sp, #9]
	HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 8004140:	f7fd f884 	bl	800124c <HAL_GPIO_WritePin>
	switch(HAL_SPI_Transmit(&hspi1, (uint8_t*)cmd, 4, 100))
 8004144:	2364      	movs	r3, #100	; 0x64
 8004146:	2204      	movs	r2, #4
 8004148:	a903      	add	r1, sp, #12
 800414a:	4816      	ldr	r0, [pc, #88]	; (80041a4 <LTC_Send+0x94>)
 800414c:	f7fe fb7b 	bl	8002846 <HAL_SPI_Transmit>
 8004150:	2801      	cmp	r0, #1
 8004152:	d002      	beq.n	800415a <LTC_Send+0x4a>
 8004154:	d302      	bcc.n	800415c <LTC_Send+0x4c>
 8004156:	2803      	cmp	r0, #3
 8004158:	d104      	bne.n	8004164 <LTC_Send+0x54>
 800415a:	e7fe      	b.n	800415a <LTC_Send+0x4a>
	      HAL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);
 800415c:	2104      	movs	r1, #4
 800415e:	4812      	ldr	r0, [pc, #72]	; (80041a8 <LTC_Send+0x98>)
 8004160:	f7fd f879 	bl	8001256 <HAL_GPIO_TogglePin>
	cmd[0] = 0x00;
 8004164:	2300      	movs	r3, #0
	  switch(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)cmd, (uint8_t*)pRxData, 1, 100))
 8004166:	4d0f      	ldr	r5, [pc, #60]	; (80041a4 <LTC_Send+0x94>)
	cmd[0] = 0x00;
 8004168:	f88d 300c 	strb.w	r3, [sp, #12]
	  switch(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)cmd, (uint8_t*)pRxData, 1, 100))
 800416c:	2464      	movs	r4, #100	; 0x64
	while(pRxData[0]==0x00)// & poll)
 800416e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004172:	b13b      	cbz	r3, 8004184 <LTC_Send+0x74>
	HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, HIGH);
 8004174:	2201      	movs	r2, #1
 8004176:	2110      	movs	r1, #16
 8004178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800417c:	f7fd f866 	bl	800124c <HAL_GPIO_WritePin>
}
 8004180:	b005      	add	sp, #20
 8004182:	bd30      	pop	{r4, r5, pc}
	  switch(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)cmd, (uint8_t*)pRxData, 1, 100))
 8004184:	9400      	str	r4, [sp, #0]
 8004186:	2301      	movs	r3, #1
 8004188:	aa02      	add	r2, sp, #8
 800418a:	a903      	add	r1, sp, #12
 800418c:	4628      	mov	r0, r5
 800418e:	f7fe fc18 	bl	80029c2 <HAL_SPI_TransmitReceive>
 8004192:	b930      	cbnz	r0, 80041a2 <LTC_Send+0x92>
				HAL_GPIO_TogglePin(busContactor_GPIO_PORT, busContactor_PIN);
 8004194:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004198:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800419c:	f7fd f85b 	bl	8001256 <HAL_GPIO_TogglePin>
			break;
 80041a0:	e7e5      	b.n	800416e <LTC_Send+0x5e>
 80041a2:	e7fe      	b.n	80041a2 <LTC_Send+0x92>
 80041a4:	20000c48 	.word	0x20000c48
 80041a8:	48000400 	.word	0x48000400

080041ac <LTC_Write>:
{
 80041ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint8_t CMD_LEN = 4+(8*total_ic);
 80041b0:	00ce      	lsls	r6, r1, #3
 80041b2:	3604      	adds	r6, #4
 80041b4:	b2f6      	uxtb	r6, r6
{
 80041b6:	4607      	mov	r7, r0
	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 80041b8:	4630      	mov	r0, r6
{
 80041ba:	4690      	mov	r8, r2
 80041bc:	460d      	mov	r5, r1
	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 80041be:	f000 feb1 	bl	8004f24 <malloc>
	cmd[0] = (uint8_t)(cmd16 >> 8);
 80041c2:	0a3b      	lsrs	r3, r7, #8
	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 80041c4:	4604      	mov	r4, r0
	cmd[0] = (uint8_t)(cmd16 >> 8);
 80041c6:	7003      	strb	r3, [r0, #0]
	cmd[1] = (uint8_t)(cmd16);
 80041c8:	7047      	strb	r7, [r0, #1]
	cmd_pec = pec15_calc(2, cmd);
 80041ca:	4601      	mov	r1, r0
 80041cc:	2002      	movs	r0, #2
 80041ce:	f7ff ff87 	bl	80040e0 <pec15_calc>
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80041d2:	0a03      	lsrs	r3, r0, #8
 80041d4:	70a3      	strb	r3, [r4, #2]
 80041d6:	3d01      	subs	r5, #1
 80041d8:	2306      	movs	r3, #6
 80041da:	fb03 8505 	mla	r5, r3, r5, r8
	cmd[3] = (uint8_t)(cmd_pec);
 80041de:	70e0      	strb	r0, [r4, #3]
 80041e0:	f1a8 0806 	sub.w	r8, r8, #6
	cmd_index = 4;
 80041e4:	2704      	movs	r7, #4
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)       // executes for each LTC681x in daisy chain, this loops starts with
 80041e6:	4545      	cmp	r5, r8
 80041e8:	d111      	bne.n	800420e <LTC_Write+0x62>
	cs_low();
 80041ea:	2200      	movs	r2, #0
 80041ec:	2110      	movs	r1, #16
 80041ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041f2:	f7fd f82b 	bl	800124c <HAL_GPIO_WritePin>
	switch(HAL_SPI_Transmit(&hspi1, (uint8_t*)cmd, CMD_LEN, 100))
 80041f6:	2364      	movs	r3, #100	; 0x64
 80041f8:	4632      	mov	r2, r6
 80041fa:	4621      	mov	r1, r4
 80041fc:	4816      	ldr	r0, [pc, #88]	; (8004258 <LTC_Write+0xac>)
 80041fe:	f7fe fb22 	bl	8002846 <HAL_SPI_Transmit>
 8004202:	2801      	cmp	r0, #1
 8004204:	d002      	beq.n	800420c <LTC_Write+0x60>
 8004206:	d317      	bcc.n	8004238 <LTC_Write+0x8c>
 8004208:	2803      	cmp	r0, #3
 800420a:	d119      	bne.n	8004240 <LTC_Write+0x94>
 800420c:	e7fe      	b.n	800420c <LTC_Write+0x60>
 800420e:	2000      	movs	r0, #0
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 8004210:	183b      	adds	r3, r7, r0
 8004212:	5c2a      	ldrb	r2, [r5, r0]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	3001      	adds	r0, #1
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8004218:	2806      	cmp	r0, #6
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 800421a:	54e2      	strb	r2, [r4, r3]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800421c:	d1f8      	bne.n	8004210 <LTC_Write+0x64>
		data_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // calculating the PEC for each Iss configuration register data
 800421e:	4629      	mov	r1, r5
 8004220:	f7ff ff5e 	bl	80040e0 <pec15_calc>
		cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 8004224:	1dbb      	adds	r3, r7, #6
 8004226:	b2db      	uxtb	r3, r3
 8004228:	0a02      	lsrs	r2, r0, #8
 800422a:	54e2      	strb	r2, [r4, r3]
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 800422c:	4423      	add	r3, r4
		cmd_index = cmd_index + 2;
 800422e:	3708      	adds	r7, #8
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 8004230:	7058      	strb	r0, [r3, #1]
		cmd_index = cmd_index + 2;
 8004232:	b2ff      	uxtb	r7, r7
 8004234:	3d06      	subs	r5, #6
 8004236:	e7d6      	b.n	80041e6 <LTC_Write+0x3a>
	      HAL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);
 8004238:	2104      	movs	r1, #4
 800423a:	4808      	ldr	r0, [pc, #32]	; (800425c <LTC_Write+0xb0>)
 800423c:	f7fd f80b 	bl	8001256 <HAL_GPIO_TogglePin>
	cs_high();
 8004240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004244:	2201      	movs	r2, #1
 8004246:	2110      	movs	r1, #16
 8004248:	f7fd f800 	bl	800124c <HAL_GPIO_WritePin>
	free(cmd);
 800424c:	4620      	mov	r0, r4
}
 800424e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free(cmd);
 8004252:	f000 be6f 	b.w	8004f34 <free>
 8004256:	bf00      	nop
 8004258:	20000c48 	.word	0x20000c48
 800425c:	48000400 	.word	0x48000400

08004260 <LTC_bleed>:
{
 8004260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t CRGA[] = {0xFC, 0x00, 0x00, 0x00, 0x00, 0x00};
 8004262:	23fc      	movs	r3, #252	; 0xfc
 8004264:	f88d 3000 	strb.w	r3, [sp]
 8004268:	2300      	movs	r3, #0
 800426a:	f88d 3001 	strb.w	r3, [sp, #1]
 800426e:	f88d 3002 	strb.w	r3, [sp, #2]
 8004272:	f88d 3003 	strb.w	r3, [sp, #3]
	uint8_t CRGB[] = {0x0F, 0x00, 0x00, 0x00, 0x00, 0x00};
 8004276:	f88d 300a 	strb.w	r3, [sp, #10]
 800427a:	f88d 300b 	strb.w	r3, [sp, #11]
 800427e:	f88d 300c 	strb.w	r3, [sp, #12]
 8004282:	f88d 300d 	strb.w	r3, [sp, #13]
	CRGA[5]= (CRGA[5] & 0xF0) | ((dcc >> 8) & 0x0F);
 8004286:	f3c0 2307 	ubfx	r3, r0, #8, #8
	CRGA[4]=(uint8_t)(dcc);
 800428a:	f88d 0004 	strb.w	r0, [sp, #4]
	CRGA[5]= (CRGA[5] & 0xF0) | ((dcc >> 8) & 0x0F);
 800428e:	f003 020f 	and.w	r2, r3, #15
	LTC_Write(WRCFGA, 1, (uint8_t *) CRGA);
 8004292:	2101      	movs	r1, #1
	CRGB[1]= (CRGB[1] & 0xFC) | ((dcc >> 16) & 0x03);
 8004294:	f3c0 4001 	ubfx	r0, r0, #16, #2
	CRGB[0]= (CRGB[0] & 0x0F) | ((dcc >> 8) & 0xF0);
 8004298:	f023 030f 	bic.w	r3, r3, #15
 800429c:	f043 030f 	orr.w	r3, r3, #15
	CRGA[5]= (CRGA[5] & 0xF0) | ((dcc >> 8) & 0x0F);
 80042a0:	f88d 2005 	strb.w	r2, [sp, #5]
	CRGB[1]= (CRGB[1] & 0xFC) | ((dcc >> 16) & 0x03);
 80042a4:	f88d 0009 	strb.w	r0, [sp, #9]
	LTC_Write(WRCFGA, 1, (uint8_t *) CRGA);
 80042a8:	466a      	mov	r2, sp
 80042aa:	4608      	mov	r0, r1
	CRGB[0]= (CRGB[0] & 0x0F) | ((dcc >> 8) & 0xF0);
 80042ac:	f88d 3008 	strb.w	r3, [sp, #8]
	LTC_Write(WRCFGA, 1, (uint8_t *) CRGA);
 80042b0:	f7ff ff7c 	bl	80041ac <LTC_Write>
	LTC_Write(WRCFGB, 1, (uint8_t *) CRGB);
 80042b4:	aa02      	add	r2, sp, #8
 80042b6:	2101      	movs	r1, #1
 80042b8:	2024      	movs	r0, #36	; 0x24
 80042ba:	f7ff ff77 	bl	80041ac <LTC_Write>
}
 80042be:	b005      	add	sp, #20
 80042c0:	f85d fb04 	ldr.w	pc, [sp], #4

080042c4 <LTC_Send_Recieve>:
{
 80042c4:	b570      	push	{r4, r5, r6, lr}
 80042c6:	b088      	sub	sp, #32
	uint16_t cmd_pec = pec15_calc(2, cmd);
 80042c8:	ac05      	add	r4, sp, #20
	cmd[0] = (uint8_t)(cmd16 >> 8);
 80042ca:	0a03      	lsrs	r3, r0, #8
	cmd[1] = (uint8_t)(cmd16);
 80042cc:	f88d 0015 	strb.w	r0, [sp, #21]
{
 80042d0:	460e      	mov	r6, r1
	uint16_t cmd_pec = pec15_calc(2, cmd);
 80042d2:	2002      	movs	r0, #2
 80042d4:	4621      	mov	r1, r4
{
 80042d6:	4615      	mov	r5, r2
	cmd[0] = (uint8_t)(cmd16 >> 8);
 80042d8:	f88d 3014 	strb.w	r3, [sp, #20]
	uint16_t cmd_pec = pec15_calc(2, cmd);
 80042dc:	f7ff ff00 	bl	80040e0 <pec15_calc>
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80042e0:	0a03      	lsrs	r3, r0, #8
 80042e2:	f88d 3016 	strb.w	r3, [sp, #22]
	cmd[3] = (uint8_t)(cmd_pec);
 80042e6:	f88d 0017 	strb.w	r0, [sp, #23]
	for(int i=4;i<12;i++)
 80042ea:	2304      	movs	r3, #4
		cmd[i]=0x00;
 80042ec:	2200      	movs	r2, #0
 80042ee:	54e2      	strb	r2, [r4, r3]
	for(int i=4;i<12;i++)
 80042f0:	3301      	adds	r3, #1
 80042f2:	2b0c      	cmp	r3, #12
 80042f4:	d1fb      	bne.n	80042ee <LTC_Send_Recieve+0x2a>
	HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, LOW);
 80042f6:	2200      	movs	r2, #0
 80042f8:	2110      	movs	r1, #16
 80042fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042fe:	f7fc ffa5 	bl	800124c <HAL_GPIO_WritePin>
	switch(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)cmd, (uint8_t*)pRxData, rxBytes+6, 100))
 8004302:	2264      	movs	r2, #100	; 0x64
 8004304:	1dab      	adds	r3, r5, #6
 8004306:	9200      	str	r2, [sp, #0]
 8004308:	b29b      	uxth	r3, r3
 800430a:	aa02      	add	r2, sp, #8
 800430c:	4621      	mov	r1, r4
 800430e:	480f      	ldr	r0, [pc, #60]	; (800434c <LTC_Send_Recieve+0x88>)
 8004310:	f7fe fb57 	bl	80029c2 <HAL_SPI_TransmitReceive>
 8004314:	2801      	cmp	r0, #1
 8004316:	d002      	beq.n	800431e <LTC_Send_Recieve+0x5a>
 8004318:	d302      	bcc.n	8004320 <LTC_Send_Recieve+0x5c>
 800431a:	2803      	cmp	r0, #3
 800431c:	d107      	bne.n	800432e <LTC_Send_Recieve+0x6a>
 800431e:	e7fe      	b.n	800431e <LTC_Send_Recieve+0x5a>
	      HAL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);
 8004320:	2104      	movs	r1, #4
 8004322:	480b      	ldr	r0, [pc, #44]	; (8004350 <LTC_Send_Recieve+0x8c>)
 8004324:	f7fc ff97 	bl	8001256 <HAL_GPIO_TogglePin>
	      for(int i=0; i<rxBytes; i++)
 8004328:	2300      	movs	r3, #0
 800432a:	42ab      	cmp	r3, r5
 800432c:	db07      	blt.n	800433e <LTC_Send_Recieve+0x7a>
	HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, HIGH);
 800432e:	2201      	movs	r2, #1
 8004330:	2110      	movs	r1, #16
 8004332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004336:	f7fc ff89 	bl	800124c <HAL_GPIO_WritePin>
}
 800433a:	b008      	add	sp, #32
 800433c:	bd70      	pop	{r4, r5, r6, pc}
	    	  outputRxData[i]=pRxData[i+4];
 800433e:	aa02      	add	r2, sp, #8
 8004340:	441a      	add	r2, r3
 8004342:	7912      	ldrb	r2, [r2, #4]
 8004344:	54f2      	strb	r2, [r6, r3]
	      for(int i=0; i<rxBytes; i++)
 8004346:	3301      	adds	r3, #1
 8004348:	e7ef      	b.n	800432a <LTC_Send_Recieve+0x66>
 800434a:	bf00      	nop
 800434c:	20000c48 	.word	0x20000c48
 8004350:	48000400 	.word	0x48000400
 8004354:	00000000 	.word	0x00000000

08004358 <main>:
  {
 8004358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800435c:	ed2d 8b02 	vpush	{d8}
 8004360:	b089      	sub	sp, #36	; 0x24
    HAL_Init();
 8004362:	f7fc fe09 	bl	8000f78 <HAL_Init>
  SystemClock_Config();
 8004366:	f7ff fdb5 	bl	8003ed4 <SystemClock_Config>
  MX_GPIO_Init();
 800436a:	f7ff fe41 	bl	8003ff0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800436e:	f7ff fe1b 	bl	8003fa8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8004372:	f000 fb67 	bl	8004a44 <MX_USB_DEVICE_Init>
  HAL_GPIO_WritePin(BMB_CS_GPIO_PORT, BMB_CS_PIN, HIGH);
 8004376:	2201      	movs	r2, #1
 8004378:	2110      	movs	r1, #16
 800437a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800437e:	f7fc ff65 	bl	800124c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAN_STBY_GPIO_PORT, CAN_STBY_PIN, HIGH);
 8004382:	2201      	movs	r2, #1
 8004384:	2180      	movs	r1, #128	; 0x80
 8004386:	48da      	ldr	r0, [pc, #872]	; (80046f0 <main+0x398>)
  tickstart = HAL_GetTick();
 8004388:	4cda      	ldr	r4, [pc, #872]	; (80046f4 <main+0x39c>)
		  LTC_Send_Recieve(RDCVAcmds[c], (uint8_t *)aRxBuffer, rxBytes);
 800438a:	4ddb      	ldr	r5, [pc, #876]	; (80046f8 <main+0x3a0>)
  HAL_GPIO_WritePin(CAN_STBY_GPIO_PORT, CAN_STBY_PIN, HIGH);
 800438c:	f7fc ff5e 	bl	800124c <HAL_GPIO_WritePin>
  LTC_wake(1);
 8004390:	2001      	movs	r0, #1
 8004392:	f7ff fd6d 	bl	8003e70 <LTC_wake>
  delay_u(300);
 8004396:	2003      	movs	r0, #3
 8004398:	f7fc fe08 	bl	8000fac <HAL_Delay>
  LTC_wake(1);
 800439c:	2001      	movs	r0, #1
 800439e:	f7ff fd67 	bl	8003e70 <LTC_wake>
  LTC_Write(WRCFGA, 1, (uint8_t *) CRGA);
 80043a2:	2101      	movs	r1, #1
  uint8_t CRGA[] = {0xFC, 0x00, 0x00, 0x00, 0x00, 0x00};
 80043a4:	23fc      	movs	r3, #252	; 0xfc
 80043a6:	f88d 3010 	strb.w	r3, [sp, #16]
  LTC_Write(WRCFGA, 1, (uint8_t *) CRGA);
 80043aa:	aa04      	add	r2, sp, #16
  uint8_t CRGA[] = {0xFC, 0x00, 0x00, 0x00, 0x00, 0x00};
 80043ac:	2300      	movs	r3, #0
  LTC_Write(WRCFGA, 1, (uint8_t *) CRGA);
 80043ae:	4608      	mov	r0, r1
  uint8_t CRGA[] = {0xFC, 0x00, 0x00, 0x00, 0x00, 0x00};
 80043b0:	f88d 3011 	strb.w	r3, [sp, #17]
 80043b4:	f88d 3012 	strb.w	r3, [sp, #18]
 80043b8:	f88d 3013 	strb.w	r3, [sp, #19]
 80043bc:	f88d 3014 	strb.w	r3, [sp, #20]
 80043c0:	f88d 3015 	strb.w	r3, [sp, #21]
  LTC_Write(WRCFGA, 1, (uint8_t *) CRGA);
 80043c4:	f7ff fef2 	bl	80041ac <LTC_Write>
  tickstart = HAL_GetTick();
 80043c8:	f7fc fdea 	bl	8000fa0 <HAL_GetTick>
 80043cc:	46ab      	mov	fp, r5
 80043ce:	6020      	str	r0, [r4, #0]
	  while((HAL_GetTick() - tickstart) < main_period)
 80043d0:	4eca      	ldr	r6, [pc, #808]	; (80046fc <main+0x3a4>)
 80043d2:	f7fc fde5 	bl	8000fa0 <HAL_GetTick>
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	1ac0      	subs	r0, r0, r3
 80043da:	6833      	ldr	r3, [r6, #0]
 80043dc:	4298      	cmp	r0, r3
 80043de:	d3f8      	bcc.n	80043d2 <main+0x7a>
	  tickstart = HAL_GetTick();
 80043e0:	f7fc fdde 	bl	8000fa0 <HAL_GetTick>
 80043e4:	6020      	str	r0, [r4, #0]
	  LTC_wake(1);
 80043e6:	2001      	movs	r0, #1
 80043e8:	f7ff fd42 	bl	8003e70 <LTC_wake>
	  delay_u(300);
 80043ec:	2003      	movs	r0, #3
 80043ee:	f7fc fddd 	bl	8000fac <HAL_Delay>
	  LTC_wake(1);
 80043f2:	2001      	movs	r0, #1
 80043f4:	f7ff fd3c 	bl	8003e70 <LTC_wake>
	  LTC_Send(cmd, 1);
 80043f8:	2101      	movs	r1, #1
 80043fa:	f240 506a 	movw	r0, #1386	; 0x56a
 80043fe:	f7ff fe87 	bl	8004110 <LTC_Send>
      HAL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 8004402:	2108      	movs	r1, #8
 8004404:	48ba      	ldr	r0, [pc, #744]	; (80046f0 <main+0x398>)
 8004406:	f7fc ff26 	bl	8001256 <HAL_GPIO_TogglePin>
	  LTC_bleed(0);
 800440a:	2000      	movs	r0, #0
 800440c:	f7ff ff28 	bl	8004260 <LTC_bleed>
	  LTC_Send(cmd, 1);
 8004410:	2101      	movs	r1, #1
 8004412:	f240 5077 	movw	r0, #1399	; 0x577
 8004416:	f7ff fe7b 	bl	8004110 <LTC_Send>
	  uint8_t RDCVAcmds[6]={RDCVA,RDCVB,RDCVC,RDCVD,RDCVE,RDCVF}; //read all cell voltage register groups
 800441a:	2304      	movs	r3, #4
 800441c:	f88d 3018 	strb.w	r3, [sp, #24]
 8004420:	2308      	movs	r3, #8
 8004422:	f88d 301a 	strb.w	r3, [sp, #26]
 8004426:	230a      	movs	r3, #10
 8004428:	f88d 301b 	strb.w	r3, [sp, #27]
 800442c:	2309      	movs	r3, #9
 800442e:	2706      	movs	r7, #6
 8004430:	f88d 301c 	strb.w	r3, [sp, #28]
 8004434:	230b      	movs	r3, #11
 8004436:	f88d 7019 	strb.w	r7, [sp, #25]
 800443a:	f88d 301d 	strb.w	r3, [sp, #29]
	  for(int c=0;c<6;c++)
 800443e:	2600      	movs	r6, #0
		  LTC_Send_Recieve(RDCVAcmds[c], (uint8_t *)aRxBuffer, rxBytes);
 8004440:	ab06      	add	r3, sp, #24
 8004442:	2206      	movs	r2, #6
 8004444:	5d98      	ldrb	r0, [r3, r6]
 8004446:	4659      	mov	r1, fp
 8004448:	f7ff ff3c 	bl	80042c4 <LTC_Send_Recieve>
			  voltages[i+c*3] = (aRxBuffer[(i<<1)+1] << 8) | aRxBuffer[(i<<1)];
 800444c:	4aac      	ldr	r2, [pc, #688]	; (8004700 <main+0x3a8>)
 800444e:	fb07 f006 	mul.w	r0, r7, r6
		  LTC_Send_Recieve(RDCVAcmds[c], (uint8_t *)aRxBuffer, rxBytes);
 8004452:	2300      	movs	r3, #0
			  voltages[i+c*3] = (aRxBuffer[(i<<1)+1] << 8) | aRxBuffer[(i<<1)];
 8004454:	1959      	adds	r1, r3, r5
 8004456:	eb03 0e02 	add.w	lr, r3, r2
 800445a:	f891 c001 	ldrb.w	ip, [r1, #1]
 800445e:	5d59      	ldrb	r1, [r3, r5]
 8004460:	3302      	adds	r3, #2
 8004462:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
		  for(int i=0;i<3;i++)
 8004466:	2b06      	cmp	r3, #6
			  voltages[i+c*3] = (aRxBuffer[(i<<1)+1] << 8) | aRxBuffer[(i<<1)];
 8004468:	f82e 1000 	strh.w	r1, [lr, r0]
		  for(int i=0;i<3;i++)
 800446c:	d1f2      	bne.n	8004454 <main+0xfc>
	  for(int c=0;c<6;c++)
 800446e:	3601      	adds	r6, #1
 8004470:	2e06      	cmp	r6, #6
 8004472:	d1e5      	bne.n	8004440 <main+0xe8>
	  maxBrickV=(float)(voltages[0])*ADC_RESOLUTION;
 8004474:	8810      	ldrh	r0, [r2, #0]
	  minBrickV=(float)(voltages[0])*ADC_RESOLUTION;
 8004476:	4ea3      	ldr	r6, [pc, #652]	; (8004704 <main+0x3ac>)
	  maxBrickV=(float)(voltages[0])*ADC_RESOLUTION;
 8004478:	ee07 0a90 	vmov	s15, r0
 800447c:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  minBrickV=(float)(voltages[0])*ADC_RESOLUTION;
 8004480:	2700      	movs	r7, #0
	  maxBrickV=(float)(voltages[0])*ADC_RESOLUTION;
 8004482:	ee17 0a90 	vmov	r0, s15
 8004486:	f7fc f85f 	bl	8000548 <__aeabi_f2d>
 800448a:	a391      	add	r3, pc, #580	; (adr r3, 80046d0 <main+0x378>)
 800448c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004490:	f7fc f8ae 	bl	80005f0 <__aeabi_dmul>
 8004494:	f7fc fb84 	bl	8000ba0 <__aeabi_d2f>
 8004498:	4b9b      	ldr	r3, [pc, #620]	; (8004708 <main+0x3b0>)
	  minBrickV=(float)(voltages[0])*ADC_RESOLUTION;
 800449a:	6030      	str	r0, [r6, #0]
	  maxBrickV=(float)(voltages[0])*ADC_RESOLUTION;
 800449c:	6018      	str	r0, [r3, #0]
 800449e:	4b9b      	ldr	r3, [pc, #620]	; (800470c <main+0x3b4>)
 80044a0:	9301      	str	r3, [sp, #4]
 80044a2:	ee08 0a10 	vmov	s16, r0
	  minBrickV=(float)(voltages[0])*ADC_RESOLUTION;
 80044a6:	ee08 0a90 	vmov	s17, r0
 80044aa:	469a      	mov	sl, r3
 80044ac:	46b9      	mov	r9, r7
	  for(int i=0; i<SIZE_OF_ARRAY(cells); i++)
 80044ae:	46b8      	mov	r8, r7
		  voltagesFloat[i]=(float)(voltages[cells[i]])*0.0001;
 80044b0:	4b97      	ldr	r3, [pc, #604]	; (8004710 <main+0x3b8>)
 80044b2:	4a93      	ldr	r2, [pc, #588]	; (8004700 <main+0x3a8>)
 80044b4:	f818 3003 	ldrb.w	r3, [r8, r3]
 80044b8:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80044bc:	ee07 0a90 	vmov	s15, r0
 80044c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  for(int i=0; i<SIZE_OF_ARRAY(cells); i++)
 80044c4:	f108 0801 	add.w	r8, r8, #1
		  voltagesFloat[i]=(float)(voltages[cells[i]])*0.0001;
 80044c8:	ee17 0a90 	vmov	r0, s15
 80044cc:	f7fc f83c 	bl	8000548 <__aeabi_f2d>
 80044d0:	a37f      	add	r3, pc, #508	; (adr r3, 80046d0 <main+0x378>)
 80044d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d6:	f7fc f88b 	bl	80005f0 <__aeabi_dmul>
 80044da:	f7fc fb61 	bl	8000ba0 <__aeabi_d2f>
 80044de:	ee07 0a90 	vmov	s15, r0
		  if(voltagesFloat[i] > maxBrickV)
 80044e2:	eef4 7ac8 	vcmpe.f32	s15, s16
 80044e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		  if(voltagesFloat[i] < minBrickV)
 80044ea:	eef4 7ae8 	vcmpe.f32	s15, s17
		  			  maxBrickV=voltagesFloat[i];
 80044ee:	bfc4      	itt	gt
 80044f0:	eeb0 8a67 	vmovgt.f32	s16, s15
		  if(voltagesFloat[i] > maxBrickV)
 80044f4:	f04f 0901 	movgt.w	r9, #1
		  if(voltagesFloat[i] < minBrickV)
 80044f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		  			  minBrickV=voltagesFloat[i];
 80044fc:	bf44      	itt	mi
 80044fe:	eef0 8a67 	vmovmi.f32	s17, s15
		  if(voltagesFloat[i] < minBrickV)
 8004502:	2701      	movmi	r7, #1
	  for(int i=0; i<SIZE_OF_ARRAY(cells); i++)
 8004504:	f1b8 0f0f 	cmp.w	r8, #15
		  voltagesFloat[i]=(float)(voltages[cells[i]])*0.0001;
 8004508:	f84a 0b04 	str.w	r0, [sl], #4
	  for(int i=0; i<SIZE_OF_ARRAY(cells); i++)
 800450c:	d1d0      	bne.n	80044b0 <main+0x158>
 800450e:	b10f      	cbz	r7, 8004514 <main+0x1bc>
 8004510:	edc6 8a00 	vstr	s17, [r6]
 8004514:	f1b9 0f00 	cmp.w	r9, #0
 8004518:	d002      	beq.n	8004520 <main+0x1c8>
 800451a:	4b7b      	ldr	r3, [pc, #492]	; (8004708 <main+0x3b0>)
 800451c:	ed83 8a00 	vstr	s16, [r3]
 8004520:	4f7c      	ldr	r7, [pc, #496]	; (8004714 <main+0x3bc>)
		  if(voltagesFloat[i] > (minBrickV + hyst))
 8004522:	ed96 7a00 	vldr	s14, [r6]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	4878      	ldr	r0, [pc, #480]	; (800470c <main+0x3b4>)
		  float hyst=0.005;
 800452a:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8004718 <main+0x3c0>
 800452e:	ed9f 6a7b 	vldr	s12, [pc, #492]	; 800471c <main+0x3c4>
		  if(voltagesFloat[i] > (minBrickV + hyst))
 8004532:	2100      	movs	r1, #0
		  uint32_t cellBit = (1 << cells[i]);
 8004534:	4a76      	ldr	r2, [pc, #472]	; (8004710 <main+0x3b8>)
		  if(voltagesFloat[i] > (minBrickV + hyst))
 8004536:	ecf0 5a01 	vldmia	r0!, {s11}
		  uint32_t cellBit = (1 << cells[i]);
 800453a:	5c52      	ldrb	r2, [r2, r1]
 800453c:	f04f 0e01 	mov.w	lr, #1
 8004540:	fa0e f202 	lsl.w	r2, lr, r2
		  float hyst=0.005;
 8004544:	421a      	tst	r2, r3
 8004546:	bf0c      	ite	eq
 8004548:	eef0 7a46 	vmoveq.f32	s15, s12
 800454c:	eef0 7a66 	vmovne.f32	s15, s13
		  if(voltagesFloat[i] > (minBrickV + hyst))
 8004550:	ee77 7a87 	vadd.f32	s15, s15, s14
	  for(int i=0; i<SIZE_OF_ARRAY(cells); i++)
 8004554:	3101      	adds	r1, #1
		  if(voltagesFloat[i] > (minBrickV + hyst))
 8004556:	eef4 5ae7 	vcmpe.f32	s11, s15
 800455a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			  dcc |= cellBit;
 800455e:	bfcc      	ite	gt
 8004560:	4313      	orrgt	r3, r2
			  dcc &= ~cellBit;
 8004562:	4393      	bicle	r3, r2
	  for(int i=0; i<SIZE_OF_ARRAY(cells); i++)
 8004564:	290f      	cmp	r1, #15
 8004566:	d1e5      	bne.n	8004534 <main+0x1dc>
	  LTC_Send_Recieve(RDSTATA, (uint8_t *)aRxBuffer, rxBytes);
 8004568:	2206      	movs	r2, #6
 800456a:	4629      	mov	r1, r5
 800456c:	2010      	movs	r0, #16
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	f7ff fea8 	bl	80042c4 <LTC_Send_Recieve>
	  dieTemp = (float)((aRxBuffer[3] << 8) | aRxBuffer[2]) * 0.0131579 - 276.0;
 8004574:	f8bb 0002 	ldrh.w	r0, [fp, #2]
 8004578:	ee07 0a90 	vmov	s15, r0
 800457c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004580:	ee17 0a90 	vmov	r0, s15
 8004584:	f7fb ffe0 	bl	8000548 <__aeabi_f2d>
 8004588:	a353      	add	r3, pc, #332	; (adr r3, 80046d8 <main+0x380>)
 800458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458e:	f7fc f82f 	bl	80005f0 <__aeabi_dmul>
 8004592:	4b63      	ldr	r3, [pc, #396]	; (8004720 <main+0x3c8>)
 8004594:	2200      	movs	r2, #0
 8004596:	f7fb fe77 	bl	8000288 <__aeabi_dsub>
 800459a:	f7fc fb01 	bl	8000ba0 <__aeabi_d2f>
	  if((minBrickV > BLEED_THRESHOLD) & (dieTemp < OVT))
 800459e:	edd6 6a00 	vldr	s13, [r6]
	  dieTemp = (float)((aRxBuffer[3] << 8) | aRxBuffer[2]) * 0.0131579 - 276.0;
 80045a2:	4b60      	ldr	r3, [pc, #384]	; (8004724 <main+0x3cc>)
	  if((minBrickV > BLEED_THRESHOLD) & (dieTemp < OVT))
 80045a4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80045a8:	eef4 6a47 	vcmp.f32	s13, s14
 80045ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  dieTemp = (float)((aRxBuffer[3] << 8) | aRxBuffer[2]) * 0.0131579 - 276.0;
 80045b0:	ee07 0a90 	vmov	s15, r0
 80045b4:	6018      	str	r0, [r3, #0]
	  if((minBrickV > BLEED_THRESHOLD) & (dieTemp < OVT))
 80045b6:	f340 8104 	ble.w	80047c2 <main+0x46a>
 80045ba:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8004728 <main+0x3d0>
 80045be:	eef4 7a47 	vcmp.f32	s15, s14
 80045c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c6:	f140 80fc 	bpl.w	80047c2 <main+0x46a>
		  LTC_bleed(dcc);
 80045ca:	6838      	ldr	r0, [r7, #0]
 80045cc:	f7ff fe48 	bl	8004260 <LTC_bleed>
	  LTC_Send(cmd, 1);
 80045d0:	2101      	movs	r1, #1
 80045d2:	f44f 60ac 	mov.w	r0, #1376	; 0x560
 80045d6:	f7ff fd9b 	bl	8004110 <LTC_Send>
	  uint8_t RDAUXcmds[4]={RDAUXA,RDAUXB,RDAUXC,RDAUXD}; //read all cell voltage register groups
 80045da:	230c      	movs	r3, #12
 80045dc:	f88d 300c 	strb.w	r3, [sp, #12]
 80045e0:	230e      	movs	r3, #14
 80045e2:	f88d 300d 	strb.w	r3, [sp, #13]
 80045e6:	230d      	movs	r3, #13
 80045e8:	f88d 300e 	strb.w	r3, [sp, #14]
			  auxVoltages[i+c*3] = (aRxBuffer[(i<<1)+1] << 8) | aRxBuffer[(i<<1)];
 80045ec:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8004730 <main+0x3d8>
	  uint8_t RDAUXcmds[4]={RDAUXA,RDAUXB,RDAUXC,RDAUXD}; //read all cell voltage register groups
 80045f0:	230f      	movs	r3, #15
 80045f2:	f88d 300f 	strb.w	r3, [sp, #15]
	  for(int c=0;c<4;c++)
 80045f6:	2700      	movs	r7, #0
		  LTC_Send_Recieve(RDAUXcmds[c], (uint8_t *)aRxBuffer, rxBytes);
 80045f8:	f04f 0906 	mov.w	r9, #6
 80045fc:	ab03      	add	r3, sp, #12
 80045fe:	4629      	mov	r1, r5
 8004600:	5dd8      	ldrb	r0, [r3, r7]
 8004602:	2206      	movs	r2, #6
 8004604:	f7ff fe5e 	bl	80042c4 <LTC_Send_Recieve>
 8004608:	fb09 f107 	mul.w	r1, r9, r7
 800460c:	2300      	movs	r3, #0
			  auxVoltages[i+c*3] = (aRxBuffer[(i<<1)+1] << 8) | aRxBuffer[(i<<1)];
 800460e:	eb0b 0203 	add.w	r2, fp, r3
 8004612:	eb03 0008 	add.w	r0, r3, r8
 8004616:	f892 e001 	ldrb.w	lr, [r2, #1]
 800461a:	f81b 2003 	ldrb.w	r2, [fp, r3]
 800461e:	3302      	adds	r3, #2
 8004620:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
		  for(int i=0;i<3;i++)
 8004624:	2b06      	cmp	r3, #6
			  auxVoltages[i+c*3] = (aRxBuffer[(i<<1)+1] << 8) | aRxBuffer[(i<<1)];
 8004626:	5242      	strh	r2, [r0, r1]
		  for(int i=0;i<3;i++)
 8004628:	d1f1      	bne.n	800460e <main+0x2b6>
	  for(int c=0;c<4;c++)
 800462a:	3701      	adds	r7, #1
 800462c:	2f04      	cmp	r7, #4
 800462e:	d1e5      	bne.n	80045fc <main+0x2a4>
 8004630:	4f3e      	ldr	r7, [pc, #248]	; (800472c <main+0x3d4>)
 8004632:	f04f 0800 	mov.w	r8, #0
 8004636:	46ba      	mov	sl, r7
 8004638:	46b9      	mov	r9, r7
		  auxVoltagesFloat[i]=(float)(auxVoltages[i])*ADC_RESOLUTION;
 800463a:	4b3d      	ldr	r3, [pc, #244]	; (8004730 <main+0x3d8>)
 800463c:	f833 0018 	ldrh.w	r0, [r3, r8, lsl #1]
 8004640:	ee07 0a90 	vmov	s15, r0
 8004644:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  for(int i=0; i<12; i++)
 8004648:	f108 0801 	add.w	r8, r8, #1
		  auxVoltagesFloat[i]=(float)(auxVoltages[i])*ADC_RESOLUTION;
 800464c:	ee17 0a90 	vmov	r0, s15
 8004650:	f7fb ff7a 	bl	8000548 <__aeabi_f2d>
 8004654:	a31e      	add	r3, pc, #120	; (adr r3, 80046d0 <main+0x378>)
 8004656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465a:	f7fb ffc9 	bl	80005f0 <__aeabi_dmul>
 800465e:	f7fc fa9f 	bl	8000ba0 <__aeabi_d2f>
	  for(int i=0; i<12; i++)
 8004662:	f1b8 0f0c 	cmp.w	r8, #12
		  auxVoltagesFloat[i]=(float)(auxVoltages[i])*ADC_RESOLUTION;
 8004666:	f84a 0b04 	str.w	r0, [sl], #4
	  for(int i=0; i<12; i++)
 800466a:	d1e6      	bne.n	800463a <main+0x2e2>
	  current=(auxVoltagesFloat[0] - auxVoltagesFloat[1] - AMP_OFFSET_ERROR) * AMPS_PER_VOLT;
 800466c:	ed99 7a00 	vldr	s14, [r9]
 8004670:	edd9 7a01 	vldr	s15, [r9, #4]
 8004674:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8004738 <main+0x3e0>
 8004678:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 800473c <main+0x3e4>
		  printf("%1.4f ", voltagesFloat[i]);
 800467c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8004740 <main+0x3e8>
	  current=(auxVoltagesFloat[0] - auxVoltagesFloat[1] - AMP_OFFSET_ERROR) * AMPS_PER_VOLT;
 8004680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004684:	ee17 0a90 	vmov	r0, s15
 8004688:	f7fb ff5e 	bl	8000548 <__aeabi_f2d>
 800468c:	a314      	add	r3, pc, #80	; (adr r3, 80046e0 <main+0x388>)
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	f7fb fdfb 	bl	800028c <__adddf3>
 8004696:	a314      	add	r3, pc, #80	; (adr r3, 80046e8 <main+0x390>)
 8004698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469c:	f7fb ffa8 	bl	80005f0 <__aeabi_dmul>
 80046a0:	f7fc fa7e 	bl	8000ba0 <__aeabi_d2f>
	  printf("Time: %d.%d Cell: ",tickstart/10000,(tickstart/1000)%10);
 80046a4:	220a      	movs	r2, #10
 80046a6:	6821      	ldr	r1, [r4, #0]
	  current=(auxVoltagesFloat[0] - auxVoltagesFloat[1] - AMP_OFFSET_ERROR) * AMPS_PER_VOLT;
 80046a8:	f8c8 0000 	str.w	r0, [r8]
	  printf("Time: %d.%d Cell: ",tickstart/10000,(tickstart/1000)%10);
 80046ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80046b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80046b8:	fb02 3210 	mls	r2, r2, r0, r3
 80046bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80046c0:	481c      	ldr	r0, [pc, #112]	; (8004734 <main+0x3dc>)
 80046c2:	fbb1 f1f3 	udiv	r1, r1, r3
 80046c6:	f000 fe6b 	bl	80053a0 <printf>
 80046ca:	e03b      	b.n	8004744 <main+0x3ec>
 80046cc:	f3af 8000 	nop.w
 80046d0:	eb1c432d 	.word	0xeb1c432d
 80046d4:	3f1a36e2 	.word	0x3f1a36e2
 80046d8:	7178e920 	.word	0x7178e920
 80046dc:	3f8af287 	.word	0x3f8af287
 80046e0:	01a36e2f 	.word	0x01a36e2f
 80046e4:	3f5205bc 	.word	0x3f5205bc
 80046e8:	0cf6474a 	.word	0x0cf6474a
 80046ec:	403fa544 	.word	0x403fa544
 80046f0:	48000400 	.word	0x48000400
 80046f4:	20000828 	.word	0x20000828
 80046f8:	20000c38 	.word	0x20000c38
 80046fc:	20000120 	.word	0x20000120
 8004700:	20000a88 	.word	0x20000a88
 8004704:	2000012c 	.word	0x2000012c
 8004708:	20000124 	.word	0x20000124
 800470c:	20000be4 	.word	0x20000be4
 8004710:	2000010f 	.word	0x2000010f
 8004714:	20000820 	.word	0x20000820
 8004718:	3b03126f 	.word	0x3b03126f
 800471c:	3ba3d70a 	.word	0x3ba3d70a
 8004720:	40714000 	.word	0x40714000
 8004724:	20000824 	.word	0x20000824
 8004728:	42820000 	.word	0x42820000
 800472c:	20000cac 	.word	0x20000cac
 8004730:	20000c20 	.word	0x20000c20
 8004734:	08008c48 	.word	0x08008c48
 8004738:	2000081c 	.word	0x2000081c
 800473c:	20000c20 	.word	0x20000c20
 8004740:	08008c5b 	.word	0x08008c5b
	  for(int i=0; i<SIZE_OF_ARRAY(cells); i++)
 8004744:	9b01      	ldr	r3, [sp, #4]
 8004746:	454b      	cmp	r3, r9
 8004748:	d13e      	bne.n	80047c8 <main+0x470>
	  printf("Aux: ");
 800474a:	4851      	ldr	r0, [pc, #324]	; (8004890 <main+0x538>)
 800474c:	f8df 915c 	ldr.w	r9, [pc, #348]	; 80048ac <main+0x554>
		  printf("%1.4f ", auxVoltagesFloat[i]);
 8004750:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80048b0 <main+0x558>
	  printf("Aux: ");
 8004754:	f000 fe24 	bl	80053a0 <printf>
		  printf("%1.4f ", auxVoltagesFloat[i]);
 8004758:	f857 0b04 	ldr.w	r0, [r7], #4
 800475c:	f7fb fef4 	bl	8000548 <__aeabi_f2d>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4650      	mov	r0, sl
 8004766:	f000 fe1b 	bl	80053a0 <printf>
	  for(int i=0; i<12; i++)
 800476a:	45b9      	cmp	r9, r7
 800476c:	d1f4      	bne.n	8004758 <main+0x400>
	  printf("Current: %2.3f \n\r", current);
 800476e:	f8d8 0000 	ldr.w	r0, [r8]
 8004772:	f7fb fee9 	bl	8000548 <__aeabi_f2d>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4846      	ldr	r0, [pc, #280]	; (8004894 <main+0x53c>)
 800477c:	f000 fe10 	bl	80053a0 <printf>
	  if(minBrickV > MIN_V)
 8004780:	ed96 7a00 	vldr	s14, [r6]
 8004784:	4a44      	ldr	r2, [pc, #272]	; (8004898 <main+0x540>)
 8004786:	4e45      	ldr	r6, [pc, #276]	; (800489c <main+0x544>)
 8004788:	eef0 7a04 	vmov.f32	s15, #4	; 0x40200000  2.5
 800478c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004794:	dd24      	ble.n	80047e0 <main+0x488>
		  minVctr=3;
 8004796:	2303      	movs	r3, #3
			  minVctr--;
 8004798:	7013      	strb	r3, [r2, #0]
	  if(maxBrickV < MAX_V)
 800479a:	4b41      	ldr	r3, [pc, #260]	; (80048a0 <main+0x548>)
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	f7fb fed3 	bl	8000548 <__aeabi_f2d>
 80047a2:	a337      	add	r3, pc, #220	; (adr r3, 8004880 <main+0x528>)
 80047a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a8:	f7fc f994 	bl	8000ad4 <__aeabi_dcmplt>
 80047ac:	4a3d      	ldr	r2, [pc, #244]	; (80048a4 <main+0x54c>)
 80047ae:	b1e8      	cbz	r0, 80047ec <main+0x494>
		  maxVctr=3;
 80047b0:	2303      	movs	r3, #3
			  maxVctr--;
 80047b2:	7013      	strb	r3, [r2, #0]
	  switch(state){
 80047b4:	7833      	ldrb	r3, [r6, #0]
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d85f      	bhi.n	800487a <main+0x522>
 80047ba:	e8df f003 	tbb	[pc, r3]
 80047be:	3d1d      	.short	0x3d1d
 80047c0:	554b      	.short	0x554b
		  dcc=0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	603b      	str	r3, [r7, #0]
 80047c6:	e703      	b.n	80045d0 <main+0x278>
		  printf("%1.4f ", voltagesFloat[i]);
 80047c8:	9b01      	ldr	r3, [sp, #4]
 80047ca:	f853 0b04 	ldr.w	r0, [r3], #4
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	f7fb feba 	bl	8000548 <__aeabi_f2d>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4650      	mov	r0, sl
 80047da:	f000 fde1 	bl	80053a0 <printf>
 80047de:	e7b1      	b.n	8004744 <main+0x3ec>
		  if(minVctr)
 80047e0:	7813      	ldrb	r3, [r2, #0]
 80047e2:	b10b      	cbz	r3, 80047e8 <main+0x490>
			  minVctr--;
 80047e4:	3b01      	subs	r3, #1
 80047e6:	e7d7      	b.n	8004798 <main+0x440>
			  state = 0;
 80047e8:	7033      	strb	r3, [r6, #0]
 80047ea:	e7d6      	b.n	800479a <main+0x442>
		  if(maxVctr)
 80047ec:	7813      	ldrb	r3, [r2, #0]
 80047ee:	b10b      	cbz	r3, 80047f4 <main+0x49c>
			  maxVctr--;
 80047f0:	3b01      	subs	r3, #1
 80047f2:	e7de      	b.n	80047b2 <main+0x45a>
			  state = 0;
 80047f4:	7033      	strb	r3, [r6, #0]
 80047f6:	e7dd      	b.n	80047b4 <main+0x45c>
		  busContactor_off();
 80047f8:	2200      	movs	r2, #0
 80047fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004802:	f7fc fd23 	bl	800124c <HAL_GPIO_WritePin>
		  chargeSSR_off();
 8004806:	2200      	movs	r2, #0
 8004808:	2120      	movs	r1, #32
 800480a:	4827      	ldr	r0, [pc, #156]	; (80048a8 <main+0x550>)
 800480c:	f7fc fd1e 	bl	800124c <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3_PIN, 0);
 8004810:	2200      	movs	r2, #0
 8004812:	2110      	movs	r1, #16
 8004814:	4824      	ldr	r0, [pc, #144]	; (80048a8 <main+0x550>)
 8004816:	f7fc fd19 	bl	800124c <HAL_GPIO_WritePin>
 		  if(maxBrickV < (MAX_V-BRICK_V_HYST))
 800481a:	4b21      	ldr	r3, [pc, #132]	; (80048a0 <main+0x548>)
 800481c:	6818      	ldr	r0, [r3, #0]
 800481e:	f7fb fe93 	bl	8000548 <__aeabi_f2d>
 8004822:	a319      	add	r3, pc, #100	; (adr r3, 8004888 <main+0x530>)
 8004824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004828:	f7fc f954 	bl	8000ad4 <__aeabi_dcmplt>
 800482c:	2800      	cmp	r0, #0
 800482e:	f43f adcf 	beq.w	80043d0 <main+0x78>
 			  state = 3;
 8004832:	2303      	movs	r3, #3
		  state=0;
 8004834:	7033      	strb	r3, [r6, #0]
  {
 8004836:	e5cb      	b.n	80043d0 <main+0x78>
		  if(clear_btn()==0) //ride mode
 8004838:	2102      	movs	r1, #2
 800483a:	481b      	ldr	r0, [pc, #108]	; (80048a8 <main+0x550>)
 800483c:	f7fc fd00 	bl	8001240 <HAL_GPIO_ReadPin>
 8004840:	b908      	cbnz	r0, 8004846 <main+0x4ee>
			  state=2;
 8004842:	2302      	movs	r3, #2
 8004844:	e7f6      	b.n	8004834 <main+0x4dc>
		  else if(test_btn()==0) //charge mode?
 8004846:	2101      	movs	r1, #1
 8004848:	4817      	ldr	r0, [pc, #92]	; (80048a8 <main+0x550>)
 800484a:	f7fc fcf9 	bl	8001240 <HAL_GPIO_ReadPin>
 800484e:	2800      	cmp	r0, #0
 8004850:	d0ef      	beq.n	8004832 <main+0x4da>
 8004852:	e5bd      	b.n	80043d0 <main+0x78>
		  busContactor_on();
 8004854:	2201      	movs	r2, #1
 8004856:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800485a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		  HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3_PIN, 1);
 800485e:	f7fc fcf5 	bl	800124c <HAL_GPIO_WritePin>
		  state=1;
 8004862:	f04f 0301 	mov.w	r3, #1
 8004866:	e7e5      	b.n	8004834 <main+0x4dc>
		  chargeSSR_on();
 8004868:	2201      	movs	r2, #1
 800486a:	2120      	movs	r1, #32
 800486c:	480e      	ldr	r0, [pc, #56]	; (80048a8 <main+0x550>)
 800486e:	f7fc fced 	bl	800124c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3_PIN, 1);
 8004872:	2201      	movs	r2, #1
 8004874:	2110      	movs	r1, #16
 8004876:	480c      	ldr	r0, [pc, #48]	; (80048a8 <main+0x550>)
 8004878:	e7f1      	b.n	800485e <main+0x506>
		  state=0;
 800487a:	2300      	movs	r3, #0
 800487c:	e7da      	b.n	8004834 <main+0x4dc>
 800487e:	bf00      	nop
 8004880:	a3d70a3d 	.word	0xa3d70a3d
 8004884:	400d3d70 	.word	0x400d3d70
 8004888:	c28f5c29 	.word	0xc28f5c29
 800488c:	400d28f5 	.word	0x400d28f5
 8004890:	08008c62 	.word	0x08008c62
 8004894:	08008c68 	.word	0x08008c68
 8004898:	20000130 	.word	0x20000130
 800489c:	20000131 	.word	0x20000131
 80048a0:	20000124 	.word	0x20000124
 80048a4:	20000128 	.word	0x20000128
 80048a8:	48000400 	.word	0x48000400
 80048ac:	20000cdc 	.word	0x20000cdc
 80048b0:	08008c5b 	.word	0x08008c5b

080048b4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80048b4:	e7fe      	b.n	80048b4 <_Error_Handler>
	...

080048b8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048b8:	4b21      	ldr	r3, [pc, #132]	; (8004940 <HAL_MspInit+0x88>)
{
 80048ba:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80048be:	f042 0201 	orr.w	r2, r2, #1
 80048c2:	661a      	str	r2, [r3, #96]	; 0x60
 80048c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80048c6:	f002 0201 	and.w	r2, r2, #1
 80048ca:	9200      	str	r2, [sp, #0]
 80048cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80048d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80048d4:	659a      	str	r2, [r3, #88]	; 0x58
 80048d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048dc:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048de:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80048e0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048e2:	f7fc fb71 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80048e6:	2200      	movs	r2, #0
 80048e8:	4611      	mov	r1, r2
 80048ea:	f06f 000b 	mvn.w	r0, #11
 80048ee:	f7fc fb7d 	bl	8000fec <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80048f2:	2200      	movs	r2, #0
 80048f4:	4611      	mov	r1, r2
 80048f6:	f06f 000a 	mvn.w	r0, #10
 80048fa:	f7fc fb77 	bl	8000fec <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80048fe:	2200      	movs	r2, #0
 8004900:	4611      	mov	r1, r2
 8004902:	f06f 0009 	mvn.w	r0, #9
 8004906:	f7fc fb71 	bl	8000fec <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800490a:	2200      	movs	r2, #0
 800490c:	4611      	mov	r1, r2
 800490e:	f06f 0004 	mvn.w	r0, #4
 8004912:	f7fc fb6b 	bl	8000fec <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004916:	2200      	movs	r2, #0
 8004918:	4611      	mov	r1, r2
 800491a:	f06f 0003 	mvn.w	r0, #3
 800491e:	f7fc fb65 	bl	8000fec <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004922:	2200      	movs	r2, #0
 8004924:	4611      	mov	r1, r2
 8004926:	f06f 0001 	mvn.w	r0, #1
 800492a:	f7fc fb5f 	bl	8000fec <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800492e:	2200      	movs	r2, #0
 8004930:	4611      	mov	r1, r2
 8004932:	f04f 30ff 	mov.w	r0, #4294967295
 8004936:	f7fc fb59 	bl	8000fec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800493a:	b003      	add	sp, #12
 800493c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004940:	40021000 	.word	0x40021000

08004944 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004944:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8004946:	6803      	ldr	r3, [r0, #0]
 8004948:	4a1d      	ldr	r2, [pc, #116]	; (80049c0 <HAL_SPI_MspInit+0x7c>)
 800494a:	4293      	cmp	r3, r2
{
 800494c:	b089      	sub	sp, #36	; 0x24
  if(hspi->Instance==SPI1)
 800494e:	d11b      	bne.n	8004988 <HAL_SPI_MspInit+0x44>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004950:	4b1c      	ldr	r3, [pc, #112]	; (80049c4 <HAL_SPI_MspInit+0x80>)
 8004952:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004954:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004958:	661a      	str	r2, [r3, #96]	; 0x60
 800495a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004960:	9301      	str	r3, [sp, #4]
 8004962:	9b01      	ldr	r3, [sp, #4]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004964:	23e0      	movs	r3, #224	; 0xe0
 8004966:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004968:	2302      	movs	r3, #2
 800496a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496c:	2300      	movs	r3, #0
 800496e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004970:	2303      	movs	r3, #3
 8004972:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004974:	2305      	movs	r3, #5
 8004976:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004978:	a903      	add	r1, sp, #12
 800497a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800497e:	f7fc fb9d 	bl	80010bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004982:	b009      	add	sp, #36	; 0x24
 8004984:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(hspi->Instance==SPI2)
 8004988:	4a0f      	ldr	r2, [pc, #60]	; (80049c8 <HAL_SPI_MspInit+0x84>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d1f9      	bne.n	8004982 <HAL_SPI_MspInit+0x3e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800498e:	4b0d      	ldr	r3, [pc, #52]	; (80049c4 <HAL_SPI_MspInit+0x80>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004990:	480e      	ldr	r0, [pc, #56]	; (80049cc <HAL_SPI_MspInit+0x88>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004992:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004994:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004998:	659a      	str	r2, [r3, #88]	; 0x58
 800499a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a0:	9302      	str	r3, [sp, #8]
 80049a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80049a4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80049a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049aa:	2302      	movs	r3, #2
 80049ac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049b2:	2303      	movs	r3, #3
 80049b4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049b6:	2305      	movs	r3, #5
 80049b8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ba:	a903      	add	r1, sp, #12
 80049bc:	e7df      	b.n	800497e <HAL_SPI_MspInit+0x3a>
 80049be:	bf00      	nop
 80049c0:	40013000 	.word	0x40013000
 80049c4:	40021000 	.word	0x40021000
 80049c8:	40003800 	.word	0x40003800
 80049cc:	48000400 	.word	0x48000400

080049d0 <NMI_Handler>:
 80049d0:	4770      	bx	lr

080049d2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80049d2:	e7fe      	b.n	80049d2 <HardFault_Handler>

080049d4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80049d4:	e7fe      	b.n	80049d4 <MemManage_Handler>

080049d6 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80049d6:	e7fe      	b.n	80049d6 <BusFault_Handler>

080049d8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80049d8:	e7fe      	b.n	80049d8 <UsageFault_Handler>

080049da <SVC_Handler>:
 80049da:	4770      	bx	lr

080049dc <DebugMon_Handler>:
 80049dc:	4770      	bx	lr

080049de <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80049de:	4770      	bx	lr

080049e0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80049e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049e2:	f7fc fad5 	bl	8000f90 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80049ea:	f7fc bb62 	b.w	80010b2 <HAL_SYSTICK_IRQHandler>
	...

080049f0 <USB_IRQHandler>:
void USB_IRQHandler(void)
{
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80049f0:	4801      	ldr	r0, [pc, #4]	; (80049f8 <USB_IRQHandler+0x8>)
 80049f2:	f7fc bd69 	b.w	80014c8 <HAL_PCD_IRQHandler>
 80049f6:	bf00      	nop
 80049f8:	20001780 	.word	0x20001780

080049fc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049fc:	490f      	ldr	r1, [pc, #60]	; (8004a3c <SystemInit+0x40>)
 80049fe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004a02:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <SystemInit+0x44>)
 8004a0c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004a0e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8004a10:	f042 0201 	orr.w	r2, r2, #1
 8004a14:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8004a16:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8004a1e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8004a22:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004a24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a28:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a30:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004a32:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a38:	608b      	str	r3, [r1, #8]
 8004a3a:	4770      	bx	lr
 8004a3c:	e000ed00 	.word	0xe000ed00
 8004a40:	40021000 	.word	0x40021000

08004a44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004a44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8004a46:	2200      	movs	r2, #0
 8004a48:	490a      	ldr	r1, [pc, #40]	; (8004a74 <MX_USB_DEVICE_Init+0x30>)
 8004a4a:	480b      	ldr	r0, [pc, #44]	; (8004a78 <MX_USB_DEVICE_Init+0x34>)
 8004a4c:	f7fe fe80 	bl	8003750 <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8004a50:	490a      	ldr	r1, [pc, #40]	; (8004a7c <MX_USB_DEVICE_Init+0x38>)
 8004a52:	4809      	ldr	r0, [pc, #36]	; (8004a78 <MX_USB_DEVICE_Init+0x34>)
 8004a54:	f7fe fe91 	bl	800377a <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8004a58:	4909      	ldr	r1, [pc, #36]	; (8004a80 <MX_USB_DEVICE_Init+0x3c>)
 8004a5a:	4807      	ldr	r0, [pc, #28]	; (8004a78 <MX_USB_DEVICE_Init+0x34>)
 8004a5c:	f7fe fe37 	bl	80036ce <USBD_CDC_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 8004a60:	4805      	ldr	r0, [pc, #20]	; (8004a78 <MX_USB_DEVICE_Init+0x34>)
 8004a62:	f000 f9b0 	bl	8004dc6 <USBD_LL_BatteryCharging>
 8004a66:	b120      	cbz	r0, 8004a72 <MX_USB_DEVICE_Init+0x2e>
  USBD_Start(&hUsbDeviceFS);
 8004a68:	4803      	ldr	r0, [pc, #12]	; (8004a78 <MX_USB_DEVICE_Init+0x34>)
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004a6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  USBD_Start(&hUsbDeviceFS);
 8004a6e:	f7fe be8b 	b.w	8003788 <USBD_Start>
 8004a72:	bd08      	pop	{r3, pc}
 8004a74:	20000148 	.word	0x20000148
 8004a78:	20000d14 	.word	0x20000d14
 8004a7c:	20000000 	.word	0x20000000
 8004a80:	20000138 	.word	0x20000138

08004a84 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004a84:	2000      	movs	r0, #0
 8004a86:	4770      	bx	lr

08004a88 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004a88:	2000      	movs	r0, #0
 8004a8a:	4770      	bx	lr

08004a8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004a8c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004a8e:	4c05      	ldr	r4, [pc, #20]	; (8004aa4 <CDC_Receive_FS+0x18>)
 8004a90:	4601      	mov	r1, r0
 8004a92:	4620      	mov	r0, r4
 8004a94:	f7fe fe2a 	bl	80036ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f7fe fe46 	bl	800372a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	bd10      	pop	{r4, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000d14 	.word	0x20000d14

08004aa8 <CDC_Init_FS>:
{
 8004aa8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004aaa:	4c06      	ldr	r4, [pc, #24]	; (8004ac4 <CDC_Init_FS+0x1c>)
 8004aac:	4906      	ldr	r1, [pc, #24]	; (8004ac8 <CDC_Init_FS+0x20>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	f7fe fe13 	bl	80036dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004ab6:	4905      	ldr	r1, [pc, #20]	; (8004acc <CDC_Init_FS+0x24>)
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f7fe fe17 	bl	80036ec <USBD_CDC_SetRxBuffer>
}
 8004abe:	2000      	movs	r0, #0
 8004ac0:	bd10      	pop	{r4, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000d14 	.word	0x20000d14
 8004ac8:	20001398 	.word	0x20001398
 8004acc:	20000fb0 	.word	0x20000fb0

08004ad0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8004ad0:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004ad2:	4c09      	ldr	r4, [pc, #36]	; (8004af8 <CDC_Transmit_FS+0x28>)
 8004ad4:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  if (hcdc->TxState != 0){
 8004ad8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
{
 8004adc:	460a      	mov	r2, r1
  if (hcdc->TxState != 0){
 8004ade:	b943      	cbnz	r3, 8004af2 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8004ae0:	4601      	mov	r1, r0
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f7fe fdfa 	bl	80036dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004ae8:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8004aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004aee:	f7fe be03 	b.w	80036f8 <USBD_CDC_TransmitPacket>
}
 8004af2:	2001      	movs	r0, #1
 8004af4:	bd10      	pop	{r4, pc}
 8004af6:	bf00      	nop
 8004af8:	20000d14 	.word	0x20000d14

08004afc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004afc:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8004afe:	4b0d      	ldr	r3, [pc, #52]	; (8004b34 <HAL_PCD_MspInit+0x38>)
 8004b00:	6802      	ldr	r2, [r0, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d112      	bne.n	8004b2c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004b06:	f503 33d4 	add.w	r3, r3, #108544	; 0x1a800

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8004b0a:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_CLK_ENABLE();
 8004b0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004b0e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004b12:	659a      	str	r2, [r3, #88]	; 0x58
 8004b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8004b16:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8004b18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b1c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8004b1e:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8004b20:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8004b22:	f7fc fa63 	bl	8000fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8004b26:	2043      	movs	r0, #67	; 0x43
 8004b28:	f7fc fa94 	bl	8001054 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004b2c:	b003      	add	sp, #12
 8004b2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b32:	bf00      	nop
 8004b34:	40006800 	.word	0x40006800

08004b38 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004b38:	f500 6186 	add.w	r1, r0, #1072	; 0x430
 8004b3c:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8004b40:	f7fe be39 	b.w	80037b6 <USBD_LL_SetupStage>

08004b44 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004b44:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004b48:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8004b4c:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8004b50:	f7fe be5e 	b.w	8003810 <USBD_LL_DataOutStage>

08004b54 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004b54:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004b58:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8004b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b5e:	f7fe be8f 	b.w	8003880 <USBD_LL_DataInStage>

08004b62 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004b62:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8004b66:	f7fe bf20 	b.w	80039aa <USBD_LL_SOF>

08004b6a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8004b6a:	b510      	push	{r4, lr}
 8004b6c:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004b6e:	2101      	movs	r1, #1
 8004b70:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8004b74:	f7fe ff07 	bl	8003986 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004b78:	f8d4 0470 	ldr.w	r0, [r4, #1136]	; 0x470
}
 8004b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004b80:	f7fe beda 	b.w	8003938 <USBD_LL_Reset>

08004b84 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004b84:	b510      	push	{r4, lr}
 8004b86:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004b88:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8004b8c:	f7fe fefe 	bl	800398c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004b90:	69a3      	ldr	r3, [r4, #24]
 8004b92:	b123      	cbz	r3, 8004b9e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004b94:	4a02      	ldr	r2, [pc, #8]	; (8004ba0 <HAL_PCD_SuspendCallback+0x1c>)
 8004b96:	6913      	ldr	r3, [r2, #16]
 8004b98:	f043 0306 	orr.w	r3, r3, #6
 8004b9c:	6113      	str	r3, [r2, #16]
 8004b9e:	bd10      	pop	{r4, pc}
 8004ba0:	e000ed00 	.word	0xe000ed00

08004ba4 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8004ba4:	6983      	ldr	r3, [r0, #24]
{
 8004ba6:	b510      	push	{r4, lr}
 8004ba8:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8004baa:	b133      	cbz	r3, 8004bba <HAL_PCD_ResumeCallback+0x16>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004bac:	4a06      	ldr	r2, [pc, #24]	; (8004bc8 <HAL_PCD_ResumeCallback+0x24>)
 8004bae:	6913      	ldr	r3, [r2, #16]
 8004bb0:	f023 0306 	bic.w	r3, r3, #6
 8004bb4:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8004bb6:	f7ff f98d 	bl	8003ed4 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004bba:	f8d4 0470 	ldr.w	r0, [r4, #1136]	; 0x470
}
 8004bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004bc2:	f7fe beec 	b.w	800399e <USBD_LL_Resume>
 8004bc6:	bf00      	nop
 8004bc8:	e000ed00 	.word	0xe000ed00

08004bcc <USBD_LL_Init>:
{
 8004bcc:	b510      	push	{r4, lr}
 8004bce:	4604      	mov	r4, r0
  HAL_PWREx_EnableVddUSB();
 8004bd0:	f7fc ffb4 	bl	8001b3c <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.pData = pdev;
 8004bd4:	4820      	ldr	r0, [pc, #128]	; (8004c58 <USBD_LL_Init+0x8c>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004bd6:	4a21      	ldr	r2, [pc, #132]	; (8004c5c <USBD_LL_Init+0x90>)
  hpcd_USB_FS.pData = pdev;
 8004bd8:	f8c0 4470 	str.w	r4, [r0, #1136]	; 0x470
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004bdc:	2308      	movs	r3, #8
 8004bde:	e880 000c 	stmia.w	r0, {r2, r3}
  pdev->pData = &hpcd_USB_FS;
 8004be2:	f8c4 0298 	str.w	r0, [r4, #664]	; 0x298
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8004be6:	2300      	movs	r3, #0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004be8:	2202      	movs	r2, #2
 8004bea:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8004bec:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004bee:	6102      	str	r2, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8004bf0:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004bf2:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004bf4:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004bf6:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004bf8:	f7fc fb31 	bl	800125e <HAL_PCD_Init>
 8004bfc:	b120      	cbz	r0, 8004c08 <USBD_LL_Init+0x3c>
    _Error_Handler(__FILE__, __LINE__);
 8004bfe:	f240 113d 	movw	r1, #317	; 0x13d
 8004c02:	4817      	ldr	r0, [pc, #92]	; (8004c60 <USBD_LL_Init+0x94>)
 8004c04:	f7ff fe56 	bl	80048b4 <_Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004c08:	2200      	movs	r2, #0
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	2318      	movs	r3, #24
 8004c0e:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8004c12:	f7fc ff0d 	bl	8001a30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004c16:	2358      	movs	r3, #88	; 0x58
 8004c18:	2200      	movs	r2, #0
 8004c1a:	2180      	movs	r1, #128	; 0x80
 8004c1c:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8004c20:	f7fc ff06 	bl	8001a30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8004c24:	23c0      	movs	r3, #192	; 0xc0
 8004c26:	2200      	movs	r2, #0
 8004c28:	2181      	movs	r1, #129	; 0x81
 8004c2a:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8004c2e:	f7fc feff 	bl	8001a30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8004c32:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004c36:	2200      	movs	r2, #0
 8004c38:	2101      	movs	r1, #1
 8004c3a:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8004c3e:	f7fc fef7 	bl	8001a30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8004c42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c46:	2200      	movs	r2, #0
 8004c48:	2182      	movs	r1, #130	; 0x82
 8004c4a:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8004c4e:	f7fc feef 	bl	8001a30 <HAL_PCDEx_PMAConfig>
}
 8004c52:	2000      	movs	r0, #0
 8004c54:	bd10      	pop	{r4, pc}
 8004c56:	bf00      	nop
 8004c58:	20001780 	.word	0x20001780
 8004c5c:	40006800 	.word	0x40006800
 8004c60:	08008cc0 	.word	0x08008cc0

08004c64 <USBD_LL_Start>:
{
 8004c64:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8004c66:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004c6a:	f7fc fb6c 	bl	8001346 <HAL_PCD_Start>
 8004c6e:	2803      	cmp	r0, #3
 8004c70:	bf9a      	itte	ls
 8004c72:	4b02      	ldrls	r3, [pc, #8]	; (8004c7c <USBD_LL_Start+0x18>)
 8004c74:	5c18      	ldrbls	r0, [r3, r0]
 8004c76:	2002      	movhi	r0, #2
}
 8004c78:	bd08      	pop	{r3, pc}
 8004c7a:	bf00      	nop
 8004c7c:	08008cbc 	.word	0x08008cbc

08004c80 <USBD_LL_OpenEP>:
{
 8004c80:	b510      	push	{r4, lr}
 8004c82:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004c84:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004c88:	4613      	mov	r3, r2
 8004c8a:	4622      	mov	r2, r4
 8004c8c:	f7fc fb84 	bl	8001398 <HAL_PCD_EP_Open>
 8004c90:	2803      	cmp	r0, #3
 8004c92:	bf9a      	itte	ls
 8004c94:	4b01      	ldrls	r3, [pc, #4]	; (8004c9c <USBD_LL_OpenEP+0x1c>)
 8004c96:	5c18      	ldrbls	r0, [r3, r0]
 8004c98:	2002      	movhi	r0, #2
}
 8004c9a:	bd10      	pop	{r4, pc}
 8004c9c:	08008cbc 	.word	0x08008cbc

08004ca0 <USBD_LL_CloseEP>:
{
 8004ca0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004ca2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004ca6:	f7fc fbac 	bl	8001402 <HAL_PCD_EP_Close>
 8004caa:	2803      	cmp	r0, #3
 8004cac:	bf9a      	itte	ls
 8004cae:	4b02      	ldrls	r3, [pc, #8]	; (8004cb8 <USBD_LL_CloseEP+0x18>)
 8004cb0:	5c18      	ldrbls	r0, [r3, r0]
 8004cb2:	2002      	movhi	r0, #2
}
 8004cb4:	bd08      	pop	{r3, pc}
 8004cb6:	bf00      	nop
 8004cb8:	08008cbc 	.word	0x08008cbc

08004cbc <USBD_LL_StallEP>:
{
 8004cbc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004cbe:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004cc2:	f7fc fe49 	bl	8001958 <HAL_PCD_EP_SetStall>
 8004cc6:	2803      	cmp	r0, #3
 8004cc8:	bf9a      	itte	ls
 8004cca:	4b02      	ldrls	r3, [pc, #8]	; (8004cd4 <USBD_LL_StallEP+0x18>)
 8004ccc:	5c18      	ldrbls	r0, [r3, r0]
 8004cce:	2002      	movhi	r0, #2
}
 8004cd0:	bd08      	pop	{r3, pc}
 8004cd2:	bf00      	nop
 8004cd4:	08008cbc 	.word	0x08008cbc

08004cd8 <USBD_LL_ClearStallEP>:
{
 8004cd8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8004cda:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004cde:	f7fc fe74 	bl	80019ca <HAL_PCD_EP_ClrStall>
 8004ce2:	2803      	cmp	r0, #3
 8004ce4:	bf9a      	itte	ls
 8004ce6:	4b02      	ldrls	r3, [pc, #8]	; (8004cf0 <USBD_LL_ClearStallEP+0x18>)
 8004ce8:	5c18      	ldrbls	r0, [r3, r0]
 8004cea:	2002      	movhi	r0, #2
}
 8004cec:	bd08      	pop	{r3, pc}
 8004cee:	bf00      	nop
 8004cf0:	08008cbc 	.word	0x08008cbc

08004cf4 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8004cf4:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004cf6:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004cfa:	bf45      	ittet	mi
 8004cfc:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8004d00:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004d04:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004d08:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004d0c:	bf58      	it	pl
 8004d0e:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
}
 8004d12:	4770      	bx	lr

08004d14 <USBD_LL_SetUSBAddress>:
{
 8004d14:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004d16:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004d1a:	f7fc fb29 	bl	8001370 <HAL_PCD_SetAddress>
 8004d1e:	2803      	cmp	r0, #3
 8004d20:	bf9a      	itte	ls
 8004d22:	4b02      	ldrls	r3, [pc, #8]	; (8004d2c <USBD_LL_SetUSBAddress+0x18>)
 8004d24:	5c18      	ldrbls	r0, [r3, r0]
 8004d26:	2002      	movhi	r0, #2
}
 8004d28:	bd08      	pop	{r3, pc}
 8004d2a:	bf00      	nop
 8004d2c:	08008cbc 	.word	0x08008cbc

08004d30 <USBD_LL_Transmit>:
{
 8004d30:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004d32:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004d36:	f7fc fbaf 	bl	8001498 <HAL_PCD_EP_Transmit>
 8004d3a:	2803      	cmp	r0, #3
 8004d3c:	bf9a      	itte	ls
 8004d3e:	4b02      	ldrls	r3, [pc, #8]	; (8004d48 <USBD_LL_Transmit+0x18>)
 8004d40:	5c18      	ldrbls	r0, [r3, r0]
 8004d42:	2002      	movhi	r0, #2
}
 8004d44:	bd08      	pop	{r3, pc}
 8004d46:	bf00      	nop
 8004d48:	08008cbc 	.word	0x08008cbc

08004d4c <USBD_LL_PrepareReceive>:
{
 8004d4c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004d4e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004d52:	f7fc fb81 	bl	8001458 <HAL_PCD_EP_Receive>
 8004d56:	2803      	cmp	r0, #3
 8004d58:	bf9a      	itte	ls
 8004d5a:	4b02      	ldrls	r3, [pc, #8]	; (8004d64 <USBD_LL_PrepareReceive+0x18>)
 8004d5c:	5c18      	ldrbls	r0, [r3, r0]
 8004d5e:	2002      	movhi	r0, #2
}
 8004d60:	bd08      	pop	{r3, pc}
 8004d62:	bf00      	nop
 8004d64:	08008cbc 	.word	0x08008cbc

08004d68 <USBD_LL_GetRxDataSize>:
{
 8004d68:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004d6a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004d6e:	f7fc fb8c 	bl	800148a <HAL_PCD_EP_GetRxCount>
}
 8004d72:	bd08      	pop	{r3, pc}

08004d74 <HAL_PCDEx_LPM_Callback>:
{
 8004d74:	b510      	push	{r4, lr}
 8004d76:	4604      	mov	r4, r0
  switch (msg)
 8004d78:	b111      	cbz	r1, 8004d80 <HAL_PCDEx_LPM_Callback+0xc>
 8004d7a:	2901      	cmp	r1, #1
 8004d7c:	d00f      	beq.n	8004d9e <HAL_PCDEx_LPM_Callback+0x2a>
 8004d7e:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8004d80:	6983      	ldr	r3, [r0, #24]
 8004d82:	b133      	cbz	r3, 8004d92 <HAL_PCDEx_LPM_Callback+0x1e>
      SystemClock_Config();
 8004d84:	f7ff f8a6 	bl	8003ed4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004d88:	4a0b      	ldr	r2, [pc, #44]	; (8004db8 <HAL_PCDEx_LPM_Callback+0x44>)
 8004d8a:	6913      	ldr	r3, [r2, #16]
 8004d8c:	f023 0306 	bic.w	r3, r3, #6
 8004d90:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8004d92:	f8d4 0470 	ldr.w	r0, [r4, #1136]	; 0x470
}
 8004d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8004d9a:	f7fe be00 	b.w	800399e <USBD_LL_Resume>
    USBD_LL_Suspend(hpcd->pData);
 8004d9e:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8004da2:	f7fe fdf3 	bl	800398c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8004da6:	69a3      	ldr	r3, [r4, #24]
 8004da8:	b123      	cbz	r3, 8004db4 <HAL_PCDEx_LPM_Callback+0x40>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004daa:	4a03      	ldr	r2, [pc, #12]	; (8004db8 <HAL_PCDEx_LPM_Callback+0x44>)
 8004dac:	6913      	ldr	r3, [r2, #16]
 8004dae:	f043 0306 	orr.w	r3, r3, #6
 8004db2:	6113      	str	r3, [r2, #16]
 8004db4:	bd10      	pop	{r4, pc}
 8004db6:	bf00      	nop
 8004db8:	e000ed00 	.word	0xe000ed00

08004dbc <USBD_static_malloc>:
}
 8004dbc:	4800      	ldr	r0, [pc, #0]	; (8004dc0 <USBD_static_malloc+0x4>)
 8004dbe:	4770      	bx	lr
 8004dc0:	2000082c 	.word	0x2000082c

08004dc4 <USBD_static_free>:
{
 8004dc4:	4770      	bx	lr

08004dc6 <USBD_LL_BatteryCharging>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
  if (hpcd->Init.battery_charging_enable == ENABLE)
 8004dc6:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	2b01      	cmp	r3, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004dce:	bf14      	ite	ne
 8004dd0:	2002      	movne	r0, #2
 8004dd2:	2000      	moveq	r0, #0
 8004dd4:	4770      	bx	lr
	...

08004dd8 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8004dd8:	2312      	movs	r3, #18
 8004dda:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8004ddc:	4800      	ldr	r0, [pc, #0]	; (8004de0 <USBD_FS_DeviceDescriptor+0x8>)
 8004dde:	4770      	bx	lr
 8004de0:	20000174 	.word	0x20000174

08004de4 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8004de4:	2304      	movs	r3, #4
 8004de6:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004de8:	4800      	ldr	r0, [pc, #0]	; (8004dec <USBD_FS_LangIDStrDescriptor+0x8>)
 8004dea:	4770      	bx	lr
 8004dec:	20000188 	.word	0x20000188

08004df0 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 8004df0:	230c      	movs	r3, #12
 8004df2:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8004df4:	4800      	ldr	r0, [pc, #0]	; (8004df8 <USBD_FS_USR_BOSDescriptor+0x8>)
 8004df6:	4770      	bx	lr
 8004df8:	20000168 	.word	0x20000168

08004dfc <USBD_FS_ManufacturerStrDescriptor>:
{
 8004dfc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004dfe:	4c04      	ldr	r4, [pc, #16]	; (8004e10 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004e00:	4804      	ldr	r0, [pc, #16]	; (8004e14 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004e02:	460a      	mov	r2, r1
 8004e04:	4621      	mov	r1, r4
 8004e06:	f7fe ffd5 	bl	8003db4 <USBD_GetString>
}
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	bd10      	pop	{r4, pc}
 8004e0e:	bf00      	nop
 8004e10:	20001bf4 	.word	0x20001bf4
 8004e14:	08008cec 	.word	0x08008cec

08004e18 <USBD_FS_ProductStrDescriptor>:
{
 8004e18:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004e1a:	4c04      	ldr	r4, [pc, #16]	; (8004e2c <USBD_FS_ProductStrDescriptor+0x14>)
 8004e1c:	4804      	ldr	r0, [pc, #16]	; (8004e30 <USBD_FS_ProductStrDescriptor+0x18>)
 8004e1e:	460a      	mov	r2, r1
 8004e20:	4621      	mov	r1, r4
 8004e22:	f7fe ffc7 	bl	8003db4 <USBD_GetString>
}
 8004e26:	4620      	mov	r0, r4
 8004e28:	bd10      	pop	{r4, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20001bf4 	.word	0x20001bf4
 8004e30:	08008cff 	.word	0x08008cff

08004e34 <USBD_FS_SerialStrDescriptor>:
{
 8004e34:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8004e36:	4c04      	ldr	r4, [pc, #16]	; (8004e48 <USBD_FS_SerialStrDescriptor+0x14>)
 8004e38:	4804      	ldr	r0, [pc, #16]	; (8004e4c <USBD_FS_SerialStrDescriptor+0x18>)
 8004e3a:	460a      	mov	r2, r1
 8004e3c:	4621      	mov	r1, r4
 8004e3e:	f7fe ffb9 	bl	8003db4 <USBD_GetString>
}
 8004e42:	4620      	mov	r0, r4
 8004e44:	bd10      	pop	{r4, pc}
 8004e46:	bf00      	nop
 8004e48:	20001bf4 	.word	0x20001bf4
 8004e4c:	08008d15 	.word	0x08008d15

08004e50 <USBD_FS_ConfigStrDescriptor>:
{
 8004e50:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004e52:	4c04      	ldr	r4, [pc, #16]	; (8004e64 <USBD_FS_ConfigStrDescriptor+0x14>)
 8004e54:	4804      	ldr	r0, [pc, #16]	; (8004e68 <USBD_FS_ConfigStrDescriptor+0x18>)
 8004e56:	460a      	mov	r2, r1
 8004e58:	4621      	mov	r1, r4
 8004e5a:	f7fe ffab 	bl	8003db4 <USBD_GetString>
}
 8004e5e:	4620      	mov	r0, r4
 8004e60:	bd10      	pop	{r4, pc}
 8004e62:	bf00      	nop
 8004e64:	20001bf4 	.word	0x20001bf4
 8004e68:	08008cd3 	.word	0x08008cd3

08004e6c <USBD_FS_InterfaceStrDescriptor>:
{
 8004e6c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004e6e:	4c04      	ldr	r4, [pc, #16]	; (8004e80 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8004e70:	4804      	ldr	r0, [pc, #16]	; (8004e84 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8004e72:	460a      	mov	r2, r1
 8004e74:	4621      	mov	r1, r4
 8004e76:	f7fe ff9d 	bl	8003db4 <USBD_GetString>
}
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	bd10      	pop	{r4, pc}
 8004e7e:	bf00      	nop
 8004e80:	20001bf4 	.word	0x20001bf4
 8004e84:	08008cde 	.word	0x08008cde

08004e88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ec0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004e8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004e8e:	e003      	b.n	8004e98 <LoopCopyDataInit>

08004e90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004e90:	4b0c      	ldr	r3, [pc, #48]	; (8004ec4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004e92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004e94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004e96:	3104      	adds	r1, #4

08004e98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004e98:	480b      	ldr	r0, [pc, #44]	; (8004ec8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004e9a:	4b0c      	ldr	r3, [pc, #48]	; (8004ecc <LoopForever+0xe>)
	adds	r2, r0, r1
 8004e9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004e9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004ea0:	d3f6      	bcc.n	8004e90 <CopyDataInit>
	ldr	r2, =_sbss
 8004ea2:	4a0b      	ldr	r2, [pc, #44]	; (8004ed0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004ea4:	e002      	b.n	8004eac <LoopFillZerobss>

08004ea6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004ea6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004ea8:	f842 3b04 	str.w	r3, [r2], #4

08004eac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004eac:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <LoopForever+0x16>)
	cmp	r2, r3
 8004eae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004eb0:	d3f9      	bcc.n	8004ea6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004eb2:	f7ff fda3 	bl	80049fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004eb6:	f000 f811 	bl	8004edc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004eba:	f7ff fa4d 	bl	8004358 <main>

08004ebe <LoopForever>:

LoopForever:
    b LoopForever
 8004ebe:	e7fe      	b.n	8004ebe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004ec0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8004ec4:	08009000 	.word	0x08009000
	ldr	r0, =_sdata
 8004ec8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004ecc:	200007fc 	.word	0x200007fc
	ldr	r2, =_sbss
 8004ed0:	200007fc 	.word	0x200007fc
	ldr	r3, = _ebss
 8004ed4:	20001e04 	.word	0x20001e04

08004ed8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004ed8:	e7fe      	b.n	8004ed8 <ADC1_IRQHandler>
	...

08004edc <__libc_init_array>:
 8004edc:	b570      	push	{r4, r5, r6, lr}
 8004ede:	4e0d      	ldr	r6, [pc, #52]	; (8004f14 <__libc_init_array+0x38>)
 8004ee0:	4c0d      	ldr	r4, [pc, #52]	; (8004f18 <__libc_init_array+0x3c>)
 8004ee2:	1ba4      	subs	r4, r4, r6
 8004ee4:	10a4      	asrs	r4, r4, #2
 8004ee6:	2500      	movs	r5, #0
 8004ee8:	42a5      	cmp	r5, r4
 8004eea:	d109      	bne.n	8004f00 <__libc_init_array+0x24>
 8004eec:	4e0b      	ldr	r6, [pc, #44]	; (8004f1c <__libc_init_array+0x40>)
 8004eee:	4c0c      	ldr	r4, [pc, #48]	; (8004f20 <__libc_init_array+0x44>)
 8004ef0:	f003 fd9e 	bl	8008a30 <_init>
 8004ef4:	1ba4      	subs	r4, r4, r6
 8004ef6:	10a4      	asrs	r4, r4, #2
 8004ef8:	2500      	movs	r5, #0
 8004efa:	42a5      	cmp	r5, r4
 8004efc:	d105      	bne.n	8004f0a <__libc_init_array+0x2e>
 8004efe:	bd70      	pop	{r4, r5, r6, pc}
 8004f00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f04:	4798      	blx	r3
 8004f06:	3501      	adds	r5, #1
 8004f08:	e7ee      	b.n	8004ee8 <__libc_init_array+0xc>
 8004f0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f0e:	4798      	blx	r3
 8004f10:	3501      	adds	r5, #1
 8004f12:	e7f2      	b.n	8004efa <__libc_init_array+0x1e>
 8004f14:	08008ff8 	.word	0x08008ff8
 8004f18:	08008ff8 	.word	0x08008ff8
 8004f1c:	08008ff8 	.word	0x08008ff8
 8004f20:	08008ffc 	.word	0x08008ffc

08004f24 <malloc>:
 8004f24:	4b02      	ldr	r3, [pc, #8]	; (8004f30 <malloc+0xc>)
 8004f26:	4601      	mov	r1, r0
 8004f28:	6818      	ldr	r0, [r3, #0]
 8004f2a:	f000 b80b 	b.w	8004f44 <_malloc_r>
 8004f2e:	bf00      	nop
 8004f30:	2000059c 	.word	0x2000059c

08004f34 <free>:
 8004f34:	4b02      	ldr	r3, [pc, #8]	; (8004f40 <free+0xc>)
 8004f36:	4601      	mov	r1, r0
 8004f38:	6818      	ldr	r0, [r3, #0]
 8004f3a:	f002 bb9b 	b.w	8007674 <_free_r>
 8004f3e:	bf00      	nop
 8004f40:	2000059c 	.word	0x2000059c

08004f44 <_malloc_r>:
 8004f44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f48:	f101 040b 	add.w	r4, r1, #11
 8004f4c:	2c16      	cmp	r4, #22
 8004f4e:	4681      	mov	r9, r0
 8004f50:	d907      	bls.n	8004f62 <_malloc_r+0x1e>
 8004f52:	f034 0407 	bics.w	r4, r4, #7
 8004f56:	d505      	bpl.n	8004f64 <_malloc_r+0x20>
 8004f58:	230c      	movs	r3, #12
 8004f5a:	f8c9 3000 	str.w	r3, [r9]
 8004f5e:	2600      	movs	r6, #0
 8004f60:	e131      	b.n	80051c6 <_malloc_r+0x282>
 8004f62:	2410      	movs	r4, #16
 8004f64:	428c      	cmp	r4, r1
 8004f66:	d3f7      	bcc.n	8004f58 <_malloc_r+0x14>
 8004f68:	4648      	mov	r0, r9
 8004f6a:	f000 fa0d 	bl	8005388 <__malloc_lock>
 8004f6e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8004f72:	4d9c      	ldr	r5, [pc, #624]	; (80051e4 <_malloc_r+0x2a0>)
 8004f74:	d236      	bcs.n	8004fe4 <_malloc_r+0xa0>
 8004f76:	f104 0208 	add.w	r2, r4, #8
 8004f7a:	442a      	add	r2, r5
 8004f7c:	f1a2 0108 	sub.w	r1, r2, #8
 8004f80:	6856      	ldr	r6, [r2, #4]
 8004f82:	428e      	cmp	r6, r1
 8004f84:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8004f88:	d102      	bne.n	8004f90 <_malloc_r+0x4c>
 8004f8a:	68d6      	ldr	r6, [r2, #12]
 8004f8c:	42b2      	cmp	r2, r6
 8004f8e:	d010      	beq.n	8004fb2 <_malloc_r+0x6e>
 8004f90:	6873      	ldr	r3, [r6, #4]
 8004f92:	68f2      	ldr	r2, [r6, #12]
 8004f94:	68b1      	ldr	r1, [r6, #8]
 8004f96:	f023 0303 	bic.w	r3, r3, #3
 8004f9a:	60ca      	str	r2, [r1, #12]
 8004f9c:	4433      	add	r3, r6
 8004f9e:	6091      	str	r1, [r2, #8]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	f042 0201 	orr.w	r2, r2, #1
 8004fa6:	605a      	str	r2, [r3, #4]
 8004fa8:	4648      	mov	r0, r9
 8004faa:	f000 f9f3 	bl	8005394 <__malloc_unlock>
 8004fae:	3608      	adds	r6, #8
 8004fb0:	e109      	b.n	80051c6 <_malloc_r+0x282>
 8004fb2:	3302      	adds	r3, #2
 8004fb4:	4a8c      	ldr	r2, [pc, #560]	; (80051e8 <_malloc_r+0x2a4>)
 8004fb6:	692e      	ldr	r6, [r5, #16]
 8004fb8:	4296      	cmp	r6, r2
 8004fba:	4611      	mov	r1, r2
 8004fbc:	d06d      	beq.n	800509a <_malloc_r+0x156>
 8004fbe:	6870      	ldr	r0, [r6, #4]
 8004fc0:	f020 0003 	bic.w	r0, r0, #3
 8004fc4:	1b07      	subs	r7, r0, r4
 8004fc6:	2f0f      	cmp	r7, #15
 8004fc8:	dd47      	ble.n	800505a <_malloc_r+0x116>
 8004fca:	1933      	adds	r3, r6, r4
 8004fcc:	f044 0401 	orr.w	r4, r4, #1
 8004fd0:	6074      	str	r4, [r6, #4]
 8004fd2:	616b      	str	r3, [r5, #20]
 8004fd4:	612b      	str	r3, [r5, #16]
 8004fd6:	60da      	str	r2, [r3, #12]
 8004fd8:	609a      	str	r2, [r3, #8]
 8004fda:	f047 0201 	orr.w	r2, r7, #1
 8004fde:	605a      	str	r2, [r3, #4]
 8004fe0:	5037      	str	r7, [r6, r0]
 8004fe2:	e7e1      	b.n	8004fa8 <_malloc_r+0x64>
 8004fe4:	0a63      	lsrs	r3, r4, #9
 8004fe6:	d02a      	beq.n	800503e <_malloc_r+0xfa>
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d812      	bhi.n	8005012 <_malloc_r+0xce>
 8004fec:	09a3      	lsrs	r3, r4, #6
 8004fee:	3338      	adds	r3, #56	; 0x38
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004ff6:	f1a2 0008 	sub.w	r0, r2, #8
 8004ffa:	6856      	ldr	r6, [r2, #4]
 8004ffc:	4286      	cmp	r6, r0
 8004ffe:	d006      	beq.n	800500e <_malloc_r+0xca>
 8005000:	6872      	ldr	r2, [r6, #4]
 8005002:	f022 0203 	bic.w	r2, r2, #3
 8005006:	1b11      	subs	r1, r2, r4
 8005008:	290f      	cmp	r1, #15
 800500a:	dd1c      	ble.n	8005046 <_malloc_r+0x102>
 800500c:	3b01      	subs	r3, #1
 800500e:	3301      	adds	r3, #1
 8005010:	e7d0      	b.n	8004fb4 <_malloc_r+0x70>
 8005012:	2b14      	cmp	r3, #20
 8005014:	d801      	bhi.n	800501a <_malloc_r+0xd6>
 8005016:	335b      	adds	r3, #91	; 0x5b
 8005018:	e7ea      	b.n	8004ff0 <_malloc_r+0xac>
 800501a:	2b54      	cmp	r3, #84	; 0x54
 800501c:	d802      	bhi.n	8005024 <_malloc_r+0xe0>
 800501e:	0b23      	lsrs	r3, r4, #12
 8005020:	336e      	adds	r3, #110	; 0x6e
 8005022:	e7e5      	b.n	8004ff0 <_malloc_r+0xac>
 8005024:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005028:	d802      	bhi.n	8005030 <_malloc_r+0xec>
 800502a:	0be3      	lsrs	r3, r4, #15
 800502c:	3377      	adds	r3, #119	; 0x77
 800502e:	e7df      	b.n	8004ff0 <_malloc_r+0xac>
 8005030:	f240 5254 	movw	r2, #1364	; 0x554
 8005034:	4293      	cmp	r3, r2
 8005036:	d804      	bhi.n	8005042 <_malloc_r+0xfe>
 8005038:	0ca3      	lsrs	r3, r4, #18
 800503a:	337c      	adds	r3, #124	; 0x7c
 800503c:	e7d8      	b.n	8004ff0 <_malloc_r+0xac>
 800503e:	233f      	movs	r3, #63	; 0x3f
 8005040:	e7d6      	b.n	8004ff0 <_malloc_r+0xac>
 8005042:	237e      	movs	r3, #126	; 0x7e
 8005044:	e7d4      	b.n	8004ff0 <_malloc_r+0xac>
 8005046:	2900      	cmp	r1, #0
 8005048:	68f1      	ldr	r1, [r6, #12]
 800504a:	db04      	blt.n	8005056 <_malloc_r+0x112>
 800504c:	68b3      	ldr	r3, [r6, #8]
 800504e:	60d9      	str	r1, [r3, #12]
 8005050:	608b      	str	r3, [r1, #8]
 8005052:	18b3      	adds	r3, r6, r2
 8005054:	e7a4      	b.n	8004fa0 <_malloc_r+0x5c>
 8005056:	460e      	mov	r6, r1
 8005058:	e7d0      	b.n	8004ffc <_malloc_r+0xb8>
 800505a:	2f00      	cmp	r7, #0
 800505c:	616a      	str	r2, [r5, #20]
 800505e:	612a      	str	r2, [r5, #16]
 8005060:	db05      	blt.n	800506e <_malloc_r+0x12a>
 8005062:	4430      	add	r0, r6
 8005064:	6843      	ldr	r3, [r0, #4]
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	6043      	str	r3, [r0, #4]
 800506c:	e79c      	b.n	8004fa8 <_malloc_r+0x64>
 800506e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005072:	d244      	bcs.n	80050fe <_malloc_r+0x1ba>
 8005074:	08c0      	lsrs	r0, r0, #3
 8005076:	1087      	asrs	r7, r0, #2
 8005078:	2201      	movs	r2, #1
 800507a:	fa02 f707 	lsl.w	r7, r2, r7
 800507e:	686a      	ldr	r2, [r5, #4]
 8005080:	3001      	adds	r0, #1
 8005082:	433a      	orrs	r2, r7
 8005084:	606a      	str	r2, [r5, #4]
 8005086:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800508a:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800508e:	60b7      	str	r7, [r6, #8]
 8005090:	3a08      	subs	r2, #8
 8005092:	60f2      	str	r2, [r6, #12]
 8005094:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8005098:	60fe      	str	r6, [r7, #12]
 800509a:	2001      	movs	r0, #1
 800509c:	109a      	asrs	r2, r3, #2
 800509e:	fa00 f202 	lsl.w	r2, r0, r2
 80050a2:	6868      	ldr	r0, [r5, #4]
 80050a4:	4282      	cmp	r2, r0
 80050a6:	f200 80a1 	bhi.w	80051ec <_malloc_r+0x2a8>
 80050aa:	4202      	tst	r2, r0
 80050ac:	d106      	bne.n	80050bc <_malloc_r+0x178>
 80050ae:	f023 0303 	bic.w	r3, r3, #3
 80050b2:	0052      	lsls	r2, r2, #1
 80050b4:	4202      	tst	r2, r0
 80050b6:	f103 0304 	add.w	r3, r3, #4
 80050ba:	d0fa      	beq.n	80050b2 <_malloc_r+0x16e>
 80050bc:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 80050c0:	46e0      	mov	r8, ip
 80050c2:	469e      	mov	lr, r3
 80050c4:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80050c8:	4546      	cmp	r6, r8
 80050ca:	d153      	bne.n	8005174 <_malloc_r+0x230>
 80050cc:	f10e 0e01 	add.w	lr, lr, #1
 80050d0:	f01e 0f03 	tst.w	lr, #3
 80050d4:	f108 0808 	add.w	r8, r8, #8
 80050d8:	d1f4      	bne.n	80050c4 <_malloc_r+0x180>
 80050da:	0798      	lsls	r0, r3, #30
 80050dc:	d179      	bne.n	80051d2 <_malloc_r+0x28e>
 80050de:	686b      	ldr	r3, [r5, #4]
 80050e0:	ea23 0302 	bic.w	r3, r3, r2
 80050e4:	606b      	str	r3, [r5, #4]
 80050e6:	6868      	ldr	r0, [r5, #4]
 80050e8:	0052      	lsls	r2, r2, #1
 80050ea:	4282      	cmp	r2, r0
 80050ec:	d87e      	bhi.n	80051ec <_malloc_r+0x2a8>
 80050ee:	2a00      	cmp	r2, #0
 80050f0:	d07c      	beq.n	80051ec <_malloc_r+0x2a8>
 80050f2:	4673      	mov	r3, lr
 80050f4:	4202      	tst	r2, r0
 80050f6:	d1e1      	bne.n	80050bc <_malloc_r+0x178>
 80050f8:	3304      	adds	r3, #4
 80050fa:	0052      	lsls	r2, r2, #1
 80050fc:	e7fa      	b.n	80050f4 <_malloc_r+0x1b0>
 80050fe:	0a42      	lsrs	r2, r0, #9
 8005100:	2a04      	cmp	r2, #4
 8005102:	d815      	bhi.n	8005130 <_malloc_r+0x1ec>
 8005104:	0982      	lsrs	r2, r0, #6
 8005106:	3238      	adds	r2, #56	; 0x38
 8005108:	1c57      	adds	r7, r2, #1
 800510a:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800510e:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8005112:	45be      	cmp	lr, r7
 8005114:	d126      	bne.n	8005164 <_malloc_r+0x220>
 8005116:	2001      	movs	r0, #1
 8005118:	1092      	asrs	r2, r2, #2
 800511a:	fa00 f202 	lsl.w	r2, r0, r2
 800511e:	6868      	ldr	r0, [r5, #4]
 8005120:	4310      	orrs	r0, r2
 8005122:	6068      	str	r0, [r5, #4]
 8005124:	f8c6 e00c 	str.w	lr, [r6, #12]
 8005128:	60b7      	str	r7, [r6, #8]
 800512a:	f8ce 6008 	str.w	r6, [lr, #8]
 800512e:	e7b3      	b.n	8005098 <_malloc_r+0x154>
 8005130:	2a14      	cmp	r2, #20
 8005132:	d801      	bhi.n	8005138 <_malloc_r+0x1f4>
 8005134:	325b      	adds	r2, #91	; 0x5b
 8005136:	e7e7      	b.n	8005108 <_malloc_r+0x1c4>
 8005138:	2a54      	cmp	r2, #84	; 0x54
 800513a:	d802      	bhi.n	8005142 <_malloc_r+0x1fe>
 800513c:	0b02      	lsrs	r2, r0, #12
 800513e:	326e      	adds	r2, #110	; 0x6e
 8005140:	e7e2      	b.n	8005108 <_malloc_r+0x1c4>
 8005142:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005146:	d802      	bhi.n	800514e <_malloc_r+0x20a>
 8005148:	0bc2      	lsrs	r2, r0, #15
 800514a:	3277      	adds	r2, #119	; 0x77
 800514c:	e7dc      	b.n	8005108 <_malloc_r+0x1c4>
 800514e:	f240 5754 	movw	r7, #1364	; 0x554
 8005152:	42ba      	cmp	r2, r7
 8005154:	bf9a      	itte	ls
 8005156:	0c82      	lsrls	r2, r0, #18
 8005158:	327c      	addls	r2, #124	; 0x7c
 800515a:	227e      	movhi	r2, #126	; 0x7e
 800515c:	e7d4      	b.n	8005108 <_malloc_r+0x1c4>
 800515e:	68bf      	ldr	r7, [r7, #8]
 8005160:	45be      	cmp	lr, r7
 8005162:	d004      	beq.n	800516e <_malloc_r+0x22a>
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	f022 0203 	bic.w	r2, r2, #3
 800516a:	4290      	cmp	r0, r2
 800516c:	d3f7      	bcc.n	800515e <_malloc_r+0x21a>
 800516e:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8005172:	e7d7      	b.n	8005124 <_malloc_r+0x1e0>
 8005174:	6870      	ldr	r0, [r6, #4]
 8005176:	68f7      	ldr	r7, [r6, #12]
 8005178:	f020 0003 	bic.w	r0, r0, #3
 800517c:	eba0 0a04 	sub.w	sl, r0, r4
 8005180:	f1ba 0f0f 	cmp.w	sl, #15
 8005184:	dd10      	ble.n	80051a8 <_malloc_r+0x264>
 8005186:	68b2      	ldr	r2, [r6, #8]
 8005188:	1933      	adds	r3, r6, r4
 800518a:	f044 0401 	orr.w	r4, r4, #1
 800518e:	6074      	str	r4, [r6, #4]
 8005190:	60d7      	str	r7, [r2, #12]
 8005192:	60ba      	str	r2, [r7, #8]
 8005194:	f04a 0201 	orr.w	r2, sl, #1
 8005198:	616b      	str	r3, [r5, #20]
 800519a:	612b      	str	r3, [r5, #16]
 800519c:	60d9      	str	r1, [r3, #12]
 800519e:	6099      	str	r1, [r3, #8]
 80051a0:	605a      	str	r2, [r3, #4]
 80051a2:	f846 a000 	str.w	sl, [r6, r0]
 80051a6:	e6ff      	b.n	8004fa8 <_malloc_r+0x64>
 80051a8:	f1ba 0f00 	cmp.w	sl, #0
 80051ac:	db0f      	blt.n	80051ce <_malloc_r+0x28a>
 80051ae:	4430      	add	r0, r6
 80051b0:	6843      	ldr	r3, [r0, #4]
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	6043      	str	r3, [r0, #4]
 80051b8:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80051bc:	4648      	mov	r0, r9
 80051be:	60df      	str	r7, [r3, #12]
 80051c0:	60bb      	str	r3, [r7, #8]
 80051c2:	f000 f8e7 	bl	8005394 <__malloc_unlock>
 80051c6:	4630      	mov	r0, r6
 80051c8:	b003      	add	sp, #12
 80051ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ce:	463e      	mov	r6, r7
 80051d0:	e77a      	b.n	80050c8 <_malloc_r+0x184>
 80051d2:	f85c 0908 	ldr.w	r0, [ip], #-8
 80051d6:	4584      	cmp	ip, r0
 80051d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80051dc:	f43f af7d 	beq.w	80050da <_malloc_r+0x196>
 80051e0:	e781      	b.n	80050e6 <_malloc_r+0x1a2>
 80051e2:	bf00      	nop
 80051e4:	2000018c 	.word	0x2000018c
 80051e8:	20000194 	.word	0x20000194
 80051ec:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80051f0:	f8db 6004 	ldr.w	r6, [fp, #4]
 80051f4:	f026 0603 	bic.w	r6, r6, #3
 80051f8:	42b4      	cmp	r4, r6
 80051fa:	d803      	bhi.n	8005204 <_malloc_r+0x2c0>
 80051fc:	1b33      	subs	r3, r6, r4
 80051fe:	2b0f      	cmp	r3, #15
 8005200:	f300 8096 	bgt.w	8005330 <_malloc_r+0x3ec>
 8005204:	4a4f      	ldr	r2, [pc, #316]	; (8005344 <_malloc_r+0x400>)
 8005206:	6817      	ldr	r7, [r2, #0]
 8005208:	4a4f      	ldr	r2, [pc, #316]	; (8005348 <_malloc_r+0x404>)
 800520a:	6811      	ldr	r1, [r2, #0]
 800520c:	3710      	adds	r7, #16
 800520e:	3101      	adds	r1, #1
 8005210:	eb0b 0306 	add.w	r3, fp, r6
 8005214:	4427      	add	r7, r4
 8005216:	d005      	beq.n	8005224 <_malloc_r+0x2e0>
 8005218:	494c      	ldr	r1, [pc, #304]	; (800534c <_malloc_r+0x408>)
 800521a:	3901      	subs	r1, #1
 800521c:	440f      	add	r7, r1
 800521e:	3101      	adds	r1, #1
 8005220:	4249      	negs	r1, r1
 8005222:	400f      	ands	r7, r1
 8005224:	4639      	mov	r1, r7
 8005226:	4648      	mov	r0, r9
 8005228:	9201      	str	r2, [sp, #4]
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	f000 f8d0 	bl	80053d0 <_sbrk_r>
 8005230:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005234:	4680      	mov	r8, r0
 8005236:	d056      	beq.n	80052e6 <_malloc_r+0x3a2>
 8005238:	9b00      	ldr	r3, [sp, #0]
 800523a:	9a01      	ldr	r2, [sp, #4]
 800523c:	4283      	cmp	r3, r0
 800523e:	d901      	bls.n	8005244 <_malloc_r+0x300>
 8005240:	45ab      	cmp	fp, r5
 8005242:	d150      	bne.n	80052e6 <_malloc_r+0x3a2>
 8005244:	4842      	ldr	r0, [pc, #264]	; (8005350 <_malloc_r+0x40c>)
 8005246:	6801      	ldr	r1, [r0, #0]
 8005248:	4543      	cmp	r3, r8
 800524a:	eb07 0e01 	add.w	lr, r7, r1
 800524e:	f8c0 e000 	str.w	lr, [r0]
 8005252:	4940      	ldr	r1, [pc, #256]	; (8005354 <_malloc_r+0x410>)
 8005254:	4682      	mov	sl, r0
 8005256:	d113      	bne.n	8005280 <_malloc_r+0x33c>
 8005258:	420b      	tst	r3, r1
 800525a:	d111      	bne.n	8005280 <_malloc_r+0x33c>
 800525c:	68ab      	ldr	r3, [r5, #8]
 800525e:	443e      	add	r6, r7
 8005260:	f046 0601 	orr.w	r6, r6, #1
 8005264:	605e      	str	r6, [r3, #4]
 8005266:	4a3c      	ldr	r2, [pc, #240]	; (8005358 <_malloc_r+0x414>)
 8005268:	f8da 3000 	ldr.w	r3, [sl]
 800526c:	6811      	ldr	r1, [r2, #0]
 800526e:	428b      	cmp	r3, r1
 8005270:	bf88      	it	hi
 8005272:	6013      	strhi	r3, [r2, #0]
 8005274:	4a39      	ldr	r2, [pc, #228]	; (800535c <_malloc_r+0x418>)
 8005276:	6811      	ldr	r1, [r2, #0]
 8005278:	428b      	cmp	r3, r1
 800527a:	bf88      	it	hi
 800527c:	6013      	strhi	r3, [r2, #0]
 800527e:	e032      	b.n	80052e6 <_malloc_r+0x3a2>
 8005280:	6810      	ldr	r0, [r2, #0]
 8005282:	3001      	adds	r0, #1
 8005284:	bf1b      	ittet	ne
 8005286:	eba8 0303 	subne.w	r3, r8, r3
 800528a:	4473      	addne	r3, lr
 800528c:	f8c2 8000 	streq.w	r8, [r2]
 8005290:	f8ca 3000 	strne.w	r3, [sl]
 8005294:	f018 0007 	ands.w	r0, r8, #7
 8005298:	bf1c      	itt	ne
 800529a:	f1c0 0008 	rsbne	r0, r0, #8
 800529e:	4480      	addne	r8, r0
 80052a0:	4b2a      	ldr	r3, [pc, #168]	; (800534c <_malloc_r+0x408>)
 80052a2:	4447      	add	r7, r8
 80052a4:	4418      	add	r0, r3
 80052a6:	400f      	ands	r7, r1
 80052a8:	1bc7      	subs	r7, r0, r7
 80052aa:	4639      	mov	r1, r7
 80052ac:	4648      	mov	r0, r9
 80052ae:	f000 f88f 	bl	80053d0 <_sbrk_r>
 80052b2:	1c43      	adds	r3, r0, #1
 80052b4:	bf08      	it	eq
 80052b6:	4640      	moveq	r0, r8
 80052b8:	f8da 3000 	ldr.w	r3, [sl]
 80052bc:	f8c5 8008 	str.w	r8, [r5, #8]
 80052c0:	bf08      	it	eq
 80052c2:	2700      	moveq	r7, #0
 80052c4:	eba0 0008 	sub.w	r0, r0, r8
 80052c8:	443b      	add	r3, r7
 80052ca:	4407      	add	r7, r0
 80052cc:	f047 0701 	orr.w	r7, r7, #1
 80052d0:	45ab      	cmp	fp, r5
 80052d2:	f8ca 3000 	str.w	r3, [sl]
 80052d6:	f8c8 7004 	str.w	r7, [r8, #4]
 80052da:	d0c4      	beq.n	8005266 <_malloc_r+0x322>
 80052dc:	2e0f      	cmp	r6, #15
 80052de:	d810      	bhi.n	8005302 <_malloc_r+0x3be>
 80052e0:	2301      	movs	r3, #1
 80052e2:	f8c8 3004 	str.w	r3, [r8, #4]
 80052e6:	68ab      	ldr	r3, [r5, #8]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	f022 0203 	bic.w	r2, r2, #3
 80052ee:	4294      	cmp	r4, r2
 80052f0:	eba2 0304 	sub.w	r3, r2, r4
 80052f4:	d801      	bhi.n	80052fa <_malloc_r+0x3b6>
 80052f6:	2b0f      	cmp	r3, #15
 80052f8:	dc1a      	bgt.n	8005330 <_malloc_r+0x3ec>
 80052fa:	4648      	mov	r0, r9
 80052fc:	f000 f84a 	bl	8005394 <__malloc_unlock>
 8005300:	e62d      	b.n	8004f5e <_malloc_r+0x1a>
 8005302:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005306:	3e0c      	subs	r6, #12
 8005308:	f026 0607 	bic.w	r6, r6, #7
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	4333      	orrs	r3, r6
 8005312:	f8cb 3004 	str.w	r3, [fp, #4]
 8005316:	eb0b 0306 	add.w	r3, fp, r6
 800531a:	2205      	movs	r2, #5
 800531c:	2e0f      	cmp	r6, #15
 800531e:	605a      	str	r2, [r3, #4]
 8005320:	609a      	str	r2, [r3, #8]
 8005322:	d9a0      	bls.n	8005266 <_malloc_r+0x322>
 8005324:	f10b 0108 	add.w	r1, fp, #8
 8005328:	4648      	mov	r0, r9
 800532a:	f002 f9a3 	bl	8007674 <_free_r>
 800532e:	e79a      	b.n	8005266 <_malloc_r+0x322>
 8005330:	68ae      	ldr	r6, [r5, #8]
 8005332:	f044 0201 	orr.w	r2, r4, #1
 8005336:	4434      	add	r4, r6
 8005338:	f043 0301 	orr.w	r3, r3, #1
 800533c:	6072      	str	r2, [r6, #4]
 800533e:	60ac      	str	r4, [r5, #8]
 8005340:	6063      	str	r3, [r4, #4]
 8005342:	e631      	b.n	8004fa8 <_malloc_r+0x64>
 8005344:	20000a7c 	.word	0x20000a7c
 8005348:	20000594 	.word	0x20000594
 800534c:	00000080 	.word	0x00000080
 8005350:	20000a4c 	.word	0x20000a4c
 8005354:	0000007f 	.word	0x0000007f
 8005358:	20000a74 	.word	0x20000a74
 800535c:	20000a78 	.word	0x20000a78

08005360 <memcpy>:
 8005360:	b510      	push	{r4, lr}
 8005362:	1e43      	subs	r3, r0, #1
 8005364:	440a      	add	r2, r1
 8005366:	4291      	cmp	r1, r2
 8005368:	d100      	bne.n	800536c <memcpy+0xc>
 800536a:	bd10      	pop	{r4, pc}
 800536c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005370:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005374:	e7f7      	b.n	8005366 <memcpy+0x6>

08005376 <memset>:
 8005376:	4402      	add	r2, r0
 8005378:	4603      	mov	r3, r0
 800537a:	4293      	cmp	r3, r2
 800537c:	d100      	bne.n	8005380 <memset+0xa>
 800537e:	4770      	bx	lr
 8005380:	f803 1b01 	strb.w	r1, [r3], #1
 8005384:	e7f9      	b.n	800537a <memset+0x4>
	...

08005388 <__malloc_lock>:
 8005388:	4801      	ldr	r0, [pc, #4]	; (8005390 <__malloc_lock+0x8>)
 800538a:	f002 ba5d 	b.w	8007848 <__retarget_lock_acquire_recursive>
 800538e:	bf00      	nop
 8005390:	20001df8 	.word	0x20001df8

08005394 <__malloc_unlock>:
 8005394:	4801      	ldr	r0, [pc, #4]	; (800539c <__malloc_unlock+0x8>)
 8005396:	f002 ba58 	b.w	800784a <__retarget_lock_release_recursive>
 800539a:	bf00      	nop
 800539c:	20001df8 	.word	0x20001df8

080053a0 <printf>:
 80053a0:	b40f      	push	{r0, r1, r2, r3}
 80053a2:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <printf+0x2c>)
 80053a4:	b513      	push	{r0, r1, r4, lr}
 80053a6:	681c      	ldr	r4, [r3, #0]
 80053a8:	b124      	cbz	r4, 80053b4 <printf+0x14>
 80053aa:	69a3      	ldr	r3, [r4, #24]
 80053ac:	b913      	cbnz	r3, 80053b4 <printf+0x14>
 80053ae:	4620      	mov	r0, r4
 80053b0:	f002 f88a 	bl	80074c8 <__sinit>
 80053b4:	ab05      	add	r3, sp, #20
 80053b6:	9a04      	ldr	r2, [sp, #16]
 80053b8:	68a1      	ldr	r1, [r4, #8]
 80053ba:	9301      	str	r3, [sp, #4]
 80053bc:	4620      	mov	r0, r4
 80053be:	f000 f817 	bl	80053f0 <_vfprintf_r>
 80053c2:	b002      	add	sp, #8
 80053c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053c8:	b004      	add	sp, #16
 80053ca:	4770      	bx	lr
 80053cc:	2000059c 	.word	0x2000059c

080053d0 <_sbrk_r>:
 80053d0:	b538      	push	{r3, r4, r5, lr}
 80053d2:	4c06      	ldr	r4, [pc, #24]	; (80053ec <_sbrk_r+0x1c>)
 80053d4:	2300      	movs	r3, #0
 80053d6:	4605      	mov	r5, r0
 80053d8:	4608      	mov	r0, r1
 80053da:	6023      	str	r3, [r4, #0]
 80053dc:	f003 fb1a 	bl	8008a14 <_sbrk>
 80053e0:	1c43      	adds	r3, r0, #1
 80053e2:	d102      	bne.n	80053ea <_sbrk_r+0x1a>
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	b103      	cbz	r3, 80053ea <_sbrk_r+0x1a>
 80053e8:	602b      	str	r3, [r5, #0]
 80053ea:	bd38      	pop	{r3, r4, r5, pc}
 80053ec:	20001e00 	.word	0x20001e00

080053f0 <_vfprintf_r>:
 80053f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f4:	b0bd      	sub	sp, #244	; 0xf4
 80053f6:	4688      	mov	r8, r1
 80053f8:	4615      	mov	r5, r2
 80053fa:	461c      	mov	r4, r3
 80053fc:	461f      	mov	r7, r3
 80053fe:	4683      	mov	fp, r0
 8005400:	f002 fa12 	bl	8007828 <_localeconv_r>
 8005404:	6803      	ldr	r3, [r0, #0]
 8005406:	930d      	str	r3, [sp, #52]	; 0x34
 8005408:	4618      	mov	r0, r3
 800540a:	f7fa ff31 	bl	8000270 <strlen>
 800540e:	9009      	str	r0, [sp, #36]	; 0x24
 8005410:	f1bb 0f00 	cmp.w	fp, #0
 8005414:	d005      	beq.n	8005422 <_vfprintf_r+0x32>
 8005416:	f8db 3018 	ldr.w	r3, [fp, #24]
 800541a:	b913      	cbnz	r3, 8005422 <_vfprintf_r+0x32>
 800541c:	4658      	mov	r0, fp
 800541e:	f002 f853 	bl	80074c8 <__sinit>
 8005422:	4b99      	ldr	r3, [pc, #612]	; (8005688 <_vfprintf_r+0x298>)
 8005424:	4598      	cmp	r8, r3
 8005426:	d137      	bne.n	8005498 <_vfprintf_r+0xa8>
 8005428:	f8db 8004 	ldr.w	r8, [fp, #4]
 800542c:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8005430:	07d8      	lsls	r0, r3, #31
 8005432:	d407      	bmi.n	8005444 <_vfprintf_r+0x54>
 8005434:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005438:	0599      	lsls	r1, r3, #22
 800543a:	d403      	bmi.n	8005444 <_vfprintf_r+0x54>
 800543c:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8005440:	f002 fa02 	bl	8007848 <__retarget_lock_acquire_recursive>
 8005444:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 8005448:	049a      	lsls	r2, r3, #18
 800544a:	d409      	bmi.n	8005460 <_vfprintf_r+0x70>
 800544c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005450:	f8a8 300c 	strh.w	r3, [r8, #12]
 8005454:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8005458:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800545c:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 8005460:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005464:	071e      	lsls	r6, r3, #28
 8005466:	d502      	bpl.n	800546e <_vfprintf_r+0x7e>
 8005468:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800546c:	bb03      	cbnz	r3, 80054b0 <_vfprintf_r+0xc0>
 800546e:	4641      	mov	r1, r8
 8005470:	4658      	mov	r0, fp
 8005472:	f001 f839 	bl	80064e8 <__swsetup_r>
 8005476:	b1d8      	cbz	r0, 80054b0 <_vfprintf_r+0xc0>
 8005478:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800547c:	07dd      	lsls	r5, r3, #31
 800547e:	d407      	bmi.n	8005490 <_vfprintf_r+0xa0>
 8005480:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005484:	059c      	lsls	r4, r3, #22
 8005486:	d403      	bmi.n	8005490 <_vfprintf_r+0xa0>
 8005488:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800548c:	f002 f9dd 	bl	800784a <__retarget_lock_release_recursive>
 8005490:	f04f 33ff 	mov.w	r3, #4294967295
 8005494:	930a      	str	r3, [sp, #40]	; 0x28
 8005496:	e026      	b.n	80054e6 <_vfprintf_r+0xf6>
 8005498:	4b7c      	ldr	r3, [pc, #496]	; (800568c <_vfprintf_r+0x29c>)
 800549a:	4598      	cmp	r8, r3
 800549c:	d102      	bne.n	80054a4 <_vfprintf_r+0xb4>
 800549e:	f8db 8008 	ldr.w	r8, [fp, #8]
 80054a2:	e7c3      	b.n	800542c <_vfprintf_r+0x3c>
 80054a4:	4b7a      	ldr	r3, [pc, #488]	; (8005690 <_vfprintf_r+0x2a0>)
 80054a6:	4598      	cmp	r8, r3
 80054a8:	bf08      	it	eq
 80054aa:	f8db 800c 	ldreq.w	r8, [fp, #12]
 80054ae:	e7bd      	b.n	800542c <_vfprintf_r+0x3c>
 80054b0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80054b4:	f003 021a 	and.w	r2, r3, #26
 80054b8:	2a0a      	cmp	r2, #10
 80054ba:	d118      	bne.n	80054ee <_vfprintf_r+0xfe>
 80054bc:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 80054c0:	2a00      	cmp	r2, #0
 80054c2:	db14      	blt.n	80054ee <_vfprintf_r+0xfe>
 80054c4:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 80054c8:	07d0      	lsls	r0, r2, #31
 80054ca:	d405      	bmi.n	80054d8 <_vfprintf_r+0xe8>
 80054cc:	0599      	lsls	r1, r3, #22
 80054ce:	d403      	bmi.n	80054d8 <_vfprintf_r+0xe8>
 80054d0:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 80054d4:	f002 f9b9 	bl	800784a <__retarget_lock_release_recursive>
 80054d8:	4623      	mov	r3, r4
 80054da:	462a      	mov	r2, r5
 80054dc:	4641      	mov	r1, r8
 80054de:	4658      	mov	r0, fp
 80054e0:	f000 ffc2 	bl	8006468 <__sbprintf>
 80054e4:	900a      	str	r0, [sp, #40]	; 0x28
 80054e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80054e8:	b03d      	add	sp, #244	; 0xf4
 80054ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ee:	ed9f 7b64 	vldr	d7, [pc, #400]	; 8005680 <_vfprintf_r+0x290>
 80054f2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80054f6:	2300      	movs	r3, #0
 80054f8:	ac2c      	add	r4, sp, #176	; 0xb0
 80054fa:	941f      	str	r4, [sp, #124]	; 0x7c
 80054fc:	9321      	str	r3, [sp, #132]	; 0x84
 80054fe:	9320      	str	r3, [sp, #128]	; 0x80
 8005500:	9505      	str	r5, [sp, #20]
 8005502:	9303      	str	r3, [sp, #12]
 8005504:	9311      	str	r3, [sp, #68]	; 0x44
 8005506:	9310      	str	r3, [sp, #64]	; 0x40
 8005508:	930a      	str	r3, [sp, #40]	; 0x28
 800550a:	9d05      	ldr	r5, [sp, #20]
 800550c:	462b      	mov	r3, r5
 800550e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005512:	b112      	cbz	r2, 800551a <_vfprintf_r+0x12a>
 8005514:	2a25      	cmp	r2, #37	; 0x25
 8005516:	f040 8083 	bne.w	8005620 <_vfprintf_r+0x230>
 800551a:	9b05      	ldr	r3, [sp, #20]
 800551c:	1aee      	subs	r6, r5, r3
 800551e:	d00d      	beq.n	800553c <_vfprintf_r+0x14c>
 8005520:	e884 0048 	stmia.w	r4, {r3, r6}
 8005524:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005526:	4433      	add	r3, r6
 8005528:	9321      	str	r3, [sp, #132]	; 0x84
 800552a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800552c:	3301      	adds	r3, #1
 800552e:	2b07      	cmp	r3, #7
 8005530:	9320      	str	r3, [sp, #128]	; 0x80
 8005532:	dc77      	bgt.n	8005624 <_vfprintf_r+0x234>
 8005534:	3408      	adds	r4, #8
 8005536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005538:	4433      	add	r3, r6
 800553a:	930a      	str	r3, [sp, #40]	; 0x28
 800553c:	782b      	ldrb	r3, [r5, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 8739 	beq.w	80063b6 <_vfprintf_r+0xfc6>
 8005544:	2300      	movs	r3, #0
 8005546:	1c69      	adds	r1, r5, #1
 8005548:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800554c:	461a      	mov	r2, r3
 800554e:	f04f 3aff 	mov.w	sl, #4294967295
 8005552:	930b      	str	r3, [sp, #44]	; 0x2c
 8005554:	461d      	mov	r5, r3
 8005556:	200a      	movs	r0, #10
 8005558:	1c4e      	adds	r6, r1, #1
 800555a:	7809      	ldrb	r1, [r1, #0]
 800555c:	9605      	str	r6, [sp, #20]
 800555e:	9102      	str	r1, [sp, #8]
 8005560:	9902      	ldr	r1, [sp, #8]
 8005562:	3920      	subs	r1, #32
 8005564:	2958      	cmp	r1, #88	; 0x58
 8005566:	f200 841d 	bhi.w	8005da4 <_vfprintf_r+0x9b4>
 800556a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800556e:	00b3      	.short	0x00b3
 8005570:	041b041b 	.word	0x041b041b
 8005574:	041b00b8 	.word	0x041b00b8
 8005578:	041b041b 	.word	0x041b041b
 800557c:	041b041b 	.word	0x041b041b
 8005580:	00bb041b 	.word	0x00bb041b
 8005584:	041b0065 	.word	0x041b0065
 8005588:	00c700c4 	.word	0x00c700c4
 800558c:	00e4041b 	.word	0x00e4041b
 8005590:	00e700e7 	.word	0x00e700e7
 8005594:	00e700e7 	.word	0x00e700e7
 8005598:	00e700e7 	.word	0x00e700e7
 800559c:	00e700e7 	.word	0x00e700e7
 80055a0:	041b00e7 	.word	0x041b00e7
 80055a4:	041b041b 	.word	0x041b041b
 80055a8:	041b041b 	.word	0x041b041b
 80055ac:	041b041b 	.word	0x041b041b
 80055b0:	041b041b 	.word	0x041b041b
 80055b4:	011b041b 	.word	0x011b041b
 80055b8:	041b0131 	.word	0x041b0131
 80055bc:	041b0131 	.word	0x041b0131
 80055c0:	041b041b 	.word	0x041b041b
 80055c4:	00fa041b 	.word	0x00fa041b
 80055c8:	041b041b 	.word	0x041b041b
 80055cc:	041b0346 	.word	0x041b0346
 80055d0:	041b041b 	.word	0x041b041b
 80055d4:	041b041b 	.word	0x041b041b
 80055d8:	041b03ad 	.word	0x041b03ad
 80055dc:	0093041b 	.word	0x0093041b
 80055e0:	041b041b 	.word	0x041b041b
 80055e4:	041b041b 	.word	0x041b041b
 80055e8:	041b041b 	.word	0x041b041b
 80055ec:	041b041b 	.word	0x041b041b
 80055f0:	041b041b 	.word	0x041b041b
 80055f4:	006b010d 	.word	0x006b010d
 80055f8:	01310131 	.word	0x01310131
 80055fc:	00fd0131 	.word	0x00fd0131
 8005600:	041b006b 	.word	0x041b006b
 8005604:	0100041b 	.word	0x0100041b
 8005608:	0328041b 	.word	0x0328041b
 800560c:	037c0348 	.word	0x037c0348
 8005610:	041b0107 	.word	0x041b0107
 8005614:	041b038d 	.word	0x041b038d
 8005618:	041b03af 	.word	0x041b03af
 800561c:	03c7041b 	.word	0x03c7041b
 8005620:	461d      	mov	r5, r3
 8005622:	e773      	b.n	800550c <_vfprintf_r+0x11c>
 8005624:	aa1f      	add	r2, sp, #124	; 0x7c
 8005626:	4641      	mov	r1, r8
 8005628:	4658      	mov	r0, fp
 800562a:	f002 fc8e 	bl	8007f4a <__sprint_r>
 800562e:	2800      	cmp	r0, #0
 8005630:	f040 8699 	bne.w	8006366 <_vfprintf_r+0xf76>
 8005634:	ac2c      	add	r4, sp, #176	; 0xb0
 8005636:	e77e      	b.n	8005536 <_vfprintf_r+0x146>
 8005638:	2301      	movs	r3, #1
 800563a:	222b      	movs	r2, #43	; 0x2b
 800563c:	9905      	ldr	r1, [sp, #20]
 800563e:	e78b      	b.n	8005558 <_vfprintf_r+0x168>
 8005640:	460f      	mov	r7, r1
 8005642:	e7fb      	b.n	800563c <_vfprintf_r+0x24c>
 8005644:	b10b      	cbz	r3, 800564a <_vfprintf_r+0x25a>
 8005646:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800564a:	06aa      	lsls	r2, r5, #26
 800564c:	f140 80b0 	bpl.w	80057b0 <_vfprintf_r+0x3c0>
 8005650:	3707      	adds	r7, #7
 8005652:	f027 0707 	bic.w	r7, r7, #7
 8005656:	f107 0308 	add.w	r3, r7, #8
 800565a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800565e:	9304      	str	r3, [sp, #16]
 8005660:	2e00      	cmp	r6, #0
 8005662:	f177 0300 	sbcs.w	r3, r7, #0
 8005666:	da06      	bge.n	8005676 <_vfprintf_r+0x286>
 8005668:	4276      	negs	r6, r6
 800566a:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800566e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8005672:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005676:	2301      	movs	r3, #1
 8005678:	e2d0      	b.n	8005c1c <_vfprintf_r+0x82c>
 800567a:	bf00      	nop
 800567c:	f3af 8000 	nop.w
	...
 8005688:	08008da4 	.word	0x08008da4
 800568c:	08008dc4 	.word	0x08008dc4
 8005690:	08008d84 	.word	0x08008d84
 8005694:	b10b      	cbz	r3, 800569a <_vfprintf_r+0x2aa>
 8005696:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800569a:	4ba2      	ldr	r3, [pc, #648]	; (8005924 <_vfprintf_r+0x534>)
 800569c:	9311      	str	r3, [sp, #68]	; 0x44
 800569e:	06a9      	lsls	r1, r5, #26
 80056a0:	f140 8331 	bpl.w	8005d06 <_vfprintf_r+0x916>
 80056a4:	3707      	adds	r7, #7
 80056a6:	f027 0707 	bic.w	r7, r7, #7
 80056aa:	f107 0308 	add.w	r3, r7, #8
 80056ae:	e9d7 6700 	ldrd	r6, r7, [r7]
 80056b2:	9304      	str	r3, [sp, #16]
 80056b4:	07eb      	lsls	r3, r5, #31
 80056b6:	d50b      	bpl.n	80056d0 <_vfprintf_r+0x2e0>
 80056b8:	ea56 0307 	orrs.w	r3, r6, r7
 80056bc:	d008      	beq.n	80056d0 <_vfprintf_r+0x2e0>
 80056be:	2330      	movs	r3, #48	; 0x30
 80056c0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80056c4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80056c8:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80056cc:	f045 0502 	orr.w	r5, r5, #2
 80056d0:	2302      	movs	r3, #2
 80056d2:	e2a0      	b.n	8005c16 <_vfprintf_r+0x826>
 80056d4:	2a00      	cmp	r2, #0
 80056d6:	d1b1      	bne.n	800563c <_vfprintf_r+0x24c>
 80056d8:	2301      	movs	r3, #1
 80056da:	2220      	movs	r2, #32
 80056dc:	e7ae      	b.n	800563c <_vfprintf_r+0x24c>
 80056de:	f045 0501 	orr.w	r5, r5, #1
 80056e2:	e7ab      	b.n	800563c <_vfprintf_r+0x24c>
 80056e4:	683e      	ldr	r6, [r7, #0]
 80056e6:	960b      	str	r6, [sp, #44]	; 0x2c
 80056e8:	2e00      	cmp	r6, #0
 80056ea:	f107 0104 	add.w	r1, r7, #4
 80056ee:	daa7      	bge.n	8005640 <_vfprintf_r+0x250>
 80056f0:	4276      	negs	r6, r6
 80056f2:	960b      	str	r6, [sp, #44]	; 0x2c
 80056f4:	460f      	mov	r7, r1
 80056f6:	f045 0504 	orr.w	r5, r5, #4
 80056fa:	e79f      	b.n	800563c <_vfprintf_r+0x24c>
 80056fc:	9905      	ldr	r1, [sp, #20]
 80056fe:	1c4e      	adds	r6, r1, #1
 8005700:	7809      	ldrb	r1, [r1, #0]
 8005702:	9102      	str	r1, [sp, #8]
 8005704:	292a      	cmp	r1, #42	; 0x2a
 8005706:	d010      	beq.n	800572a <_vfprintf_r+0x33a>
 8005708:	f04f 0a00 	mov.w	sl, #0
 800570c:	9605      	str	r6, [sp, #20]
 800570e:	9902      	ldr	r1, [sp, #8]
 8005710:	3930      	subs	r1, #48	; 0x30
 8005712:	2909      	cmp	r1, #9
 8005714:	f63f af24 	bhi.w	8005560 <_vfprintf_r+0x170>
 8005718:	fb00 1a0a 	mla	sl, r0, sl, r1
 800571c:	9905      	ldr	r1, [sp, #20]
 800571e:	460e      	mov	r6, r1
 8005720:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005724:	9102      	str	r1, [sp, #8]
 8005726:	9605      	str	r6, [sp, #20]
 8005728:	e7f1      	b.n	800570e <_vfprintf_r+0x31e>
 800572a:	6839      	ldr	r1, [r7, #0]
 800572c:	9605      	str	r6, [sp, #20]
 800572e:	ea41 7ae1 	orr.w	sl, r1, r1, asr #31
 8005732:	3704      	adds	r7, #4
 8005734:	e782      	b.n	800563c <_vfprintf_r+0x24c>
 8005736:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800573a:	e77f      	b.n	800563c <_vfprintf_r+0x24c>
 800573c:	2100      	movs	r1, #0
 800573e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005740:	9902      	ldr	r1, [sp, #8]
 8005742:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005744:	3930      	subs	r1, #48	; 0x30
 8005746:	fb00 1106 	mla	r1, r0, r6, r1
 800574a:	910b      	str	r1, [sp, #44]	; 0x2c
 800574c:	9905      	ldr	r1, [sp, #20]
 800574e:	460e      	mov	r6, r1
 8005750:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005754:	9102      	str	r1, [sp, #8]
 8005756:	9902      	ldr	r1, [sp, #8]
 8005758:	9605      	str	r6, [sp, #20]
 800575a:	3930      	subs	r1, #48	; 0x30
 800575c:	2909      	cmp	r1, #9
 800575e:	d9ef      	bls.n	8005740 <_vfprintf_r+0x350>
 8005760:	e6fe      	b.n	8005560 <_vfprintf_r+0x170>
 8005762:	f045 0508 	orr.w	r5, r5, #8
 8005766:	e769      	b.n	800563c <_vfprintf_r+0x24c>
 8005768:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800576c:	e766      	b.n	800563c <_vfprintf_r+0x24c>
 800576e:	9905      	ldr	r1, [sp, #20]
 8005770:	7809      	ldrb	r1, [r1, #0]
 8005772:	296c      	cmp	r1, #108	; 0x6c
 8005774:	d105      	bne.n	8005782 <_vfprintf_r+0x392>
 8005776:	9905      	ldr	r1, [sp, #20]
 8005778:	3101      	adds	r1, #1
 800577a:	9105      	str	r1, [sp, #20]
 800577c:	f045 0520 	orr.w	r5, r5, #32
 8005780:	e75c      	b.n	800563c <_vfprintf_r+0x24c>
 8005782:	f045 0510 	orr.w	r5, r5, #16
 8005786:	e759      	b.n	800563c <_vfprintf_r+0x24c>
 8005788:	1d3b      	adds	r3, r7, #4
 800578a:	9304      	str	r3, [sp, #16]
 800578c:	2600      	movs	r6, #0
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8005794:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005798:	f04f 0a01 	mov.w	sl, #1
 800579c:	9608      	str	r6, [sp, #32]
 800579e:	f10d 0988 	add.w	r9, sp, #136	; 0x88
 80057a2:	e11e      	b.n	80059e2 <_vfprintf_r+0x5f2>
 80057a4:	b10b      	cbz	r3, 80057aa <_vfprintf_r+0x3ba>
 80057a6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80057aa:	f045 0510 	orr.w	r5, r5, #16
 80057ae:	e74c      	b.n	800564a <_vfprintf_r+0x25a>
 80057b0:	f015 0f10 	tst.w	r5, #16
 80057b4:	f107 0304 	add.w	r3, r7, #4
 80057b8:	d003      	beq.n	80057c2 <_vfprintf_r+0x3d2>
 80057ba:	683e      	ldr	r6, [r7, #0]
 80057bc:	9304      	str	r3, [sp, #16]
 80057be:	17f7      	asrs	r7, r6, #31
 80057c0:	e74e      	b.n	8005660 <_vfprintf_r+0x270>
 80057c2:	683e      	ldr	r6, [r7, #0]
 80057c4:	9304      	str	r3, [sp, #16]
 80057c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80057ca:	bf18      	it	ne
 80057cc:	b236      	sxthne	r6, r6
 80057ce:	e7f6      	b.n	80057be <_vfprintf_r+0x3ce>
 80057d0:	b10b      	cbz	r3, 80057d6 <_vfprintf_r+0x3e6>
 80057d2:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80057d6:	3707      	adds	r7, #7
 80057d8:	f027 0707 	bic.w	r7, r7, #7
 80057dc:	f107 0308 	add.w	r3, r7, #8
 80057e0:	9304      	str	r3, [sp, #16]
 80057e2:	ed97 7b00 	vldr	d7, [r7]
 80057e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80057ea:	9b06      	ldr	r3, [sp, #24]
 80057ec:	9312      	str	r3, [sp, #72]	; 0x48
 80057ee:	9b07      	ldr	r3, [sp, #28]
 80057f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80057f6:	f04f 32ff 	mov.w	r2, #4294967295
 80057fa:	4b4b      	ldr	r3, [pc, #300]	; (8005928 <_vfprintf_r+0x538>)
 80057fc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005800:	f7fb f990 	bl	8000b24 <__aeabi_dcmpun>
 8005804:	2800      	cmp	r0, #0
 8005806:	f040 85e3 	bne.w	80063d0 <_vfprintf_r+0xfe0>
 800580a:	f04f 32ff 	mov.w	r2, #4294967295
 800580e:	4b46      	ldr	r3, [pc, #280]	; (8005928 <_vfprintf_r+0x538>)
 8005810:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005814:	f7fb f968 	bl	8000ae8 <__aeabi_dcmple>
 8005818:	2800      	cmp	r0, #0
 800581a:	f040 85d9 	bne.w	80063d0 <_vfprintf_r+0xfe0>
 800581e:	2200      	movs	r2, #0
 8005820:	2300      	movs	r3, #0
 8005822:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005826:	f7fb f955 	bl	8000ad4 <__aeabi_dcmplt>
 800582a:	b110      	cbz	r0, 8005832 <_vfprintf_r+0x442>
 800582c:	232d      	movs	r3, #45	; 0x2d
 800582e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005832:	4b3e      	ldr	r3, [pc, #248]	; (800592c <_vfprintf_r+0x53c>)
 8005834:	4a3e      	ldr	r2, [pc, #248]	; (8005930 <_vfprintf_r+0x540>)
 8005836:	9902      	ldr	r1, [sp, #8]
 8005838:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800583c:	2947      	cmp	r1, #71	; 0x47
 800583e:	bfcc      	ite	gt
 8005840:	4691      	movgt	r9, r2
 8005842:	4699      	movle	r9, r3
 8005844:	f04f 0a03 	mov.w	sl, #3
 8005848:	2600      	movs	r6, #0
 800584a:	9608      	str	r6, [sp, #32]
 800584c:	e0c9      	b.n	80059e2 <_vfprintf_r+0x5f2>
 800584e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005852:	d022      	beq.n	800589a <_vfprintf_r+0x4aa>
 8005854:	9b02      	ldr	r3, [sp, #8]
 8005856:	f023 0320 	bic.w	r3, r3, #32
 800585a:	2b47      	cmp	r3, #71	; 0x47
 800585c:	d104      	bne.n	8005868 <_vfprintf_r+0x478>
 800585e:	f1ba 0f00 	cmp.w	sl, #0
 8005862:	bf08      	it	eq
 8005864:	f04f 0a01 	moveq.w	sl, #1
 8005868:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800586c:	9314      	str	r3, [sp, #80]	; 0x50
 800586e:	9b07      	ldr	r3, [sp, #28]
 8005870:	2b00      	cmp	r3, #0
 8005872:	da15      	bge.n	80058a0 <_vfprintf_r+0x4b0>
 8005874:	9b06      	ldr	r3, [sp, #24]
 8005876:	930e      	str	r3, [sp, #56]	; 0x38
 8005878:	9b07      	ldr	r3, [sp, #28]
 800587a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800587e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005880:	232d      	movs	r3, #45	; 0x2d
 8005882:	930c      	str	r3, [sp, #48]	; 0x30
 8005884:	9b02      	ldr	r3, [sp, #8]
 8005886:	f023 0720 	bic.w	r7, r3, #32
 800588a:	2f46      	cmp	r7, #70	; 0x46
 800588c:	d00e      	beq.n	80058ac <_vfprintf_r+0x4bc>
 800588e:	2f45      	cmp	r7, #69	; 0x45
 8005890:	d146      	bne.n	8005920 <_vfprintf_r+0x530>
 8005892:	f10a 0601 	add.w	r6, sl, #1
 8005896:	2102      	movs	r1, #2
 8005898:	e00a      	b.n	80058b0 <_vfprintf_r+0x4c0>
 800589a:	f04f 0a06 	mov.w	sl, #6
 800589e:	e7e3      	b.n	8005868 <_vfprintf_r+0x478>
 80058a0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80058a4:	2300      	movs	r3, #0
 80058a6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80058aa:	e7ea      	b.n	8005882 <_vfprintf_r+0x492>
 80058ac:	4656      	mov	r6, sl
 80058ae:	2103      	movs	r1, #3
 80058b0:	ab1d      	add	r3, sp, #116	; 0x74
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	ab1a      	add	r3, sp, #104	; 0x68
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	4632      	mov	r2, r6
 80058ba:	ab19      	add	r3, sp, #100	; 0x64
 80058bc:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80058c0:	4658      	mov	r0, fp
 80058c2:	f000 ff0d 	bl	80066e0 <_dtoa_r>
 80058c6:	2f47      	cmp	r7, #71	; 0x47
 80058c8:	4681      	mov	r9, r0
 80058ca:	d102      	bne.n	80058d2 <_vfprintf_r+0x4e2>
 80058cc:	07eb      	lsls	r3, r5, #31
 80058ce:	f140 858c 	bpl.w	80063ea <_vfprintf_r+0xffa>
 80058d2:	eb09 0306 	add.w	r3, r9, r6
 80058d6:	2f46      	cmp	r7, #70	; 0x46
 80058d8:	9303      	str	r3, [sp, #12]
 80058da:	d111      	bne.n	8005900 <_vfprintf_r+0x510>
 80058dc:	f899 3000 	ldrb.w	r3, [r9]
 80058e0:	2b30      	cmp	r3, #48	; 0x30
 80058e2:	d109      	bne.n	80058f8 <_vfprintf_r+0x508>
 80058e4:	2200      	movs	r2, #0
 80058e6:	2300      	movs	r3, #0
 80058e8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80058ec:	f7fb f8e8 	bl	8000ac0 <__aeabi_dcmpeq>
 80058f0:	b910      	cbnz	r0, 80058f8 <_vfprintf_r+0x508>
 80058f2:	f1c6 0601 	rsb	r6, r6, #1
 80058f6:	9619      	str	r6, [sp, #100]	; 0x64
 80058f8:	9a03      	ldr	r2, [sp, #12]
 80058fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80058fc:	441a      	add	r2, r3
 80058fe:	9203      	str	r2, [sp, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	2300      	movs	r3, #0
 8005904:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005908:	f7fb f8da 	bl	8000ac0 <__aeabi_dcmpeq>
 800590c:	b990      	cbnz	r0, 8005934 <_vfprintf_r+0x544>
 800590e:	2230      	movs	r2, #48	; 0x30
 8005910:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005912:	9903      	ldr	r1, [sp, #12]
 8005914:	4299      	cmp	r1, r3
 8005916:	d90f      	bls.n	8005938 <_vfprintf_r+0x548>
 8005918:	1c59      	adds	r1, r3, #1
 800591a:	911d      	str	r1, [sp, #116]	; 0x74
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	e7f7      	b.n	8005910 <_vfprintf_r+0x520>
 8005920:	4656      	mov	r6, sl
 8005922:	e7b8      	b.n	8005896 <_vfprintf_r+0x4a6>
 8005924:	08008d32 	.word	0x08008d32
 8005928:	7fefffff 	.word	0x7fefffff
 800592c:	08008d22 	.word	0x08008d22
 8005930:	08008d26 	.word	0x08008d26
 8005934:	9b03      	ldr	r3, [sp, #12]
 8005936:	931d      	str	r3, [sp, #116]	; 0x74
 8005938:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800593a:	2f47      	cmp	r7, #71	; 0x47
 800593c:	eba3 0309 	sub.w	r3, r3, r9
 8005940:	9303      	str	r3, [sp, #12]
 8005942:	f040 80f8 	bne.w	8005b36 <_vfprintf_r+0x746>
 8005946:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005948:	1cdf      	adds	r7, r3, #3
 800594a:	db02      	blt.n	8005952 <_vfprintf_r+0x562>
 800594c:	459a      	cmp	sl, r3
 800594e:	f280 811f 	bge.w	8005b90 <_vfprintf_r+0x7a0>
 8005952:	9b02      	ldr	r3, [sp, #8]
 8005954:	3b02      	subs	r3, #2
 8005956:	9302      	str	r3, [sp, #8]
 8005958:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800595a:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800595e:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8005962:	1e53      	subs	r3, r2, #1
 8005964:	2b00      	cmp	r3, #0
 8005966:	9319      	str	r3, [sp, #100]	; 0x64
 8005968:	bfb6      	itet	lt
 800596a:	f1c2 0301 	rsblt	r3, r2, #1
 800596e:	222b      	movge	r2, #43	; 0x2b
 8005970:	222d      	movlt	r2, #45	; 0x2d
 8005972:	2b09      	cmp	r3, #9
 8005974:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8005978:	f340 80fa 	ble.w	8005b70 <_vfprintf_r+0x780>
 800597c:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8005980:	260a      	movs	r6, #10
 8005982:	fb93 f0f6 	sdiv	r0, r3, r6
 8005986:	fb06 3310 	mls	r3, r6, r0, r3
 800598a:	3330      	adds	r3, #48	; 0x30
 800598c:	2809      	cmp	r0, #9
 800598e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005992:	f102 31ff 	add.w	r1, r2, #4294967295
 8005996:	4603      	mov	r3, r0
 8005998:	f300 80e3 	bgt.w	8005b62 <_vfprintf_r+0x772>
 800599c:	3330      	adds	r3, #48	; 0x30
 800599e:	f801 3c01 	strb.w	r3, [r1, #-1]
 80059a2:	3a02      	subs	r2, #2
 80059a4:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80059a8:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 80059ac:	4282      	cmp	r2, r0
 80059ae:	4619      	mov	r1, r3
 80059b0:	f0c0 80d9 	bcc.w	8005b66 <_vfprintf_r+0x776>
 80059b4:	9a03      	ldr	r2, [sp, #12]
 80059b6:	ab1b      	add	r3, sp, #108	; 0x6c
 80059b8:	1acb      	subs	r3, r1, r3
 80059ba:	2a01      	cmp	r2, #1
 80059bc:	9310      	str	r3, [sp, #64]	; 0x40
 80059be:	eb03 0a02 	add.w	sl, r3, r2
 80059c2:	dc03      	bgt.n	80059cc <_vfprintf_r+0x5dc>
 80059c4:	f015 0301 	ands.w	r3, r5, #1
 80059c8:	9308      	str	r3, [sp, #32]
 80059ca:	d003      	beq.n	80059d4 <_vfprintf_r+0x5e4>
 80059cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ce:	449a      	add	sl, r3
 80059d0:	2300      	movs	r3, #0
 80059d2:	9308      	str	r3, [sp, #32]
 80059d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059d6:	b113      	cbz	r3, 80059de <_vfprintf_r+0x5ee>
 80059d8:	232d      	movs	r3, #45	; 0x2d
 80059da:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80059de:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80059e0:	2600      	movs	r6, #0
 80059e2:	4556      	cmp	r6, sl
 80059e4:	4633      	mov	r3, r6
 80059e6:	bfb8      	it	lt
 80059e8:	4653      	movlt	r3, sl
 80059ea:	930c      	str	r3, [sp, #48]	; 0x30
 80059ec:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80059f0:	b113      	cbz	r3, 80059f8 <_vfprintf_r+0x608>
 80059f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059f4:	3301      	adds	r3, #1
 80059f6:	930c      	str	r3, [sp, #48]	; 0x30
 80059f8:	f015 0302 	ands.w	r3, r5, #2
 80059fc:	9314      	str	r3, [sp, #80]	; 0x50
 80059fe:	bf1e      	ittt	ne
 8005a00:	9b0c      	ldrne	r3, [sp, #48]	; 0x30
 8005a02:	3302      	addne	r3, #2
 8005a04:	930c      	strne	r3, [sp, #48]	; 0x30
 8005a06:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8005a0a:	9315      	str	r3, [sp, #84]	; 0x54
 8005a0c:	d114      	bne.n	8005a38 <_vfprintf_r+0x648>
 8005a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a12:	1a9f      	subs	r7, r3, r2
 8005a14:	2f00      	cmp	r7, #0
 8005a16:	dd0f      	ble.n	8005a38 <_vfprintf_r+0x648>
 8005a18:	4ba8      	ldr	r3, [pc, #672]	; (8005cbc <_vfprintf_r+0x8cc>)
 8005a1a:	6023      	str	r3, [r4, #0]
 8005a1c:	2f10      	cmp	r7, #16
 8005a1e:	f300 81d3 	bgt.w	8005dc8 <_vfprintf_r+0x9d8>
 8005a22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a24:	6067      	str	r7, [r4, #4]
 8005a26:	441f      	add	r7, r3
 8005a28:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a2a:	9721      	str	r7, [sp, #132]	; 0x84
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	2b07      	cmp	r3, #7
 8005a30:	9320      	str	r3, [sp, #128]	; 0x80
 8005a32:	f300 81e0 	bgt.w	8005df6 <_vfprintf_r+0xa06>
 8005a36:	3408      	adds	r4, #8
 8005a38:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8005a3c:	b173      	cbz	r3, 8005a5c <_vfprintf_r+0x66c>
 8005a3e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8005a42:	6023      	str	r3, [r4, #0]
 8005a44:	2301      	movs	r3, #1
 8005a46:	6063      	str	r3, [r4, #4]
 8005a48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	9321      	str	r3, [sp, #132]	; 0x84
 8005a4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a50:	3301      	adds	r3, #1
 8005a52:	2b07      	cmp	r3, #7
 8005a54:	9320      	str	r3, [sp, #128]	; 0x80
 8005a56:	f300 81d8 	bgt.w	8005e0a <_vfprintf_r+0xa1a>
 8005a5a:	3408      	adds	r4, #8
 8005a5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a5e:	b16b      	cbz	r3, 8005a7c <_vfprintf_r+0x68c>
 8005a60:	ab18      	add	r3, sp, #96	; 0x60
 8005a62:	6023      	str	r3, [r4, #0]
 8005a64:	2302      	movs	r3, #2
 8005a66:	6063      	str	r3, [r4, #4]
 8005a68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a6a:	3302      	adds	r3, #2
 8005a6c:	9321      	str	r3, [sp, #132]	; 0x84
 8005a6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a70:	3301      	adds	r3, #1
 8005a72:	2b07      	cmp	r3, #7
 8005a74:	9320      	str	r3, [sp, #128]	; 0x80
 8005a76:	f300 81d2 	bgt.w	8005e1e <_vfprintf_r+0xa2e>
 8005a7a:	3408      	adds	r4, #8
 8005a7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a7e:	2b80      	cmp	r3, #128	; 0x80
 8005a80:	d114      	bne.n	8005aac <_vfprintf_r+0x6bc>
 8005a82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a86:	1a9f      	subs	r7, r3, r2
 8005a88:	2f00      	cmp	r7, #0
 8005a8a:	dd0f      	ble.n	8005aac <_vfprintf_r+0x6bc>
 8005a8c:	4b8c      	ldr	r3, [pc, #560]	; (8005cc0 <_vfprintf_r+0x8d0>)
 8005a8e:	6023      	str	r3, [r4, #0]
 8005a90:	2f10      	cmp	r7, #16
 8005a92:	f300 81ce 	bgt.w	8005e32 <_vfprintf_r+0xa42>
 8005a96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a98:	6067      	str	r7, [r4, #4]
 8005a9a:	441f      	add	r7, r3
 8005a9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a9e:	9721      	str	r7, [sp, #132]	; 0x84
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	2b07      	cmp	r3, #7
 8005aa4:	9320      	str	r3, [sp, #128]	; 0x80
 8005aa6:	f300 81dd 	bgt.w	8005e64 <_vfprintf_r+0xa74>
 8005aaa:	3408      	adds	r4, #8
 8005aac:	eba6 060a 	sub.w	r6, r6, sl
 8005ab0:	2e00      	cmp	r6, #0
 8005ab2:	dd0f      	ble.n	8005ad4 <_vfprintf_r+0x6e4>
 8005ab4:	4f82      	ldr	r7, [pc, #520]	; (8005cc0 <_vfprintf_r+0x8d0>)
 8005ab6:	6027      	str	r7, [r4, #0]
 8005ab8:	2e10      	cmp	r6, #16
 8005aba:	f300 81dd 	bgt.w	8005e78 <_vfprintf_r+0xa88>
 8005abe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005ac0:	9821      	ldr	r0, [sp, #132]	; 0x84
 8005ac2:	6066      	str	r6, [r4, #4]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	4406      	add	r6, r0
 8005ac8:	2b07      	cmp	r3, #7
 8005aca:	9621      	str	r6, [sp, #132]	; 0x84
 8005acc:	9320      	str	r3, [sp, #128]	; 0x80
 8005ace:	f300 81ea 	bgt.w	8005ea6 <_vfprintf_r+0xab6>
 8005ad2:	3408      	adds	r4, #8
 8005ad4:	05e9      	lsls	r1, r5, #23
 8005ad6:	f100 81f0 	bmi.w	8005eba <_vfprintf_r+0xaca>
 8005ada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005adc:	e884 0600 	stmia.w	r4, {r9, sl}
 8005ae0:	4453      	add	r3, sl
 8005ae2:	9321      	str	r3, [sp, #132]	; 0x84
 8005ae4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	2b07      	cmp	r3, #7
 8005aea:	9320      	str	r3, [sp, #128]	; 0x80
 8005aec:	f340 841b 	ble.w	8006326 <_vfprintf_r+0xf36>
 8005af0:	aa1f      	add	r2, sp, #124	; 0x7c
 8005af2:	4641      	mov	r1, r8
 8005af4:	4658      	mov	r0, fp
 8005af6:	f002 fa28 	bl	8007f4a <__sprint_r>
 8005afa:	2800      	cmp	r0, #0
 8005afc:	f040 8433 	bne.w	8006366 <_vfprintf_r+0xf76>
 8005b00:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b02:	0768      	lsls	r0, r5, #29
 8005b04:	f100 8412 	bmi.w	800632c <_vfprintf_r+0xf3c>
 8005b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b0e:	428a      	cmp	r2, r1
 8005b10:	bfac      	ite	ge
 8005b12:	189b      	addge	r3, r3, r2
 8005b14:	185b      	addlt	r3, r3, r1
 8005b16:	930a      	str	r3, [sp, #40]	; 0x28
 8005b18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b1a:	b13b      	cbz	r3, 8005b2c <_vfprintf_r+0x73c>
 8005b1c:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b1e:	4641      	mov	r1, r8
 8005b20:	4658      	mov	r0, fp
 8005b22:	f002 fa12 	bl	8007f4a <__sprint_r>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	f040 841d 	bne.w	8006366 <_vfprintf_r+0xf76>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	9320      	str	r3, [sp, #128]	; 0x80
 8005b30:	9f04      	ldr	r7, [sp, #16]
 8005b32:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b34:	e4e9      	b.n	800550a <_vfprintf_r+0x11a>
 8005b36:	9b02      	ldr	r3, [sp, #8]
 8005b38:	2b65      	cmp	r3, #101	; 0x65
 8005b3a:	f77f af0d 	ble.w	8005958 <_vfprintf_r+0x568>
 8005b3e:	9b02      	ldr	r3, [sp, #8]
 8005b40:	2b66      	cmp	r3, #102	; 0x66
 8005b42:	d125      	bne.n	8005b90 <_vfprintf_r+0x7a0>
 8005b44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	dd1a      	ble.n	8005b80 <_vfprintf_r+0x790>
 8005b4a:	f1ba 0f00 	cmp.w	sl, #0
 8005b4e:	d101      	bne.n	8005b54 <_vfprintf_r+0x764>
 8005b50:	07ee      	lsls	r6, r5, #31
 8005b52:	d502      	bpl.n	8005b5a <_vfprintf_r+0x76a>
 8005b54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b56:	4413      	add	r3, r2
 8005b58:	4453      	add	r3, sl
 8005b5a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005b5c:	9208      	str	r2, [sp, #32]
 8005b5e:	469a      	mov	sl, r3
 8005b60:	e738      	b.n	80059d4 <_vfprintf_r+0x5e4>
 8005b62:	460a      	mov	r2, r1
 8005b64:	e70d      	b.n	8005982 <_vfprintf_r+0x592>
 8005b66:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b6e:	e71d      	b.n	80059ac <_vfprintf_r+0x5bc>
 8005b70:	2230      	movs	r2, #48	; 0x30
 8005b72:	4413      	add	r3, r2
 8005b74:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8005b78:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8005b7c:	a91c      	add	r1, sp, #112	; 0x70
 8005b7e:	e719      	b.n	80059b4 <_vfprintf_r+0x5c4>
 8005b80:	f1ba 0f00 	cmp.w	sl, #0
 8005b84:	d101      	bne.n	8005b8a <_vfprintf_r+0x79a>
 8005b86:	07ed      	lsls	r5, r5, #31
 8005b88:	d515      	bpl.n	8005bb6 <_vfprintf_r+0x7c6>
 8005b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	e7e3      	b.n	8005b58 <_vfprintf_r+0x768>
 8005b90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005b92:	9b03      	ldr	r3, [sp, #12]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	db06      	blt.n	8005ba6 <_vfprintf_r+0x7b6>
 8005b98:	07e8      	lsls	r0, r5, #31
 8005b9a:	d50e      	bpl.n	8005bba <_vfprintf_r+0x7ca>
 8005b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b9e:	4413      	add	r3, r2
 8005ba0:	2267      	movs	r2, #103	; 0x67
 8005ba2:	9202      	str	r2, [sp, #8]
 8005ba4:	e7d9      	b.n	8005b5a <_vfprintf_r+0x76a>
 8005ba6:	9b03      	ldr	r3, [sp, #12]
 8005ba8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005baa:	2a00      	cmp	r2, #0
 8005bac:	440b      	add	r3, r1
 8005bae:	dcf7      	bgt.n	8005ba0 <_vfprintf_r+0x7b0>
 8005bb0:	f1c2 0201 	rsb	r2, r2, #1
 8005bb4:	e7f3      	b.n	8005b9e <_vfprintf_r+0x7ae>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e7cf      	b.n	8005b5a <_vfprintf_r+0x76a>
 8005bba:	4613      	mov	r3, r2
 8005bbc:	e7f0      	b.n	8005ba0 <_vfprintf_r+0x7b0>
 8005bbe:	b10b      	cbz	r3, 8005bc4 <_vfprintf_r+0x7d4>
 8005bc0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005bc4:	f015 0f20 	tst.w	r5, #32
 8005bc8:	f107 0304 	add.w	r3, r7, #4
 8005bcc:	d008      	beq.n	8005be0 <_vfprintf_r+0x7f0>
 8005bce:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	17ce      	asrs	r6, r1, #31
 8005bd4:	4608      	mov	r0, r1
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	e9c2 0100 	strd	r0, r1, [r2]
 8005bdc:	461f      	mov	r7, r3
 8005bde:	e494      	b.n	800550a <_vfprintf_r+0x11a>
 8005be0:	06e9      	lsls	r1, r5, #27
 8005be2:	d503      	bpl.n	8005bec <_vfprintf_r+0x7fc>
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005be8:	6011      	str	r1, [r2, #0]
 8005bea:	e7f7      	b.n	8005bdc <_vfprintf_r+0x7ec>
 8005bec:	066a      	lsls	r2, r5, #25
 8005bee:	d5f9      	bpl.n	8005be4 <_vfprintf_r+0x7f4>
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8005bf6:	8011      	strh	r1, [r2, #0]
 8005bf8:	e7f0      	b.n	8005bdc <_vfprintf_r+0x7ec>
 8005bfa:	f045 0510 	orr.w	r5, r5, #16
 8005bfe:	f015 0320 	ands.w	r3, r5, #32
 8005c02:	d022      	beq.n	8005c4a <_vfprintf_r+0x85a>
 8005c04:	3707      	adds	r7, #7
 8005c06:	f027 0707 	bic.w	r7, r7, #7
 8005c0a:	f107 0308 	add.w	r3, r7, #8
 8005c0e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005c12:	9304      	str	r3, [sp, #16]
 8005c14:	2300      	movs	r3, #0
 8005c16:	2200      	movs	r2, #0
 8005c18:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005c1c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005c20:	f000 83e8 	beq.w	80063f4 <_vfprintf_r+0x1004>
 8005c24:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8005c28:	9208      	str	r2, [sp, #32]
 8005c2a:	ea56 0207 	orrs.w	r2, r6, r7
 8005c2e:	f040 83e6 	bne.w	80063fe <_vfprintf_r+0x100e>
 8005c32:	f1ba 0f00 	cmp.w	sl, #0
 8005c36:	f000 80a9 	beq.w	8005d8c <_vfprintf_r+0x99c>
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d075      	beq.n	8005d2a <_vfprintf_r+0x93a>
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	f000 8090 	beq.w	8005d64 <_vfprintf_r+0x974>
 8005c44:	2600      	movs	r6, #0
 8005c46:	2700      	movs	r7, #0
 8005c48:	e3df      	b.n	800640a <_vfprintf_r+0x101a>
 8005c4a:	1d3a      	adds	r2, r7, #4
 8005c4c:	f015 0110 	ands.w	r1, r5, #16
 8005c50:	9204      	str	r2, [sp, #16]
 8005c52:	d002      	beq.n	8005c5a <_vfprintf_r+0x86a>
 8005c54:	683e      	ldr	r6, [r7, #0]
 8005c56:	2700      	movs	r7, #0
 8005c58:	e7dd      	b.n	8005c16 <_vfprintf_r+0x826>
 8005c5a:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8005c5e:	d0f9      	beq.n	8005c54 <_vfprintf_r+0x864>
 8005c60:	883e      	ldrh	r6, [r7, #0]
 8005c62:	2700      	movs	r7, #0
 8005c64:	e7d6      	b.n	8005c14 <_vfprintf_r+0x824>
 8005c66:	1d3b      	adds	r3, r7, #4
 8005c68:	9304      	str	r3, [sp, #16]
 8005c6a:	2330      	movs	r3, #48	; 0x30
 8005c6c:	2278      	movs	r2, #120	; 0x78
 8005c6e:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8005c72:	4b14      	ldr	r3, [pc, #80]	; (8005cc4 <_vfprintf_r+0x8d4>)
 8005c74:	683e      	ldr	r6, [r7, #0]
 8005c76:	9311      	str	r3, [sp, #68]	; 0x44
 8005c78:	2700      	movs	r7, #0
 8005c7a:	f045 0502 	orr.w	r5, r5, #2
 8005c7e:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8005c82:	2302      	movs	r3, #2
 8005c84:	9202      	str	r2, [sp, #8]
 8005c86:	e7c6      	b.n	8005c16 <_vfprintf_r+0x826>
 8005c88:	1d3b      	adds	r3, r7, #4
 8005c8a:	2600      	movs	r6, #0
 8005c8c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005c90:	9304      	str	r3, [sp, #16]
 8005c92:	f8d7 9000 	ldr.w	r9, [r7]
 8005c96:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005c9a:	d00a      	beq.n	8005cb2 <_vfprintf_r+0x8c2>
 8005c9c:	4652      	mov	r2, sl
 8005c9e:	4631      	mov	r1, r6
 8005ca0:	4648      	mov	r0, r9
 8005ca2:	f7fa fa95 	bl	80001d0 <memchr>
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	f000 808c 	beq.w	8005dc4 <_vfprintf_r+0x9d4>
 8005cac:	eba0 0a09 	sub.w	sl, r0, r9
 8005cb0:	e5cb      	b.n	800584a <_vfprintf_r+0x45a>
 8005cb2:	4648      	mov	r0, r9
 8005cb4:	f7fa fadc 	bl	8000270 <strlen>
 8005cb8:	4682      	mov	sl, r0
 8005cba:	e5c6      	b.n	800584a <_vfprintf_r+0x45a>
 8005cbc:	08008d56 	.word	0x08008d56
 8005cc0:	08008d66 	.word	0x08008d66
 8005cc4:	08008d43 	.word	0x08008d43
 8005cc8:	f045 0510 	orr.w	r5, r5, #16
 8005ccc:	06ae      	lsls	r6, r5, #26
 8005cce:	d509      	bpl.n	8005ce4 <_vfprintf_r+0x8f4>
 8005cd0:	3707      	adds	r7, #7
 8005cd2:	f027 0707 	bic.w	r7, r7, #7
 8005cd6:	f107 0308 	add.w	r3, r7, #8
 8005cda:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005cde:	9304      	str	r3, [sp, #16]
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e798      	b.n	8005c16 <_vfprintf_r+0x826>
 8005ce4:	1d3b      	adds	r3, r7, #4
 8005ce6:	f015 0f10 	tst.w	r5, #16
 8005cea:	9304      	str	r3, [sp, #16]
 8005cec:	d001      	beq.n	8005cf2 <_vfprintf_r+0x902>
 8005cee:	683e      	ldr	r6, [r7, #0]
 8005cf0:	e002      	b.n	8005cf8 <_vfprintf_r+0x908>
 8005cf2:	0668      	lsls	r0, r5, #25
 8005cf4:	d5fb      	bpl.n	8005cee <_vfprintf_r+0x8fe>
 8005cf6:	883e      	ldrh	r6, [r7, #0]
 8005cf8:	2700      	movs	r7, #0
 8005cfa:	e7f1      	b.n	8005ce0 <_vfprintf_r+0x8f0>
 8005cfc:	b10b      	cbz	r3, 8005d02 <_vfprintf_r+0x912>
 8005cfe:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005d02:	4ba2      	ldr	r3, [pc, #648]	; (8005f8c <_vfprintf_r+0xb9c>)
 8005d04:	e4ca      	b.n	800569c <_vfprintf_r+0x2ac>
 8005d06:	1d3b      	adds	r3, r7, #4
 8005d08:	f015 0f10 	tst.w	r5, #16
 8005d0c:	9304      	str	r3, [sp, #16]
 8005d0e:	d001      	beq.n	8005d14 <_vfprintf_r+0x924>
 8005d10:	683e      	ldr	r6, [r7, #0]
 8005d12:	e002      	b.n	8005d1a <_vfprintf_r+0x92a>
 8005d14:	066a      	lsls	r2, r5, #25
 8005d16:	d5fb      	bpl.n	8005d10 <_vfprintf_r+0x920>
 8005d18:	883e      	ldrh	r6, [r7, #0]
 8005d1a:	2700      	movs	r7, #0
 8005d1c:	e4ca      	b.n	80056b4 <_vfprintf_r+0x2c4>
 8005d1e:	464b      	mov	r3, r9
 8005d20:	e374      	b.n	800640c <_vfprintf_r+0x101c>
 8005d22:	2f00      	cmp	r7, #0
 8005d24:	bf08      	it	eq
 8005d26:	2e0a      	cmpeq	r6, #10
 8005d28:	d205      	bcs.n	8005d36 <_vfprintf_r+0x946>
 8005d2a:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 8005d2e:	3630      	adds	r6, #48	; 0x30
 8005d30:	f809 6d41 	strb.w	r6, [r9, #-65]!
 8005d34:	e385      	b.n	8006442 <_vfprintf_r+0x1052>
 8005d36:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	4639      	mov	r1, r7
 8005d3e:	220a      	movs	r2, #10
 8005d40:	2300      	movs	r3, #0
 8005d42:	f7fa ff7d 	bl	8000c40 <__aeabi_uldivmod>
 8005d46:	3230      	adds	r2, #48	; 0x30
 8005d48:	f809 2d01 	strb.w	r2, [r9, #-1]!
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	4630      	mov	r0, r6
 8005d50:	4639      	mov	r1, r7
 8005d52:	220a      	movs	r2, #10
 8005d54:	f7fa ff74 	bl	8000c40 <__aeabi_uldivmod>
 8005d58:	4606      	mov	r6, r0
 8005d5a:	460f      	mov	r7, r1
 8005d5c:	ea56 0307 	orrs.w	r3, r6, r7
 8005d60:	d1eb      	bne.n	8005d3a <_vfprintf_r+0x94a>
 8005d62:	e36e      	b.n	8006442 <_vfprintf_r+0x1052>
 8005d64:	2600      	movs	r6, #0
 8005d66:	2700      	movs	r7, #0
 8005d68:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8005d6c:	f006 030f 	and.w	r3, r6, #15
 8005d70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005d72:	5cd3      	ldrb	r3, [r2, r3]
 8005d74:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8005d78:	0933      	lsrs	r3, r6, #4
 8005d7a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005d7e:	093a      	lsrs	r2, r7, #4
 8005d80:	461e      	mov	r6, r3
 8005d82:	4617      	mov	r7, r2
 8005d84:	ea56 0307 	orrs.w	r3, r6, r7
 8005d88:	d1f0      	bne.n	8005d6c <_vfprintf_r+0x97c>
 8005d8a:	e35a      	b.n	8006442 <_vfprintf_r+0x1052>
 8005d8c:	b93b      	cbnz	r3, 8005d9e <_vfprintf_r+0x9ae>
 8005d8e:	07e8      	lsls	r0, r5, #31
 8005d90:	d505      	bpl.n	8005d9e <_vfprintf_r+0x9ae>
 8005d92:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 8005d96:	2330      	movs	r3, #48	; 0x30
 8005d98:	f809 3d41 	strb.w	r3, [r9, #-65]!
 8005d9c:	e351      	b.n	8006442 <_vfprintf_r+0x1052>
 8005d9e:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8005da2:	e34e      	b.n	8006442 <_vfprintf_r+0x1052>
 8005da4:	b10b      	cbz	r3, 8005daa <_vfprintf_r+0x9ba>
 8005da6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005daa:	9b02      	ldr	r3, [sp, #8]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 8302 	beq.w	80063b6 <_vfprintf_r+0xfc6>
 8005db2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005db6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8005dba:	2600      	movs	r6, #0
 8005dbc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005dc0:	9704      	str	r7, [sp, #16]
 8005dc2:	e4e9      	b.n	8005798 <_vfprintf_r+0x3a8>
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	e540      	b.n	800584a <_vfprintf_r+0x45a>
 8005dc8:	2310      	movs	r3, #16
 8005dca:	6063      	str	r3, [r4, #4]
 8005dcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dce:	3310      	adds	r3, #16
 8005dd0:	9321      	str	r3, [sp, #132]	; 0x84
 8005dd2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	2b07      	cmp	r3, #7
 8005dd8:	9320      	str	r3, [sp, #128]	; 0x80
 8005dda:	dc02      	bgt.n	8005de2 <_vfprintf_r+0x9f2>
 8005ddc:	3408      	adds	r4, #8
 8005dde:	3f10      	subs	r7, #16
 8005de0:	e61a      	b.n	8005a18 <_vfprintf_r+0x628>
 8005de2:	aa1f      	add	r2, sp, #124	; 0x7c
 8005de4:	4641      	mov	r1, r8
 8005de6:	4658      	mov	r0, fp
 8005de8:	f002 f8af 	bl	8007f4a <__sprint_r>
 8005dec:	2800      	cmp	r0, #0
 8005dee:	f040 82ba 	bne.w	8006366 <_vfprintf_r+0xf76>
 8005df2:	ac2c      	add	r4, sp, #176	; 0xb0
 8005df4:	e7f3      	b.n	8005dde <_vfprintf_r+0x9ee>
 8005df6:	aa1f      	add	r2, sp, #124	; 0x7c
 8005df8:	4641      	mov	r1, r8
 8005dfa:	4658      	mov	r0, fp
 8005dfc:	f002 f8a5 	bl	8007f4a <__sprint_r>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	f040 82b0 	bne.w	8006366 <_vfprintf_r+0xf76>
 8005e06:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e08:	e616      	b.n	8005a38 <_vfprintf_r+0x648>
 8005e0a:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e0c:	4641      	mov	r1, r8
 8005e0e:	4658      	mov	r0, fp
 8005e10:	f002 f89b 	bl	8007f4a <__sprint_r>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	f040 82a6 	bne.w	8006366 <_vfprintf_r+0xf76>
 8005e1a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e1c:	e61e      	b.n	8005a5c <_vfprintf_r+0x66c>
 8005e1e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e20:	4641      	mov	r1, r8
 8005e22:	4658      	mov	r0, fp
 8005e24:	f002 f891 	bl	8007f4a <__sprint_r>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	f040 829c 	bne.w	8006366 <_vfprintf_r+0xf76>
 8005e2e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e30:	e624      	b.n	8005a7c <_vfprintf_r+0x68c>
 8005e32:	2210      	movs	r2, #16
 8005e34:	6062      	str	r2, [r4, #4]
 8005e36:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e38:	3210      	adds	r2, #16
 8005e3a:	9221      	str	r2, [sp, #132]	; 0x84
 8005e3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e3e:	3201      	adds	r2, #1
 8005e40:	2a07      	cmp	r2, #7
 8005e42:	9220      	str	r2, [sp, #128]	; 0x80
 8005e44:	dc02      	bgt.n	8005e4c <_vfprintf_r+0xa5c>
 8005e46:	3408      	adds	r4, #8
 8005e48:	3f10      	subs	r7, #16
 8005e4a:	e620      	b.n	8005a8e <_vfprintf_r+0x69e>
 8005e4c:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e4e:	4641      	mov	r1, r8
 8005e50:	4658      	mov	r0, fp
 8005e52:	9314      	str	r3, [sp, #80]	; 0x50
 8005e54:	f002 f879 	bl	8007f4a <__sprint_r>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	f040 8284 	bne.w	8006366 <_vfprintf_r+0xf76>
 8005e5e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e62:	e7f1      	b.n	8005e48 <_vfprintf_r+0xa58>
 8005e64:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e66:	4641      	mov	r1, r8
 8005e68:	4658      	mov	r0, fp
 8005e6a:	f002 f86e 	bl	8007f4a <__sprint_r>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	f040 8279 	bne.w	8006366 <_vfprintf_r+0xf76>
 8005e74:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e76:	e619      	b.n	8005aac <_vfprintf_r+0x6bc>
 8005e78:	2310      	movs	r3, #16
 8005e7a:	6063      	str	r3, [r4, #4]
 8005e7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e7e:	3310      	adds	r3, #16
 8005e80:	9321      	str	r3, [sp, #132]	; 0x84
 8005e82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005e84:	3301      	adds	r3, #1
 8005e86:	2b07      	cmp	r3, #7
 8005e88:	9320      	str	r3, [sp, #128]	; 0x80
 8005e8a:	dc02      	bgt.n	8005e92 <_vfprintf_r+0xaa2>
 8005e8c:	3408      	adds	r4, #8
 8005e8e:	3e10      	subs	r6, #16
 8005e90:	e611      	b.n	8005ab6 <_vfprintf_r+0x6c6>
 8005e92:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e94:	4641      	mov	r1, r8
 8005e96:	4658      	mov	r0, fp
 8005e98:	f002 f857 	bl	8007f4a <__sprint_r>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	f040 8262 	bne.w	8006366 <_vfprintf_r+0xf76>
 8005ea2:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ea4:	e7f3      	b.n	8005e8e <_vfprintf_r+0xa9e>
 8005ea6:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ea8:	4641      	mov	r1, r8
 8005eaa:	4658      	mov	r0, fp
 8005eac:	f002 f84d 	bl	8007f4a <__sprint_r>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	f040 8258 	bne.w	8006366 <_vfprintf_r+0xf76>
 8005eb6:	ac2c      	add	r4, sp, #176	; 0xb0
 8005eb8:	e60c      	b.n	8005ad4 <_vfprintf_r+0x6e4>
 8005eba:	9b02      	ldr	r3, [sp, #8]
 8005ebc:	2b65      	cmp	r3, #101	; 0x65
 8005ebe:	f340 81ad 	ble.w	800621c <_vfprintf_r+0xe2c>
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005eca:	f7fa fdf9 	bl	8000ac0 <__aeabi_dcmpeq>
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	d062      	beq.n	8005f98 <_vfprintf_r+0xba8>
 8005ed2:	4b2f      	ldr	r3, [pc, #188]	; (8005f90 <_vfprintf_r+0xba0>)
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	6063      	str	r3, [r4, #4]
 8005eda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005edc:	3301      	adds	r3, #1
 8005ede:	9321      	str	r3, [sp, #132]	; 0x84
 8005ee0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	2b07      	cmp	r3, #7
 8005ee6:	9320      	str	r3, [sp, #128]	; 0x80
 8005ee8:	dc25      	bgt.n	8005f36 <_vfprintf_r+0xb46>
 8005eea:	3408      	adds	r4, #8
 8005eec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005eee:	9a03      	ldr	r2, [sp, #12]
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	db02      	blt.n	8005efa <_vfprintf_r+0xb0a>
 8005ef4:	07ea      	lsls	r2, r5, #31
 8005ef6:	f57f ae04 	bpl.w	8005b02 <_vfprintf_r+0x712>
 8005efa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f00:	6063      	str	r3, [r4, #4]
 8005f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f06:	4413      	add	r3, r2
 8005f08:	9321      	str	r3, [sp, #132]	; 0x84
 8005f0a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	2b07      	cmp	r3, #7
 8005f10:	9320      	str	r3, [sp, #128]	; 0x80
 8005f12:	dc1a      	bgt.n	8005f4a <_vfprintf_r+0xb5a>
 8005f14:	3408      	adds	r4, #8
 8005f16:	9b03      	ldr	r3, [sp, #12]
 8005f18:	1e5e      	subs	r6, r3, #1
 8005f1a:	2e00      	cmp	r6, #0
 8005f1c:	f77f adf1 	ble.w	8005b02 <_vfprintf_r+0x712>
 8005f20:	4f1c      	ldr	r7, [pc, #112]	; (8005f94 <_vfprintf_r+0xba4>)
 8005f22:	f04f 0910 	mov.w	r9, #16
 8005f26:	2e10      	cmp	r6, #16
 8005f28:	6027      	str	r7, [r4, #0]
 8005f2a:	dc18      	bgt.n	8005f5e <_vfprintf_r+0xb6e>
 8005f2c:	6066      	str	r6, [r4, #4]
 8005f2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f30:	441e      	add	r6, r3
 8005f32:	9621      	str	r6, [sp, #132]	; 0x84
 8005f34:	e5d6      	b.n	8005ae4 <_vfprintf_r+0x6f4>
 8005f36:	aa1f      	add	r2, sp, #124	; 0x7c
 8005f38:	4641      	mov	r1, r8
 8005f3a:	4658      	mov	r0, fp
 8005f3c:	f002 f805 	bl	8007f4a <__sprint_r>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	f040 8210 	bne.w	8006366 <_vfprintf_r+0xf76>
 8005f46:	ac2c      	add	r4, sp, #176	; 0xb0
 8005f48:	e7d0      	b.n	8005eec <_vfprintf_r+0xafc>
 8005f4a:	aa1f      	add	r2, sp, #124	; 0x7c
 8005f4c:	4641      	mov	r1, r8
 8005f4e:	4658      	mov	r0, fp
 8005f50:	f001 fffb 	bl	8007f4a <__sprint_r>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	f040 8206 	bne.w	8006366 <_vfprintf_r+0xf76>
 8005f5a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005f5c:	e7db      	b.n	8005f16 <_vfprintf_r+0xb26>
 8005f5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f60:	f8c4 9004 	str.w	r9, [r4, #4]
 8005f64:	3310      	adds	r3, #16
 8005f66:	9321      	str	r3, [sp, #132]	; 0x84
 8005f68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	2b07      	cmp	r3, #7
 8005f6e:	9320      	str	r3, [sp, #128]	; 0x80
 8005f70:	dc02      	bgt.n	8005f78 <_vfprintf_r+0xb88>
 8005f72:	3408      	adds	r4, #8
 8005f74:	3e10      	subs	r6, #16
 8005f76:	e7d6      	b.n	8005f26 <_vfprintf_r+0xb36>
 8005f78:	aa1f      	add	r2, sp, #124	; 0x7c
 8005f7a:	4641      	mov	r1, r8
 8005f7c:	4658      	mov	r0, fp
 8005f7e:	f001 ffe4 	bl	8007f4a <__sprint_r>
 8005f82:	2800      	cmp	r0, #0
 8005f84:	f040 81ef 	bne.w	8006366 <_vfprintf_r+0xf76>
 8005f88:	ac2c      	add	r4, sp, #176	; 0xb0
 8005f8a:	e7f3      	b.n	8005f74 <_vfprintf_r+0xb84>
 8005f8c:	08008d43 	.word	0x08008d43
 8005f90:	08008d54 	.word	0x08008d54
 8005f94:	08008d66 	.word	0x08008d66
 8005f98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	dc7a      	bgt.n	8006094 <_vfprintf_r+0xca4>
 8005f9e:	4b9d      	ldr	r3, [pc, #628]	; (8006214 <_vfprintf_r+0xe24>)
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	6063      	str	r3, [r4, #4]
 8005fa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fa8:	3301      	adds	r3, #1
 8005faa:	9321      	str	r3, [sp, #132]	; 0x84
 8005fac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005fae:	3301      	adds	r3, #1
 8005fb0:	2b07      	cmp	r3, #7
 8005fb2:	9320      	str	r3, [sp, #128]	; 0x80
 8005fb4:	dc44      	bgt.n	8006040 <_vfprintf_r+0xc50>
 8005fb6:	3408      	adds	r4, #8
 8005fb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005fba:	b923      	cbnz	r3, 8005fc6 <_vfprintf_r+0xbd6>
 8005fbc:	9b03      	ldr	r3, [sp, #12]
 8005fbe:	b913      	cbnz	r3, 8005fc6 <_vfprintf_r+0xbd6>
 8005fc0:	07eb      	lsls	r3, r5, #31
 8005fc2:	f57f ad9e 	bpl.w	8005b02 <_vfprintf_r+0x712>
 8005fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fc8:	6023      	str	r3, [r4, #0]
 8005fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fcc:	6063      	str	r3, [r4, #4]
 8005fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fd2:	4413      	add	r3, r2
 8005fd4:	9321      	str	r3, [sp, #132]	; 0x84
 8005fd6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005fd8:	3301      	adds	r3, #1
 8005fda:	2b07      	cmp	r3, #7
 8005fdc:	9320      	str	r3, [sp, #128]	; 0x80
 8005fde:	dc39      	bgt.n	8006054 <_vfprintf_r+0xc64>
 8005fe0:	f104 0308 	add.w	r3, r4, #8
 8005fe4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005fe6:	2e00      	cmp	r6, #0
 8005fe8:	da19      	bge.n	800601e <_vfprintf_r+0xc2e>
 8005fea:	4f8b      	ldr	r7, [pc, #556]	; (8006218 <_vfprintf_r+0xe28>)
 8005fec:	4276      	negs	r6, r6
 8005fee:	2410      	movs	r4, #16
 8005ff0:	2e10      	cmp	r6, #16
 8005ff2:	601f      	str	r7, [r3, #0]
 8005ff4:	dc38      	bgt.n	8006068 <_vfprintf_r+0xc78>
 8005ff6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ff8:	605e      	str	r6, [r3, #4]
 8005ffa:	4416      	add	r6, r2
 8005ffc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005ffe:	9621      	str	r6, [sp, #132]	; 0x84
 8006000:	3201      	adds	r2, #1
 8006002:	2a07      	cmp	r2, #7
 8006004:	f103 0308 	add.w	r3, r3, #8
 8006008:	9220      	str	r2, [sp, #128]	; 0x80
 800600a:	dd08      	ble.n	800601e <_vfprintf_r+0xc2e>
 800600c:	aa1f      	add	r2, sp, #124	; 0x7c
 800600e:	4641      	mov	r1, r8
 8006010:	4658      	mov	r0, fp
 8006012:	f001 ff9a 	bl	8007f4a <__sprint_r>
 8006016:	2800      	cmp	r0, #0
 8006018:	f040 81a5 	bne.w	8006366 <_vfprintf_r+0xf76>
 800601c:	ab2c      	add	r3, sp, #176	; 0xb0
 800601e:	9a03      	ldr	r2, [sp, #12]
 8006020:	605a      	str	r2, [r3, #4]
 8006022:	9903      	ldr	r1, [sp, #12]
 8006024:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006026:	f8c3 9000 	str.w	r9, [r3]
 800602a:	440a      	add	r2, r1
 800602c:	9221      	str	r2, [sp, #132]	; 0x84
 800602e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006030:	3201      	adds	r2, #1
 8006032:	2a07      	cmp	r2, #7
 8006034:	9220      	str	r2, [sp, #128]	; 0x80
 8006036:	f73f ad5b 	bgt.w	8005af0 <_vfprintf_r+0x700>
 800603a:	f103 0408 	add.w	r4, r3, #8
 800603e:	e560      	b.n	8005b02 <_vfprintf_r+0x712>
 8006040:	aa1f      	add	r2, sp, #124	; 0x7c
 8006042:	4641      	mov	r1, r8
 8006044:	4658      	mov	r0, fp
 8006046:	f001 ff80 	bl	8007f4a <__sprint_r>
 800604a:	2800      	cmp	r0, #0
 800604c:	f040 818b 	bne.w	8006366 <_vfprintf_r+0xf76>
 8006050:	ac2c      	add	r4, sp, #176	; 0xb0
 8006052:	e7b1      	b.n	8005fb8 <_vfprintf_r+0xbc8>
 8006054:	aa1f      	add	r2, sp, #124	; 0x7c
 8006056:	4641      	mov	r1, r8
 8006058:	4658      	mov	r0, fp
 800605a:	f001 ff76 	bl	8007f4a <__sprint_r>
 800605e:	2800      	cmp	r0, #0
 8006060:	f040 8181 	bne.w	8006366 <_vfprintf_r+0xf76>
 8006064:	ab2c      	add	r3, sp, #176	; 0xb0
 8006066:	e7bd      	b.n	8005fe4 <_vfprintf_r+0xbf4>
 8006068:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800606a:	605c      	str	r4, [r3, #4]
 800606c:	3210      	adds	r2, #16
 800606e:	9221      	str	r2, [sp, #132]	; 0x84
 8006070:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006072:	3201      	adds	r2, #1
 8006074:	2a07      	cmp	r2, #7
 8006076:	9220      	str	r2, [sp, #128]	; 0x80
 8006078:	dc02      	bgt.n	8006080 <_vfprintf_r+0xc90>
 800607a:	3308      	adds	r3, #8
 800607c:	3e10      	subs	r6, #16
 800607e:	e7b7      	b.n	8005ff0 <_vfprintf_r+0xc00>
 8006080:	aa1f      	add	r2, sp, #124	; 0x7c
 8006082:	4641      	mov	r1, r8
 8006084:	4658      	mov	r0, fp
 8006086:	f001 ff60 	bl	8007f4a <__sprint_r>
 800608a:	2800      	cmp	r0, #0
 800608c:	f040 816b 	bne.w	8006366 <_vfprintf_r+0xf76>
 8006090:	ab2c      	add	r3, sp, #176	; 0xb0
 8006092:	e7f3      	b.n	800607c <_vfprintf_r+0xc8c>
 8006094:	9b08      	ldr	r3, [sp, #32]
 8006096:	9a03      	ldr	r2, [sp, #12]
 8006098:	4293      	cmp	r3, r2
 800609a:	bfa8      	it	ge
 800609c:	4613      	movge	r3, r2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	461e      	mov	r6, r3
 80060a2:	dd0b      	ble.n	80060bc <_vfprintf_r+0xccc>
 80060a4:	6063      	str	r3, [r4, #4]
 80060a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060a8:	f8c4 9000 	str.w	r9, [r4]
 80060ac:	4433      	add	r3, r6
 80060ae:	9321      	str	r3, [sp, #132]	; 0x84
 80060b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80060b2:	3301      	adds	r3, #1
 80060b4:	2b07      	cmp	r3, #7
 80060b6:	9320      	str	r3, [sp, #128]	; 0x80
 80060b8:	dc62      	bgt.n	8006180 <_vfprintf_r+0xd90>
 80060ba:	3408      	adds	r4, #8
 80060bc:	9b08      	ldr	r3, [sp, #32]
 80060be:	2e00      	cmp	r6, #0
 80060c0:	bfa8      	it	ge
 80060c2:	1b9b      	subge	r3, r3, r6
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	461e      	mov	r6, r3
 80060c8:	dd0f      	ble.n	80060ea <_vfprintf_r+0xcfa>
 80060ca:	4f53      	ldr	r7, [pc, #332]	; (8006218 <_vfprintf_r+0xe28>)
 80060cc:	f04f 0a10 	mov.w	sl, #16
 80060d0:	2e10      	cmp	r6, #16
 80060d2:	6027      	str	r7, [r4, #0]
 80060d4:	dc5e      	bgt.n	8006194 <_vfprintf_r+0xda4>
 80060d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060d8:	6066      	str	r6, [r4, #4]
 80060da:	441e      	add	r6, r3
 80060dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80060de:	9621      	str	r6, [sp, #132]	; 0x84
 80060e0:	3301      	adds	r3, #1
 80060e2:	2b07      	cmp	r3, #7
 80060e4:	9320      	str	r3, [sp, #128]	; 0x80
 80060e6:	dc6c      	bgt.n	80061c2 <_vfprintf_r+0xdd2>
 80060e8:	3408      	adds	r4, #8
 80060ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80060ec:	9a03      	ldr	r2, [sp, #12]
 80060ee:	4293      	cmp	r3, r2
 80060f0:	db01      	blt.n	80060f6 <_vfprintf_r+0xd06>
 80060f2:	07ef      	lsls	r7, r5, #31
 80060f4:	d50d      	bpl.n	8006112 <_vfprintf_r+0xd22>
 80060f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060f8:	6023      	str	r3, [r4, #0]
 80060fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060fc:	6063      	str	r3, [r4, #4]
 80060fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006100:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006102:	4413      	add	r3, r2
 8006104:	9321      	str	r3, [sp, #132]	; 0x84
 8006106:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006108:	3301      	adds	r3, #1
 800610a:	2b07      	cmp	r3, #7
 800610c:	9320      	str	r3, [sp, #128]	; 0x80
 800610e:	dc62      	bgt.n	80061d6 <_vfprintf_r+0xde6>
 8006110:	3408      	adds	r4, #8
 8006112:	9b03      	ldr	r3, [sp, #12]
 8006114:	9a08      	ldr	r2, [sp, #32]
 8006116:	1a9e      	subs	r6, r3, r2
 8006118:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800611a:	9a03      	ldr	r2, [sp, #12]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	429e      	cmp	r6, r3
 8006120:	bfa8      	it	ge
 8006122:	461e      	movge	r6, r3
 8006124:	2e00      	cmp	r6, #0
 8006126:	dd0c      	ble.n	8006142 <_vfprintf_r+0xd52>
 8006128:	9b08      	ldr	r3, [sp, #32]
 800612a:	444b      	add	r3, r9
 800612c:	e884 0048 	stmia.w	r4, {r3, r6}
 8006130:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006132:	4433      	add	r3, r6
 8006134:	9321      	str	r3, [sp, #132]	; 0x84
 8006136:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006138:	3301      	adds	r3, #1
 800613a:	2b07      	cmp	r3, #7
 800613c:	9320      	str	r3, [sp, #128]	; 0x80
 800613e:	dc54      	bgt.n	80061ea <_vfprintf_r+0xdfa>
 8006140:	3408      	adds	r4, #8
 8006142:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006144:	9a03      	ldr	r2, [sp, #12]
 8006146:	2e00      	cmp	r6, #0
 8006148:	eba2 0303 	sub.w	r3, r2, r3
 800614c:	bfac      	ite	ge
 800614e:	1b9e      	subge	r6, r3, r6
 8006150:	461e      	movlt	r6, r3
 8006152:	2e00      	cmp	r6, #0
 8006154:	f77f acd5 	ble.w	8005b02 <_vfprintf_r+0x712>
 8006158:	4f2f      	ldr	r7, [pc, #188]	; (8006218 <_vfprintf_r+0xe28>)
 800615a:	f04f 0910 	mov.w	r9, #16
 800615e:	2e10      	cmp	r6, #16
 8006160:	6027      	str	r7, [r4, #0]
 8006162:	f77f aee3 	ble.w	8005f2c <_vfprintf_r+0xb3c>
 8006166:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006168:	f8c4 9004 	str.w	r9, [r4, #4]
 800616c:	3310      	adds	r3, #16
 800616e:	9321      	str	r3, [sp, #132]	; 0x84
 8006170:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006172:	3301      	adds	r3, #1
 8006174:	2b07      	cmp	r3, #7
 8006176:	9320      	str	r3, [sp, #128]	; 0x80
 8006178:	dc41      	bgt.n	80061fe <_vfprintf_r+0xe0e>
 800617a:	3408      	adds	r4, #8
 800617c:	3e10      	subs	r6, #16
 800617e:	e7ee      	b.n	800615e <_vfprintf_r+0xd6e>
 8006180:	aa1f      	add	r2, sp, #124	; 0x7c
 8006182:	4641      	mov	r1, r8
 8006184:	4658      	mov	r0, fp
 8006186:	f001 fee0 	bl	8007f4a <__sprint_r>
 800618a:	2800      	cmp	r0, #0
 800618c:	f040 80eb 	bne.w	8006366 <_vfprintf_r+0xf76>
 8006190:	ac2c      	add	r4, sp, #176	; 0xb0
 8006192:	e793      	b.n	80060bc <_vfprintf_r+0xccc>
 8006194:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006196:	f8c4 a004 	str.w	sl, [r4, #4]
 800619a:	3310      	adds	r3, #16
 800619c:	9321      	str	r3, [sp, #132]	; 0x84
 800619e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80061a0:	3301      	adds	r3, #1
 80061a2:	2b07      	cmp	r3, #7
 80061a4:	9320      	str	r3, [sp, #128]	; 0x80
 80061a6:	dc02      	bgt.n	80061ae <_vfprintf_r+0xdbe>
 80061a8:	3408      	adds	r4, #8
 80061aa:	3e10      	subs	r6, #16
 80061ac:	e790      	b.n	80060d0 <_vfprintf_r+0xce0>
 80061ae:	aa1f      	add	r2, sp, #124	; 0x7c
 80061b0:	4641      	mov	r1, r8
 80061b2:	4658      	mov	r0, fp
 80061b4:	f001 fec9 	bl	8007f4a <__sprint_r>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	f040 80d4 	bne.w	8006366 <_vfprintf_r+0xf76>
 80061be:	ac2c      	add	r4, sp, #176	; 0xb0
 80061c0:	e7f3      	b.n	80061aa <_vfprintf_r+0xdba>
 80061c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80061c4:	4641      	mov	r1, r8
 80061c6:	4658      	mov	r0, fp
 80061c8:	f001 febf 	bl	8007f4a <__sprint_r>
 80061cc:	2800      	cmp	r0, #0
 80061ce:	f040 80ca 	bne.w	8006366 <_vfprintf_r+0xf76>
 80061d2:	ac2c      	add	r4, sp, #176	; 0xb0
 80061d4:	e789      	b.n	80060ea <_vfprintf_r+0xcfa>
 80061d6:	aa1f      	add	r2, sp, #124	; 0x7c
 80061d8:	4641      	mov	r1, r8
 80061da:	4658      	mov	r0, fp
 80061dc:	f001 feb5 	bl	8007f4a <__sprint_r>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	f040 80c0 	bne.w	8006366 <_vfprintf_r+0xf76>
 80061e6:	ac2c      	add	r4, sp, #176	; 0xb0
 80061e8:	e793      	b.n	8006112 <_vfprintf_r+0xd22>
 80061ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80061ec:	4641      	mov	r1, r8
 80061ee:	4658      	mov	r0, fp
 80061f0:	f001 feab 	bl	8007f4a <__sprint_r>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	f040 80b6 	bne.w	8006366 <_vfprintf_r+0xf76>
 80061fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80061fc:	e7a1      	b.n	8006142 <_vfprintf_r+0xd52>
 80061fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8006200:	4641      	mov	r1, r8
 8006202:	4658      	mov	r0, fp
 8006204:	f001 fea1 	bl	8007f4a <__sprint_r>
 8006208:	2800      	cmp	r0, #0
 800620a:	f040 80ac 	bne.w	8006366 <_vfprintf_r+0xf76>
 800620e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006210:	e7b4      	b.n	800617c <_vfprintf_r+0xd8c>
 8006212:	bf00      	nop
 8006214:	08008d54 	.word	0x08008d54
 8006218:	08008d66 	.word	0x08008d66
 800621c:	9b03      	ldr	r3, [sp, #12]
 800621e:	2b01      	cmp	r3, #1
 8006220:	dc01      	bgt.n	8006226 <_vfprintf_r+0xe36>
 8006222:	07ee      	lsls	r6, r5, #31
 8006224:	d576      	bpl.n	8006314 <_vfprintf_r+0xf24>
 8006226:	2301      	movs	r3, #1
 8006228:	6063      	str	r3, [r4, #4]
 800622a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800622c:	f8c4 9000 	str.w	r9, [r4]
 8006230:	3301      	adds	r3, #1
 8006232:	9321      	str	r3, [sp, #132]	; 0x84
 8006234:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006236:	3301      	adds	r3, #1
 8006238:	2b07      	cmp	r3, #7
 800623a:	9320      	str	r3, [sp, #128]	; 0x80
 800623c:	dc36      	bgt.n	80062ac <_vfprintf_r+0xebc>
 800623e:	3408      	adds	r4, #8
 8006240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006242:	6023      	str	r3, [r4, #0]
 8006244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006246:	6063      	str	r3, [r4, #4]
 8006248:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800624a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800624c:	4413      	add	r3, r2
 800624e:	9321      	str	r3, [sp, #132]	; 0x84
 8006250:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006252:	3301      	adds	r3, #1
 8006254:	2b07      	cmp	r3, #7
 8006256:	9320      	str	r3, [sp, #128]	; 0x80
 8006258:	dc31      	bgt.n	80062be <_vfprintf_r+0xece>
 800625a:	3408      	adds	r4, #8
 800625c:	2300      	movs	r3, #0
 800625e:	2200      	movs	r2, #0
 8006260:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006264:	f7fa fc2c 	bl	8000ac0 <__aeabi_dcmpeq>
 8006268:	9b03      	ldr	r3, [sp, #12]
 800626a:	1e5e      	subs	r6, r3, #1
 800626c:	2800      	cmp	r0, #0
 800626e:	d12f      	bne.n	80062d0 <_vfprintf_r+0xee0>
 8006270:	f109 0301 	add.w	r3, r9, #1
 8006274:	e884 0048 	stmia.w	r4, {r3, r6}
 8006278:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800627a:	9a03      	ldr	r2, [sp, #12]
 800627c:	3b01      	subs	r3, #1
 800627e:	4413      	add	r3, r2
 8006280:	9321      	str	r3, [sp, #132]	; 0x84
 8006282:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006284:	3301      	adds	r3, #1
 8006286:	2b07      	cmp	r3, #7
 8006288:	9320      	str	r3, [sp, #128]	; 0x80
 800628a:	dd4a      	ble.n	8006322 <_vfprintf_r+0xf32>
 800628c:	aa1f      	add	r2, sp, #124	; 0x7c
 800628e:	4641      	mov	r1, r8
 8006290:	4658      	mov	r0, fp
 8006292:	f001 fe5a 	bl	8007f4a <__sprint_r>
 8006296:	2800      	cmp	r0, #0
 8006298:	d165      	bne.n	8006366 <_vfprintf_r+0xf76>
 800629a:	ac2c      	add	r4, sp, #176	; 0xb0
 800629c:	ab1b      	add	r3, sp, #108	; 0x6c
 800629e:	6023      	str	r3, [r4, #0]
 80062a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062a2:	6063      	str	r3, [r4, #4]
 80062a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80062a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062a8:	4413      	add	r3, r2
 80062aa:	e41a      	b.n	8005ae2 <_vfprintf_r+0x6f2>
 80062ac:	aa1f      	add	r2, sp, #124	; 0x7c
 80062ae:	4641      	mov	r1, r8
 80062b0:	4658      	mov	r0, fp
 80062b2:	f001 fe4a 	bl	8007f4a <__sprint_r>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d155      	bne.n	8006366 <_vfprintf_r+0xf76>
 80062ba:	ac2c      	add	r4, sp, #176	; 0xb0
 80062bc:	e7c0      	b.n	8006240 <_vfprintf_r+0xe50>
 80062be:	aa1f      	add	r2, sp, #124	; 0x7c
 80062c0:	4641      	mov	r1, r8
 80062c2:	4658      	mov	r0, fp
 80062c4:	f001 fe41 	bl	8007f4a <__sprint_r>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	d14c      	bne.n	8006366 <_vfprintf_r+0xf76>
 80062cc:	ac2c      	add	r4, sp, #176	; 0xb0
 80062ce:	e7c5      	b.n	800625c <_vfprintf_r+0xe6c>
 80062d0:	2e00      	cmp	r6, #0
 80062d2:	dde3      	ble.n	800629c <_vfprintf_r+0xeac>
 80062d4:	4f60      	ldr	r7, [pc, #384]	; (8006458 <_vfprintf_r+0x1068>)
 80062d6:	f04f 0910 	mov.w	r9, #16
 80062da:	2e10      	cmp	r6, #16
 80062dc:	6027      	str	r7, [r4, #0]
 80062de:	dc04      	bgt.n	80062ea <_vfprintf_r+0xefa>
 80062e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062e2:	6066      	str	r6, [r4, #4]
 80062e4:	441e      	add	r6, r3
 80062e6:	9621      	str	r6, [sp, #132]	; 0x84
 80062e8:	e7cb      	b.n	8006282 <_vfprintf_r+0xe92>
 80062ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062ec:	f8c4 9004 	str.w	r9, [r4, #4]
 80062f0:	3310      	adds	r3, #16
 80062f2:	9321      	str	r3, [sp, #132]	; 0x84
 80062f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80062f6:	3301      	adds	r3, #1
 80062f8:	2b07      	cmp	r3, #7
 80062fa:	9320      	str	r3, [sp, #128]	; 0x80
 80062fc:	dc02      	bgt.n	8006304 <_vfprintf_r+0xf14>
 80062fe:	3408      	adds	r4, #8
 8006300:	3e10      	subs	r6, #16
 8006302:	e7ea      	b.n	80062da <_vfprintf_r+0xeea>
 8006304:	aa1f      	add	r2, sp, #124	; 0x7c
 8006306:	4641      	mov	r1, r8
 8006308:	4658      	mov	r0, fp
 800630a:	f001 fe1e 	bl	8007f4a <__sprint_r>
 800630e:	bb50      	cbnz	r0, 8006366 <_vfprintf_r+0xf76>
 8006310:	ac2c      	add	r4, sp, #176	; 0xb0
 8006312:	e7f5      	b.n	8006300 <_vfprintf_r+0xf10>
 8006314:	2301      	movs	r3, #1
 8006316:	6063      	str	r3, [r4, #4]
 8006318:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800631a:	f8c4 9000 	str.w	r9, [r4]
 800631e:	3301      	adds	r3, #1
 8006320:	e7ae      	b.n	8006280 <_vfprintf_r+0xe90>
 8006322:	3408      	adds	r4, #8
 8006324:	e7ba      	b.n	800629c <_vfprintf_r+0xeac>
 8006326:	3408      	adds	r4, #8
 8006328:	f7ff bbeb 	b.w	8005b02 <_vfprintf_r+0x712>
 800632c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800632e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006330:	1a9d      	subs	r5, r3, r2
 8006332:	2d00      	cmp	r5, #0
 8006334:	f77f abe8 	ble.w	8005b08 <_vfprintf_r+0x718>
 8006338:	2610      	movs	r6, #16
 800633a:	4b48      	ldr	r3, [pc, #288]	; (800645c <_vfprintf_r+0x106c>)
 800633c:	6023      	str	r3, [r4, #0]
 800633e:	2d10      	cmp	r5, #16
 8006340:	dc24      	bgt.n	800638c <_vfprintf_r+0xf9c>
 8006342:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006344:	6065      	str	r5, [r4, #4]
 8006346:	441d      	add	r5, r3
 8006348:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800634a:	9521      	str	r5, [sp, #132]	; 0x84
 800634c:	3301      	adds	r3, #1
 800634e:	2b07      	cmp	r3, #7
 8006350:	9320      	str	r3, [sp, #128]	; 0x80
 8006352:	f77f abd9 	ble.w	8005b08 <_vfprintf_r+0x718>
 8006356:	aa1f      	add	r2, sp, #124	; 0x7c
 8006358:	4641      	mov	r1, r8
 800635a:	4658      	mov	r0, fp
 800635c:	f001 fdf5 	bl	8007f4a <__sprint_r>
 8006360:	2800      	cmp	r0, #0
 8006362:	f43f abd1 	beq.w	8005b08 <_vfprintf_r+0x718>
 8006366:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800636a:	07d9      	lsls	r1, r3, #31
 800636c:	d407      	bmi.n	800637e <_vfprintf_r+0xf8e>
 800636e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006372:	059a      	lsls	r2, r3, #22
 8006374:	d403      	bmi.n	800637e <_vfprintf_r+0xf8e>
 8006376:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800637a:	f001 fa66 	bl	800784a <__retarget_lock_release_recursive>
 800637e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006382:	065b      	lsls	r3, r3, #25
 8006384:	f57f a8af 	bpl.w	80054e6 <_vfprintf_r+0xf6>
 8006388:	f7ff b882 	b.w	8005490 <_vfprintf_r+0xa0>
 800638c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800638e:	6066      	str	r6, [r4, #4]
 8006390:	3310      	adds	r3, #16
 8006392:	9321      	str	r3, [sp, #132]	; 0x84
 8006394:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006396:	3301      	adds	r3, #1
 8006398:	2b07      	cmp	r3, #7
 800639a:	9320      	str	r3, [sp, #128]	; 0x80
 800639c:	dc02      	bgt.n	80063a4 <_vfprintf_r+0xfb4>
 800639e:	3408      	adds	r4, #8
 80063a0:	3d10      	subs	r5, #16
 80063a2:	e7ca      	b.n	800633a <_vfprintf_r+0xf4a>
 80063a4:	aa1f      	add	r2, sp, #124	; 0x7c
 80063a6:	4641      	mov	r1, r8
 80063a8:	4658      	mov	r0, fp
 80063aa:	f001 fdce 	bl	8007f4a <__sprint_r>
 80063ae:	2800      	cmp	r0, #0
 80063b0:	d1d9      	bne.n	8006366 <_vfprintf_r+0xf76>
 80063b2:	ac2c      	add	r4, sp, #176	; 0xb0
 80063b4:	e7f4      	b.n	80063a0 <_vfprintf_r+0xfb0>
 80063b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063b8:	b913      	cbnz	r3, 80063c0 <_vfprintf_r+0xfd0>
 80063ba:	2300      	movs	r3, #0
 80063bc:	9320      	str	r3, [sp, #128]	; 0x80
 80063be:	e7d2      	b.n	8006366 <_vfprintf_r+0xf76>
 80063c0:	aa1f      	add	r2, sp, #124	; 0x7c
 80063c2:	4641      	mov	r1, r8
 80063c4:	4658      	mov	r0, fp
 80063c6:	f001 fdc0 	bl	8007f4a <__sprint_r>
 80063ca:	2800      	cmp	r0, #0
 80063cc:	d0f5      	beq.n	80063ba <_vfprintf_r+0xfca>
 80063ce:	e7ca      	b.n	8006366 <_vfprintf_r+0xf76>
 80063d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063d4:	4610      	mov	r0, r2
 80063d6:	4619      	mov	r1, r3
 80063d8:	f7fa fba4 	bl	8000b24 <__aeabi_dcmpun>
 80063dc:	2800      	cmp	r0, #0
 80063de:	f43f aa36 	beq.w	800584e <_vfprintf_r+0x45e>
 80063e2:	4b1f      	ldr	r3, [pc, #124]	; (8006460 <_vfprintf_r+0x1070>)
 80063e4:	4a1f      	ldr	r2, [pc, #124]	; (8006464 <_vfprintf_r+0x1074>)
 80063e6:	f7ff ba26 	b.w	8005836 <_vfprintf_r+0x446>
 80063ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80063ec:	1a1b      	subs	r3, r3, r0
 80063ee:	9303      	str	r3, [sp, #12]
 80063f0:	f7ff baa9 	b.w	8005946 <_vfprintf_r+0x556>
 80063f4:	ea56 0207 	orrs.w	r2, r6, r7
 80063f8:	9508      	str	r5, [sp, #32]
 80063fa:	f43f ac1e 	beq.w	8005c3a <_vfprintf_r+0x84a>
 80063fe:	2b01      	cmp	r3, #1
 8006400:	f43f ac8f 	beq.w	8005d22 <_vfprintf_r+0x932>
 8006404:	2b02      	cmp	r3, #2
 8006406:	f43f acaf 	beq.w	8005d68 <_vfprintf_r+0x978>
 800640a:	ab2c      	add	r3, sp, #176	; 0xb0
 800640c:	08f1      	lsrs	r1, r6, #3
 800640e:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8006412:	08f8      	lsrs	r0, r7, #3
 8006414:	f006 0207 	and.w	r2, r6, #7
 8006418:	4607      	mov	r7, r0
 800641a:	460e      	mov	r6, r1
 800641c:	3230      	adds	r2, #48	; 0x30
 800641e:	ea56 0107 	orrs.w	r1, r6, r7
 8006422:	f103 39ff 	add.w	r9, r3, #4294967295
 8006426:	f803 2c01 	strb.w	r2, [r3, #-1]
 800642a:	f47f ac78 	bne.w	8005d1e <_vfprintf_r+0x92e>
 800642e:	9908      	ldr	r1, [sp, #32]
 8006430:	07cd      	lsls	r5, r1, #31
 8006432:	d506      	bpl.n	8006442 <_vfprintf_r+0x1052>
 8006434:	2a30      	cmp	r2, #48	; 0x30
 8006436:	d004      	beq.n	8006442 <_vfprintf_r+0x1052>
 8006438:	2230      	movs	r2, #48	; 0x30
 800643a:	f809 2c01 	strb.w	r2, [r9, #-1]
 800643e:	f1a3 0902 	sub.w	r9, r3, #2
 8006442:	4656      	mov	r6, sl
 8006444:	2300      	movs	r3, #0
 8006446:	f10d 0ab0 	add.w	sl, sp, #176	; 0xb0
 800644a:	9d08      	ldr	r5, [sp, #32]
 800644c:	9308      	str	r3, [sp, #32]
 800644e:	ebaa 0a09 	sub.w	sl, sl, r9
 8006452:	f7ff bac6 	b.w	80059e2 <_vfprintf_r+0x5f2>
 8006456:	bf00      	nop
 8006458:	08008d66 	.word	0x08008d66
 800645c:	08008d56 	.word	0x08008d56
 8006460:	08008d2a 	.word	0x08008d2a
 8006464:	08008d2e 	.word	0x08008d2e

08006468 <__sbprintf>:
 8006468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800646a:	460c      	mov	r4, r1
 800646c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8006470:	461f      	mov	r7, r3
 8006472:	8989      	ldrh	r1, [r1, #12]
 8006474:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006476:	9319      	str	r3, [sp, #100]	; 0x64
 8006478:	89e3      	ldrh	r3, [r4, #14]
 800647a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800647e:	f021 0102 	bic.w	r1, r1, #2
 8006482:	6a23      	ldr	r3, [r4, #32]
 8006484:	f8ad 100c 	strh.w	r1, [sp, #12]
 8006488:	9308      	str	r3, [sp, #32]
 800648a:	a91a      	add	r1, sp, #104	; 0x68
 800648c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800648e:	930a      	str	r3, [sp, #40]	; 0x28
 8006490:	4615      	mov	r5, r2
 8006492:	2300      	movs	r3, #0
 8006494:	4606      	mov	r6, r0
 8006496:	9100      	str	r1, [sp, #0]
 8006498:	9104      	str	r1, [sp, #16]
 800649a:	a816      	add	r0, sp, #88	; 0x58
 800649c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064a0:	9102      	str	r1, [sp, #8]
 80064a2:	9105      	str	r1, [sp, #20]
 80064a4:	9306      	str	r3, [sp, #24]
 80064a6:	f001 f9cd 	bl	8007844 <__retarget_lock_init_recursive>
 80064aa:	462a      	mov	r2, r5
 80064ac:	463b      	mov	r3, r7
 80064ae:	4669      	mov	r1, sp
 80064b0:	4630      	mov	r0, r6
 80064b2:	f7fe ff9d 	bl	80053f0 <_vfprintf_r>
 80064b6:	1e05      	subs	r5, r0, #0
 80064b8:	db07      	blt.n	80064ca <__sbprintf+0x62>
 80064ba:	4669      	mov	r1, sp
 80064bc:	4630      	mov	r0, r6
 80064be:	f000 ff6f 	bl	80073a0 <_fflush_r>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	bf18      	it	ne
 80064c6:	f04f 35ff 	movne.w	r5, #4294967295
 80064ca:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80064ce:	9816      	ldr	r0, [sp, #88]	; 0x58
 80064d0:	065b      	lsls	r3, r3, #25
 80064d2:	bf42      	ittt	mi
 80064d4:	89a3      	ldrhmi	r3, [r4, #12]
 80064d6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80064da:	81a3      	strhmi	r3, [r4, #12]
 80064dc:	f001 f9b3 	bl	8007846 <__retarget_lock_close_recursive>
 80064e0:	4628      	mov	r0, r5
 80064e2:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 80064e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080064e8 <__swsetup_r>:
 80064e8:	4b32      	ldr	r3, [pc, #200]	; (80065b4 <__swsetup_r+0xcc>)
 80064ea:	b570      	push	{r4, r5, r6, lr}
 80064ec:	681d      	ldr	r5, [r3, #0]
 80064ee:	4606      	mov	r6, r0
 80064f0:	460c      	mov	r4, r1
 80064f2:	b125      	cbz	r5, 80064fe <__swsetup_r+0x16>
 80064f4:	69ab      	ldr	r3, [r5, #24]
 80064f6:	b913      	cbnz	r3, 80064fe <__swsetup_r+0x16>
 80064f8:	4628      	mov	r0, r5
 80064fa:	f000 ffe5 	bl	80074c8 <__sinit>
 80064fe:	4b2e      	ldr	r3, [pc, #184]	; (80065b8 <__swsetup_r+0xd0>)
 8006500:	429c      	cmp	r4, r3
 8006502:	d10f      	bne.n	8006524 <__swsetup_r+0x3c>
 8006504:	686c      	ldr	r4, [r5, #4]
 8006506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800650a:	b29a      	uxth	r2, r3
 800650c:	0715      	lsls	r5, r2, #28
 800650e:	d42c      	bmi.n	800656a <__swsetup_r+0x82>
 8006510:	06d0      	lsls	r0, r2, #27
 8006512:	d411      	bmi.n	8006538 <__swsetup_r+0x50>
 8006514:	2209      	movs	r2, #9
 8006516:	6032      	str	r2, [r6, #0]
 8006518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800651c:	81a3      	strh	r3, [r4, #12]
 800651e:	f04f 30ff 	mov.w	r0, #4294967295
 8006522:	bd70      	pop	{r4, r5, r6, pc}
 8006524:	4b25      	ldr	r3, [pc, #148]	; (80065bc <__swsetup_r+0xd4>)
 8006526:	429c      	cmp	r4, r3
 8006528:	d101      	bne.n	800652e <__swsetup_r+0x46>
 800652a:	68ac      	ldr	r4, [r5, #8]
 800652c:	e7eb      	b.n	8006506 <__swsetup_r+0x1e>
 800652e:	4b24      	ldr	r3, [pc, #144]	; (80065c0 <__swsetup_r+0xd8>)
 8006530:	429c      	cmp	r4, r3
 8006532:	bf08      	it	eq
 8006534:	68ec      	ldreq	r4, [r5, #12]
 8006536:	e7e6      	b.n	8006506 <__swsetup_r+0x1e>
 8006538:	0751      	lsls	r1, r2, #29
 800653a:	d512      	bpl.n	8006562 <__swsetup_r+0x7a>
 800653c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800653e:	b141      	cbz	r1, 8006552 <__swsetup_r+0x6a>
 8006540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006544:	4299      	cmp	r1, r3
 8006546:	d002      	beq.n	800654e <__swsetup_r+0x66>
 8006548:	4630      	mov	r0, r6
 800654a:	f001 f893 	bl	8007674 <_free_r>
 800654e:	2300      	movs	r3, #0
 8006550:	6363      	str	r3, [r4, #52]	; 0x34
 8006552:	89a3      	ldrh	r3, [r4, #12]
 8006554:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006558:	81a3      	strh	r3, [r4, #12]
 800655a:	2300      	movs	r3, #0
 800655c:	6063      	str	r3, [r4, #4]
 800655e:	6923      	ldr	r3, [r4, #16]
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	89a3      	ldrh	r3, [r4, #12]
 8006564:	f043 0308 	orr.w	r3, r3, #8
 8006568:	81a3      	strh	r3, [r4, #12]
 800656a:	6923      	ldr	r3, [r4, #16]
 800656c:	b94b      	cbnz	r3, 8006582 <__swsetup_r+0x9a>
 800656e:	89a3      	ldrh	r3, [r4, #12]
 8006570:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006578:	d003      	beq.n	8006582 <__swsetup_r+0x9a>
 800657a:	4621      	mov	r1, r4
 800657c:	4630      	mov	r0, r6
 800657e:	f001 f991 	bl	80078a4 <__smakebuf_r>
 8006582:	89a2      	ldrh	r2, [r4, #12]
 8006584:	f012 0301 	ands.w	r3, r2, #1
 8006588:	d00c      	beq.n	80065a4 <__swsetup_r+0xbc>
 800658a:	2300      	movs	r3, #0
 800658c:	60a3      	str	r3, [r4, #8]
 800658e:	6963      	ldr	r3, [r4, #20]
 8006590:	425b      	negs	r3, r3
 8006592:	61a3      	str	r3, [r4, #24]
 8006594:	6923      	ldr	r3, [r4, #16]
 8006596:	b953      	cbnz	r3, 80065ae <__swsetup_r+0xc6>
 8006598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800659c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80065a0:	d1ba      	bne.n	8006518 <__swsetup_r+0x30>
 80065a2:	bd70      	pop	{r4, r5, r6, pc}
 80065a4:	0792      	lsls	r2, r2, #30
 80065a6:	bf58      	it	pl
 80065a8:	6963      	ldrpl	r3, [r4, #20]
 80065aa:	60a3      	str	r3, [r4, #8]
 80065ac:	e7f2      	b.n	8006594 <__swsetup_r+0xac>
 80065ae:	2000      	movs	r0, #0
 80065b0:	e7f7      	b.n	80065a2 <__swsetup_r+0xba>
 80065b2:	bf00      	nop
 80065b4:	2000059c 	.word	0x2000059c
 80065b8:	08008da4 	.word	0x08008da4
 80065bc:	08008dc4 	.word	0x08008dc4
 80065c0:	08008d84 	.word	0x08008d84

080065c4 <quorem>:
 80065c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c8:	6903      	ldr	r3, [r0, #16]
 80065ca:	690c      	ldr	r4, [r1, #16]
 80065cc:	429c      	cmp	r4, r3
 80065ce:	4680      	mov	r8, r0
 80065d0:	f300 8082 	bgt.w	80066d8 <quorem+0x114>
 80065d4:	3c01      	subs	r4, #1
 80065d6:	f101 0714 	add.w	r7, r1, #20
 80065da:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80065de:	f100 0614 	add.w	r6, r0, #20
 80065e2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80065e6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80065ea:	eb06 030e 	add.w	r3, r6, lr
 80065ee:	3501      	adds	r5, #1
 80065f0:	eb07 090e 	add.w	r9, r7, lr
 80065f4:	9301      	str	r3, [sp, #4]
 80065f6:	fbb0 f5f5 	udiv	r5, r0, r5
 80065fa:	b395      	cbz	r5, 8006662 <quorem+0x9e>
 80065fc:	f04f 0a00 	mov.w	sl, #0
 8006600:	4638      	mov	r0, r7
 8006602:	46b4      	mov	ip, r6
 8006604:	46d3      	mov	fp, sl
 8006606:	f850 2b04 	ldr.w	r2, [r0], #4
 800660a:	b293      	uxth	r3, r2
 800660c:	fb05 a303 	mla	r3, r5, r3, sl
 8006610:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006614:	b29b      	uxth	r3, r3
 8006616:	ebab 0303 	sub.w	r3, fp, r3
 800661a:	0c12      	lsrs	r2, r2, #16
 800661c:	f8bc b000 	ldrh.w	fp, [ip]
 8006620:	fb05 a202 	mla	r2, r5, r2, sl
 8006624:	fa13 f38b 	uxtah	r3, r3, fp
 8006628:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800662c:	fa1f fb82 	uxth.w	fp, r2
 8006630:	f8dc 2000 	ldr.w	r2, [ip]
 8006634:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006638:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800663c:	b29b      	uxth	r3, r3
 800663e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006642:	4581      	cmp	r9, r0
 8006644:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006648:	f84c 3b04 	str.w	r3, [ip], #4
 800664c:	d2db      	bcs.n	8006606 <quorem+0x42>
 800664e:	f856 300e 	ldr.w	r3, [r6, lr]
 8006652:	b933      	cbnz	r3, 8006662 <quorem+0x9e>
 8006654:	9b01      	ldr	r3, [sp, #4]
 8006656:	3b04      	subs	r3, #4
 8006658:	429e      	cmp	r6, r3
 800665a:	461a      	mov	r2, r3
 800665c:	d330      	bcc.n	80066c0 <quorem+0xfc>
 800665e:	f8c8 4010 	str.w	r4, [r8, #16]
 8006662:	4640      	mov	r0, r8
 8006664:	f001 fb67 	bl	8007d36 <__mcmp>
 8006668:	2800      	cmp	r0, #0
 800666a:	db25      	blt.n	80066b8 <quorem+0xf4>
 800666c:	3501      	adds	r5, #1
 800666e:	4630      	mov	r0, r6
 8006670:	f04f 0e00 	mov.w	lr, #0
 8006674:	f857 2b04 	ldr.w	r2, [r7], #4
 8006678:	f8d0 c000 	ldr.w	ip, [r0]
 800667c:	b293      	uxth	r3, r2
 800667e:	ebae 0303 	sub.w	r3, lr, r3
 8006682:	0c12      	lsrs	r2, r2, #16
 8006684:	fa13 f38c 	uxtah	r3, r3, ip
 8006688:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800668c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006690:	b29b      	uxth	r3, r3
 8006692:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006696:	45b9      	cmp	r9, r7
 8006698:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800669c:	f840 3b04 	str.w	r3, [r0], #4
 80066a0:	d2e8      	bcs.n	8006674 <quorem+0xb0>
 80066a2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80066a6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80066aa:	b92a      	cbnz	r2, 80066b8 <quorem+0xf4>
 80066ac:	3b04      	subs	r3, #4
 80066ae:	429e      	cmp	r6, r3
 80066b0:	461a      	mov	r2, r3
 80066b2:	d30b      	bcc.n	80066cc <quorem+0x108>
 80066b4:	f8c8 4010 	str.w	r4, [r8, #16]
 80066b8:	4628      	mov	r0, r5
 80066ba:	b003      	add	sp, #12
 80066bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c0:	6812      	ldr	r2, [r2, #0]
 80066c2:	3b04      	subs	r3, #4
 80066c4:	2a00      	cmp	r2, #0
 80066c6:	d1ca      	bne.n	800665e <quorem+0x9a>
 80066c8:	3c01      	subs	r4, #1
 80066ca:	e7c5      	b.n	8006658 <quorem+0x94>
 80066cc:	6812      	ldr	r2, [r2, #0]
 80066ce:	3b04      	subs	r3, #4
 80066d0:	2a00      	cmp	r2, #0
 80066d2:	d1ef      	bne.n	80066b4 <quorem+0xf0>
 80066d4:	3c01      	subs	r4, #1
 80066d6:	e7ea      	b.n	80066ae <quorem+0xea>
 80066d8:	2000      	movs	r0, #0
 80066da:	e7ee      	b.n	80066ba <quorem+0xf6>
 80066dc:	0000      	movs	r0, r0
	...

080066e0 <_dtoa_r>:
 80066e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e4:	ec57 6b10 	vmov	r6, r7, d0
 80066e8:	b097      	sub	sp, #92	; 0x5c
 80066ea:	e9cd 6700 	strd	r6, r7, [sp]
 80066ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80066f0:	9107      	str	r1, [sp, #28]
 80066f2:	4604      	mov	r4, r0
 80066f4:	920a      	str	r2, [sp, #40]	; 0x28
 80066f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80066f8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80066fa:	b93e      	cbnz	r6, 800670c <_dtoa_r+0x2c>
 80066fc:	2010      	movs	r0, #16
 80066fe:	f7fe fc11 	bl	8004f24 <malloc>
 8006702:	6260      	str	r0, [r4, #36]	; 0x24
 8006704:	6046      	str	r6, [r0, #4]
 8006706:	6086      	str	r6, [r0, #8]
 8006708:	6006      	str	r6, [r0, #0]
 800670a:	60c6      	str	r6, [r0, #12]
 800670c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800670e:	6819      	ldr	r1, [r3, #0]
 8006710:	b151      	cbz	r1, 8006728 <_dtoa_r+0x48>
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	604a      	str	r2, [r1, #4]
 8006716:	2301      	movs	r3, #1
 8006718:	4093      	lsls	r3, r2
 800671a:	608b      	str	r3, [r1, #8]
 800671c:	4620      	mov	r0, r4
 800671e:	f001 f935 	bl	800798c <_Bfree>
 8006722:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	9b01      	ldr	r3, [sp, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	bfbf      	itttt	lt
 800672e:	2301      	movlt	r3, #1
 8006730:	602b      	strlt	r3, [r5, #0]
 8006732:	9b01      	ldrlt	r3, [sp, #4]
 8006734:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006738:	bfb2      	itee	lt
 800673a:	9301      	strlt	r3, [sp, #4]
 800673c:	2300      	movge	r3, #0
 800673e:	602b      	strge	r3, [r5, #0]
 8006740:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006744:	4ba8      	ldr	r3, [pc, #672]	; (80069e8 <_dtoa_r+0x308>)
 8006746:	ea33 0308 	bics.w	r3, r3, r8
 800674a:	d11b      	bne.n	8006784 <_dtoa_r+0xa4>
 800674c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800674e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006752:	6013      	str	r3, [r2, #0]
 8006754:	9b00      	ldr	r3, [sp, #0]
 8006756:	b923      	cbnz	r3, 8006762 <_dtoa_r+0x82>
 8006758:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800675c:	2800      	cmp	r0, #0
 800675e:	f000 8578 	beq.w	8007252 <_dtoa_r+0xb72>
 8006762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006764:	b953      	cbnz	r3, 800677c <_dtoa_r+0x9c>
 8006766:	4ba1      	ldr	r3, [pc, #644]	; (80069ec <_dtoa_r+0x30c>)
 8006768:	e021      	b.n	80067ae <_dtoa_r+0xce>
 800676a:	4ba1      	ldr	r3, [pc, #644]	; (80069f0 <_dtoa_r+0x310>)
 800676c:	9302      	str	r3, [sp, #8]
 800676e:	3308      	adds	r3, #8
 8006770:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006772:	6013      	str	r3, [r2, #0]
 8006774:	9802      	ldr	r0, [sp, #8]
 8006776:	b017      	add	sp, #92	; 0x5c
 8006778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800677c:	4b9b      	ldr	r3, [pc, #620]	; (80069ec <_dtoa_r+0x30c>)
 800677e:	9302      	str	r3, [sp, #8]
 8006780:	3303      	adds	r3, #3
 8006782:	e7f5      	b.n	8006770 <_dtoa_r+0x90>
 8006784:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006788:	2200      	movs	r2, #0
 800678a:	2300      	movs	r3, #0
 800678c:	4630      	mov	r0, r6
 800678e:	4639      	mov	r1, r7
 8006790:	f7fa f996 	bl	8000ac0 <__aeabi_dcmpeq>
 8006794:	4681      	mov	r9, r0
 8006796:	b160      	cbz	r0, 80067b2 <_dtoa_r+0xd2>
 8006798:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800679a:	2301      	movs	r3, #1
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 8553 	beq.w	800724c <_dtoa_r+0xb6c>
 80067a6:	4b93      	ldr	r3, [pc, #588]	; (80069f4 <_dtoa_r+0x314>)
 80067a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	3b01      	subs	r3, #1
 80067ae:	9302      	str	r3, [sp, #8]
 80067b0:	e7e0      	b.n	8006774 <_dtoa_r+0x94>
 80067b2:	aa14      	add	r2, sp, #80	; 0x50
 80067b4:	a915      	add	r1, sp, #84	; 0x54
 80067b6:	ec47 6b10 	vmov	d0, r6, r7
 80067ba:	4620      	mov	r0, r4
 80067bc:	f001 fb33 	bl	8007e26 <__d2b>
 80067c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80067c4:	4682      	mov	sl, r0
 80067c6:	2d00      	cmp	r5, #0
 80067c8:	d07e      	beq.n	80068c8 <_dtoa_r+0x1e8>
 80067ca:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80067ce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80067d2:	4630      	mov	r0, r6
 80067d4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80067d8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80067dc:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80067e0:	2200      	movs	r2, #0
 80067e2:	4b85      	ldr	r3, [pc, #532]	; (80069f8 <_dtoa_r+0x318>)
 80067e4:	f7f9 fd50 	bl	8000288 <__aeabi_dsub>
 80067e8:	a379      	add	r3, pc, #484	; (adr r3, 80069d0 <_dtoa_r+0x2f0>)
 80067ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ee:	f7f9 feff 	bl	80005f0 <__aeabi_dmul>
 80067f2:	a379      	add	r3, pc, #484	; (adr r3, 80069d8 <_dtoa_r+0x2f8>)
 80067f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f8:	f7f9 fd48 	bl	800028c <__adddf3>
 80067fc:	4606      	mov	r6, r0
 80067fe:	4628      	mov	r0, r5
 8006800:	460f      	mov	r7, r1
 8006802:	f7f9 fe8f 	bl	8000524 <__aeabi_i2d>
 8006806:	a376      	add	r3, pc, #472	; (adr r3, 80069e0 <_dtoa_r+0x300>)
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	f7f9 fef0 	bl	80005f0 <__aeabi_dmul>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	4630      	mov	r0, r6
 8006816:	4639      	mov	r1, r7
 8006818:	f7f9 fd38 	bl	800028c <__adddf3>
 800681c:	4606      	mov	r6, r0
 800681e:	460f      	mov	r7, r1
 8006820:	f7fa f996 	bl	8000b50 <__aeabi_d2iz>
 8006824:	2200      	movs	r2, #0
 8006826:	4683      	mov	fp, r0
 8006828:	2300      	movs	r3, #0
 800682a:	4630      	mov	r0, r6
 800682c:	4639      	mov	r1, r7
 800682e:	f7fa f951 	bl	8000ad4 <__aeabi_dcmplt>
 8006832:	b158      	cbz	r0, 800684c <_dtoa_r+0x16c>
 8006834:	4658      	mov	r0, fp
 8006836:	f7f9 fe75 	bl	8000524 <__aeabi_i2d>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	4630      	mov	r0, r6
 8006840:	4639      	mov	r1, r7
 8006842:	f7fa f93d 	bl	8000ac0 <__aeabi_dcmpeq>
 8006846:	b908      	cbnz	r0, 800684c <_dtoa_r+0x16c>
 8006848:	f10b 3bff 	add.w	fp, fp, #4294967295
 800684c:	f1bb 0f16 	cmp.w	fp, #22
 8006850:	d859      	bhi.n	8006906 <_dtoa_r+0x226>
 8006852:	496a      	ldr	r1, [pc, #424]	; (80069fc <_dtoa_r+0x31c>)
 8006854:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006858:	e9dd 2300 	ldrd	r2, r3, [sp]
 800685c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006860:	f7fa f956 	bl	8000b10 <__aeabi_dcmpgt>
 8006864:	2800      	cmp	r0, #0
 8006866:	d050      	beq.n	800690a <_dtoa_r+0x22a>
 8006868:	f10b 3bff 	add.w	fp, fp, #4294967295
 800686c:	2300      	movs	r3, #0
 800686e:	930e      	str	r3, [sp, #56]	; 0x38
 8006870:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006872:	1b5d      	subs	r5, r3, r5
 8006874:	1e6b      	subs	r3, r5, #1
 8006876:	9306      	str	r3, [sp, #24]
 8006878:	bf45      	ittet	mi
 800687a:	f1c5 0301 	rsbmi	r3, r5, #1
 800687e:	9305      	strmi	r3, [sp, #20]
 8006880:	2300      	movpl	r3, #0
 8006882:	2300      	movmi	r3, #0
 8006884:	bf4c      	ite	mi
 8006886:	9306      	strmi	r3, [sp, #24]
 8006888:	9305      	strpl	r3, [sp, #20]
 800688a:	f1bb 0f00 	cmp.w	fp, #0
 800688e:	db3e      	blt.n	800690e <_dtoa_r+0x22e>
 8006890:	9b06      	ldr	r3, [sp, #24]
 8006892:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006896:	445b      	add	r3, fp
 8006898:	9306      	str	r3, [sp, #24]
 800689a:	2300      	movs	r3, #0
 800689c:	9308      	str	r3, [sp, #32]
 800689e:	9b07      	ldr	r3, [sp, #28]
 80068a0:	2b09      	cmp	r3, #9
 80068a2:	f200 80af 	bhi.w	8006a04 <_dtoa_r+0x324>
 80068a6:	2b05      	cmp	r3, #5
 80068a8:	bfc4      	itt	gt
 80068aa:	3b04      	subgt	r3, #4
 80068ac:	9307      	strgt	r3, [sp, #28]
 80068ae:	9b07      	ldr	r3, [sp, #28]
 80068b0:	f1a3 0302 	sub.w	r3, r3, #2
 80068b4:	bfcc      	ite	gt
 80068b6:	2600      	movgt	r6, #0
 80068b8:	2601      	movle	r6, #1
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	f200 80ae 	bhi.w	8006a1c <_dtoa_r+0x33c>
 80068c0:	e8df f003 	tbb	[pc, r3]
 80068c4:	772f8482 	.word	0x772f8482
 80068c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068ca:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80068cc:	441d      	add	r5, r3
 80068ce:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80068d2:	2b20      	cmp	r3, #32
 80068d4:	dd11      	ble.n	80068fa <_dtoa_r+0x21a>
 80068d6:	9a00      	ldr	r2, [sp, #0]
 80068d8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80068dc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80068e0:	fa22 f000 	lsr.w	r0, r2, r0
 80068e4:	fa08 f303 	lsl.w	r3, r8, r3
 80068e8:	4318      	orrs	r0, r3
 80068ea:	f7f9 fe0b 	bl	8000504 <__aeabi_ui2d>
 80068ee:	2301      	movs	r3, #1
 80068f0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80068f4:	3d01      	subs	r5, #1
 80068f6:	9312      	str	r3, [sp, #72]	; 0x48
 80068f8:	e772      	b.n	80067e0 <_dtoa_r+0x100>
 80068fa:	f1c3 0020 	rsb	r0, r3, #32
 80068fe:	9b00      	ldr	r3, [sp, #0]
 8006900:	fa03 f000 	lsl.w	r0, r3, r0
 8006904:	e7f1      	b.n	80068ea <_dtoa_r+0x20a>
 8006906:	2301      	movs	r3, #1
 8006908:	e7b1      	b.n	800686e <_dtoa_r+0x18e>
 800690a:	900e      	str	r0, [sp, #56]	; 0x38
 800690c:	e7b0      	b.n	8006870 <_dtoa_r+0x190>
 800690e:	9b05      	ldr	r3, [sp, #20]
 8006910:	eba3 030b 	sub.w	r3, r3, fp
 8006914:	9305      	str	r3, [sp, #20]
 8006916:	f1cb 0300 	rsb	r3, fp, #0
 800691a:	9308      	str	r3, [sp, #32]
 800691c:	2300      	movs	r3, #0
 800691e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006920:	e7bd      	b.n	800689e <_dtoa_r+0x1be>
 8006922:	2301      	movs	r3, #1
 8006924:	9309      	str	r3, [sp, #36]	; 0x24
 8006926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006928:	2b00      	cmp	r3, #0
 800692a:	dd7a      	ble.n	8006a22 <_dtoa_r+0x342>
 800692c:	9304      	str	r3, [sp, #16]
 800692e:	9303      	str	r3, [sp, #12]
 8006930:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006932:	2200      	movs	r2, #0
 8006934:	606a      	str	r2, [r5, #4]
 8006936:	2104      	movs	r1, #4
 8006938:	f101 0214 	add.w	r2, r1, #20
 800693c:	429a      	cmp	r2, r3
 800693e:	d975      	bls.n	8006a2c <_dtoa_r+0x34c>
 8006940:	6869      	ldr	r1, [r5, #4]
 8006942:	4620      	mov	r0, r4
 8006944:	f000 ffee 	bl	8007924 <_Balloc>
 8006948:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800694a:	6028      	str	r0, [r5, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	9302      	str	r3, [sp, #8]
 8006950:	9b03      	ldr	r3, [sp, #12]
 8006952:	2b0e      	cmp	r3, #14
 8006954:	f200 80e5 	bhi.w	8006b22 <_dtoa_r+0x442>
 8006958:	2e00      	cmp	r6, #0
 800695a:	f000 80e2 	beq.w	8006b22 <_dtoa_r+0x442>
 800695e:	ed9d 7b00 	vldr	d7, [sp]
 8006962:	f1bb 0f00 	cmp.w	fp, #0
 8006966:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800696a:	dd74      	ble.n	8006a56 <_dtoa_r+0x376>
 800696c:	4a23      	ldr	r2, [pc, #140]	; (80069fc <_dtoa_r+0x31c>)
 800696e:	f00b 030f 	and.w	r3, fp, #15
 8006972:	ea4f 162b 	mov.w	r6, fp, asr #4
 8006976:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800697a:	06f0      	lsls	r0, r6, #27
 800697c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006980:	d559      	bpl.n	8006a36 <_dtoa_r+0x356>
 8006982:	4b1f      	ldr	r3, [pc, #124]	; (8006a00 <_dtoa_r+0x320>)
 8006984:	ec51 0b17 	vmov	r0, r1, d7
 8006988:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800698c:	f7f9 ff5a 	bl	8000844 <__aeabi_ddiv>
 8006990:	e9cd 0100 	strd	r0, r1, [sp]
 8006994:	f006 060f 	and.w	r6, r6, #15
 8006998:	2503      	movs	r5, #3
 800699a:	4f19      	ldr	r7, [pc, #100]	; (8006a00 <_dtoa_r+0x320>)
 800699c:	2e00      	cmp	r6, #0
 800699e:	d14c      	bne.n	8006a3a <_dtoa_r+0x35a>
 80069a0:	4642      	mov	r2, r8
 80069a2:	464b      	mov	r3, r9
 80069a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069a8:	f7f9 ff4c 	bl	8000844 <__aeabi_ddiv>
 80069ac:	e9cd 0100 	strd	r0, r1, [sp]
 80069b0:	e06a      	b.n	8006a88 <_dtoa_r+0x3a8>
 80069b2:	2301      	movs	r3, #1
 80069b4:	9309      	str	r3, [sp, #36]	; 0x24
 80069b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b8:	445b      	add	r3, fp
 80069ba:	9304      	str	r3, [sp, #16]
 80069bc:	3301      	adds	r3, #1
 80069be:	2b01      	cmp	r3, #1
 80069c0:	9303      	str	r3, [sp, #12]
 80069c2:	bfb8      	it	lt
 80069c4:	2301      	movlt	r3, #1
 80069c6:	e7b3      	b.n	8006930 <_dtoa_r+0x250>
 80069c8:	2300      	movs	r3, #0
 80069ca:	e7ab      	b.n	8006924 <_dtoa_r+0x244>
 80069cc:	2300      	movs	r3, #0
 80069ce:	e7f1      	b.n	80069b4 <_dtoa_r+0x2d4>
 80069d0:	636f4361 	.word	0x636f4361
 80069d4:	3fd287a7 	.word	0x3fd287a7
 80069d8:	8b60c8b3 	.word	0x8b60c8b3
 80069dc:	3fc68a28 	.word	0x3fc68a28
 80069e0:	509f79fb 	.word	0x509f79fb
 80069e4:	3fd34413 	.word	0x3fd34413
 80069e8:	7ff00000 	.word	0x7ff00000
 80069ec:	08008d7f 	.word	0x08008d7f
 80069f0:	08008d76 	.word	0x08008d76
 80069f4:	08008d55 	.word	0x08008d55
 80069f8:	3ff80000 	.word	0x3ff80000
 80069fc:	08008e10 	.word	0x08008e10
 8006a00:	08008de8 	.word	0x08008de8
 8006a04:	2601      	movs	r6, #1
 8006a06:	2300      	movs	r3, #0
 8006a08:	9307      	str	r3, [sp, #28]
 8006a0a:	9609      	str	r6, [sp, #36]	; 0x24
 8006a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a10:	9304      	str	r3, [sp, #16]
 8006a12:	9303      	str	r3, [sp, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	2312      	movs	r3, #18
 8006a18:	920a      	str	r2, [sp, #40]	; 0x28
 8006a1a:	e789      	b.n	8006930 <_dtoa_r+0x250>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a20:	e7f4      	b.n	8006a0c <_dtoa_r+0x32c>
 8006a22:	2301      	movs	r3, #1
 8006a24:	9304      	str	r3, [sp, #16]
 8006a26:	9303      	str	r3, [sp, #12]
 8006a28:	461a      	mov	r2, r3
 8006a2a:	e7f5      	b.n	8006a18 <_dtoa_r+0x338>
 8006a2c:	686a      	ldr	r2, [r5, #4]
 8006a2e:	3201      	adds	r2, #1
 8006a30:	606a      	str	r2, [r5, #4]
 8006a32:	0049      	lsls	r1, r1, #1
 8006a34:	e780      	b.n	8006938 <_dtoa_r+0x258>
 8006a36:	2502      	movs	r5, #2
 8006a38:	e7af      	b.n	800699a <_dtoa_r+0x2ba>
 8006a3a:	07f1      	lsls	r1, r6, #31
 8006a3c:	d508      	bpl.n	8006a50 <_dtoa_r+0x370>
 8006a3e:	4640      	mov	r0, r8
 8006a40:	4649      	mov	r1, r9
 8006a42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a46:	f7f9 fdd3 	bl	80005f0 <__aeabi_dmul>
 8006a4a:	3501      	adds	r5, #1
 8006a4c:	4680      	mov	r8, r0
 8006a4e:	4689      	mov	r9, r1
 8006a50:	1076      	asrs	r6, r6, #1
 8006a52:	3708      	adds	r7, #8
 8006a54:	e7a2      	b.n	800699c <_dtoa_r+0x2bc>
 8006a56:	f000 809d 	beq.w	8006b94 <_dtoa_r+0x4b4>
 8006a5a:	f1cb 0600 	rsb	r6, fp, #0
 8006a5e:	4b9f      	ldr	r3, [pc, #636]	; (8006cdc <_dtoa_r+0x5fc>)
 8006a60:	4f9f      	ldr	r7, [pc, #636]	; (8006ce0 <_dtoa_r+0x600>)
 8006a62:	f006 020f 	and.w	r2, r6, #15
 8006a66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a72:	f7f9 fdbd 	bl	80005f0 <__aeabi_dmul>
 8006a76:	e9cd 0100 	strd	r0, r1, [sp]
 8006a7a:	1136      	asrs	r6, r6, #4
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	2502      	movs	r5, #2
 8006a80:	2e00      	cmp	r6, #0
 8006a82:	d17c      	bne.n	8006b7e <_dtoa_r+0x49e>
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d191      	bne.n	80069ac <_dtoa_r+0x2cc>
 8006a88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 8084 	beq.w	8006b98 <_dtoa_r+0x4b8>
 8006a90:	e9dd 8900 	ldrd	r8, r9, [sp]
 8006a94:	2200      	movs	r2, #0
 8006a96:	4b93      	ldr	r3, [pc, #588]	; (8006ce4 <_dtoa_r+0x604>)
 8006a98:	4640      	mov	r0, r8
 8006a9a:	4649      	mov	r1, r9
 8006a9c:	f7fa f81a 	bl	8000ad4 <__aeabi_dcmplt>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	d079      	beq.n	8006b98 <_dtoa_r+0x4b8>
 8006aa4:	9b03      	ldr	r3, [sp, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d076      	beq.n	8006b98 <_dtoa_r+0x4b8>
 8006aaa:	9b04      	ldr	r3, [sp, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	dd34      	ble.n	8006b1a <_dtoa_r+0x43a>
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	4b8d      	ldr	r3, [pc, #564]	; (8006ce8 <_dtoa_r+0x608>)
 8006ab4:	4640      	mov	r0, r8
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	f7f9 fd9a 	bl	80005f0 <__aeabi_dmul>
 8006abc:	e9cd 0100 	strd	r0, r1, [sp]
 8006ac0:	9e04      	ldr	r6, [sp, #16]
 8006ac2:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006ac6:	3501      	adds	r5, #1
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f7f9 fd2b 	bl	8000524 <__aeabi_i2d>
 8006ace:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ad2:	f7f9 fd8d 	bl	80005f0 <__aeabi_dmul>
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	4b84      	ldr	r3, [pc, #528]	; (8006cec <_dtoa_r+0x60c>)
 8006ada:	f7f9 fbd7 	bl	800028c <__adddf3>
 8006ade:	4680      	mov	r8, r0
 8006ae0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8006ae4:	2e00      	cmp	r6, #0
 8006ae6:	d15a      	bne.n	8006b9e <_dtoa_r+0x4be>
 8006ae8:	2200      	movs	r2, #0
 8006aea:	4b81      	ldr	r3, [pc, #516]	; (8006cf0 <_dtoa_r+0x610>)
 8006aec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006af0:	f7f9 fbca 	bl	8000288 <__aeabi_dsub>
 8006af4:	4642      	mov	r2, r8
 8006af6:	464b      	mov	r3, r9
 8006af8:	e9cd 0100 	strd	r0, r1, [sp]
 8006afc:	f7fa f808 	bl	8000b10 <__aeabi_dcmpgt>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	f040 829b 	bne.w	800703c <_dtoa_r+0x95c>
 8006b06:	4642      	mov	r2, r8
 8006b08:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006b0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b10:	f7f9 ffe0 	bl	8000ad4 <__aeabi_dcmplt>
 8006b14:	2800      	cmp	r0, #0
 8006b16:	f040 828f 	bne.w	8007038 <_dtoa_r+0x958>
 8006b1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006b1e:	e9cd 2300 	strd	r2, r3, [sp]
 8006b22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f2c0 8150 	blt.w	8006dca <_dtoa_r+0x6ea>
 8006b2a:	f1bb 0f0e 	cmp.w	fp, #14
 8006b2e:	f300 814c 	bgt.w	8006dca <_dtoa_r+0x6ea>
 8006b32:	4b6a      	ldr	r3, [pc, #424]	; (8006cdc <_dtoa_r+0x5fc>)
 8006b34:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006b38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f280 80da 	bge.w	8006cf8 <_dtoa_r+0x618>
 8006b44:	9b03      	ldr	r3, [sp, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f300 80d6 	bgt.w	8006cf8 <_dtoa_r+0x618>
 8006b4c:	f040 8273 	bne.w	8007036 <_dtoa_r+0x956>
 8006b50:	2200      	movs	r2, #0
 8006b52:	4b67      	ldr	r3, [pc, #412]	; (8006cf0 <_dtoa_r+0x610>)
 8006b54:	4640      	mov	r0, r8
 8006b56:	4649      	mov	r1, r9
 8006b58:	f7f9 fd4a 	bl	80005f0 <__aeabi_dmul>
 8006b5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b60:	f7f9 ffcc 	bl	8000afc <__aeabi_dcmpge>
 8006b64:	9e03      	ldr	r6, [sp, #12]
 8006b66:	4637      	mov	r7, r6
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	f040 824a 	bne.w	8007002 <_dtoa_r+0x922>
 8006b6e:	9b02      	ldr	r3, [sp, #8]
 8006b70:	9a02      	ldr	r2, [sp, #8]
 8006b72:	1c5d      	adds	r5, r3, #1
 8006b74:	2331      	movs	r3, #49	; 0x31
 8006b76:	7013      	strb	r3, [r2, #0]
 8006b78:	f10b 0b01 	add.w	fp, fp, #1
 8006b7c:	e245      	b.n	800700a <_dtoa_r+0x92a>
 8006b7e:	07f2      	lsls	r2, r6, #31
 8006b80:	d505      	bpl.n	8006b8e <_dtoa_r+0x4ae>
 8006b82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b86:	f7f9 fd33 	bl	80005f0 <__aeabi_dmul>
 8006b8a:	3501      	adds	r5, #1
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	1076      	asrs	r6, r6, #1
 8006b90:	3708      	adds	r7, #8
 8006b92:	e775      	b.n	8006a80 <_dtoa_r+0x3a0>
 8006b94:	2502      	movs	r5, #2
 8006b96:	e777      	b.n	8006a88 <_dtoa_r+0x3a8>
 8006b98:	465f      	mov	r7, fp
 8006b9a:	9e03      	ldr	r6, [sp, #12]
 8006b9c:	e794      	b.n	8006ac8 <_dtoa_r+0x3e8>
 8006b9e:	9a02      	ldr	r2, [sp, #8]
 8006ba0:	4b4e      	ldr	r3, [pc, #312]	; (8006cdc <_dtoa_r+0x5fc>)
 8006ba2:	4432      	add	r2, r6
 8006ba4:	9213      	str	r2, [sp, #76]	; 0x4c
 8006ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ba8:	1e71      	subs	r1, r6, #1
 8006baa:	2a00      	cmp	r2, #0
 8006bac:	d048      	beq.n	8006c40 <_dtoa_r+0x560>
 8006bae:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb6:	2000      	movs	r0, #0
 8006bb8:	494e      	ldr	r1, [pc, #312]	; (8006cf4 <_dtoa_r+0x614>)
 8006bba:	f7f9 fe43 	bl	8000844 <__aeabi_ddiv>
 8006bbe:	4642      	mov	r2, r8
 8006bc0:	464b      	mov	r3, r9
 8006bc2:	f7f9 fb61 	bl	8000288 <__aeabi_dsub>
 8006bc6:	9d02      	ldr	r5, [sp, #8]
 8006bc8:	4680      	mov	r8, r0
 8006bca:	4689      	mov	r9, r1
 8006bcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bd0:	f7f9 ffbe 	bl	8000b50 <__aeabi_d2iz>
 8006bd4:	4606      	mov	r6, r0
 8006bd6:	f7f9 fca5 	bl	8000524 <__aeabi_i2d>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006be2:	f7f9 fb51 	bl	8000288 <__aeabi_dsub>
 8006be6:	3630      	adds	r6, #48	; 0x30
 8006be8:	f805 6b01 	strb.w	r6, [r5], #1
 8006bec:	4642      	mov	r2, r8
 8006bee:	464b      	mov	r3, r9
 8006bf0:	e9cd 0100 	strd	r0, r1, [sp]
 8006bf4:	f7f9 ff6e 	bl	8000ad4 <__aeabi_dcmplt>
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d165      	bne.n	8006cc8 <_dtoa_r+0x5e8>
 8006bfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c00:	2000      	movs	r0, #0
 8006c02:	4938      	ldr	r1, [pc, #224]	; (8006ce4 <_dtoa_r+0x604>)
 8006c04:	f7f9 fb40 	bl	8000288 <__aeabi_dsub>
 8006c08:	4642      	mov	r2, r8
 8006c0a:	464b      	mov	r3, r9
 8006c0c:	f7f9 ff62 	bl	8000ad4 <__aeabi_dcmplt>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	f040 80ba 	bne.w	8006d8a <_dtoa_r+0x6aa>
 8006c16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c18:	429d      	cmp	r5, r3
 8006c1a:	f43f af7e 	beq.w	8006b1a <_dtoa_r+0x43a>
 8006c1e:	2200      	movs	r2, #0
 8006c20:	4b31      	ldr	r3, [pc, #196]	; (8006ce8 <_dtoa_r+0x608>)
 8006c22:	4640      	mov	r0, r8
 8006c24:	4649      	mov	r1, r9
 8006c26:	f7f9 fce3 	bl	80005f0 <__aeabi_dmul>
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	4680      	mov	r8, r0
 8006c2e:	4689      	mov	r9, r1
 8006c30:	4b2d      	ldr	r3, [pc, #180]	; (8006ce8 <_dtoa_r+0x608>)
 8006c32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c36:	f7f9 fcdb 	bl	80005f0 <__aeabi_dmul>
 8006c3a:	e9cd 0100 	strd	r0, r1, [sp]
 8006c3e:	e7c5      	b.n	8006bcc <_dtoa_r+0x4ec>
 8006c40:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006c44:	4642      	mov	r2, r8
 8006c46:	464b      	mov	r3, r9
 8006c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c4c:	f7f9 fcd0 	bl	80005f0 <__aeabi_dmul>
 8006c50:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c54:	9d02      	ldr	r5, [sp, #8]
 8006c56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c5a:	f7f9 ff79 	bl	8000b50 <__aeabi_d2iz>
 8006c5e:	4606      	mov	r6, r0
 8006c60:	f7f9 fc60 	bl	8000524 <__aeabi_i2d>
 8006c64:	3630      	adds	r6, #48	; 0x30
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c6e:	f7f9 fb0b 	bl	8000288 <__aeabi_dsub>
 8006c72:	f805 6b01 	strb.w	r6, [r5], #1
 8006c76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c78:	42ab      	cmp	r3, r5
 8006c7a:	4680      	mov	r8, r0
 8006c7c:	4689      	mov	r9, r1
 8006c7e:	f04f 0200 	mov.w	r2, #0
 8006c82:	d125      	bne.n	8006cd0 <_dtoa_r+0x5f0>
 8006c84:	4b1b      	ldr	r3, [pc, #108]	; (8006cf4 <_dtoa_r+0x614>)
 8006c86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c8a:	f7f9 faff 	bl	800028c <__adddf3>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	4640      	mov	r0, r8
 8006c94:	4649      	mov	r1, r9
 8006c96:	f7f9 ff3b 	bl	8000b10 <__aeabi_dcmpgt>
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	d175      	bne.n	8006d8a <_dtoa_r+0x6aa>
 8006c9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	4913      	ldr	r1, [pc, #76]	; (8006cf4 <_dtoa_r+0x614>)
 8006ca6:	f7f9 faef 	bl	8000288 <__aeabi_dsub>
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	4640      	mov	r0, r8
 8006cb0:	4649      	mov	r1, r9
 8006cb2:	f7f9 ff0f 	bl	8000ad4 <__aeabi_dcmplt>
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	f43f af2f 	beq.w	8006b1a <_dtoa_r+0x43a>
 8006cbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006cc0:	2b30      	cmp	r3, #48	; 0x30
 8006cc2:	f105 32ff 	add.w	r2, r5, #4294967295
 8006cc6:	d001      	beq.n	8006ccc <_dtoa_r+0x5ec>
 8006cc8:	46bb      	mov	fp, r7
 8006cca:	e04d      	b.n	8006d68 <_dtoa_r+0x688>
 8006ccc:	4615      	mov	r5, r2
 8006cce:	e7f5      	b.n	8006cbc <_dtoa_r+0x5dc>
 8006cd0:	4b05      	ldr	r3, [pc, #20]	; (8006ce8 <_dtoa_r+0x608>)
 8006cd2:	f7f9 fc8d 	bl	80005f0 <__aeabi_dmul>
 8006cd6:	e9cd 0100 	strd	r0, r1, [sp]
 8006cda:	e7bc      	b.n	8006c56 <_dtoa_r+0x576>
 8006cdc:	08008e10 	.word	0x08008e10
 8006ce0:	08008de8 	.word	0x08008de8
 8006ce4:	3ff00000 	.word	0x3ff00000
 8006ce8:	40240000 	.word	0x40240000
 8006cec:	401c0000 	.word	0x401c0000
 8006cf0:	40140000 	.word	0x40140000
 8006cf4:	3fe00000 	.word	0x3fe00000
 8006cf8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006cfc:	9d02      	ldr	r5, [sp, #8]
 8006cfe:	4642      	mov	r2, r8
 8006d00:	464b      	mov	r3, r9
 8006d02:	4630      	mov	r0, r6
 8006d04:	4639      	mov	r1, r7
 8006d06:	f7f9 fd9d 	bl	8000844 <__aeabi_ddiv>
 8006d0a:	f7f9 ff21 	bl	8000b50 <__aeabi_d2iz>
 8006d0e:	9000      	str	r0, [sp, #0]
 8006d10:	f7f9 fc08 	bl	8000524 <__aeabi_i2d>
 8006d14:	4642      	mov	r2, r8
 8006d16:	464b      	mov	r3, r9
 8006d18:	f7f9 fc6a 	bl	80005f0 <__aeabi_dmul>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4630      	mov	r0, r6
 8006d22:	4639      	mov	r1, r7
 8006d24:	f7f9 fab0 	bl	8000288 <__aeabi_dsub>
 8006d28:	9e00      	ldr	r6, [sp, #0]
 8006d2a:	9f03      	ldr	r7, [sp, #12]
 8006d2c:	3630      	adds	r6, #48	; 0x30
 8006d2e:	f805 6b01 	strb.w	r6, [r5], #1
 8006d32:	9e02      	ldr	r6, [sp, #8]
 8006d34:	1bae      	subs	r6, r5, r6
 8006d36:	42b7      	cmp	r7, r6
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	d138      	bne.n	8006db0 <_dtoa_r+0x6d0>
 8006d3e:	f7f9 faa5 	bl	800028c <__adddf3>
 8006d42:	4606      	mov	r6, r0
 8006d44:	460f      	mov	r7, r1
 8006d46:	4602      	mov	r2, r0
 8006d48:	460b      	mov	r3, r1
 8006d4a:	4640      	mov	r0, r8
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	f7f9 fec1 	bl	8000ad4 <__aeabi_dcmplt>
 8006d52:	b9c8      	cbnz	r0, 8006d88 <_dtoa_r+0x6a8>
 8006d54:	4632      	mov	r2, r6
 8006d56:	463b      	mov	r3, r7
 8006d58:	4640      	mov	r0, r8
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	f7f9 feb0 	bl	8000ac0 <__aeabi_dcmpeq>
 8006d60:	b110      	cbz	r0, 8006d68 <_dtoa_r+0x688>
 8006d62:	9b00      	ldr	r3, [sp, #0]
 8006d64:	07db      	lsls	r3, r3, #31
 8006d66:	d40f      	bmi.n	8006d88 <_dtoa_r+0x6a8>
 8006d68:	4651      	mov	r1, sl
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f000 fe0e 	bl	800798c <_Bfree>
 8006d70:	2300      	movs	r3, #0
 8006d72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d74:	702b      	strb	r3, [r5, #0]
 8006d76:	f10b 0301 	add.w	r3, fp, #1
 8006d7a:	6013      	str	r3, [r2, #0]
 8006d7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f43f acf8 	beq.w	8006774 <_dtoa_r+0x94>
 8006d84:	601d      	str	r5, [r3, #0]
 8006d86:	e4f5      	b.n	8006774 <_dtoa_r+0x94>
 8006d88:	465f      	mov	r7, fp
 8006d8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d8e:	2a39      	cmp	r2, #57	; 0x39
 8006d90:	f105 33ff 	add.w	r3, r5, #4294967295
 8006d94:	d106      	bne.n	8006da4 <_dtoa_r+0x6c4>
 8006d96:	9a02      	ldr	r2, [sp, #8]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d107      	bne.n	8006dac <_dtoa_r+0x6cc>
 8006d9c:	2330      	movs	r3, #48	; 0x30
 8006d9e:	7013      	strb	r3, [r2, #0]
 8006da0:	3701      	adds	r7, #1
 8006da2:	4613      	mov	r3, r2
 8006da4:	781a      	ldrb	r2, [r3, #0]
 8006da6:	3201      	adds	r2, #1
 8006da8:	701a      	strb	r2, [r3, #0]
 8006daa:	e78d      	b.n	8006cc8 <_dtoa_r+0x5e8>
 8006dac:	461d      	mov	r5, r3
 8006dae:	e7ec      	b.n	8006d8a <_dtoa_r+0x6aa>
 8006db0:	2200      	movs	r2, #0
 8006db2:	4ba4      	ldr	r3, [pc, #656]	; (8007044 <_dtoa_r+0x964>)
 8006db4:	f7f9 fc1c 	bl	80005f0 <__aeabi_dmul>
 8006db8:	2200      	movs	r2, #0
 8006dba:	2300      	movs	r3, #0
 8006dbc:	4606      	mov	r6, r0
 8006dbe:	460f      	mov	r7, r1
 8006dc0:	f7f9 fe7e 	bl	8000ac0 <__aeabi_dcmpeq>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d09a      	beq.n	8006cfe <_dtoa_r+0x61e>
 8006dc8:	e7ce      	b.n	8006d68 <_dtoa_r+0x688>
 8006dca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dcc:	2a00      	cmp	r2, #0
 8006dce:	f000 80cd 	beq.w	8006f6c <_dtoa_r+0x88c>
 8006dd2:	9a07      	ldr	r2, [sp, #28]
 8006dd4:	2a01      	cmp	r2, #1
 8006dd6:	f300 80af 	bgt.w	8006f38 <_dtoa_r+0x858>
 8006dda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ddc:	2a00      	cmp	r2, #0
 8006dde:	f000 80a7 	beq.w	8006f30 <_dtoa_r+0x850>
 8006de2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006de6:	9e08      	ldr	r6, [sp, #32]
 8006de8:	9d05      	ldr	r5, [sp, #20]
 8006dea:	9a05      	ldr	r2, [sp, #20]
 8006dec:	441a      	add	r2, r3
 8006dee:	9205      	str	r2, [sp, #20]
 8006df0:	9a06      	ldr	r2, [sp, #24]
 8006df2:	2101      	movs	r1, #1
 8006df4:	441a      	add	r2, r3
 8006df6:	4620      	mov	r0, r4
 8006df8:	9206      	str	r2, [sp, #24]
 8006dfa:	f000 fe67 	bl	8007acc <__i2b>
 8006dfe:	4607      	mov	r7, r0
 8006e00:	2d00      	cmp	r5, #0
 8006e02:	dd0c      	ble.n	8006e1e <_dtoa_r+0x73e>
 8006e04:	9b06      	ldr	r3, [sp, #24]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	dd09      	ble.n	8006e1e <_dtoa_r+0x73e>
 8006e0a:	42ab      	cmp	r3, r5
 8006e0c:	9a05      	ldr	r2, [sp, #20]
 8006e0e:	bfa8      	it	ge
 8006e10:	462b      	movge	r3, r5
 8006e12:	1ad2      	subs	r2, r2, r3
 8006e14:	9205      	str	r2, [sp, #20]
 8006e16:	9a06      	ldr	r2, [sp, #24]
 8006e18:	1aed      	subs	r5, r5, r3
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	9306      	str	r3, [sp, #24]
 8006e1e:	9b08      	ldr	r3, [sp, #32]
 8006e20:	b1f3      	cbz	r3, 8006e60 <_dtoa_r+0x780>
 8006e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 80a5 	beq.w	8006f74 <_dtoa_r+0x894>
 8006e2a:	2e00      	cmp	r6, #0
 8006e2c:	dd10      	ble.n	8006e50 <_dtoa_r+0x770>
 8006e2e:	4639      	mov	r1, r7
 8006e30:	4632      	mov	r2, r6
 8006e32:	4620      	mov	r0, r4
 8006e34:	f000 fee0 	bl	8007bf8 <__pow5mult>
 8006e38:	4652      	mov	r2, sl
 8006e3a:	4601      	mov	r1, r0
 8006e3c:	4607      	mov	r7, r0
 8006e3e:	4620      	mov	r0, r4
 8006e40:	f000 fe4d 	bl	8007ade <__multiply>
 8006e44:	4651      	mov	r1, sl
 8006e46:	4680      	mov	r8, r0
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f000 fd9f 	bl	800798c <_Bfree>
 8006e4e:	46c2      	mov	sl, r8
 8006e50:	9b08      	ldr	r3, [sp, #32]
 8006e52:	1b9a      	subs	r2, r3, r6
 8006e54:	d004      	beq.n	8006e60 <_dtoa_r+0x780>
 8006e56:	4651      	mov	r1, sl
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f000 fecd 	bl	8007bf8 <__pow5mult>
 8006e5e:	4682      	mov	sl, r0
 8006e60:	2101      	movs	r1, #1
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 fe32 	bl	8007acc <__i2b>
 8006e68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	4606      	mov	r6, r0
 8006e6e:	f340 8083 	ble.w	8006f78 <_dtoa_r+0x898>
 8006e72:	461a      	mov	r2, r3
 8006e74:	4601      	mov	r1, r0
 8006e76:	4620      	mov	r0, r4
 8006e78:	f000 febe 	bl	8007bf8 <__pow5mult>
 8006e7c:	9b07      	ldr	r3, [sp, #28]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	4606      	mov	r6, r0
 8006e82:	dd7c      	ble.n	8006f7e <_dtoa_r+0x89e>
 8006e84:	f04f 0800 	mov.w	r8, #0
 8006e88:	6933      	ldr	r3, [r6, #16]
 8006e8a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e8e:	6918      	ldr	r0, [r3, #16]
 8006e90:	f000 fdce 	bl	8007a30 <__hi0bits>
 8006e94:	f1c0 0020 	rsb	r0, r0, #32
 8006e98:	9b06      	ldr	r3, [sp, #24]
 8006e9a:	4418      	add	r0, r3
 8006e9c:	f010 001f 	ands.w	r0, r0, #31
 8006ea0:	f000 8096 	beq.w	8006fd0 <_dtoa_r+0x8f0>
 8006ea4:	f1c0 0320 	rsb	r3, r0, #32
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	f340 8087 	ble.w	8006fbc <_dtoa_r+0x8dc>
 8006eae:	9b05      	ldr	r3, [sp, #20]
 8006eb0:	f1c0 001c 	rsb	r0, r0, #28
 8006eb4:	4403      	add	r3, r0
 8006eb6:	9305      	str	r3, [sp, #20]
 8006eb8:	9b06      	ldr	r3, [sp, #24]
 8006eba:	4405      	add	r5, r0
 8006ebc:	4403      	add	r3, r0
 8006ebe:	9306      	str	r3, [sp, #24]
 8006ec0:	9b05      	ldr	r3, [sp, #20]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	dd05      	ble.n	8006ed2 <_dtoa_r+0x7f2>
 8006ec6:	4651      	mov	r1, sl
 8006ec8:	461a      	mov	r2, r3
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f000 fee2 	bl	8007c94 <__lshift>
 8006ed0:	4682      	mov	sl, r0
 8006ed2:	9b06      	ldr	r3, [sp, #24]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	dd05      	ble.n	8006ee4 <_dtoa_r+0x804>
 8006ed8:	4631      	mov	r1, r6
 8006eda:	461a      	mov	r2, r3
 8006edc:	4620      	mov	r0, r4
 8006ede:	f000 fed9 	bl	8007c94 <__lshift>
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d074      	beq.n	8006fd4 <_dtoa_r+0x8f4>
 8006eea:	4631      	mov	r1, r6
 8006eec:	4650      	mov	r0, sl
 8006eee:	f000 ff22 	bl	8007d36 <__mcmp>
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	da6e      	bge.n	8006fd4 <_dtoa_r+0x8f4>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	4651      	mov	r1, sl
 8006efa:	220a      	movs	r2, #10
 8006efc:	4620      	mov	r0, r4
 8006efe:	f000 fd5c 	bl	80079ba <__multadd>
 8006f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f08:	4682      	mov	sl, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 81a8 	beq.w	8007260 <_dtoa_r+0xb80>
 8006f10:	2300      	movs	r3, #0
 8006f12:	4639      	mov	r1, r7
 8006f14:	220a      	movs	r2, #10
 8006f16:	4620      	mov	r0, r4
 8006f18:	f000 fd4f 	bl	80079ba <__multadd>
 8006f1c:	9b04      	ldr	r3, [sp, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	4607      	mov	r7, r0
 8006f22:	f300 80c8 	bgt.w	80070b6 <_dtoa_r+0x9d6>
 8006f26:	9b07      	ldr	r3, [sp, #28]
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	f340 80c4 	ble.w	80070b6 <_dtoa_r+0x9d6>
 8006f2e:	e059      	b.n	8006fe4 <_dtoa_r+0x904>
 8006f30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f32:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f36:	e756      	b.n	8006de6 <_dtoa_r+0x706>
 8006f38:	9b03      	ldr	r3, [sp, #12]
 8006f3a:	1e5e      	subs	r6, r3, #1
 8006f3c:	9b08      	ldr	r3, [sp, #32]
 8006f3e:	42b3      	cmp	r3, r6
 8006f40:	bfbf      	itttt	lt
 8006f42:	9b08      	ldrlt	r3, [sp, #32]
 8006f44:	9608      	strlt	r6, [sp, #32]
 8006f46:	1af2      	sublt	r2, r6, r3
 8006f48:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8006f4a:	bfb6      	itet	lt
 8006f4c:	189b      	addlt	r3, r3, r2
 8006f4e:	1b9e      	subge	r6, r3, r6
 8006f50:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8006f52:	9b03      	ldr	r3, [sp, #12]
 8006f54:	bfb8      	it	lt
 8006f56:	2600      	movlt	r6, #0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	bfb9      	ittee	lt
 8006f5c:	9b05      	ldrlt	r3, [sp, #20]
 8006f5e:	9a03      	ldrlt	r2, [sp, #12]
 8006f60:	9d05      	ldrge	r5, [sp, #20]
 8006f62:	9b03      	ldrge	r3, [sp, #12]
 8006f64:	bfbc      	itt	lt
 8006f66:	1a9d      	sublt	r5, r3, r2
 8006f68:	2300      	movlt	r3, #0
 8006f6a:	e73e      	b.n	8006dea <_dtoa_r+0x70a>
 8006f6c:	9e08      	ldr	r6, [sp, #32]
 8006f6e:	9d05      	ldr	r5, [sp, #20]
 8006f70:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006f72:	e745      	b.n	8006e00 <_dtoa_r+0x720>
 8006f74:	9a08      	ldr	r2, [sp, #32]
 8006f76:	e76e      	b.n	8006e56 <_dtoa_r+0x776>
 8006f78:	9b07      	ldr	r3, [sp, #28]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	dc19      	bgt.n	8006fb2 <_dtoa_r+0x8d2>
 8006f7e:	9b00      	ldr	r3, [sp, #0]
 8006f80:	b9bb      	cbnz	r3, 8006fb2 <_dtoa_r+0x8d2>
 8006f82:	9b01      	ldr	r3, [sp, #4]
 8006f84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f88:	b99b      	cbnz	r3, 8006fb2 <_dtoa_r+0x8d2>
 8006f8a:	9b01      	ldr	r3, [sp, #4]
 8006f8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f90:	0d1b      	lsrs	r3, r3, #20
 8006f92:	051b      	lsls	r3, r3, #20
 8006f94:	b183      	cbz	r3, 8006fb8 <_dtoa_r+0x8d8>
 8006f96:	9b05      	ldr	r3, [sp, #20]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	9305      	str	r3, [sp, #20]
 8006f9c:	9b06      	ldr	r3, [sp, #24]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	9306      	str	r3, [sp, #24]
 8006fa2:	f04f 0801 	mov.w	r8, #1
 8006fa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f47f af6d 	bne.w	8006e88 <_dtoa_r+0x7a8>
 8006fae:	2001      	movs	r0, #1
 8006fb0:	e772      	b.n	8006e98 <_dtoa_r+0x7b8>
 8006fb2:	f04f 0800 	mov.w	r8, #0
 8006fb6:	e7f6      	b.n	8006fa6 <_dtoa_r+0x8c6>
 8006fb8:	4698      	mov	r8, r3
 8006fba:	e7f4      	b.n	8006fa6 <_dtoa_r+0x8c6>
 8006fbc:	d080      	beq.n	8006ec0 <_dtoa_r+0x7e0>
 8006fbe:	9a05      	ldr	r2, [sp, #20]
 8006fc0:	331c      	adds	r3, #28
 8006fc2:	441a      	add	r2, r3
 8006fc4:	9205      	str	r2, [sp, #20]
 8006fc6:	9a06      	ldr	r2, [sp, #24]
 8006fc8:	441a      	add	r2, r3
 8006fca:	441d      	add	r5, r3
 8006fcc:	4613      	mov	r3, r2
 8006fce:	e776      	b.n	8006ebe <_dtoa_r+0x7de>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	e7f4      	b.n	8006fbe <_dtoa_r+0x8de>
 8006fd4:	9b03      	ldr	r3, [sp, #12]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	dc36      	bgt.n	8007048 <_dtoa_r+0x968>
 8006fda:	9b07      	ldr	r3, [sp, #28]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	dd33      	ble.n	8007048 <_dtoa_r+0x968>
 8006fe0:	9b03      	ldr	r3, [sp, #12]
 8006fe2:	9304      	str	r3, [sp, #16]
 8006fe4:	9b04      	ldr	r3, [sp, #16]
 8006fe6:	b963      	cbnz	r3, 8007002 <_dtoa_r+0x922>
 8006fe8:	4631      	mov	r1, r6
 8006fea:	2205      	movs	r2, #5
 8006fec:	4620      	mov	r0, r4
 8006fee:	f000 fce4 	bl	80079ba <__multadd>
 8006ff2:	4601      	mov	r1, r0
 8006ff4:	4606      	mov	r6, r0
 8006ff6:	4650      	mov	r0, sl
 8006ff8:	f000 fe9d 	bl	8007d36 <__mcmp>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	f73f adb6 	bgt.w	8006b6e <_dtoa_r+0x48e>
 8007002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007004:	9d02      	ldr	r5, [sp, #8]
 8007006:	ea6f 0b03 	mvn.w	fp, r3
 800700a:	2300      	movs	r3, #0
 800700c:	9303      	str	r3, [sp, #12]
 800700e:	4631      	mov	r1, r6
 8007010:	4620      	mov	r0, r4
 8007012:	f000 fcbb 	bl	800798c <_Bfree>
 8007016:	2f00      	cmp	r7, #0
 8007018:	f43f aea6 	beq.w	8006d68 <_dtoa_r+0x688>
 800701c:	9b03      	ldr	r3, [sp, #12]
 800701e:	b12b      	cbz	r3, 800702c <_dtoa_r+0x94c>
 8007020:	42bb      	cmp	r3, r7
 8007022:	d003      	beq.n	800702c <_dtoa_r+0x94c>
 8007024:	4619      	mov	r1, r3
 8007026:	4620      	mov	r0, r4
 8007028:	f000 fcb0 	bl	800798c <_Bfree>
 800702c:	4639      	mov	r1, r7
 800702e:	4620      	mov	r0, r4
 8007030:	f000 fcac 	bl	800798c <_Bfree>
 8007034:	e698      	b.n	8006d68 <_dtoa_r+0x688>
 8007036:	2600      	movs	r6, #0
 8007038:	4637      	mov	r7, r6
 800703a:	e7e2      	b.n	8007002 <_dtoa_r+0x922>
 800703c:	46bb      	mov	fp, r7
 800703e:	4637      	mov	r7, r6
 8007040:	e595      	b.n	8006b6e <_dtoa_r+0x48e>
 8007042:	bf00      	nop
 8007044:	40240000 	.word	0x40240000
 8007048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800704a:	bb93      	cbnz	r3, 80070b2 <_dtoa_r+0x9d2>
 800704c:	9b03      	ldr	r3, [sp, #12]
 800704e:	9304      	str	r3, [sp, #16]
 8007050:	9d02      	ldr	r5, [sp, #8]
 8007052:	4631      	mov	r1, r6
 8007054:	4650      	mov	r0, sl
 8007056:	f7ff fab5 	bl	80065c4 <quorem>
 800705a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800705e:	f805 9b01 	strb.w	r9, [r5], #1
 8007062:	9b02      	ldr	r3, [sp, #8]
 8007064:	9a04      	ldr	r2, [sp, #16]
 8007066:	1aeb      	subs	r3, r5, r3
 8007068:	429a      	cmp	r2, r3
 800706a:	f300 80dc 	bgt.w	8007226 <_dtoa_r+0xb46>
 800706e:	9b02      	ldr	r3, [sp, #8]
 8007070:	2a01      	cmp	r2, #1
 8007072:	bfac      	ite	ge
 8007074:	189b      	addge	r3, r3, r2
 8007076:	3301      	addlt	r3, #1
 8007078:	4698      	mov	r8, r3
 800707a:	2300      	movs	r3, #0
 800707c:	9303      	str	r3, [sp, #12]
 800707e:	4651      	mov	r1, sl
 8007080:	2201      	movs	r2, #1
 8007082:	4620      	mov	r0, r4
 8007084:	f000 fe06 	bl	8007c94 <__lshift>
 8007088:	4631      	mov	r1, r6
 800708a:	4682      	mov	sl, r0
 800708c:	f000 fe53 	bl	8007d36 <__mcmp>
 8007090:	2800      	cmp	r0, #0
 8007092:	f300 808d 	bgt.w	80071b0 <_dtoa_r+0xad0>
 8007096:	d103      	bne.n	80070a0 <_dtoa_r+0x9c0>
 8007098:	f019 0f01 	tst.w	r9, #1
 800709c:	f040 8088 	bne.w	80071b0 <_dtoa_r+0xad0>
 80070a0:	4645      	mov	r5, r8
 80070a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80070a6:	2b30      	cmp	r3, #48	; 0x30
 80070a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80070ac:	d1af      	bne.n	800700e <_dtoa_r+0x92e>
 80070ae:	4615      	mov	r5, r2
 80070b0:	e7f7      	b.n	80070a2 <_dtoa_r+0x9c2>
 80070b2:	9b03      	ldr	r3, [sp, #12]
 80070b4:	9304      	str	r3, [sp, #16]
 80070b6:	2d00      	cmp	r5, #0
 80070b8:	dd05      	ble.n	80070c6 <_dtoa_r+0x9e6>
 80070ba:	4639      	mov	r1, r7
 80070bc:	462a      	mov	r2, r5
 80070be:	4620      	mov	r0, r4
 80070c0:	f000 fde8 	bl	8007c94 <__lshift>
 80070c4:	4607      	mov	r7, r0
 80070c6:	f1b8 0f00 	cmp.w	r8, #0
 80070ca:	d04c      	beq.n	8007166 <_dtoa_r+0xa86>
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	4620      	mov	r0, r4
 80070d0:	f000 fc28 	bl	8007924 <_Balloc>
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	3202      	adds	r2, #2
 80070d8:	4605      	mov	r5, r0
 80070da:	0092      	lsls	r2, r2, #2
 80070dc:	f107 010c 	add.w	r1, r7, #12
 80070e0:	300c      	adds	r0, #12
 80070e2:	f7fe f93d 	bl	8005360 <memcpy>
 80070e6:	2201      	movs	r2, #1
 80070e8:	4629      	mov	r1, r5
 80070ea:	4620      	mov	r0, r4
 80070ec:	f000 fdd2 	bl	8007c94 <__lshift>
 80070f0:	9b00      	ldr	r3, [sp, #0]
 80070f2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80070f6:	9703      	str	r7, [sp, #12]
 80070f8:	f003 0301 	and.w	r3, r3, #1
 80070fc:	4607      	mov	r7, r0
 80070fe:	9305      	str	r3, [sp, #20]
 8007100:	4631      	mov	r1, r6
 8007102:	4650      	mov	r0, sl
 8007104:	f7ff fa5e 	bl	80065c4 <quorem>
 8007108:	9903      	ldr	r1, [sp, #12]
 800710a:	4605      	mov	r5, r0
 800710c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007110:	4650      	mov	r0, sl
 8007112:	f000 fe10 	bl	8007d36 <__mcmp>
 8007116:	463a      	mov	r2, r7
 8007118:	9000      	str	r0, [sp, #0]
 800711a:	4631      	mov	r1, r6
 800711c:	4620      	mov	r0, r4
 800711e:	f000 fe24 	bl	8007d6a <__mdiff>
 8007122:	68c3      	ldr	r3, [r0, #12]
 8007124:	4602      	mov	r2, r0
 8007126:	bb03      	cbnz	r3, 800716a <_dtoa_r+0xa8a>
 8007128:	4601      	mov	r1, r0
 800712a:	9006      	str	r0, [sp, #24]
 800712c:	4650      	mov	r0, sl
 800712e:	f000 fe02 	bl	8007d36 <__mcmp>
 8007132:	9a06      	ldr	r2, [sp, #24]
 8007134:	4603      	mov	r3, r0
 8007136:	4611      	mov	r1, r2
 8007138:	4620      	mov	r0, r4
 800713a:	9306      	str	r3, [sp, #24]
 800713c:	f000 fc26 	bl	800798c <_Bfree>
 8007140:	9b06      	ldr	r3, [sp, #24]
 8007142:	b9a3      	cbnz	r3, 800716e <_dtoa_r+0xa8e>
 8007144:	9a07      	ldr	r2, [sp, #28]
 8007146:	b992      	cbnz	r2, 800716e <_dtoa_r+0xa8e>
 8007148:	9a05      	ldr	r2, [sp, #20]
 800714a:	b982      	cbnz	r2, 800716e <_dtoa_r+0xa8e>
 800714c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007150:	d029      	beq.n	80071a6 <_dtoa_r+0xac6>
 8007152:	9b00      	ldr	r3, [sp, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	dd01      	ble.n	800715c <_dtoa_r+0xa7c>
 8007158:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800715c:	f108 0501 	add.w	r5, r8, #1
 8007160:	f888 9000 	strb.w	r9, [r8]
 8007164:	e753      	b.n	800700e <_dtoa_r+0x92e>
 8007166:	4638      	mov	r0, r7
 8007168:	e7c2      	b.n	80070f0 <_dtoa_r+0xa10>
 800716a:	2301      	movs	r3, #1
 800716c:	e7e3      	b.n	8007136 <_dtoa_r+0xa56>
 800716e:	9a00      	ldr	r2, [sp, #0]
 8007170:	2a00      	cmp	r2, #0
 8007172:	db04      	blt.n	800717e <_dtoa_r+0xa9e>
 8007174:	d125      	bne.n	80071c2 <_dtoa_r+0xae2>
 8007176:	9a07      	ldr	r2, [sp, #28]
 8007178:	bb1a      	cbnz	r2, 80071c2 <_dtoa_r+0xae2>
 800717a:	9a05      	ldr	r2, [sp, #20]
 800717c:	bb0a      	cbnz	r2, 80071c2 <_dtoa_r+0xae2>
 800717e:	2b00      	cmp	r3, #0
 8007180:	ddec      	ble.n	800715c <_dtoa_r+0xa7c>
 8007182:	4651      	mov	r1, sl
 8007184:	2201      	movs	r2, #1
 8007186:	4620      	mov	r0, r4
 8007188:	f000 fd84 	bl	8007c94 <__lshift>
 800718c:	4631      	mov	r1, r6
 800718e:	4682      	mov	sl, r0
 8007190:	f000 fdd1 	bl	8007d36 <__mcmp>
 8007194:	2800      	cmp	r0, #0
 8007196:	dc03      	bgt.n	80071a0 <_dtoa_r+0xac0>
 8007198:	d1e0      	bne.n	800715c <_dtoa_r+0xa7c>
 800719a:	f019 0f01 	tst.w	r9, #1
 800719e:	d0dd      	beq.n	800715c <_dtoa_r+0xa7c>
 80071a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80071a4:	d1d8      	bne.n	8007158 <_dtoa_r+0xa78>
 80071a6:	2339      	movs	r3, #57	; 0x39
 80071a8:	f888 3000 	strb.w	r3, [r8]
 80071ac:	f108 0801 	add.w	r8, r8, #1
 80071b0:	4645      	mov	r5, r8
 80071b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80071b6:	2b39      	cmp	r3, #57	; 0x39
 80071b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80071bc:	d03b      	beq.n	8007236 <_dtoa_r+0xb56>
 80071be:	3301      	adds	r3, #1
 80071c0:	e040      	b.n	8007244 <_dtoa_r+0xb64>
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f108 0501 	add.w	r5, r8, #1
 80071c8:	dd05      	ble.n	80071d6 <_dtoa_r+0xaf6>
 80071ca:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80071ce:	d0ea      	beq.n	80071a6 <_dtoa_r+0xac6>
 80071d0:	f109 0901 	add.w	r9, r9, #1
 80071d4:	e7c4      	b.n	8007160 <_dtoa_r+0xa80>
 80071d6:	9b02      	ldr	r3, [sp, #8]
 80071d8:	9a04      	ldr	r2, [sp, #16]
 80071da:	f805 9c01 	strb.w	r9, [r5, #-1]
 80071de:	1aeb      	subs	r3, r5, r3
 80071e0:	4293      	cmp	r3, r2
 80071e2:	46a8      	mov	r8, r5
 80071e4:	f43f af4b 	beq.w	800707e <_dtoa_r+0x99e>
 80071e8:	4651      	mov	r1, sl
 80071ea:	2300      	movs	r3, #0
 80071ec:	220a      	movs	r2, #10
 80071ee:	4620      	mov	r0, r4
 80071f0:	f000 fbe3 	bl	80079ba <__multadd>
 80071f4:	9b03      	ldr	r3, [sp, #12]
 80071f6:	9903      	ldr	r1, [sp, #12]
 80071f8:	42bb      	cmp	r3, r7
 80071fa:	4682      	mov	sl, r0
 80071fc:	f04f 0300 	mov.w	r3, #0
 8007200:	f04f 020a 	mov.w	r2, #10
 8007204:	4620      	mov	r0, r4
 8007206:	d104      	bne.n	8007212 <_dtoa_r+0xb32>
 8007208:	f000 fbd7 	bl	80079ba <__multadd>
 800720c:	9003      	str	r0, [sp, #12]
 800720e:	4607      	mov	r7, r0
 8007210:	e776      	b.n	8007100 <_dtoa_r+0xa20>
 8007212:	f000 fbd2 	bl	80079ba <__multadd>
 8007216:	2300      	movs	r3, #0
 8007218:	9003      	str	r0, [sp, #12]
 800721a:	220a      	movs	r2, #10
 800721c:	4639      	mov	r1, r7
 800721e:	4620      	mov	r0, r4
 8007220:	f000 fbcb 	bl	80079ba <__multadd>
 8007224:	e7f3      	b.n	800720e <_dtoa_r+0xb2e>
 8007226:	4651      	mov	r1, sl
 8007228:	2300      	movs	r3, #0
 800722a:	220a      	movs	r2, #10
 800722c:	4620      	mov	r0, r4
 800722e:	f000 fbc4 	bl	80079ba <__multadd>
 8007232:	4682      	mov	sl, r0
 8007234:	e70d      	b.n	8007052 <_dtoa_r+0x972>
 8007236:	9b02      	ldr	r3, [sp, #8]
 8007238:	4293      	cmp	r3, r2
 800723a:	d105      	bne.n	8007248 <_dtoa_r+0xb68>
 800723c:	9a02      	ldr	r2, [sp, #8]
 800723e:	f10b 0b01 	add.w	fp, fp, #1
 8007242:	2331      	movs	r3, #49	; 0x31
 8007244:	7013      	strb	r3, [r2, #0]
 8007246:	e6e2      	b.n	800700e <_dtoa_r+0x92e>
 8007248:	4615      	mov	r5, r2
 800724a:	e7b2      	b.n	80071b2 <_dtoa_r+0xad2>
 800724c:	4b09      	ldr	r3, [pc, #36]	; (8007274 <_dtoa_r+0xb94>)
 800724e:	f7ff baae 	b.w	80067ae <_dtoa_r+0xce>
 8007252:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007254:	2b00      	cmp	r3, #0
 8007256:	f47f aa88 	bne.w	800676a <_dtoa_r+0x8a>
 800725a:	4b07      	ldr	r3, [pc, #28]	; (8007278 <_dtoa_r+0xb98>)
 800725c:	f7ff baa7 	b.w	80067ae <_dtoa_r+0xce>
 8007260:	9b04      	ldr	r3, [sp, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	f73f aef4 	bgt.w	8007050 <_dtoa_r+0x970>
 8007268:	9b07      	ldr	r3, [sp, #28]
 800726a:	2b02      	cmp	r3, #2
 800726c:	f77f aef0 	ble.w	8007050 <_dtoa_r+0x970>
 8007270:	e6b8      	b.n	8006fe4 <_dtoa_r+0x904>
 8007272:	bf00      	nop
 8007274:	08008d54 	.word	0x08008d54
 8007278:	08008d76 	.word	0x08008d76

0800727c <__sflush_r>:
 800727c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007280:	b293      	uxth	r3, r2
 8007282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007286:	4605      	mov	r5, r0
 8007288:	0718      	lsls	r0, r3, #28
 800728a:	460c      	mov	r4, r1
 800728c:	d461      	bmi.n	8007352 <__sflush_r+0xd6>
 800728e:	684b      	ldr	r3, [r1, #4]
 8007290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007294:	2b00      	cmp	r3, #0
 8007296:	818a      	strh	r2, [r1, #12]
 8007298:	dc05      	bgt.n	80072a6 <__sflush_r+0x2a>
 800729a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800729c:	2b00      	cmp	r3, #0
 800729e:	dc02      	bgt.n	80072a6 <__sflush_r+0x2a>
 80072a0:	2000      	movs	r0, #0
 80072a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072a8:	2e00      	cmp	r6, #0
 80072aa:	d0f9      	beq.n	80072a0 <__sflush_r+0x24>
 80072ac:	2300      	movs	r3, #0
 80072ae:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072b2:	682f      	ldr	r7, [r5, #0]
 80072b4:	602b      	str	r3, [r5, #0]
 80072b6:	d037      	beq.n	8007328 <__sflush_r+0xac>
 80072b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072ba:	89a3      	ldrh	r3, [r4, #12]
 80072bc:	075a      	lsls	r2, r3, #29
 80072be:	d505      	bpl.n	80072cc <__sflush_r+0x50>
 80072c0:	6863      	ldr	r3, [r4, #4]
 80072c2:	1ac0      	subs	r0, r0, r3
 80072c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072c6:	b10b      	cbz	r3, 80072cc <__sflush_r+0x50>
 80072c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072ca:	1ac0      	subs	r0, r0, r3
 80072cc:	2300      	movs	r3, #0
 80072ce:	4602      	mov	r2, r0
 80072d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072d2:	6a21      	ldr	r1, [r4, #32]
 80072d4:	4628      	mov	r0, r5
 80072d6:	47b0      	blx	r6
 80072d8:	1c43      	adds	r3, r0, #1
 80072da:	89a3      	ldrh	r3, [r4, #12]
 80072dc:	d106      	bne.n	80072ec <__sflush_r+0x70>
 80072de:	6829      	ldr	r1, [r5, #0]
 80072e0:	291d      	cmp	r1, #29
 80072e2:	d84f      	bhi.n	8007384 <__sflush_r+0x108>
 80072e4:	4a2d      	ldr	r2, [pc, #180]	; (800739c <__sflush_r+0x120>)
 80072e6:	40ca      	lsrs	r2, r1
 80072e8:	07d6      	lsls	r6, r2, #31
 80072ea:	d54b      	bpl.n	8007384 <__sflush_r+0x108>
 80072ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072f0:	b21b      	sxth	r3, r3
 80072f2:	2200      	movs	r2, #0
 80072f4:	6062      	str	r2, [r4, #4]
 80072f6:	04d9      	lsls	r1, r3, #19
 80072f8:	6922      	ldr	r2, [r4, #16]
 80072fa:	81a3      	strh	r3, [r4, #12]
 80072fc:	6022      	str	r2, [r4, #0]
 80072fe:	d504      	bpl.n	800730a <__sflush_r+0x8e>
 8007300:	1c42      	adds	r2, r0, #1
 8007302:	d101      	bne.n	8007308 <__sflush_r+0x8c>
 8007304:	682b      	ldr	r3, [r5, #0]
 8007306:	b903      	cbnz	r3, 800730a <__sflush_r+0x8e>
 8007308:	6560      	str	r0, [r4, #84]	; 0x54
 800730a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800730c:	602f      	str	r7, [r5, #0]
 800730e:	2900      	cmp	r1, #0
 8007310:	d0c6      	beq.n	80072a0 <__sflush_r+0x24>
 8007312:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007316:	4299      	cmp	r1, r3
 8007318:	d002      	beq.n	8007320 <__sflush_r+0xa4>
 800731a:	4628      	mov	r0, r5
 800731c:	f000 f9aa 	bl	8007674 <_free_r>
 8007320:	2000      	movs	r0, #0
 8007322:	6360      	str	r0, [r4, #52]	; 0x34
 8007324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007328:	6a21      	ldr	r1, [r4, #32]
 800732a:	2301      	movs	r3, #1
 800732c:	4628      	mov	r0, r5
 800732e:	47b0      	blx	r6
 8007330:	1c41      	adds	r1, r0, #1
 8007332:	d1c2      	bne.n	80072ba <__sflush_r+0x3e>
 8007334:	682b      	ldr	r3, [r5, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d0bf      	beq.n	80072ba <__sflush_r+0x3e>
 800733a:	2b1d      	cmp	r3, #29
 800733c:	d001      	beq.n	8007342 <__sflush_r+0xc6>
 800733e:	2b16      	cmp	r3, #22
 8007340:	d101      	bne.n	8007346 <__sflush_r+0xca>
 8007342:	602f      	str	r7, [r5, #0]
 8007344:	e7ac      	b.n	80072a0 <__sflush_r+0x24>
 8007346:	89a3      	ldrh	r3, [r4, #12]
 8007348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800734c:	81a3      	strh	r3, [r4, #12]
 800734e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007352:	690f      	ldr	r7, [r1, #16]
 8007354:	2f00      	cmp	r7, #0
 8007356:	d0a3      	beq.n	80072a0 <__sflush_r+0x24>
 8007358:	079b      	lsls	r3, r3, #30
 800735a:	680e      	ldr	r6, [r1, #0]
 800735c:	bf08      	it	eq
 800735e:	694b      	ldreq	r3, [r1, #20]
 8007360:	600f      	str	r7, [r1, #0]
 8007362:	bf18      	it	ne
 8007364:	2300      	movne	r3, #0
 8007366:	eba6 0807 	sub.w	r8, r6, r7
 800736a:	608b      	str	r3, [r1, #8]
 800736c:	f1b8 0f00 	cmp.w	r8, #0
 8007370:	dd96      	ble.n	80072a0 <__sflush_r+0x24>
 8007372:	4643      	mov	r3, r8
 8007374:	463a      	mov	r2, r7
 8007376:	6a21      	ldr	r1, [r4, #32]
 8007378:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800737a:	4628      	mov	r0, r5
 800737c:	47b0      	blx	r6
 800737e:	2800      	cmp	r0, #0
 8007380:	dc07      	bgt.n	8007392 <__sflush_r+0x116>
 8007382:	89a3      	ldrh	r3, [r4, #12]
 8007384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007388:	81a3      	strh	r3, [r4, #12]
 800738a:	f04f 30ff 	mov.w	r0, #4294967295
 800738e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007392:	4407      	add	r7, r0
 8007394:	eba8 0800 	sub.w	r8, r8, r0
 8007398:	e7e8      	b.n	800736c <__sflush_r+0xf0>
 800739a:	bf00      	nop
 800739c:	20400001 	.word	0x20400001

080073a0 <_fflush_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	690b      	ldr	r3, [r1, #16]
 80073a4:	4605      	mov	r5, r0
 80073a6:	460c      	mov	r4, r1
 80073a8:	b913      	cbnz	r3, 80073b0 <_fflush_r+0x10>
 80073aa:	2500      	movs	r5, #0
 80073ac:	4628      	mov	r0, r5
 80073ae:	bd38      	pop	{r3, r4, r5, pc}
 80073b0:	b118      	cbz	r0, 80073ba <_fflush_r+0x1a>
 80073b2:	6983      	ldr	r3, [r0, #24]
 80073b4:	b90b      	cbnz	r3, 80073ba <_fflush_r+0x1a>
 80073b6:	f000 f887 	bl	80074c8 <__sinit>
 80073ba:	4b14      	ldr	r3, [pc, #80]	; (800740c <_fflush_r+0x6c>)
 80073bc:	429c      	cmp	r4, r3
 80073be:	d11b      	bne.n	80073f8 <_fflush_r+0x58>
 80073c0:	686c      	ldr	r4, [r5, #4]
 80073c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0ef      	beq.n	80073aa <_fflush_r+0xa>
 80073ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073cc:	07d0      	lsls	r0, r2, #31
 80073ce:	d404      	bmi.n	80073da <_fflush_r+0x3a>
 80073d0:	0599      	lsls	r1, r3, #22
 80073d2:	d402      	bmi.n	80073da <_fflush_r+0x3a>
 80073d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073d6:	f000 fa37 	bl	8007848 <__retarget_lock_acquire_recursive>
 80073da:	4628      	mov	r0, r5
 80073dc:	4621      	mov	r1, r4
 80073de:	f7ff ff4d 	bl	800727c <__sflush_r>
 80073e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073e4:	07da      	lsls	r2, r3, #31
 80073e6:	4605      	mov	r5, r0
 80073e8:	d4e0      	bmi.n	80073ac <_fflush_r+0xc>
 80073ea:	89a3      	ldrh	r3, [r4, #12]
 80073ec:	059b      	lsls	r3, r3, #22
 80073ee:	d4dd      	bmi.n	80073ac <_fflush_r+0xc>
 80073f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073f2:	f000 fa2a 	bl	800784a <__retarget_lock_release_recursive>
 80073f6:	e7d9      	b.n	80073ac <_fflush_r+0xc>
 80073f8:	4b05      	ldr	r3, [pc, #20]	; (8007410 <_fflush_r+0x70>)
 80073fa:	429c      	cmp	r4, r3
 80073fc:	d101      	bne.n	8007402 <_fflush_r+0x62>
 80073fe:	68ac      	ldr	r4, [r5, #8]
 8007400:	e7df      	b.n	80073c2 <_fflush_r+0x22>
 8007402:	4b04      	ldr	r3, [pc, #16]	; (8007414 <_fflush_r+0x74>)
 8007404:	429c      	cmp	r4, r3
 8007406:	bf08      	it	eq
 8007408:	68ec      	ldreq	r4, [r5, #12]
 800740a:	e7da      	b.n	80073c2 <_fflush_r+0x22>
 800740c:	08008da4 	.word	0x08008da4
 8007410:	08008dc4 	.word	0x08008dc4
 8007414:	08008d84 	.word	0x08008d84

08007418 <_cleanup_r>:
 8007418:	4901      	ldr	r1, [pc, #4]	; (8007420 <_cleanup_r+0x8>)
 800741a:	f000 b9e7 	b.w	80077ec <_fwalk_reent>
 800741e:	bf00      	nop
 8007420:	08008055 	.word	0x08008055

08007424 <std.isra.0>:
 8007424:	2300      	movs	r3, #0
 8007426:	b510      	push	{r4, lr}
 8007428:	4604      	mov	r4, r0
 800742a:	6003      	str	r3, [r0, #0]
 800742c:	6043      	str	r3, [r0, #4]
 800742e:	6083      	str	r3, [r0, #8]
 8007430:	8181      	strh	r1, [r0, #12]
 8007432:	6643      	str	r3, [r0, #100]	; 0x64
 8007434:	81c2      	strh	r2, [r0, #14]
 8007436:	6103      	str	r3, [r0, #16]
 8007438:	6143      	str	r3, [r0, #20]
 800743a:	6183      	str	r3, [r0, #24]
 800743c:	4619      	mov	r1, r3
 800743e:	2208      	movs	r2, #8
 8007440:	305c      	adds	r0, #92	; 0x5c
 8007442:	f7fd ff98 	bl	8005376 <memset>
 8007446:	4b05      	ldr	r3, [pc, #20]	; (800745c <std.isra.0+0x38>)
 8007448:	6263      	str	r3, [r4, #36]	; 0x24
 800744a:	4b05      	ldr	r3, [pc, #20]	; (8007460 <std.isra.0+0x3c>)
 800744c:	62a3      	str	r3, [r4, #40]	; 0x28
 800744e:	4b05      	ldr	r3, [pc, #20]	; (8007464 <std.isra.0+0x40>)
 8007450:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007452:	4b05      	ldr	r3, [pc, #20]	; (8007468 <std.isra.0+0x44>)
 8007454:	6224      	str	r4, [r4, #32]
 8007456:	6323      	str	r3, [r4, #48]	; 0x30
 8007458:	bd10      	pop	{r4, pc}
 800745a:	bf00      	nop
 800745c:	08007ec5 	.word	0x08007ec5
 8007460:	08007ee7 	.word	0x08007ee7
 8007464:	08007f1f 	.word	0x08007f1f
 8007468:	08007f43 	.word	0x08007f43

0800746c <__sfmoreglue>:
 800746c:	b570      	push	{r4, r5, r6, lr}
 800746e:	1e4a      	subs	r2, r1, #1
 8007470:	2568      	movs	r5, #104	; 0x68
 8007472:	4355      	muls	r5, r2
 8007474:	460e      	mov	r6, r1
 8007476:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800747a:	f7fd fd63 	bl	8004f44 <_malloc_r>
 800747e:	4604      	mov	r4, r0
 8007480:	b140      	cbz	r0, 8007494 <__sfmoreglue+0x28>
 8007482:	2100      	movs	r1, #0
 8007484:	e880 0042 	stmia.w	r0, {r1, r6}
 8007488:	300c      	adds	r0, #12
 800748a:	60a0      	str	r0, [r4, #8]
 800748c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007490:	f7fd ff71 	bl	8005376 <memset>
 8007494:	4620      	mov	r0, r4
 8007496:	bd70      	pop	{r4, r5, r6, pc}

08007498 <__sfp_lock_acquire>:
 8007498:	4801      	ldr	r0, [pc, #4]	; (80074a0 <__sfp_lock_acquire+0x8>)
 800749a:	f000 b9d5 	b.w	8007848 <__retarget_lock_acquire_recursive>
 800749e:	bf00      	nop
 80074a0:	20001dfc 	.word	0x20001dfc

080074a4 <__sfp_lock_release>:
 80074a4:	4801      	ldr	r0, [pc, #4]	; (80074ac <__sfp_lock_release+0x8>)
 80074a6:	f000 b9d0 	b.w	800784a <__retarget_lock_release_recursive>
 80074aa:	bf00      	nop
 80074ac:	20001dfc 	.word	0x20001dfc

080074b0 <__sinit_lock_acquire>:
 80074b0:	4801      	ldr	r0, [pc, #4]	; (80074b8 <__sinit_lock_acquire+0x8>)
 80074b2:	f000 b9c9 	b.w	8007848 <__retarget_lock_acquire_recursive>
 80074b6:	bf00      	nop
 80074b8:	20001df7 	.word	0x20001df7

080074bc <__sinit_lock_release>:
 80074bc:	4801      	ldr	r0, [pc, #4]	; (80074c4 <__sinit_lock_release+0x8>)
 80074be:	f000 b9c4 	b.w	800784a <__retarget_lock_release_recursive>
 80074c2:	bf00      	nop
 80074c4:	20001df7 	.word	0x20001df7

080074c8 <__sinit>:
 80074c8:	b510      	push	{r4, lr}
 80074ca:	4604      	mov	r4, r0
 80074cc:	f7ff fff0 	bl	80074b0 <__sinit_lock_acquire>
 80074d0:	69a3      	ldr	r3, [r4, #24]
 80074d2:	b11b      	cbz	r3, 80074dc <__sinit+0x14>
 80074d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074d8:	f7ff bff0 	b.w	80074bc <__sinit_lock_release>
 80074dc:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80074e0:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 80074e4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80074e8:	4b12      	ldr	r3, [pc, #72]	; (8007534 <__sinit+0x6c>)
 80074ea:	4a13      	ldr	r2, [pc, #76]	; (8007538 <__sinit+0x70>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	62a2      	str	r2, [r4, #40]	; 0x28
 80074f0:	429c      	cmp	r4, r3
 80074f2:	bf04      	itt	eq
 80074f4:	2301      	moveq	r3, #1
 80074f6:	61a3      	streq	r3, [r4, #24]
 80074f8:	4620      	mov	r0, r4
 80074fa:	f000 f81f 	bl	800753c <__sfp>
 80074fe:	6060      	str	r0, [r4, #4]
 8007500:	4620      	mov	r0, r4
 8007502:	f000 f81b 	bl	800753c <__sfp>
 8007506:	60a0      	str	r0, [r4, #8]
 8007508:	4620      	mov	r0, r4
 800750a:	f000 f817 	bl	800753c <__sfp>
 800750e:	2200      	movs	r2, #0
 8007510:	60e0      	str	r0, [r4, #12]
 8007512:	2104      	movs	r1, #4
 8007514:	6860      	ldr	r0, [r4, #4]
 8007516:	f7ff ff85 	bl	8007424 <std.isra.0>
 800751a:	2201      	movs	r2, #1
 800751c:	2109      	movs	r1, #9
 800751e:	68a0      	ldr	r0, [r4, #8]
 8007520:	f7ff ff80 	bl	8007424 <std.isra.0>
 8007524:	2202      	movs	r2, #2
 8007526:	2112      	movs	r1, #18
 8007528:	68e0      	ldr	r0, [r4, #12]
 800752a:	f7ff ff7b 	bl	8007424 <std.isra.0>
 800752e:	2301      	movs	r3, #1
 8007530:	61a3      	str	r3, [r4, #24]
 8007532:	e7cf      	b.n	80074d4 <__sinit+0xc>
 8007534:	08008de4 	.word	0x08008de4
 8007538:	08007419 	.word	0x08007419

0800753c <__sfp>:
 800753c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753e:	4607      	mov	r7, r0
 8007540:	f7ff ffaa 	bl	8007498 <__sfp_lock_acquire>
 8007544:	4b1f      	ldr	r3, [pc, #124]	; (80075c4 <__sfp+0x88>)
 8007546:	681e      	ldr	r6, [r3, #0]
 8007548:	69b3      	ldr	r3, [r6, #24]
 800754a:	b913      	cbnz	r3, 8007552 <__sfp+0x16>
 800754c:	4630      	mov	r0, r6
 800754e:	f7ff ffbb 	bl	80074c8 <__sinit>
 8007552:	36d8      	adds	r6, #216	; 0xd8
 8007554:	68b4      	ldr	r4, [r6, #8]
 8007556:	6873      	ldr	r3, [r6, #4]
 8007558:	3b01      	subs	r3, #1
 800755a:	d503      	bpl.n	8007564 <__sfp+0x28>
 800755c:	6833      	ldr	r3, [r6, #0]
 800755e:	b133      	cbz	r3, 800756e <__sfp+0x32>
 8007560:	6836      	ldr	r6, [r6, #0]
 8007562:	e7f7      	b.n	8007554 <__sfp+0x18>
 8007564:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007568:	b17d      	cbz	r5, 800758a <__sfp+0x4e>
 800756a:	3468      	adds	r4, #104	; 0x68
 800756c:	e7f4      	b.n	8007558 <__sfp+0x1c>
 800756e:	2104      	movs	r1, #4
 8007570:	4638      	mov	r0, r7
 8007572:	f7ff ff7b 	bl	800746c <__sfmoreglue>
 8007576:	4604      	mov	r4, r0
 8007578:	6030      	str	r0, [r6, #0]
 800757a:	2800      	cmp	r0, #0
 800757c:	d1f0      	bne.n	8007560 <__sfp+0x24>
 800757e:	f7ff ff91 	bl	80074a4 <__sfp_lock_release>
 8007582:	230c      	movs	r3, #12
 8007584:	603b      	str	r3, [r7, #0]
 8007586:	4620      	mov	r0, r4
 8007588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800758a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800758e:	81e3      	strh	r3, [r4, #14]
 8007590:	2301      	movs	r3, #1
 8007592:	81a3      	strh	r3, [r4, #12]
 8007594:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007598:	6665      	str	r5, [r4, #100]	; 0x64
 800759a:	f000 f953 	bl	8007844 <__retarget_lock_init_recursive>
 800759e:	f7ff ff81 	bl	80074a4 <__sfp_lock_release>
 80075a2:	6025      	str	r5, [r4, #0]
 80075a4:	60a5      	str	r5, [r4, #8]
 80075a6:	6065      	str	r5, [r4, #4]
 80075a8:	6125      	str	r5, [r4, #16]
 80075aa:	6165      	str	r5, [r4, #20]
 80075ac:	61a5      	str	r5, [r4, #24]
 80075ae:	2208      	movs	r2, #8
 80075b0:	4629      	mov	r1, r5
 80075b2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075b6:	f7fd fede 	bl	8005376 <memset>
 80075ba:	6365      	str	r5, [r4, #52]	; 0x34
 80075bc:	63a5      	str	r5, [r4, #56]	; 0x38
 80075be:	64a5      	str	r5, [r4, #72]	; 0x48
 80075c0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80075c2:	e7e0      	b.n	8007586 <__sfp+0x4a>
 80075c4:	08008de4 	.word	0x08008de4

080075c8 <_malloc_trim_r>:
 80075c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075cc:	4f25      	ldr	r7, [pc, #148]	; (8007664 <_malloc_trim_r+0x9c>)
 80075ce:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8007670 <_malloc_trim_r+0xa8>
 80075d2:	4689      	mov	r9, r1
 80075d4:	4606      	mov	r6, r0
 80075d6:	f7fd fed7 	bl	8005388 <__malloc_lock>
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	685d      	ldr	r5, [r3, #4]
 80075de:	f1a8 0411 	sub.w	r4, r8, #17
 80075e2:	f025 0503 	bic.w	r5, r5, #3
 80075e6:	eba4 0409 	sub.w	r4, r4, r9
 80075ea:	442c      	add	r4, r5
 80075ec:	fbb4 f4f8 	udiv	r4, r4, r8
 80075f0:	3c01      	subs	r4, #1
 80075f2:	fb08 f404 	mul.w	r4, r8, r4
 80075f6:	4544      	cmp	r4, r8
 80075f8:	da05      	bge.n	8007606 <_malloc_trim_r+0x3e>
 80075fa:	4630      	mov	r0, r6
 80075fc:	f7fd feca 	bl	8005394 <__malloc_unlock>
 8007600:	2000      	movs	r0, #0
 8007602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007606:	2100      	movs	r1, #0
 8007608:	4630      	mov	r0, r6
 800760a:	f7fd fee1 	bl	80053d0 <_sbrk_r>
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	442b      	add	r3, r5
 8007612:	4298      	cmp	r0, r3
 8007614:	d1f1      	bne.n	80075fa <_malloc_trim_r+0x32>
 8007616:	4261      	negs	r1, r4
 8007618:	4630      	mov	r0, r6
 800761a:	f7fd fed9 	bl	80053d0 <_sbrk_r>
 800761e:	3001      	adds	r0, #1
 8007620:	d110      	bne.n	8007644 <_malloc_trim_r+0x7c>
 8007622:	2100      	movs	r1, #0
 8007624:	4630      	mov	r0, r6
 8007626:	f7fd fed3 	bl	80053d0 <_sbrk_r>
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	1a83      	subs	r3, r0, r2
 800762e:	2b0f      	cmp	r3, #15
 8007630:	dde3      	ble.n	80075fa <_malloc_trim_r+0x32>
 8007632:	490d      	ldr	r1, [pc, #52]	; (8007668 <_malloc_trim_r+0xa0>)
 8007634:	6809      	ldr	r1, [r1, #0]
 8007636:	1a40      	subs	r0, r0, r1
 8007638:	490c      	ldr	r1, [pc, #48]	; (800766c <_malloc_trim_r+0xa4>)
 800763a:	f043 0301 	orr.w	r3, r3, #1
 800763e:	6008      	str	r0, [r1, #0]
 8007640:	6053      	str	r3, [r2, #4]
 8007642:	e7da      	b.n	80075fa <_malloc_trim_r+0x32>
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	4a09      	ldr	r2, [pc, #36]	; (800766c <_malloc_trim_r+0xa4>)
 8007648:	1b2d      	subs	r5, r5, r4
 800764a:	f045 0501 	orr.w	r5, r5, #1
 800764e:	605d      	str	r5, [r3, #4]
 8007650:	6813      	ldr	r3, [r2, #0]
 8007652:	4630      	mov	r0, r6
 8007654:	1b1c      	subs	r4, r3, r4
 8007656:	6014      	str	r4, [r2, #0]
 8007658:	f7fd fe9c 	bl	8005394 <__malloc_unlock>
 800765c:	2001      	movs	r0, #1
 800765e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007662:	bf00      	nop
 8007664:	2000018c 	.word	0x2000018c
 8007668:	20000594 	.word	0x20000594
 800766c:	20000a4c 	.word	0x20000a4c
 8007670:	00000080 	.word	0x00000080

08007674 <_free_r>:
 8007674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007678:	4604      	mov	r4, r0
 800767a:	4688      	mov	r8, r1
 800767c:	2900      	cmp	r1, #0
 800767e:	f000 80ab 	beq.w	80077d8 <_free_r+0x164>
 8007682:	f7fd fe81 	bl	8005388 <__malloc_lock>
 8007686:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800768a:	4d54      	ldr	r5, [pc, #336]	; (80077dc <_free_r+0x168>)
 800768c:	f022 0001 	bic.w	r0, r2, #1
 8007690:	f1a8 0308 	sub.w	r3, r8, #8
 8007694:	181f      	adds	r7, r3, r0
 8007696:	68a9      	ldr	r1, [r5, #8]
 8007698:	687e      	ldr	r6, [r7, #4]
 800769a:	428f      	cmp	r7, r1
 800769c:	f026 0603 	bic.w	r6, r6, #3
 80076a0:	f002 0201 	and.w	r2, r2, #1
 80076a4:	d11b      	bne.n	80076de <_free_r+0x6a>
 80076a6:	4430      	add	r0, r6
 80076a8:	b93a      	cbnz	r2, 80076ba <_free_r+0x46>
 80076aa:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80076ae:	1a9b      	subs	r3, r3, r2
 80076b0:	4410      	add	r0, r2
 80076b2:	6899      	ldr	r1, [r3, #8]
 80076b4:	68da      	ldr	r2, [r3, #12]
 80076b6:	60ca      	str	r2, [r1, #12]
 80076b8:	6091      	str	r1, [r2, #8]
 80076ba:	f040 0201 	orr.w	r2, r0, #1
 80076be:	605a      	str	r2, [r3, #4]
 80076c0:	60ab      	str	r3, [r5, #8]
 80076c2:	4b47      	ldr	r3, [pc, #284]	; (80077e0 <_free_r+0x16c>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4298      	cmp	r0, r3
 80076c8:	d304      	bcc.n	80076d4 <_free_r+0x60>
 80076ca:	4b46      	ldr	r3, [pc, #280]	; (80077e4 <_free_r+0x170>)
 80076cc:	4620      	mov	r0, r4
 80076ce:	6819      	ldr	r1, [r3, #0]
 80076d0:	f7ff ff7a 	bl	80075c8 <_malloc_trim_r>
 80076d4:	4620      	mov	r0, r4
 80076d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076da:	f7fd be5b 	b.w	8005394 <__malloc_unlock>
 80076de:	607e      	str	r6, [r7, #4]
 80076e0:	2a00      	cmp	r2, #0
 80076e2:	d139      	bne.n	8007758 <_free_r+0xe4>
 80076e4:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80076e8:	1a5b      	subs	r3, r3, r1
 80076ea:	4408      	add	r0, r1
 80076ec:	6899      	ldr	r1, [r3, #8]
 80076ee:	f105 0e08 	add.w	lr, r5, #8
 80076f2:	4571      	cmp	r1, lr
 80076f4:	d032      	beq.n	800775c <_free_r+0xe8>
 80076f6:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80076fa:	f8c1 e00c 	str.w	lr, [r1, #12]
 80076fe:	f8ce 1008 	str.w	r1, [lr, #8]
 8007702:	19b9      	adds	r1, r7, r6
 8007704:	6849      	ldr	r1, [r1, #4]
 8007706:	07c9      	lsls	r1, r1, #31
 8007708:	d40a      	bmi.n	8007720 <_free_r+0xac>
 800770a:	4430      	add	r0, r6
 800770c:	68b9      	ldr	r1, [r7, #8]
 800770e:	bb3a      	cbnz	r2, 8007760 <_free_r+0xec>
 8007710:	4e35      	ldr	r6, [pc, #212]	; (80077e8 <_free_r+0x174>)
 8007712:	42b1      	cmp	r1, r6
 8007714:	d124      	bne.n	8007760 <_free_r+0xec>
 8007716:	616b      	str	r3, [r5, #20]
 8007718:	612b      	str	r3, [r5, #16]
 800771a:	2201      	movs	r2, #1
 800771c:	60d9      	str	r1, [r3, #12]
 800771e:	6099      	str	r1, [r3, #8]
 8007720:	f040 0101 	orr.w	r1, r0, #1
 8007724:	6059      	str	r1, [r3, #4]
 8007726:	5018      	str	r0, [r3, r0]
 8007728:	2a00      	cmp	r2, #0
 800772a:	d1d3      	bne.n	80076d4 <_free_r+0x60>
 800772c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007730:	d21a      	bcs.n	8007768 <_free_r+0xf4>
 8007732:	08c0      	lsrs	r0, r0, #3
 8007734:	1081      	asrs	r1, r0, #2
 8007736:	2201      	movs	r2, #1
 8007738:	408a      	lsls	r2, r1
 800773a:	6869      	ldr	r1, [r5, #4]
 800773c:	3001      	adds	r0, #1
 800773e:	430a      	orrs	r2, r1
 8007740:	606a      	str	r2, [r5, #4]
 8007742:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8007746:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800774a:	6099      	str	r1, [r3, #8]
 800774c:	3a08      	subs	r2, #8
 800774e:	60da      	str	r2, [r3, #12]
 8007750:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8007754:	60cb      	str	r3, [r1, #12]
 8007756:	e7bd      	b.n	80076d4 <_free_r+0x60>
 8007758:	2200      	movs	r2, #0
 800775a:	e7d2      	b.n	8007702 <_free_r+0x8e>
 800775c:	2201      	movs	r2, #1
 800775e:	e7d0      	b.n	8007702 <_free_r+0x8e>
 8007760:	68fe      	ldr	r6, [r7, #12]
 8007762:	60ce      	str	r6, [r1, #12]
 8007764:	60b1      	str	r1, [r6, #8]
 8007766:	e7db      	b.n	8007720 <_free_r+0xac>
 8007768:	0a42      	lsrs	r2, r0, #9
 800776a:	2a04      	cmp	r2, #4
 800776c:	d813      	bhi.n	8007796 <_free_r+0x122>
 800776e:	0982      	lsrs	r2, r0, #6
 8007770:	3238      	adds	r2, #56	; 0x38
 8007772:	1c51      	adds	r1, r2, #1
 8007774:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8007778:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800777c:	428e      	cmp	r6, r1
 800777e:	d124      	bne.n	80077ca <_free_r+0x156>
 8007780:	2001      	movs	r0, #1
 8007782:	1092      	asrs	r2, r2, #2
 8007784:	fa00 f202 	lsl.w	r2, r0, r2
 8007788:	6868      	ldr	r0, [r5, #4]
 800778a:	4302      	orrs	r2, r0
 800778c:	606a      	str	r2, [r5, #4]
 800778e:	60de      	str	r6, [r3, #12]
 8007790:	6099      	str	r1, [r3, #8]
 8007792:	60b3      	str	r3, [r6, #8]
 8007794:	e7de      	b.n	8007754 <_free_r+0xe0>
 8007796:	2a14      	cmp	r2, #20
 8007798:	d801      	bhi.n	800779e <_free_r+0x12a>
 800779a:	325b      	adds	r2, #91	; 0x5b
 800779c:	e7e9      	b.n	8007772 <_free_r+0xfe>
 800779e:	2a54      	cmp	r2, #84	; 0x54
 80077a0:	d802      	bhi.n	80077a8 <_free_r+0x134>
 80077a2:	0b02      	lsrs	r2, r0, #12
 80077a4:	326e      	adds	r2, #110	; 0x6e
 80077a6:	e7e4      	b.n	8007772 <_free_r+0xfe>
 80077a8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80077ac:	d802      	bhi.n	80077b4 <_free_r+0x140>
 80077ae:	0bc2      	lsrs	r2, r0, #15
 80077b0:	3277      	adds	r2, #119	; 0x77
 80077b2:	e7de      	b.n	8007772 <_free_r+0xfe>
 80077b4:	f240 5154 	movw	r1, #1364	; 0x554
 80077b8:	428a      	cmp	r2, r1
 80077ba:	bf9a      	itte	ls
 80077bc:	0c82      	lsrls	r2, r0, #18
 80077be:	327c      	addls	r2, #124	; 0x7c
 80077c0:	227e      	movhi	r2, #126	; 0x7e
 80077c2:	e7d6      	b.n	8007772 <_free_r+0xfe>
 80077c4:	6889      	ldr	r1, [r1, #8]
 80077c6:	428e      	cmp	r6, r1
 80077c8:	d004      	beq.n	80077d4 <_free_r+0x160>
 80077ca:	684a      	ldr	r2, [r1, #4]
 80077cc:	f022 0203 	bic.w	r2, r2, #3
 80077d0:	4290      	cmp	r0, r2
 80077d2:	d3f7      	bcc.n	80077c4 <_free_r+0x150>
 80077d4:	68ce      	ldr	r6, [r1, #12]
 80077d6:	e7da      	b.n	800778e <_free_r+0x11a>
 80077d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077dc:	2000018c 	.word	0x2000018c
 80077e0:	20000598 	.word	0x20000598
 80077e4:	20000a7c 	.word	0x20000a7c
 80077e8:	20000194 	.word	0x20000194

080077ec <_fwalk_reent>:
 80077ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077f0:	4680      	mov	r8, r0
 80077f2:	4689      	mov	r9, r1
 80077f4:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 80077f8:	2600      	movs	r6, #0
 80077fa:	b914      	cbnz	r4, 8007802 <_fwalk_reent+0x16>
 80077fc:	4630      	mov	r0, r6
 80077fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007802:	68a5      	ldr	r5, [r4, #8]
 8007804:	6867      	ldr	r7, [r4, #4]
 8007806:	3f01      	subs	r7, #1
 8007808:	d501      	bpl.n	800780e <_fwalk_reent+0x22>
 800780a:	6824      	ldr	r4, [r4, #0]
 800780c:	e7f5      	b.n	80077fa <_fwalk_reent+0xe>
 800780e:	89ab      	ldrh	r3, [r5, #12]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d907      	bls.n	8007824 <_fwalk_reent+0x38>
 8007814:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007818:	3301      	adds	r3, #1
 800781a:	d003      	beq.n	8007824 <_fwalk_reent+0x38>
 800781c:	4629      	mov	r1, r5
 800781e:	4640      	mov	r0, r8
 8007820:	47c8      	blx	r9
 8007822:	4306      	orrs	r6, r0
 8007824:	3568      	adds	r5, #104	; 0x68
 8007826:	e7ee      	b.n	8007806 <_fwalk_reent+0x1a>

08007828 <_localeconv_r>:
 8007828:	4b04      	ldr	r3, [pc, #16]	; (800783c <_localeconv_r+0x14>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6a18      	ldr	r0, [r3, #32]
 800782e:	4b04      	ldr	r3, [pc, #16]	; (8007840 <_localeconv_r+0x18>)
 8007830:	2800      	cmp	r0, #0
 8007832:	bf08      	it	eq
 8007834:	4618      	moveq	r0, r3
 8007836:	30f0      	adds	r0, #240	; 0xf0
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	2000059c 	.word	0x2000059c
 8007840:	20000690 	.word	0x20000690

08007844 <__retarget_lock_init_recursive>:
 8007844:	4770      	bx	lr

08007846 <__retarget_lock_close_recursive>:
 8007846:	4770      	bx	lr

08007848 <__retarget_lock_acquire_recursive>:
 8007848:	4770      	bx	lr

0800784a <__retarget_lock_release_recursive>:
 800784a:	4770      	bx	lr

0800784c <__swhatbuf_r>:
 800784c:	b570      	push	{r4, r5, r6, lr}
 800784e:	460e      	mov	r6, r1
 8007850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007854:	2900      	cmp	r1, #0
 8007856:	b090      	sub	sp, #64	; 0x40
 8007858:	4614      	mov	r4, r2
 800785a:	461d      	mov	r5, r3
 800785c:	da09      	bge.n	8007872 <__swhatbuf_r+0x26>
 800785e:	89b3      	ldrh	r3, [r6, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007866:	602a      	str	r2, [r5, #0]
 8007868:	d116      	bne.n	8007898 <__swhatbuf_r+0x4c>
 800786a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800786e:	6023      	str	r3, [r4, #0]
 8007870:	e015      	b.n	800789e <__swhatbuf_r+0x52>
 8007872:	aa01      	add	r2, sp, #4
 8007874:	f000 fcc4 	bl	8008200 <_fstat_r>
 8007878:	2800      	cmp	r0, #0
 800787a:	dbf0      	blt.n	800785e <__swhatbuf_r+0x12>
 800787c:	9a02      	ldr	r2, [sp, #8]
 800787e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007882:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007886:	425a      	negs	r2, r3
 8007888:	415a      	adcs	r2, r3
 800788a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800788e:	602a      	str	r2, [r5, #0]
 8007890:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	e002      	b.n	800789e <__swhatbuf_r+0x52>
 8007898:	2340      	movs	r3, #64	; 0x40
 800789a:	6023      	str	r3, [r4, #0]
 800789c:	4610      	mov	r0, r2
 800789e:	b010      	add	sp, #64	; 0x40
 80078a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080078a4 <__smakebuf_r>:
 80078a4:	898b      	ldrh	r3, [r1, #12]
 80078a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078a8:	079d      	lsls	r5, r3, #30
 80078aa:	4606      	mov	r6, r0
 80078ac:	460c      	mov	r4, r1
 80078ae:	d507      	bpl.n	80078c0 <__smakebuf_r+0x1c>
 80078b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078b4:	6023      	str	r3, [r4, #0]
 80078b6:	6123      	str	r3, [r4, #16]
 80078b8:	2301      	movs	r3, #1
 80078ba:	6163      	str	r3, [r4, #20]
 80078bc:	b002      	add	sp, #8
 80078be:	bd70      	pop	{r4, r5, r6, pc}
 80078c0:	ab01      	add	r3, sp, #4
 80078c2:	466a      	mov	r2, sp
 80078c4:	f7ff ffc2 	bl	800784c <__swhatbuf_r>
 80078c8:	9900      	ldr	r1, [sp, #0]
 80078ca:	4605      	mov	r5, r0
 80078cc:	4630      	mov	r0, r6
 80078ce:	f7fd fb39 	bl	8004f44 <_malloc_r>
 80078d2:	b948      	cbnz	r0, 80078e8 <__smakebuf_r+0x44>
 80078d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078d8:	059a      	lsls	r2, r3, #22
 80078da:	d4ef      	bmi.n	80078bc <__smakebuf_r+0x18>
 80078dc:	f023 0303 	bic.w	r3, r3, #3
 80078e0:	f043 0302 	orr.w	r3, r3, #2
 80078e4:	81a3      	strh	r3, [r4, #12]
 80078e6:	e7e3      	b.n	80078b0 <__smakebuf_r+0xc>
 80078e8:	4b0d      	ldr	r3, [pc, #52]	; (8007920 <__smakebuf_r+0x7c>)
 80078ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80078ec:	89a3      	ldrh	r3, [r4, #12]
 80078ee:	6020      	str	r0, [r4, #0]
 80078f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078f4:	81a3      	strh	r3, [r4, #12]
 80078f6:	9b00      	ldr	r3, [sp, #0]
 80078f8:	6163      	str	r3, [r4, #20]
 80078fa:	9b01      	ldr	r3, [sp, #4]
 80078fc:	6120      	str	r0, [r4, #16]
 80078fe:	b15b      	cbz	r3, 8007918 <__smakebuf_r+0x74>
 8007900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007904:	4630      	mov	r0, r6
 8007906:	f000 fddb 	bl	80084c0 <_isatty_r>
 800790a:	b128      	cbz	r0, 8007918 <__smakebuf_r+0x74>
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	f023 0303 	bic.w	r3, r3, #3
 8007912:	f043 0301 	orr.w	r3, r3, #1
 8007916:	81a3      	strh	r3, [r4, #12]
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	431d      	orrs	r5, r3
 800791c:	81a5      	strh	r5, [r4, #12]
 800791e:	e7cd      	b.n	80078bc <__smakebuf_r+0x18>
 8007920:	08007419 	.word	0x08007419

08007924 <_Balloc>:
 8007924:	b570      	push	{r4, r5, r6, lr}
 8007926:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007928:	4604      	mov	r4, r0
 800792a:	460e      	mov	r6, r1
 800792c:	b93d      	cbnz	r5, 800793e <_Balloc+0x1a>
 800792e:	2010      	movs	r0, #16
 8007930:	f7fd faf8 	bl	8004f24 <malloc>
 8007934:	6260      	str	r0, [r4, #36]	; 0x24
 8007936:	6045      	str	r5, [r0, #4]
 8007938:	6085      	str	r5, [r0, #8]
 800793a:	6005      	str	r5, [r0, #0]
 800793c:	60c5      	str	r5, [r0, #12]
 800793e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007940:	68eb      	ldr	r3, [r5, #12]
 8007942:	b183      	cbz	r3, 8007966 <_Balloc+0x42>
 8007944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800794c:	b9b8      	cbnz	r0, 800797e <_Balloc+0x5a>
 800794e:	2101      	movs	r1, #1
 8007950:	fa01 f506 	lsl.w	r5, r1, r6
 8007954:	1d6a      	adds	r2, r5, #5
 8007956:	0092      	lsls	r2, r2, #2
 8007958:	4620      	mov	r0, r4
 800795a:	f000 fb3d 	bl	8007fd8 <_calloc_r>
 800795e:	b160      	cbz	r0, 800797a <_Balloc+0x56>
 8007960:	6046      	str	r6, [r0, #4]
 8007962:	6085      	str	r5, [r0, #8]
 8007964:	e00e      	b.n	8007984 <_Balloc+0x60>
 8007966:	2221      	movs	r2, #33	; 0x21
 8007968:	2104      	movs	r1, #4
 800796a:	4620      	mov	r0, r4
 800796c:	f000 fb34 	bl	8007fd8 <_calloc_r>
 8007970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007972:	60e8      	str	r0, [r5, #12]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e4      	bne.n	8007944 <_Balloc+0x20>
 800797a:	2000      	movs	r0, #0
 800797c:	bd70      	pop	{r4, r5, r6, pc}
 800797e:	6802      	ldr	r2, [r0, #0]
 8007980:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007984:	2300      	movs	r3, #0
 8007986:	6103      	str	r3, [r0, #16]
 8007988:	60c3      	str	r3, [r0, #12]
 800798a:	bd70      	pop	{r4, r5, r6, pc}

0800798c <_Bfree>:
 800798c:	b570      	push	{r4, r5, r6, lr}
 800798e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007990:	4606      	mov	r6, r0
 8007992:	460d      	mov	r5, r1
 8007994:	b93c      	cbnz	r4, 80079a6 <_Bfree+0x1a>
 8007996:	2010      	movs	r0, #16
 8007998:	f7fd fac4 	bl	8004f24 <malloc>
 800799c:	6270      	str	r0, [r6, #36]	; 0x24
 800799e:	6044      	str	r4, [r0, #4]
 80079a0:	6084      	str	r4, [r0, #8]
 80079a2:	6004      	str	r4, [r0, #0]
 80079a4:	60c4      	str	r4, [r0, #12]
 80079a6:	b13d      	cbz	r5, 80079b8 <_Bfree+0x2c>
 80079a8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80079aa:	686a      	ldr	r2, [r5, #4]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079b2:	6029      	str	r1, [r5, #0]
 80079b4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80079b8:	bd70      	pop	{r4, r5, r6, pc}

080079ba <__multadd>:
 80079ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079be:	690d      	ldr	r5, [r1, #16]
 80079c0:	461f      	mov	r7, r3
 80079c2:	4606      	mov	r6, r0
 80079c4:	460c      	mov	r4, r1
 80079c6:	f101 0e14 	add.w	lr, r1, #20
 80079ca:	2300      	movs	r3, #0
 80079cc:	f8de 0000 	ldr.w	r0, [lr]
 80079d0:	b281      	uxth	r1, r0
 80079d2:	fb02 7101 	mla	r1, r2, r1, r7
 80079d6:	0c0f      	lsrs	r7, r1, #16
 80079d8:	0c00      	lsrs	r0, r0, #16
 80079da:	fb02 7000 	mla	r0, r2, r0, r7
 80079de:	b289      	uxth	r1, r1
 80079e0:	3301      	adds	r3, #1
 80079e2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80079e6:	429d      	cmp	r5, r3
 80079e8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80079ec:	f84e 1b04 	str.w	r1, [lr], #4
 80079f0:	dcec      	bgt.n	80079cc <__multadd+0x12>
 80079f2:	b1d7      	cbz	r7, 8007a2a <__multadd+0x70>
 80079f4:	68a3      	ldr	r3, [r4, #8]
 80079f6:	429d      	cmp	r5, r3
 80079f8:	db12      	blt.n	8007a20 <__multadd+0x66>
 80079fa:	6861      	ldr	r1, [r4, #4]
 80079fc:	4630      	mov	r0, r6
 80079fe:	3101      	adds	r1, #1
 8007a00:	f7ff ff90 	bl	8007924 <_Balloc>
 8007a04:	6922      	ldr	r2, [r4, #16]
 8007a06:	3202      	adds	r2, #2
 8007a08:	f104 010c 	add.w	r1, r4, #12
 8007a0c:	4680      	mov	r8, r0
 8007a0e:	0092      	lsls	r2, r2, #2
 8007a10:	300c      	adds	r0, #12
 8007a12:	f7fd fca5 	bl	8005360 <memcpy>
 8007a16:	4621      	mov	r1, r4
 8007a18:	4630      	mov	r0, r6
 8007a1a:	f7ff ffb7 	bl	800798c <_Bfree>
 8007a1e:	4644      	mov	r4, r8
 8007a20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a24:	3501      	adds	r5, #1
 8007a26:	615f      	str	r7, [r3, #20]
 8007a28:	6125      	str	r5, [r4, #16]
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007a30 <__hi0bits>:
 8007a30:	0c02      	lsrs	r2, r0, #16
 8007a32:	0412      	lsls	r2, r2, #16
 8007a34:	4603      	mov	r3, r0
 8007a36:	b9b2      	cbnz	r2, 8007a66 <__hi0bits+0x36>
 8007a38:	0403      	lsls	r3, r0, #16
 8007a3a:	2010      	movs	r0, #16
 8007a3c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007a40:	bf04      	itt	eq
 8007a42:	021b      	lsleq	r3, r3, #8
 8007a44:	3008      	addeq	r0, #8
 8007a46:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007a4a:	bf04      	itt	eq
 8007a4c:	011b      	lsleq	r3, r3, #4
 8007a4e:	3004      	addeq	r0, #4
 8007a50:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007a54:	bf04      	itt	eq
 8007a56:	009b      	lsleq	r3, r3, #2
 8007a58:	3002      	addeq	r0, #2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	db06      	blt.n	8007a6c <__hi0bits+0x3c>
 8007a5e:	005b      	lsls	r3, r3, #1
 8007a60:	d503      	bpl.n	8007a6a <__hi0bits+0x3a>
 8007a62:	3001      	adds	r0, #1
 8007a64:	4770      	bx	lr
 8007a66:	2000      	movs	r0, #0
 8007a68:	e7e8      	b.n	8007a3c <__hi0bits+0xc>
 8007a6a:	2020      	movs	r0, #32
 8007a6c:	4770      	bx	lr

08007a6e <__lo0bits>:
 8007a6e:	6803      	ldr	r3, [r0, #0]
 8007a70:	f013 0207 	ands.w	r2, r3, #7
 8007a74:	4601      	mov	r1, r0
 8007a76:	d00b      	beq.n	8007a90 <__lo0bits+0x22>
 8007a78:	07da      	lsls	r2, r3, #31
 8007a7a:	d423      	bmi.n	8007ac4 <__lo0bits+0x56>
 8007a7c:	0798      	lsls	r0, r3, #30
 8007a7e:	bf49      	itett	mi
 8007a80:	085b      	lsrmi	r3, r3, #1
 8007a82:	089b      	lsrpl	r3, r3, #2
 8007a84:	2001      	movmi	r0, #1
 8007a86:	600b      	strmi	r3, [r1, #0]
 8007a88:	bf5c      	itt	pl
 8007a8a:	600b      	strpl	r3, [r1, #0]
 8007a8c:	2002      	movpl	r0, #2
 8007a8e:	4770      	bx	lr
 8007a90:	b298      	uxth	r0, r3
 8007a92:	b9a8      	cbnz	r0, 8007ac0 <__lo0bits+0x52>
 8007a94:	0c1b      	lsrs	r3, r3, #16
 8007a96:	2010      	movs	r0, #16
 8007a98:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007a9c:	bf04      	itt	eq
 8007a9e:	0a1b      	lsreq	r3, r3, #8
 8007aa0:	3008      	addeq	r0, #8
 8007aa2:	071a      	lsls	r2, r3, #28
 8007aa4:	bf04      	itt	eq
 8007aa6:	091b      	lsreq	r3, r3, #4
 8007aa8:	3004      	addeq	r0, #4
 8007aaa:	079a      	lsls	r2, r3, #30
 8007aac:	bf04      	itt	eq
 8007aae:	089b      	lsreq	r3, r3, #2
 8007ab0:	3002      	addeq	r0, #2
 8007ab2:	07da      	lsls	r2, r3, #31
 8007ab4:	d402      	bmi.n	8007abc <__lo0bits+0x4e>
 8007ab6:	085b      	lsrs	r3, r3, #1
 8007ab8:	d006      	beq.n	8007ac8 <__lo0bits+0x5a>
 8007aba:	3001      	adds	r0, #1
 8007abc:	600b      	str	r3, [r1, #0]
 8007abe:	4770      	bx	lr
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	e7e9      	b.n	8007a98 <__lo0bits+0x2a>
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	4770      	bx	lr
 8007ac8:	2020      	movs	r0, #32
 8007aca:	4770      	bx	lr

08007acc <__i2b>:
 8007acc:	b510      	push	{r4, lr}
 8007ace:	460c      	mov	r4, r1
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	f7ff ff27 	bl	8007924 <_Balloc>
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	6144      	str	r4, [r0, #20]
 8007ada:	6102      	str	r2, [r0, #16]
 8007adc:	bd10      	pop	{r4, pc}

08007ade <__multiply>:
 8007ade:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae2:	4614      	mov	r4, r2
 8007ae4:	690a      	ldr	r2, [r1, #16]
 8007ae6:	6923      	ldr	r3, [r4, #16]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	bfb8      	it	lt
 8007aec:	460b      	movlt	r3, r1
 8007aee:	4689      	mov	r9, r1
 8007af0:	bfbc      	itt	lt
 8007af2:	46a1      	movlt	r9, r4
 8007af4:	461c      	movlt	r4, r3
 8007af6:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007afa:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007afe:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007b02:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007b06:	eb07 060a 	add.w	r6, r7, sl
 8007b0a:	429e      	cmp	r6, r3
 8007b0c:	bfc8      	it	gt
 8007b0e:	3101      	addgt	r1, #1
 8007b10:	f7ff ff08 	bl	8007924 <_Balloc>
 8007b14:	f100 0514 	add.w	r5, r0, #20
 8007b18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b1c:	462b      	mov	r3, r5
 8007b1e:	2200      	movs	r2, #0
 8007b20:	4543      	cmp	r3, r8
 8007b22:	d316      	bcc.n	8007b52 <__multiply+0x74>
 8007b24:	f104 0214 	add.w	r2, r4, #20
 8007b28:	f109 0114 	add.w	r1, r9, #20
 8007b2c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8007b30:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007b34:	9301      	str	r3, [sp, #4]
 8007b36:	9c01      	ldr	r4, [sp, #4]
 8007b38:	4294      	cmp	r4, r2
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	d80c      	bhi.n	8007b58 <__multiply+0x7a>
 8007b3e:	2e00      	cmp	r6, #0
 8007b40:	dd03      	ble.n	8007b4a <__multiply+0x6c>
 8007b42:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d054      	beq.n	8007bf4 <__multiply+0x116>
 8007b4a:	6106      	str	r6, [r0, #16]
 8007b4c:	b003      	add	sp, #12
 8007b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b52:	f843 2b04 	str.w	r2, [r3], #4
 8007b56:	e7e3      	b.n	8007b20 <__multiply+0x42>
 8007b58:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b5c:	3204      	adds	r2, #4
 8007b5e:	f1ba 0f00 	cmp.w	sl, #0
 8007b62:	d020      	beq.n	8007ba6 <__multiply+0xc8>
 8007b64:	46ae      	mov	lr, r5
 8007b66:	4689      	mov	r9, r1
 8007b68:	f04f 0c00 	mov.w	ip, #0
 8007b6c:	f859 4b04 	ldr.w	r4, [r9], #4
 8007b70:	f8be b000 	ldrh.w	fp, [lr]
 8007b74:	b2a3      	uxth	r3, r4
 8007b76:	fb0a b303 	mla	r3, sl, r3, fp
 8007b7a:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8007b7e:	f8de 4000 	ldr.w	r4, [lr]
 8007b82:	4463      	add	r3, ip
 8007b84:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007b88:	fb0a c40b 	mla	r4, sl, fp, ip
 8007b8c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007b96:	454f      	cmp	r7, r9
 8007b98:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007b9c:	f84e 3b04 	str.w	r3, [lr], #4
 8007ba0:	d8e4      	bhi.n	8007b6c <__multiply+0x8e>
 8007ba2:	f8ce c000 	str.w	ip, [lr]
 8007ba6:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8007baa:	f1b9 0f00 	cmp.w	r9, #0
 8007bae:	d01f      	beq.n	8007bf0 <__multiply+0x112>
 8007bb0:	682b      	ldr	r3, [r5, #0]
 8007bb2:	46ae      	mov	lr, r5
 8007bb4:	468c      	mov	ip, r1
 8007bb6:	f04f 0a00 	mov.w	sl, #0
 8007bba:	f8bc 4000 	ldrh.w	r4, [ip]
 8007bbe:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007bc2:	fb09 b404 	mla	r4, r9, r4, fp
 8007bc6:	44a2      	add	sl, r4
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8007bce:	f84e 3b04 	str.w	r3, [lr], #4
 8007bd2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007bd6:	f8be 4000 	ldrh.w	r4, [lr]
 8007bda:	0c1b      	lsrs	r3, r3, #16
 8007bdc:	fb09 4303 	mla	r3, r9, r3, r4
 8007be0:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8007be4:	4567      	cmp	r7, ip
 8007be6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bea:	d8e6      	bhi.n	8007bba <__multiply+0xdc>
 8007bec:	f8ce 3000 	str.w	r3, [lr]
 8007bf0:	3504      	adds	r5, #4
 8007bf2:	e7a0      	b.n	8007b36 <__multiply+0x58>
 8007bf4:	3e01      	subs	r6, #1
 8007bf6:	e7a2      	b.n	8007b3e <__multiply+0x60>

08007bf8 <__pow5mult>:
 8007bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bfc:	4615      	mov	r5, r2
 8007bfe:	f012 0203 	ands.w	r2, r2, #3
 8007c02:	4606      	mov	r6, r0
 8007c04:	460f      	mov	r7, r1
 8007c06:	d007      	beq.n	8007c18 <__pow5mult+0x20>
 8007c08:	3a01      	subs	r2, #1
 8007c0a:	4c21      	ldr	r4, [pc, #132]	; (8007c90 <__pow5mult+0x98>)
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c12:	f7ff fed2 	bl	80079ba <__multadd>
 8007c16:	4607      	mov	r7, r0
 8007c18:	10ad      	asrs	r5, r5, #2
 8007c1a:	d035      	beq.n	8007c88 <__pow5mult+0x90>
 8007c1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c1e:	b93c      	cbnz	r4, 8007c30 <__pow5mult+0x38>
 8007c20:	2010      	movs	r0, #16
 8007c22:	f7fd f97f 	bl	8004f24 <malloc>
 8007c26:	6270      	str	r0, [r6, #36]	; 0x24
 8007c28:	6044      	str	r4, [r0, #4]
 8007c2a:	6084      	str	r4, [r0, #8]
 8007c2c:	6004      	str	r4, [r0, #0]
 8007c2e:	60c4      	str	r4, [r0, #12]
 8007c30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c38:	b94c      	cbnz	r4, 8007c4e <__pow5mult+0x56>
 8007c3a:	f240 2171 	movw	r1, #625	; 0x271
 8007c3e:	4630      	mov	r0, r6
 8007c40:	f7ff ff44 	bl	8007acc <__i2b>
 8007c44:	2300      	movs	r3, #0
 8007c46:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	6003      	str	r3, [r0, #0]
 8007c4e:	f04f 0800 	mov.w	r8, #0
 8007c52:	07eb      	lsls	r3, r5, #31
 8007c54:	d50a      	bpl.n	8007c6c <__pow5mult+0x74>
 8007c56:	4639      	mov	r1, r7
 8007c58:	4622      	mov	r2, r4
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	f7ff ff3f 	bl	8007ade <__multiply>
 8007c60:	4639      	mov	r1, r7
 8007c62:	4681      	mov	r9, r0
 8007c64:	4630      	mov	r0, r6
 8007c66:	f7ff fe91 	bl	800798c <_Bfree>
 8007c6a:	464f      	mov	r7, r9
 8007c6c:	106d      	asrs	r5, r5, #1
 8007c6e:	d00b      	beq.n	8007c88 <__pow5mult+0x90>
 8007c70:	6820      	ldr	r0, [r4, #0]
 8007c72:	b938      	cbnz	r0, 8007c84 <__pow5mult+0x8c>
 8007c74:	4622      	mov	r2, r4
 8007c76:	4621      	mov	r1, r4
 8007c78:	4630      	mov	r0, r6
 8007c7a:	f7ff ff30 	bl	8007ade <__multiply>
 8007c7e:	6020      	str	r0, [r4, #0]
 8007c80:	f8c0 8000 	str.w	r8, [r0]
 8007c84:	4604      	mov	r4, r0
 8007c86:	e7e4      	b.n	8007c52 <__pow5mult+0x5a>
 8007c88:	4638      	mov	r0, r7
 8007c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c8e:	bf00      	nop
 8007c90:	08008ed8 	.word	0x08008ed8

08007c94 <__lshift>:
 8007c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c98:	460c      	mov	r4, r1
 8007c9a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c9e:	6923      	ldr	r3, [r4, #16]
 8007ca0:	6849      	ldr	r1, [r1, #4]
 8007ca2:	eb0a 0903 	add.w	r9, sl, r3
 8007ca6:	68a3      	ldr	r3, [r4, #8]
 8007ca8:	4607      	mov	r7, r0
 8007caa:	4616      	mov	r6, r2
 8007cac:	f109 0501 	add.w	r5, r9, #1
 8007cb0:	42ab      	cmp	r3, r5
 8007cb2:	db31      	blt.n	8007d18 <__lshift+0x84>
 8007cb4:	4638      	mov	r0, r7
 8007cb6:	f7ff fe35 	bl	8007924 <_Balloc>
 8007cba:	2200      	movs	r2, #0
 8007cbc:	4680      	mov	r8, r0
 8007cbe:	f100 0314 	add.w	r3, r0, #20
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	4552      	cmp	r2, sl
 8007cc6:	db2a      	blt.n	8007d1e <__lshift+0x8a>
 8007cc8:	6920      	ldr	r0, [r4, #16]
 8007cca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cce:	f104 0114 	add.w	r1, r4, #20
 8007cd2:	f016 021f 	ands.w	r2, r6, #31
 8007cd6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007cda:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8007cde:	d022      	beq.n	8007d26 <__lshift+0x92>
 8007ce0:	f1c2 0c20 	rsb	ip, r2, #32
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	680e      	ldr	r6, [r1, #0]
 8007ce8:	4096      	lsls	r6, r2
 8007cea:	4330      	orrs	r0, r6
 8007cec:	f843 0b04 	str.w	r0, [r3], #4
 8007cf0:	f851 0b04 	ldr.w	r0, [r1], #4
 8007cf4:	458e      	cmp	lr, r1
 8007cf6:	fa20 f00c 	lsr.w	r0, r0, ip
 8007cfa:	d8f4      	bhi.n	8007ce6 <__lshift+0x52>
 8007cfc:	6018      	str	r0, [r3, #0]
 8007cfe:	b108      	cbz	r0, 8007d04 <__lshift+0x70>
 8007d00:	f109 0502 	add.w	r5, r9, #2
 8007d04:	3d01      	subs	r5, #1
 8007d06:	4638      	mov	r0, r7
 8007d08:	f8c8 5010 	str.w	r5, [r8, #16]
 8007d0c:	4621      	mov	r1, r4
 8007d0e:	f7ff fe3d 	bl	800798c <_Bfree>
 8007d12:	4640      	mov	r0, r8
 8007d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d18:	3101      	adds	r1, #1
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	e7c8      	b.n	8007cb0 <__lshift+0x1c>
 8007d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007d22:	3201      	adds	r2, #1
 8007d24:	e7ce      	b.n	8007cc4 <__lshift+0x30>
 8007d26:	3b04      	subs	r3, #4
 8007d28:	f851 2b04 	ldr.w	r2, [r1], #4
 8007d2c:	f843 2f04 	str.w	r2, [r3, #4]!
 8007d30:	458e      	cmp	lr, r1
 8007d32:	d8f9      	bhi.n	8007d28 <__lshift+0x94>
 8007d34:	e7e6      	b.n	8007d04 <__lshift+0x70>

08007d36 <__mcmp>:
 8007d36:	6903      	ldr	r3, [r0, #16]
 8007d38:	690a      	ldr	r2, [r1, #16]
 8007d3a:	1a9b      	subs	r3, r3, r2
 8007d3c:	b530      	push	{r4, r5, lr}
 8007d3e:	d10c      	bne.n	8007d5a <__mcmp+0x24>
 8007d40:	0092      	lsls	r2, r2, #2
 8007d42:	3014      	adds	r0, #20
 8007d44:	3114      	adds	r1, #20
 8007d46:	1884      	adds	r4, r0, r2
 8007d48:	4411      	add	r1, r2
 8007d4a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d4e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d52:	4295      	cmp	r5, r2
 8007d54:	d003      	beq.n	8007d5e <__mcmp+0x28>
 8007d56:	d305      	bcc.n	8007d64 <__mcmp+0x2e>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	bd30      	pop	{r4, r5, pc}
 8007d5e:	42a0      	cmp	r0, r4
 8007d60:	d3f3      	bcc.n	8007d4a <__mcmp+0x14>
 8007d62:	e7fa      	b.n	8007d5a <__mcmp+0x24>
 8007d64:	f04f 33ff 	mov.w	r3, #4294967295
 8007d68:	e7f7      	b.n	8007d5a <__mcmp+0x24>

08007d6a <__mdiff>:
 8007d6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d6e:	460d      	mov	r5, r1
 8007d70:	4607      	mov	r7, r0
 8007d72:	4611      	mov	r1, r2
 8007d74:	4628      	mov	r0, r5
 8007d76:	4614      	mov	r4, r2
 8007d78:	f7ff ffdd 	bl	8007d36 <__mcmp>
 8007d7c:	1e06      	subs	r6, r0, #0
 8007d7e:	d108      	bne.n	8007d92 <__mdiff+0x28>
 8007d80:	4631      	mov	r1, r6
 8007d82:	4638      	mov	r0, r7
 8007d84:	f7ff fdce 	bl	8007924 <_Balloc>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	6103      	str	r3, [r0, #16]
 8007d8c:	6146      	str	r6, [r0, #20]
 8007d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d92:	bfa4      	itt	ge
 8007d94:	4623      	movge	r3, r4
 8007d96:	462c      	movge	r4, r5
 8007d98:	4638      	mov	r0, r7
 8007d9a:	6861      	ldr	r1, [r4, #4]
 8007d9c:	bfa6      	itte	ge
 8007d9e:	461d      	movge	r5, r3
 8007da0:	2600      	movge	r6, #0
 8007da2:	2601      	movlt	r6, #1
 8007da4:	f7ff fdbe 	bl	8007924 <_Balloc>
 8007da8:	692b      	ldr	r3, [r5, #16]
 8007daa:	60c6      	str	r6, [r0, #12]
 8007dac:	6926      	ldr	r6, [r4, #16]
 8007dae:	f105 0914 	add.w	r9, r5, #20
 8007db2:	f104 0214 	add.w	r2, r4, #20
 8007db6:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007dba:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007dbe:	f100 0514 	add.w	r5, r0, #20
 8007dc2:	f04f 0c00 	mov.w	ip, #0
 8007dc6:	f852 ab04 	ldr.w	sl, [r2], #4
 8007dca:	f859 4b04 	ldr.w	r4, [r9], #4
 8007dce:	fa1c f18a 	uxtah	r1, ip, sl
 8007dd2:	b2a3      	uxth	r3, r4
 8007dd4:	1ac9      	subs	r1, r1, r3
 8007dd6:	0c23      	lsrs	r3, r4, #16
 8007dd8:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007ddc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007de0:	b289      	uxth	r1, r1
 8007de2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007de6:	45c8      	cmp	r8, r9
 8007de8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007dec:	4696      	mov	lr, r2
 8007dee:	f845 3b04 	str.w	r3, [r5], #4
 8007df2:	d8e8      	bhi.n	8007dc6 <__mdiff+0x5c>
 8007df4:	45be      	cmp	lr, r7
 8007df6:	d305      	bcc.n	8007e04 <__mdiff+0x9a>
 8007df8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007dfc:	b18b      	cbz	r3, 8007e22 <__mdiff+0xb8>
 8007dfe:	6106      	str	r6, [r0, #16]
 8007e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e04:	f85e 1b04 	ldr.w	r1, [lr], #4
 8007e08:	fa1c f381 	uxtah	r3, ip, r1
 8007e0c:	141a      	asrs	r2, r3, #16
 8007e0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e1c:	f845 3b04 	str.w	r3, [r5], #4
 8007e20:	e7e8      	b.n	8007df4 <__mdiff+0x8a>
 8007e22:	3e01      	subs	r6, #1
 8007e24:	e7e8      	b.n	8007df8 <__mdiff+0x8e>

08007e26 <__d2b>:
 8007e26:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e2a:	460e      	mov	r6, r1
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	ec59 8b10 	vmov	r8, r9, d0
 8007e32:	4615      	mov	r5, r2
 8007e34:	f7ff fd76 	bl	8007924 <_Balloc>
 8007e38:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007e3c:	4607      	mov	r7, r0
 8007e3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e42:	bb34      	cbnz	r4, 8007e92 <__d2b+0x6c>
 8007e44:	9301      	str	r3, [sp, #4]
 8007e46:	f1b8 0f00 	cmp.w	r8, #0
 8007e4a:	d027      	beq.n	8007e9c <__d2b+0x76>
 8007e4c:	a802      	add	r0, sp, #8
 8007e4e:	f840 8d08 	str.w	r8, [r0, #-8]!
 8007e52:	f7ff fe0c 	bl	8007a6e <__lo0bits>
 8007e56:	9900      	ldr	r1, [sp, #0]
 8007e58:	b1f0      	cbz	r0, 8007e98 <__d2b+0x72>
 8007e5a:	9a01      	ldr	r2, [sp, #4]
 8007e5c:	f1c0 0320 	rsb	r3, r0, #32
 8007e60:	fa02 f303 	lsl.w	r3, r2, r3
 8007e64:	430b      	orrs	r3, r1
 8007e66:	40c2      	lsrs	r2, r0
 8007e68:	617b      	str	r3, [r7, #20]
 8007e6a:	9201      	str	r2, [sp, #4]
 8007e6c:	9b01      	ldr	r3, [sp, #4]
 8007e6e:	61bb      	str	r3, [r7, #24]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	bf14      	ite	ne
 8007e74:	2102      	movne	r1, #2
 8007e76:	2101      	moveq	r1, #1
 8007e78:	6139      	str	r1, [r7, #16]
 8007e7a:	b1c4      	cbz	r4, 8007eae <__d2b+0x88>
 8007e7c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007e80:	4404      	add	r4, r0
 8007e82:	6034      	str	r4, [r6, #0]
 8007e84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e88:	6028      	str	r0, [r5, #0]
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	b003      	add	sp, #12
 8007e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e96:	e7d5      	b.n	8007e44 <__d2b+0x1e>
 8007e98:	6179      	str	r1, [r7, #20]
 8007e9a:	e7e7      	b.n	8007e6c <__d2b+0x46>
 8007e9c:	a801      	add	r0, sp, #4
 8007e9e:	f7ff fde6 	bl	8007a6e <__lo0bits>
 8007ea2:	9b01      	ldr	r3, [sp, #4]
 8007ea4:	617b      	str	r3, [r7, #20]
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	6139      	str	r1, [r7, #16]
 8007eaa:	3020      	adds	r0, #32
 8007eac:	e7e5      	b.n	8007e7a <__d2b+0x54>
 8007eae:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007eb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007eb6:	6030      	str	r0, [r6, #0]
 8007eb8:	6918      	ldr	r0, [r3, #16]
 8007eba:	f7ff fdb9 	bl	8007a30 <__hi0bits>
 8007ebe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007ec2:	e7e1      	b.n	8007e88 <__d2b+0x62>

08007ec4 <__sread>:
 8007ec4:	b510      	push	{r4, lr}
 8007ec6:	460c      	mov	r4, r1
 8007ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ecc:	f000 fb54 	bl	8008578 <_read_r>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	bfab      	itete	ge
 8007ed4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ed6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ed8:	181b      	addge	r3, r3, r0
 8007eda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ede:	bfac      	ite	ge
 8007ee0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ee2:	81a3      	strhlt	r3, [r4, #12]
 8007ee4:	bd10      	pop	{r4, pc}

08007ee6 <__swrite>:
 8007ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eea:	461f      	mov	r7, r3
 8007eec:	898b      	ldrh	r3, [r1, #12]
 8007eee:	05db      	lsls	r3, r3, #23
 8007ef0:	4605      	mov	r5, r0
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	4616      	mov	r6, r2
 8007ef6:	d505      	bpl.n	8007f04 <__swrite+0x1e>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	2200      	movs	r2, #0
 8007efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f00:	f000 fafc 	bl	80084fc <_lseek_r>
 8007f04:	89a3      	ldrh	r3, [r4, #12]
 8007f06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f0e:	81a3      	strh	r3, [r4, #12]
 8007f10:	4632      	mov	r2, r6
 8007f12:	463b      	mov	r3, r7
 8007f14:	4628      	mov	r0, r5
 8007f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1a:	f000 b84b 	b.w	8007fb4 <_write_r>

08007f1e <__sseek>:
 8007f1e:	b510      	push	{r4, lr}
 8007f20:	460c      	mov	r4, r1
 8007f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f26:	f000 fae9 	bl	80084fc <_lseek_r>
 8007f2a:	1c43      	adds	r3, r0, #1
 8007f2c:	89a3      	ldrh	r3, [r4, #12]
 8007f2e:	bf15      	itete	ne
 8007f30:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f3a:	81a3      	strheq	r3, [r4, #12]
 8007f3c:	bf18      	it	ne
 8007f3e:	81a3      	strhne	r3, [r4, #12]
 8007f40:	bd10      	pop	{r4, pc}

08007f42 <__sclose>:
 8007f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f46:	f000 b875 	b.w	8008034 <_close_r>

08007f4a <__sprint_r>:
 8007f4a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4e:	6893      	ldr	r3, [r2, #8]
 8007f50:	4680      	mov	r8, r0
 8007f52:	460f      	mov	r7, r1
 8007f54:	4614      	mov	r4, r2
 8007f56:	b91b      	cbnz	r3, 8007f60 <__sprint_r+0x16>
 8007f58:	6053      	str	r3, [r2, #4]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f60:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8007f62:	049d      	lsls	r5, r3, #18
 8007f64:	d523      	bpl.n	8007fae <__sprint_r+0x64>
 8007f66:	6815      	ldr	r5, [r2, #0]
 8007f68:	68a0      	ldr	r0, [r4, #8]
 8007f6a:	3508      	adds	r5, #8
 8007f6c:	b920      	cbnz	r0, 8007f78 <__sprint_r+0x2e>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	60a3      	str	r3, [r4, #8]
 8007f72:	6063      	str	r3, [r4, #4]
 8007f74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f78:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8007f7c:	f855 bc08 	ldr.w	fp, [r5, #-8]
 8007f80:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8007f84:	f04f 0900 	mov.w	r9, #0
 8007f88:	45ca      	cmp	sl, r9
 8007f8a:	dc05      	bgt.n	8007f98 <__sprint_r+0x4e>
 8007f8c:	68a3      	ldr	r3, [r4, #8]
 8007f8e:	f026 0603 	bic.w	r6, r6, #3
 8007f92:	1b9e      	subs	r6, r3, r6
 8007f94:	60a6      	str	r6, [r4, #8]
 8007f96:	e7e7      	b.n	8007f68 <__sprint_r+0x1e>
 8007f98:	463a      	mov	r2, r7
 8007f9a:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8007f9e:	4640      	mov	r0, r8
 8007fa0:	f000 f905 	bl	80081ae <_fputwc_r>
 8007fa4:	1c43      	adds	r3, r0, #1
 8007fa6:	d0e2      	beq.n	8007f6e <__sprint_r+0x24>
 8007fa8:	f109 0901 	add.w	r9, r9, #1
 8007fac:	e7ec      	b.n	8007f88 <__sprint_r+0x3e>
 8007fae:	f000 f939 	bl	8008224 <__sfvwrite_r>
 8007fb2:	e7dc      	b.n	8007f6e <__sprint_r+0x24>

08007fb4 <_write_r>:
 8007fb4:	b538      	push	{r3, r4, r5, lr}
 8007fb6:	4c07      	ldr	r4, [pc, #28]	; (8007fd4 <_write_r+0x20>)
 8007fb8:	4605      	mov	r5, r0
 8007fba:	4608      	mov	r0, r1
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	6022      	str	r2, [r4, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	f7fb ff7e 	bl	8003ec4 <_write>
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	d102      	bne.n	8007fd2 <_write_r+0x1e>
 8007fcc:	6823      	ldr	r3, [r4, #0]
 8007fce:	b103      	cbz	r3, 8007fd2 <_write_r+0x1e>
 8007fd0:	602b      	str	r3, [r5, #0]
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}
 8007fd4:	20001e00 	.word	0x20001e00

08007fd8 <_calloc_r>:
 8007fd8:	b510      	push	{r4, lr}
 8007fda:	4351      	muls	r1, r2
 8007fdc:	f7fc ffb2 	bl	8004f44 <_malloc_r>
 8007fe0:	4604      	mov	r4, r0
 8007fe2:	b198      	cbz	r0, 800800c <_calloc_r+0x34>
 8007fe4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007fe8:	f022 0203 	bic.w	r2, r2, #3
 8007fec:	3a04      	subs	r2, #4
 8007fee:	2a24      	cmp	r2, #36	; 0x24
 8007ff0:	d81b      	bhi.n	800802a <_calloc_r+0x52>
 8007ff2:	2a13      	cmp	r2, #19
 8007ff4:	d917      	bls.n	8008026 <_calloc_r+0x4e>
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	2a1b      	cmp	r2, #27
 8007ffa:	6001      	str	r1, [r0, #0]
 8007ffc:	6041      	str	r1, [r0, #4]
 8007ffe:	d807      	bhi.n	8008010 <_calloc_r+0x38>
 8008000:	f100 0308 	add.w	r3, r0, #8
 8008004:	2200      	movs	r2, #0
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	605a      	str	r2, [r3, #4]
 800800a:	609a      	str	r2, [r3, #8]
 800800c:	4620      	mov	r0, r4
 800800e:	bd10      	pop	{r4, pc}
 8008010:	2a24      	cmp	r2, #36	; 0x24
 8008012:	6081      	str	r1, [r0, #8]
 8008014:	60c1      	str	r1, [r0, #12]
 8008016:	bf11      	iteee	ne
 8008018:	f100 0310 	addne.w	r3, r0, #16
 800801c:	6101      	streq	r1, [r0, #16]
 800801e:	f100 0318 	addeq.w	r3, r0, #24
 8008022:	6141      	streq	r1, [r0, #20]
 8008024:	e7ee      	b.n	8008004 <_calloc_r+0x2c>
 8008026:	4603      	mov	r3, r0
 8008028:	e7ec      	b.n	8008004 <_calloc_r+0x2c>
 800802a:	2100      	movs	r1, #0
 800802c:	f7fd f9a3 	bl	8005376 <memset>
 8008030:	e7ec      	b.n	800800c <_calloc_r+0x34>
	...

08008034 <_close_r>:
 8008034:	b538      	push	{r3, r4, r5, lr}
 8008036:	4c06      	ldr	r4, [pc, #24]	; (8008050 <_close_r+0x1c>)
 8008038:	2300      	movs	r3, #0
 800803a:	4605      	mov	r5, r0
 800803c:	4608      	mov	r0, r1
 800803e:	6023      	str	r3, [r4, #0]
 8008040:	f000 fcc0 	bl	80089c4 <_close>
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	d102      	bne.n	800804e <_close_r+0x1a>
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	b103      	cbz	r3, 800804e <_close_r+0x1a>
 800804c:	602b      	str	r3, [r5, #0]
 800804e:	bd38      	pop	{r3, r4, r5, pc}
 8008050:	20001e00 	.word	0x20001e00

08008054 <_fclose_r>:
 8008054:	b570      	push	{r4, r5, r6, lr}
 8008056:	4605      	mov	r5, r0
 8008058:	460c      	mov	r4, r1
 800805a:	b911      	cbnz	r1, 8008062 <_fclose_r+0xe>
 800805c:	2600      	movs	r6, #0
 800805e:	4630      	mov	r0, r6
 8008060:	bd70      	pop	{r4, r5, r6, pc}
 8008062:	b118      	cbz	r0, 800806c <_fclose_r+0x18>
 8008064:	6983      	ldr	r3, [r0, #24]
 8008066:	b90b      	cbnz	r3, 800806c <_fclose_r+0x18>
 8008068:	f7ff fa2e 	bl	80074c8 <__sinit>
 800806c:	4b2c      	ldr	r3, [pc, #176]	; (8008120 <_fclose_r+0xcc>)
 800806e:	429c      	cmp	r4, r3
 8008070:	d114      	bne.n	800809c <_fclose_r+0x48>
 8008072:	686c      	ldr	r4, [r5, #4]
 8008074:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008076:	07d8      	lsls	r0, r3, #31
 8008078:	d405      	bmi.n	8008086 <_fclose_r+0x32>
 800807a:	89a3      	ldrh	r3, [r4, #12]
 800807c:	0599      	lsls	r1, r3, #22
 800807e:	d402      	bmi.n	8008086 <_fclose_r+0x32>
 8008080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008082:	f7ff fbe1 	bl	8007848 <__retarget_lock_acquire_recursive>
 8008086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800808a:	b98b      	cbnz	r3, 80080b0 <_fclose_r+0x5c>
 800808c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800808e:	f016 0601 	ands.w	r6, r6, #1
 8008092:	d1e3      	bne.n	800805c <_fclose_r+0x8>
 8008094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008096:	f7ff fbd8 	bl	800784a <__retarget_lock_release_recursive>
 800809a:	e7e0      	b.n	800805e <_fclose_r+0xa>
 800809c:	4b21      	ldr	r3, [pc, #132]	; (8008124 <_fclose_r+0xd0>)
 800809e:	429c      	cmp	r4, r3
 80080a0:	d101      	bne.n	80080a6 <_fclose_r+0x52>
 80080a2:	68ac      	ldr	r4, [r5, #8]
 80080a4:	e7e6      	b.n	8008074 <_fclose_r+0x20>
 80080a6:	4b20      	ldr	r3, [pc, #128]	; (8008128 <_fclose_r+0xd4>)
 80080a8:	429c      	cmp	r4, r3
 80080aa:	bf08      	it	eq
 80080ac:	68ec      	ldreq	r4, [r5, #12]
 80080ae:	e7e1      	b.n	8008074 <_fclose_r+0x20>
 80080b0:	4621      	mov	r1, r4
 80080b2:	4628      	mov	r0, r5
 80080b4:	f7ff f8e2 	bl	800727c <__sflush_r>
 80080b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80080ba:	4606      	mov	r6, r0
 80080bc:	b133      	cbz	r3, 80080cc <_fclose_r+0x78>
 80080be:	6a21      	ldr	r1, [r4, #32]
 80080c0:	4628      	mov	r0, r5
 80080c2:	4798      	blx	r3
 80080c4:	2800      	cmp	r0, #0
 80080c6:	bfb8      	it	lt
 80080c8:	f04f 36ff 	movlt.w	r6, #4294967295
 80080cc:	89a3      	ldrh	r3, [r4, #12]
 80080ce:	061a      	lsls	r2, r3, #24
 80080d0:	d503      	bpl.n	80080da <_fclose_r+0x86>
 80080d2:	6921      	ldr	r1, [r4, #16]
 80080d4:	4628      	mov	r0, r5
 80080d6:	f7ff facd 	bl	8007674 <_free_r>
 80080da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080dc:	b141      	cbz	r1, 80080f0 <_fclose_r+0x9c>
 80080de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080e2:	4299      	cmp	r1, r3
 80080e4:	d002      	beq.n	80080ec <_fclose_r+0x98>
 80080e6:	4628      	mov	r0, r5
 80080e8:	f7ff fac4 	bl	8007674 <_free_r>
 80080ec:	2300      	movs	r3, #0
 80080ee:	6363      	str	r3, [r4, #52]	; 0x34
 80080f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80080f2:	b121      	cbz	r1, 80080fe <_fclose_r+0xaa>
 80080f4:	4628      	mov	r0, r5
 80080f6:	f7ff fabd 	bl	8007674 <_free_r>
 80080fa:	2300      	movs	r3, #0
 80080fc:	64a3      	str	r3, [r4, #72]	; 0x48
 80080fe:	f7ff f9cb 	bl	8007498 <__sfp_lock_acquire>
 8008102:	2300      	movs	r3, #0
 8008104:	81a3      	strh	r3, [r4, #12]
 8008106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008108:	07db      	lsls	r3, r3, #31
 800810a:	d402      	bmi.n	8008112 <_fclose_r+0xbe>
 800810c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800810e:	f7ff fb9c 	bl	800784a <__retarget_lock_release_recursive>
 8008112:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008114:	f7ff fb97 	bl	8007846 <__retarget_lock_close_recursive>
 8008118:	f7ff f9c4 	bl	80074a4 <__sfp_lock_release>
 800811c:	e79f      	b.n	800805e <_fclose_r+0xa>
 800811e:	bf00      	nop
 8008120:	08008da4 	.word	0x08008da4
 8008124:	08008dc4 	.word	0x08008dc4
 8008128:	08008d84 	.word	0x08008d84

0800812c <__fputwc>:
 800812c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008130:	4680      	mov	r8, r0
 8008132:	460e      	mov	r6, r1
 8008134:	4614      	mov	r4, r2
 8008136:	f000 f9d3 	bl	80084e0 <__locale_mb_cur_max>
 800813a:	2801      	cmp	r0, #1
 800813c:	d11c      	bne.n	8008178 <__fputwc+0x4c>
 800813e:	1e73      	subs	r3, r6, #1
 8008140:	2bfe      	cmp	r3, #254	; 0xfe
 8008142:	d819      	bhi.n	8008178 <__fputwc+0x4c>
 8008144:	f88d 6004 	strb.w	r6, [sp, #4]
 8008148:	4605      	mov	r5, r0
 800814a:	2700      	movs	r7, #0
 800814c:	f10d 0904 	add.w	r9, sp, #4
 8008150:	42af      	cmp	r7, r5
 8008152:	d020      	beq.n	8008196 <__fputwc+0x6a>
 8008154:	68a3      	ldr	r3, [r4, #8]
 8008156:	f817 1009 	ldrb.w	r1, [r7, r9]
 800815a:	3b01      	subs	r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	60a3      	str	r3, [r4, #8]
 8008160:	da04      	bge.n	800816c <__fputwc+0x40>
 8008162:	69a2      	ldr	r2, [r4, #24]
 8008164:	4293      	cmp	r3, r2
 8008166:	db1a      	blt.n	800819e <__fputwc+0x72>
 8008168:	290a      	cmp	r1, #10
 800816a:	d018      	beq.n	800819e <__fputwc+0x72>
 800816c:	6823      	ldr	r3, [r4, #0]
 800816e:	1c5a      	adds	r2, r3, #1
 8008170:	6022      	str	r2, [r4, #0]
 8008172:	7019      	strb	r1, [r3, #0]
 8008174:	3701      	adds	r7, #1
 8008176:	e7eb      	b.n	8008150 <__fputwc+0x24>
 8008178:	4632      	mov	r2, r6
 800817a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800817e:	a901      	add	r1, sp, #4
 8008180:	4640      	mov	r0, r8
 8008182:	f000 fbe9 	bl	8008958 <_wcrtomb_r>
 8008186:	1c42      	adds	r2, r0, #1
 8008188:	4605      	mov	r5, r0
 800818a:	d1de      	bne.n	800814a <__fputwc+0x1e>
 800818c:	89a3      	ldrh	r3, [r4, #12]
 800818e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008192:	81a3      	strh	r3, [r4, #12]
 8008194:	4606      	mov	r6, r0
 8008196:	4630      	mov	r0, r6
 8008198:	b003      	add	sp, #12
 800819a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800819e:	4622      	mov	r2, r4
 80081a0:	4640      	mov	r0, r8
 80081a2:	f000 fb7b 	bl	800889c <__swbuf_r>
 80081a6:	1c43      	adds	r3, r0, #1
 80081a8:	d1e4      	bne.n	8008174 <__fputwc+0x48>
 80081aa:	4606      	mov	r6, r0
 80081ac:	e7f3      	b.n	8008196 <__fputwc+0x6a>

080081ae <_fputwc_r>:
 80081ae:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80081b0:	07db      	lsls	r3, r3, #31
 80081b2:	b570      	push	{r4, r5, r6, lr}
 80081b4:	4605      	mov	r5, r0
 80081b6:	460e      	mov	r6, r1
 80081b8:	4614      	mov	r4, r2
 80081ba:	d405      	bmi.n	80081c8 <_fputwc_r+0x1a>
 80081bc:	8993      	ldrh	r3, [r2, #12]
 80081be:	0598      	lsls	r0, r3, #22
 80081c0:	d402      	bmi.n	80081c8 <_fputwc_r+0x1a>
 80081c2:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80081c4:	f7ff fb40 	bl	8007848 <__retarget_lock_acquire_recursive>
 80081c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081cc:	0499      	lsls	r1, r3, #18
 80081ce:	d406      	bmi.n	80081de <_fputwc_r+0x30>
 80081d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80081d4:	81a3      	strh	r3, [r4, #12]
 80081d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80081dc:	6663      	str	r3, [r4, #100]	; 0x64
 80081de:	4622      	mov	r2, r4
 80081e0:	4628      	mov	r0, r5
 80081e2:	4631      	mov	r1, r6
 80081e4:	f7ff ffa2 	bl	800812c <__fputwc>
 80081e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081ea:	07da      	lsls	r2, r3, #31
 80081ec:	4605      	mov	r5, r0
 80081ee:	d405      	bmi.n	80081fc <_fputwc_r+0x4e>
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	059b      	lsls	r3, r3, #22
 80081f4:	d402      	bmi.n	80081fc <_fputwc_r+0x4e>
 80081f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081f8:	f7ff fb27 	bl	800784a <__retarget_lock_release_recursive>
 80081fc:	4628      	mov	r0, r5
 80081fe:	bd70      	pop	{r4, r5, r6, pc}

08008200 <_fstat_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	4c07      	ldr	r4, [pc, #28]	; (8008220 <_fstat_r+0x20>)
 8008204:	2300      	movs	r3, #0
 8008206:	4605      	mov	r5, r0
 8008208:	4608      	mov	r0, r1
 800820a:	4611      	mov	r1, r2
 800820c:	6023      	str	r3, [r4, #0]
 800820e:	f000 fbe1 	bl	80089d4 <_fstat>
 8008212:	1c43      	adds	r3, r0, #1
 8008214:	d102      	bne.n	800821c <_fstat_r+0x1c>
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	b103      	cbz	r3, 800821c <_fstat_r+0x1c>
 800821a:	602b      	str	r3, [r5, #0]
 800821c:	bd38      	pop	{r3, r4, r5, pc}
 800821e:	bf00      	nop
 8008220:	20001e00 	.word	0x20001e00

08008224 <__sfvwrite_r>:
 8008224:	6893      	ldr	r3, [r2, #8]
 8008226:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822a:	4607      	mov	r7, r0
 800822c:	460c      	mov	r4, r1
 800822e:	4690      	mov	r8, r2
 8008230:	b91b      	cbnz	r3, 800823a <__sfvwrite_r+0x16>
 8008232:	2000      	movs	r0, #0
 8008234:	b003      	add	sp, #12
 8008236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823a:	898b      	ldrh	r3, [r1, #12]
 800823c:	0718      	lsls	r0, r3, #28
 800823e:	d526      	bpl.n	800828e <__sfvwrite_r+0x6a>
 8008240:	690b      	ldr	r3, [r1, #16]
 8008242:	b323      	cbz	r3, 800828e <__sfvwrite_r+0x6a>
 8008244:	89a3      	ldrh	r3, [r4, #12]
 8008246:	f8d8 6000 	ldr.w	r6, [r8]
 800824a:	f013 0902 	ands.w	r9, r3, #2
 800824e:	d02d      	beq.n	80082ac <__sfvwrite_r+0x88>
 8008250:	f04f 0a00 	mov.w	sl, #0
 8008254:	f8df b264 	ldr.w	fp, [pc, #612]	; 80084bc <__sfvwrite_r+0x298>
 8008258:	46d1      	mov	r9, sl
 800825a:	f1b9 0f00 	cmp.w	r9, #0
 800825e:	d01f      	beq.n	80082a0 <__sfvwrite_r+0x7c>
 8008260:	45d9      	cmp	r9, fp
 8008262:	464b      	mov	r3, r9
 8008264:	4652      	mov	r2, sl
 8008266:	bf28      	it	cs
 8008268:	465b      	movcs	r3, fp
 800826a:	6a21      	ldr	r1, [r4, #32]
 800826c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800826e:	4638      	mov	r0, r7
 8008270:	47a8      	blx	r5
 8008272:	2800      	cmp	r0, #0
 8008274:	f340 8089 	ble.w	800838a <__sfvwrite_r+0x166>
 8008278:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800827c:	4482      	add	sl, r0
 800827e:	eba9 0900 	sub.w	r9, r9, r0
 8008282:	1a18      	subs	r0, r3, r0
 8008284:	f8c8 0008 	str.w	r0, [r8, #8]
 8008288:	2800      	cmp	r0, #0
 800828a:	d1e6      	bne.n	800825a <__sfvwrite_r+0x36>
 800828c:	e7d1      	b.n	8008232 <__sfvwrite_r+0xe>
 800828e:	4621      	mov	r1, r4
 8008290:	4638      	mov	r0, r7
 8008292:	f7fe f929 	bl	80064e8 <__swsetup_r>
 8008296:	2800      	cmp	r0, #0
 8008298:	d0d4      	beq.n	8008244 <__sfvwrite_r+0x20>
 800829a:	f04f 30ff 	mov.w	r0, #4294967295
 800829e:	e7c9      	b.n	8008234 <__sfvwrite_r+0x10>
 80082a0:	f8d6 a000 	ldr.w	sl, [r6]
 80082a4:	f8d6 9004 	ldr.w	r9, [r6, #4]
 80082a8:	3608      	adds	r6, #8
 80082aa:	e7d6      	b.n	800825a <__sfvwrite_r+0x36>
 80082ac:	f013 0301 	ands.w	r3, r3, #1
 80082b0:	d043      	beq.n	800833a <__sfvwrite_r+0x116>
 80082b2:	4648      	mov	r0, r9
 80082b4:	46ca      	mov	sl, r9
 80082b6:	46cb      	mov	fp, r9
 80082b8:	f1bb 0f00 	cmp.w	fp, #0
 80082bc:	f000 80d9 	beq.w	8008472 <__sfvwrite_r+0x24e>
 80082c0:	b950      	cbnz	r0, 80082d8 <__sfvwrite_r+0xb4>
 80082c2:	465a      	mov	r2, fp
 80082c4:	210a      	movs	r1, #10
 80082c6:	4650      	mov	r0, sl
 80082c8:	f7f7 ff82 	bl	80001d0 <memchr>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	f000 80d5 	beq.w	800847c <__sfvwrite_r+0x258>
 80082d2:	3001      	adds	r0, #1
 80082d4:	eba0 090a 	sub.w	r9, r0, sl
 80082d8:	6820      	ldr	r0, [r4, #0]
 80082da:	6921      	ldr	r1, [r4, #16]
 80082dc:	6962      	ldr	r2, [r4, #20]
 80082de:	45d9      	cmp	r9, fp
 80082e0:	464b      	mov	r3, r9
 80082e2:	bf28      	it	cs
 80082e4:	465b      	movcs	r3, fp
 80082e6:	4288      	cmp	r0, r1
 80082e8:	f240 80cb 	bls.w	8008482 <__sfvwrite_r+0x25e>
 80082ec:	68a5      	ldr	r5, [r4, #8]
 80082ee:	4415      	add	r5, r2
 80082f0:	42ab      	cmp	r3, r5
 80082f2:	f340 80c6 	ble.w	8008482 <__sfvwrite_r+0x25e>
 80082f6:	4651      	mov	r1, sl
 80082f8:	462a      	mov	r2, r5
 80082fa:	f000 f923 	bl	8008544 <memmove>
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	442b      	add	r3, r5
 8008302:	6023      	str	r3, [r4, #0]
 8008304:	4621      	mov	r1, r4
 8008306:	4638      	mov	r0, r7
 8008308:	f7ff f84a 	bl	80073a0 <_fflush_r>
 800830c:	2800      	cmp	r0, #0
 800830e:	d13c      	bne.n	800838a <__sfvwrite_r+0x166>
 8008310:	ebb9 0905 	subs.w	r9, r9, r5
 8008314:	f040 80cf 	bne.w	80084b6 <__sfvwrite_r+0x292>
 8008318:	4621      	mov	r1, r4
 800831a:	4638      	mov	r0, r7
 800831c:	f7ff f840 	bl	80073a0 <_fflush_r>
 8008320:	2800      	cmp	r0, #0
 8008322:	d132      	bne.n	800838a <__sfvwrite_r+0x166>
 8008324:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008328:	44aa      	add	sl, r5
 800832a:	ebab 0b05 	sub.w	fp, fp, r5
 800832e:	1b5d      	subs	r5, r3, r5
 8008330:	f8c8 5008 	str.w	r5, [r8, #8]
 8008334:	2d00      	cmp	r5, #0
 8008336:	d1bf      	bne.n	80082b8 <__sfvwrite_r+0x94>
 8008338:	e77b      	b.n	8008232 <__sfvwrite_r+0xe>
 800833a:	4699      	mov	r9, r3
 800833c:	469a      	mov	sl, r3
 800833e:	f1ba 0f00 	cmp.w	sl, #0
 8008342:	d027      	beq.n	8008394 <__sfvwrite_r+0x170>
 8008344:	89a2      	ldrh	r2, [r4, #12]
 8008346:	68a5      	ldr	r5, [r4, #8]
 8008348:	0591      	lsls	r1, r2, #22
 800834a:	d565      	bpl.n	8008418 <__sfvwrite_r+0x1f4>
 800834c:	45aa      	cmp	sl, r5
 800834e:	d33b      	bcc.n	80083c8 <__sfvwrite_r+0x1a4>
 8008350:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008354:	d036      	beq.n	80083c4 <__sfvwrite_r+0x1a0>
 8008356:	6921      	ldr	r1, [r4, #16]
 8008358:	6823      	ldr	r3, [r4, #0]
 800835a:	1a5b      	subs	r3, r3, r1
 800835c:	9301      	str	r3, [sp, #4]
 800835e:	6963      	ldr	r3, [r4, #20]
 8008360:	2002      	movs	r0, #2
 8008362:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008366:	fb93 fbf0 	sdiv	fp, r3, r0
 800836a:	9b01      	ldr	r3, [sp, #4]
 800836c:	1c58      	adds	r0, r3, #1
 800836e:	4450      	add	r0, sl
 8008370:	4583      	cmp	fp, r0
 8008372:	bf38      	it	cc
 8008374:	4683      	movcc	fp, r0
 8008376:	0553      	lsls	r3, r2, #21
 8008378:	d53e      	bpl.n	80083f8 <__sfvwrite_r+0x1d4>
 800837a:	4659      	mov	r1, fp
 800837c:	4638      	mov	r0, r7
 800837e:	f7fc fde1 	bl	8004f44 <_malloc_r>
 8008382:	4605      	mov	r5, r0
 8008384:	b950      	cbnz	r0, 800839c <__sfvwrite_r+0x178>
 8008386:	230c      	movs	r3, #12
 8008388:	603b      	str	r3, [r7, #0]
 800838a:	89a3      	ldrh	r3, [r4, #12]
 800838c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008390:	81a3      	strh	r3, [r4, #12]
 8008392:	e782      	b.n	800829a <__sfvwrite_r+0x76>
 8008394:	e896 0600 	ldmia.w	r6, {r9, sl}
 8008398:	3608      	adds	r6, #8
 800839a:	e7d0      	b.n	800833e <__sfvwrite_r+0x11a>
 800839c:	9a01      	ldr	r2, [sp, #4]
 800839e:	6921      	ldr	r1, [r4, #16]
 80083a0:	f7fc ffde 	bl	8005360 <memcpy>
 80083a4:	89a2      	ldrh	r2, [r4, #12]
 80083a6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80083aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083ae:	81a2      	strh	r2, [r4, #12]
 80083b0:	9b01      	ldr	r3, [sp, #4]
 80083b2:	6125      	str	r5, [r4, #16]
 80083b4:	441d      	add	r5, r3
 80083b6:	ebab 0303 	sub.w	r3, fp, r3
 80083ba:	6025      	str	r5, [r4, #0]
 80083bc:	f8c4 b014 	str.w	fp, [r4, #20]
 80083c0:	4655      	mov	r5, sl
 80083c2:	60a3      	str	r3, [r4, #8]
 80083c4:	45aa      	cmp	sl, r5
 80083c6:	d200      	bcs.n	80083ca <__sfvwrite_r+0x1a6>
 80083c8:	4655      	mov	r5, sl
 80083ca:	462a      	mov	r2, r5
 80083cc:	4649      	mov	r1, r9
 80083ce:	6820      	ldr	r0, [r4, #0]
 80083d0:	f000 f8b8 	bl	8008544 <memmove>
 80083d4:	68a3      	ldr	r3, [r4, #8]
 80083d6:	1b5b      	subs	r3, r3, r5
 80083d8:	60a3      	str	r3, [r4, #8]
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	441d      	add	r5, r3
 80083de:	6025      	str	r5, [r4, #0]
 80083e0:	4655      	mov	r5, sl
 80083e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80083e6:	44a9      	add	r9, r5
 80083e8:	ebaa 0a05 	sub.w	sl, sl, r5
 80083ec:	1b5d      	subs	r5, r3, r5
 80083ee:	f8c8 5008 	str.w	r5, [r8, #8]
 80083f2:	2d00      	cmp	r5, #0
 80083f4:	d1a3      	bne.n	800833e <__sfvwrite_r+0x11a>
 80083f6:	e71c      	b.n	8008232 <__sfvwrite_r+0xe>
 80083f8:	465a      	mov	r2, fp
 80083fa:	4638      	mov	r0, r7
 80083fc:	f000 f8ce 	bl	800859c <_realloc_r>
 8008400:	4605      	mov	r5, r0
 8008402:	2800      	cmp	r0, #0
 8008404:	d1d4      	bne.n	80083b0 <__sfvwrite_r+0x18c>
 8008406:	6921      	ldr	r1, [r4, #16]
 8008408:	4638      	mov	r0, r7
 800840a:	f7ff f933 	bl	8007674 <_free_r>
 800840e:	89a3      	ldrh	r3, [r4, #12]
 8008410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008414:	81a3      	strh	r3, [r4, #12]
 8008416:	e7b6      	b.n	8008386 <__sfvwrite_r+0x162>
 8008418:	6820      	ldr	r0, [r4, #0]
 800841a:	6923      	ldr	r3, [r4, #16]
 800841c:	4298      	cmp	r0, r3
 800841e:	d802      	bhi.n	8008426 <__sfvwrite_r+0x202>
 8008420:	6962      	ldr	r2, [r4, #20]
 8008422:	4592      	cmp	sl, r2
 8008424:	d215      	bcs.n	8008452 <__sfvwrite_r+0x22e>
 8008426:	4555      	cmp	r5, sl
 8008428:	bf28      	it	cs
 800842a:	4655      	movcs	r5, sl
 800842c:	462a      	mov	r2, r5
 800842e:	4649      	mov	r1, r9
 8008430:	f000 f888 	bl	8008544 <memmove>
 8008434:	68a3      	ldr	r3, [r4, #8]
 8008436:	6822      	ldr	r2, [r4, #0]
 8008438:	1b5b      	subs	r3, r3, r5
 800843a:	442a      	add	r2, r5
 800843c:	60a3      	str	r3, [r4, #8]
 800843e:	6022      	str	r2, [r4, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1ce      	bne.n	80083e2 <__sfvwrite_r+0x1be>
 8008444:	4621      	mov	r1, r4
 8008446:	4638      	mov	r0, r7
 8008448:	f7fe ffaa 	bl	80073a0 <_fflush_r>
 800844c:	2800      	cmp	r0, #0
 800844e:	d0c8      	beq.n	80083e2 <__sfvwrite_r+0x1be>
 8008450:	e79b      	b.n	800838a <__sfvwrite_r+0x166>
 8008452:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008456:	4553      	cmp	r3, sl
 8008458:	bf28      	it	cs
 800845a:	4653      	movcs	r3, sl
 800845c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800845e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008462:	6a21      	ldr	r1, [r4, #32]
 8008464:	4353      	muls	r3, r2
 8008466:	4638      	mov	r0, r7
 8008468:	464a      	mov	r2, r9
 800846a:	47a8      	blx	r5
 800846c:	1e05      	subs	r5, r0, #0
 800846e:	dcb8      	bgt.n	80083e2 <__sfvwrite_r+0x1be>
 8008470:	e78b      	b.n	800838a <__sfvwrite_r+0x166>
 8008472:	e896 0c00 	ldmia.w	r6, {sl, fp}
 8008476:	2000      	movs	r0, #0
 8008478:	3608      	adds	r6, #8
 800847a:	e71d      	b.n	80082b8 <__sfvwrite_r+0x94>
 800847c:	f10b 0901 	add.w	r9, fp, #1
 8008480:	e72a      	b.n	80082d8 <__sfvwrite_r+0xb4>
 8008482:	4293      	cmp	r3, r2
 8008484:	db09      	blt.n	800849a <__sfvwrite_r+0x276>
 8008486:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8008488:	6a21      	ldr	r1, [r4, #32]
 800848a:	4613      	mov	r3, r2
 800848c:	4638      	mov	r0, r7
 800848e:	4652      	mov	r2, sl
 8008490:	47a8      	blx	r5
 8008492:	1e05      	subs	r5, r0, #0
 8008494:	f73f af3c 	bgt.w	8008310 <__sfvwrite_r+0xec>
 8008498:	e777      	b.n	800838a <__sfvwrite_r+0x166>
 800849a:	461a      	mov	r2, r3
 800849c:	4651      	mov	r1, sl
 800849e:	9301      	str	r3, [sp, #4]
 80084a0:	f000 f850 	bl	8008544 <memmove>
 80084a4:	9b01      	ldr	r3, [sp, #4]
 80084a6:	68a2      	ldr	r2, [r4, #8]
 80084a8:	1ad2      	subs	r2, r2, r3
 80084aa:	60a2      	str	r2, [r4, #8]
 80084ac:	6822      	ldr	r2, [r4, #0]
 80084ae:	441a      	add	r2, r3
 80084b0:	6022      	str	r2, [r4, #0]
 80084b2:	461d      	mov	r5, r3
 80084b4:	e72c      	b.n	8008310 <__sfvwrite_r+0xec>
 80084b6:	2001      	movs	r0, #1
 80084b8:	e734      	b.n	8008324 <__sfvwrite_r+0x100>
 80084ba:	bf00      	nop
 80084bc:	7ffffc00 	.word	0x7ffffc00

080084c0 <_isatty_r>:
 80084c0:	b538      	push	{r3, r4, r5, lr}
 80084c2:	4c06      	ldr	r4, [pc, #24]	; (80084dc <_isatty_r+0x1c>)
 80084c4:	2300      	movs	r3, #0
 80084c6:	4605      	mov	r5, r0
 80084c8:	4608      	mov	r0, r1
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	f000 fa8a 	bl	80089e4 <_isatty>
 80084d0:	1c43      	adds	r3, r0, #1
 80084d2:	d102      	bne.n	80084da <_isatty_r+0x1a>
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	b103      	cbz	r3, 80084da <_isatty_r+0x1a>
 80084d8:	602b      	str	r3, [r5, #0]
 80084da:	bd38      	pop	{r3, r4, r5, pc}
 80084dc:	20001e00 	.word	0x20001e00

080084e0 <__locale_mb_cur_max>:
 80084e0:	4b04      	ldr	r3, [pc, #16]	; (80084f4 <__locale_mb_cur_max+0x14>)
 80084e2:	4a05      	ldr	r2, [pc, #20]	; (80084f8 <__locale_mb_cur_max+0x18>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6a1b      	ldr	r3, [r3, #32]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	bf08      	it	eq
 80084ec:	4613      	moveq	r3, r2
 80084ee:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80084f2:	4770      	bx	lr
 80084f4:	2000059c 	.word	0x2000059c
 80084f8:	20000690 	.word	0x20000690

080084fc <_lseek_r>:
 80084fc:	b538      	push	{r3, r4, r5, lr}
 80084fe:	4c07      	ldr	r4, [pc, #28]	; (800851c <_lseek_r+0x20>)
 8008500:	4605      	mov	r5, r0
 8008502:	4608      	mov	r0, r1
 8008504:	4611      	mov	r1, r2
 8008506:	2200      	movs	r2, #0
 8008508:	6022      	str	r2, [r4, #0]
 800850a:	461a      	mov	r2, r3
 800850c:	f000 fa72 	bl	80089f4 <_lseek>
 8008510:	1c43      	adds	r3, r0, #1
 8008512:	d102      	bne.n	800851a <_lseek_r+0x1e>
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	b103      	cbz	r3, 800851a <_lseek_r+0x1e>
 8008518:	602b      	str	r3, [r5, #0]
 800851a:	bd38      	pop	{r3, r4, r5, pc}
 800851c:	20001e00 	.word	0x20001e00

08008520 <__ascii_mbtowc>:
 8008520:	b082      	sub	sp, #8
 8008522:	b901      	cbnz	r1, 8008526 <__ascii_mbtowc+0x6>
 8008524:	a901      	add	r1, sp, #4
 8008526:	b142      	cbz	r2, 800853a <__ascii_mbtowc+0x1a>
 8008528:	b14b      	cbz	r3, 800853e <__ascii_mbtowc+0x1e>
 800852a:	7813      	ldrb	r3, [r2, #0]
 800852c:	600b      	str	r3, [r1, #0]
 800852e:	7812      	ldrb	r2, [r2, #0]
 8008530:	1c10      	adds	r0, r2, #0
 8008532:	bf18      	it	ne
 8008534:	2001      	movne	r0, #1
 8008536:	b002      	add	sp, #8
 8008538:	4770      	bx	lr
 800853a:	4610      	mov	r0, r2
 800853c:	e7fb      	b.n	8008536 <__ascii_mbtowc+0x16>
 800853e:	f06f 0001 	mvn.w	r0, #1
 8008542:	e7f8      	b.n	8008536 <__ascii_mbtowc+0x16>

08008544 <memmove>:
 8008544:	4288      	cmp	r0, r1
 8008546:	b510      	push	{r4, lr}
 8008548:	eb01 0302 	add.w	r3, r1, r2
 800854c:	d803      	bhi.n	8008556 <memmove+0x12>
 800854e:	1e42      	subs	r2, r0, #1
 8008550:	4299      	cmp	r1, r3
 8008552:	d10c      	bne.n	800856e <memmove+0x2a>
 8008554:	bd10      	pop	{r4, pc}
 8008556:	4298      	cmp	r0, r3
 8008558:	d2f9      	bcs.n	800854e <memmove+0xa>
 800855a:	1881      	adds	r1, r0, r2
 800855c:	1ad2      	subs	r2, r2, r3
 800855e:	42d3      	cmn	r3, r2
 8008560:	d100      	bne.n	8008564 <memmove+0x20>
 8008562:	bd10      	pop	{r4, pc}
 8008564:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008568:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800856c:	e7f7      	b.n	800855e <memmove+0x1a>
 800856e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008572:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008576:	e7eb      	b.n	8008550 <memmove+0xc>

08008578 <_read_r>:
 8008578:	b538      	push	{r3, r4, r5, lr}
 800857a:	4c07      	ldr	r4, [pc, #28]	; (8008598 <_read_r+0x20>)
 800857c:	4605      	mov	r5, r0
 800857e:	4608      	mov	r0, r1
 8008580:	4611      	mov	r1, r2
 8008582:	2200      	movs	r2, #0
 8008584:	6022      	str	r2, [r4, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	f000 fa3c 	bl	8008a04 <_read>
 800858c:	1c43      	adds	r3, r0, #1
 800858e:	d102      	bne.n	8008596 <_read_r+0x1e>
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	b103      	cbz	r3, 8008596 <_read_r+0x1e>
 8008594:	602b      	str	r3, [r5, #0]
 8008596:	bd38      	pop	{r3, r4, r5, pc}
 8008598:	20001e00 	.word	0x20001e00

0800859c <_realloc_r>:
 800859c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a0:	4682      	mov	sl, r0
 80085a2:	460c      	mov	r4, r1
 80085a4:	b929      	cbnz	r1, 80085b2 <_realloc_r+0x16>
 80085a6:	4611      	mov	r1, r2
 80085a8:	b003      	add	sp, #12
 80085aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ae:	f7fc bcc9 	b.w	8004f44 <_malloc_r>
 80085b2:	9201      	str	r2, [sp, #4]
 80085b4:	f7fc fee8 	bl	8005388 <__malloc_lock>
 80085b8:	9a01      	ldr	r2, [sp, #4]
 80085ba:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80085be:	f102 080b 	add.w	r8, r2, #11
 80085c2:	f1b8 0f16 	cmp.w	r8, #22
 80085c6:	f1a4 0908 	sub.w	r9, r4, #8
 80085ca:	f025 0603 	bic.w	r6, r5, #3
 80085ce:	d90a      	bls.n	80085e6 <_realloc_r+0x4a>
 80085d0:	f038 0807 	bics.w	r8, r8, #7
 80085d4:	d509      	bpl.n	80085ea <_realloc_r+0x4e>
 80085d6:	230c      	movs	r3, #12
 80085d8:	f8ca 3000 	str.w	r3, [sl]
 80085dc:	2700      	movs	r7, #0
 80085de:	4638      	mov	r0, r7
 80085e0:	b003      	add	sp, #12
 80085e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e6:	f04f 0810 	mov.w	r8, #16
 80085ea:	4590      	cmp	r8, r2
 80085ec:	d3f3      	bcc.n	80085d6 <_realloc_r+0x3a>
 80085ee:	45b0      	cmp	r8, r6
 80085f0:	f340 8145 	ble.w	800887e <_realloc_r+0x2e2>
 80085f4:	4ba8      	ldr	r3, [pc, #672]	; (8008898 <_realloc_r+0x2fc>)
 80085f6:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80085fa:	eb09 0106 	add.w	r1, r9, r6
 80085fe:	4571      	cmp	r1, lr
 8008600:	469b      	mov	fp, r3
 8008602:	684b      	ldr	r3, [r1, #4]
 8008604:	d005      	beq.n	8008612 <_realloc_r+0x76>
 8008606:	f023 0001 	bic.w	r0, r3, #1
 800860a:	4408      	add	r0, r1
 800860c:	6840      	ldr	r0, [r0, #4]
 800860e:	07c7      	lsls	r7, r0, #31
 8008610:	d447      	bmi.n	80086a2 <_realloc_r+0x106>
 8008612:	f023 0303 	bic.w	r3, r3, #3
 8008616:	4571      	cmp	r1, lr
 8008618:	eb06 0703 	add.w	r7, r6, r3
 800861c:	d119      	bne.n	8008652 <_realloc_r+0xb6>
 800861e:	f108 0010 	add.w	r0, r8, #16
 8008622:	4287      	cmp	r7, r0
 8008624:	db3f      	blt.n	80086a6 <_realloc_r+0x10a>
 8008626:	eb09 0308 	add.w	r3, r9, r8
 800862a:	eba7 0708 	sub.w	r7, r7, r8
 800862e:	f047 0701 	orr.w	r7, r7, #1
 8008632:	f8cb 3008 	str.w	r3, [fp, #8]
 8008636:	605f      	str	r7, [r3, #4]
 8008638:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800863c:	f003 0301 	and.w	r3, r3, #1
 8008640:	ea43 0308 	orr.w	r3, r3, r8
 8008644:	f844 3c04 	str.w	r3, [r4, #-4]
 8008648:	4650      	mov	r0, sl
 800864a:	f7fc fea3 	bl	8005394 <__malloc_unlock>
 800864e:	4627      	mov	r7, r4
 8008650:	e7c5      	b.n	80085de <_realloc_r+0x42>
 8008652:	45b8      	cmp	r8, r7
 8008654:	dc27      	bgt.n	80086a6 <_realloc_r+0x10a>
 8008656:	68cb      	ldr	r3, [r1, #12]
 8008658:	688a      	ldr	r2, [r1, #8]
 800865a:	60d3      	str	r3, [r2, #12]
 800865c:	609a      	str	r2, [r3, #8]
 800865e:	eba7 0008 	sub.w	r0, r7, r8
 8008662:	280f      	cmp	r0, #15
 8008664:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008668:	eb09 0207 	add.w	r2, r9, r7
 800866c:	f240 8109 	bls.w	8008882 <_realloc_r+0x2e6>
 8008670:	eb09 0108 	add.w	r1, r9, r8
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	ea43 0308 	orr.w	r3, r3, r8
 800867c:	f040 0001 	orr.w	r0, r0, #1
 8008680:	f8c9 3004 	str.w	r3, [r9, #4]
 8008684:	6048      	str	r0, [r1, #4]
 8008686:	6853      	ldr	r3, [r2, #4]
 8008688:	f043 0301 	orr.w	r3, r3, #1
 800868c:	6053      	str	r3, [r2, #4]
 800868e:	3108      	adds	r1, #8
 8008690:	4650      	mov	r0, sl
 8008692:	f7fe ffef 	bl	8007674 <_free_r>
 8008696:	4650      	mov	r0, sl
 8008698:	f7fc fe7c 	bl	8005394 <__malloc_unlock>
 800869c:	f109 0708 	add.w	r7, r9, #8
 80086a0:	e79d      	b.n	80085de <_realloc_r+0x42>
 80086a2:	2300      	movs	r3, #0
 80086a4:	4619      	mov	r1, r3
 80086a6:	07e8      	lsls	r0, r5, #31
 80086a8:	f100 8084 	bmi.w	80087b4 <_realloc_r+0x218>
 80086ac:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80086b0:	eba9 0505 	sub.w	r5, r9, r5
 80086b4:	6868      	ldr	r0, [r5, #4]
 80086b6:	f020 0003 	bic.w	r0, r0, #3
 80086ba:	4430      	add	r0, r6
 80086bc:	2900      	cmp	r1, #0
 80086be:	d076      	beq.n	80087ae <_realloc_r+0x212>
 80086c0:	4571      	cmp	r1, lr
 80086c2:	d150      	bne.n	8008766 <_realloc_r+0x1ca>
 80086c4:	4403      	add	r3, r0
 80086c6:	f108 0110 	add.w	r1, r8, #16
 80086ca:	428b      	cmp	r3, r1
 80086cc:	db6f      	blt.n	80087ae <_realloc_r+0x212>
 80086ce:	462f      	mov	r7, r5
 80086d0:	68ea      	ldr	r2, [r5, #12]
 80086d2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80086d6:	60ca      	str	r2, [r1, #12]
 80086d8:	6091      	str	r1, [r2, #8]
 80086da:	1f32      	subs	r2, r6, #4
 80086dc:	2a24      	cmp	r2, #36	; 0x24
 80086de:	d83b      	bhi.n	8008758 <_realloc_r+0x1bc>
 80086e0:	2a13      	cmp	r2, #19
 80086e2:	d936      	bls.n	8008752 <_realloc_r+0x1b6>
 80086e4:	6821      	ldr	r1, [r4, #0]
 80086e6:	60a9      	str	r1, [r5, #8]
 80086e8:	6861      	ldr	r1, [r4, #4]
 80086ea:	60e9      	str	r1, [r5, #12]
 80086ec:	2a1b      	cmp	r2, #27
 80086ee:	d81c      	bhi.n	800872a <_realloc_r+0x18e>
 80086f0:	f105 0210 	add.w	r2, r5, #16
 80086f4:	f104 0108 	add.w	r1, r4, #8
 80086f8:	6808      	ldr	r0, [r1, #0]
 80086fa:	6010      	str	r0, [r2, #0]
 80086fc:	6848      	ldr	r0, [r1, #4]
 80086fe:	6050      	str	r0, [r2, #4]
 8008700:	6889      	ldr	r1, [r1, #8]
 8008702:	6091      	str	r1, [r2, #8]
 8008704:	eb05 0208 	add.w	r2, r5, r8
 8008708:	eba3 0308 	sub.w	r3, r3, r8
 800870c:	f043 0301 	orr.w	r3, r3, #1
 8008710:	f8cb 2008 	str.w	r2, [fp, #8]
 8008714:	6053      	str	r3, [r2, #4]
 8008716:	686b      	ldr	r3, [r5, #4]
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	ea43 0308 	orr.w	r3, r3, r8
 8008720:	606b      	str	r3, [r5, #4]
 8008722:	4650      	mov	r0, sl
 8008724:	f7fc fe36 	bl	8005394 <__malloc_unlock>
 8008728:	e759      	b.n	80085de <_realloc_r+0x42>
 800872a:	68a1      	ldr	r1, [r4, #8]
 800872c:	6129      	str	r1, [r5, #16]
 800872e:	68e1      	ldr	r1, [r4, #12]
 8008730:	6169      	str	r1, [r5, #20]
 8008732:	2a24      	cmp	r2, #36	; 0x24
 8008734:	bf01      	itttt	eq
 8008736:	6922      	ldreq	r2, [r4, #16]
 8008738:	61aa      	streq	r2, [r5, #24]
 800873a:	6960      	ldreq	r0, [r4, #20]
 800873c:	61e8      	streq	r0, [r5, #28]
 800873e:	bf19      	ittee	ne
 8008740:	f105 0218 	addne.w	r2, r5, #24
 8008744:	f104 0110 	addne.w	r1, r4, #16
 8008748:	f105 0220 	addeq.w	r2, r5, #32
 800874c:	f104 0118 	addeq.w	r1, r4, #24
 8008750:	e7d2      	b.n	80086f8 <_realloc_r+0x15c>
 8008752:	463a      	mov	r2, r7
 8008754:	4621      	mov	r1, r4
 8008756:	e7cf      	b.n	80086f8 <_realloc_r+0x15c>
 8008758:	4621      	mov	r1, r4
 800875a:	4638      	mov	r0, r7
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	f7ff fef1 	bl	8008544 <memmove>
 8008762:	9b01      	ldr	r3, [sp, #4]
 8008764:	e7ce      	b.n	8008704 <_realloc_r+0x168>
 8008766:	18c7      	adds	r7, r0, r3
 8008768:	45b8      	cmp	r8, r7
 800876a:	dc20      	bgt.n	80087ae <_realloc_r+0x212>
 800876c:	68cb      	ldr	r3, [r1, #12]
 800876e:	688a      	ldr	r2, [r1, #8]
 8008770:	60d3      	str	r3, [r2, #12]
 8008772:	609a      	str	r2, [r3, #8]
 8008774:	4628      	mov	r0, r5
 8008776:	68eb      	ldr	r3, [r5, #12]
 8008778:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800877c:	60d3      	str	r3, [r2, #12]
 800877e:	609a      	str	r2, [r3, #8]
 8008780:	1f32      	subs	r2, r6, #4
 8008782:	2a24      	cmp	r2, #36	; 0x24
 8008784:	d842      	bhi.n	800880c <_realloc_r+0x270>
 8008786:	2a13      	cmp	r2, #19
 8008788:	d93e      	bls.n	8008808 <_realloc_r+0x26c>
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	60ab      	str	r3, [r5, #8]
 800878e:	6863      	ldr	r3, [r4, #4]
 8008790:	60eb      	str	r3, [r5, #12]
 8008792:	2a1b      	cmp	r2, #27
 8008794:	d824      	bhi.n	80087e0 <_realloc_r+0x244>
 8008796:	f105 0010 	add.w	r0, r5, #16
 800879a:	f104 0308 	add.w	r3, r4, #8
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	6002      	str	r2, [r0, #0]
 80087a2:	685a      	ldr	r2, [r3, #4]
 80087a4:	6042      	str	r2, [r0, #4]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	6083      	str	r3, [r0, #8]
 80087aa:	46a9      	mov	r9, r5
 80087ac:	e757      	b.n	800865e <_realloc_r+0xc2>
 80087ae:	4580      	cmp	r8, r0
 80087b0:	4607      	mov	r7, r0
 80087b2:	dddf      	ble.n	8008774 <_realloc_r+0x1d8>
 80087b4:	4611      	mov	r1, r2
 80087b6:	4650      	mov	r0, sl
 80087b8:	f7fc fbc4 	bl	8004f44 <_malloc_r>
 80087bc:	4607      	mov	r7, r0
 80087be:	2800      	cmp	r0, #0
 80087c0:	d0af      	beq.n	8008722 <_realloc_r+0x186>
 80087c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80087c6:	f023 0301 	bic.w	r3, r3, #1
 80087ca:	f1a0 0208 	sub.w	r2, r0, #8
 80087ce:	444b      	add	r3, r9
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d11f      	bne.n	8008814 <_realloc_r+0x278>
 80087d4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80087d8:	f027 0703 	bic.w	r7, r7, #3
 80087dc:	4437      	add	r7, r6
 80087de:	e73e      	b.n	800865e <_realloc_r+0xc2>
 80087e0:	68a3      	ldr	r3, [r4, #8]
 80087e2:	612b      	str	r3, [r5, #16]
 80087e4:	68e3      	ldr	r3, [r4, #12]
 80087e6:	616b      	str	r3, [r5, #20]
 80087e8:	2a24      	cmp	r2, #36	; 0x24
 80087ea:	bf01      	itttt	eq
 80087ec:	6923      	ldreq	r3, [r4, #16]
 80087ee:	61ab      	streq	r3, [r5, #24]
 80087f0:	6962      	ldreq	r2, [r4, #20]
 80087f2:	61ea      	streq	r2, [r5, #28]
 80087f4:	bf19      	ittee	ne
 80087f6:	f105 0018 	addne.w	r0, r5, #24
 80087fa:	f104 0310 	addne.w	r3, r4, #16
 80087fe:	f105 0020 	addeq.w	r0, r5, #32
 8008802:	f104 0318 	addeq.w	r3, r4, #24
 8008806:	e7ca      	b.n	800879e <_realloc_r+0x202>
 8008808:	4623      	mov	r3, r4
 800880a:	e7c8      	b.n	800879e <_realloc_r+0x202>
 800880c:	4621      	mov	r1, r4
 800880e:	f7ff fe99 	bl	8008544 <memmove>
 8008812:	e7ca      	b.n	80087aa <_realloc_r+0x20e>
 8008814:	1f32      	subs	r2, r6, #4
 8008816:	2a24      	cmp	r2, #36	; 0x24
 8008818:	d82d      	bhi.n	8008876 <_realloc_r+0x2da>
 800881a:	2a13      	cmp	r2, #19
 800881c:	d928      	bls.n	8008870 <_realloc_r+0x2d4>
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	6003      	str	r3, [r0, #0]
 8008822:	6863      	ldr	r3, [r4, #4]
 8008824:	6043      	str	r3, [r0, #4]
 8008826:	2a1b      	cmp	r2, #27
 8008828:	d80e      	bhi.n	8008848 <_realloc_r+0x2ac>
 800882a:	f100 0308 	add.w	r3, r0, #8
 800882e:	f104 0208 	add.w	r2, r4, #8
 8008832:	6811      	ldr	r1, [r2, #0]
 8008834:	6019      	str	r1, [r3, #0]
 8008836:	6851      	ldr	r1, [r2, #4]
 8008838:	6059      	str	r1, [r3, #4]
 800883a:	6892      	ldr	r2, [r2, #8]
 800883c:	609a      	str	r2, [r3, #8]
 800883e:	4621      	mov	r1, r4
 8008840:	4650      	mov	r0, sl
 8008842:	f7fe ff17 	bl	8007674 <_free_r>
 8008846:	e76c      	b.n	8008722 <_realloc_r+0x186>
 8008848:	68a3      	ldr	r3, [r4, #8]
 800884a:	6083      	str	r3, [r0, #8]
 800884c:	68e3      	ldr	r3, [r4, #12]
 800884e:	60c3      	str	r3, [r0, #12]
 8008850:	2a24      	cmp	r2, #36	; 0x24
 8008852:	bf01      	itttt	eq
 8008854:	6923      	ldreq	r3, [r4, #16]
 8008856:	6103      	streq	r3, [r0, #16]
 8008858:	6961      	ldreq	r1, [r4, #20]
 800885a:	6141      	streq	r1, [r0, #20]
 800885c:	bf19      	ittee	ne
 800885e:	f100 0310 	addne.w	r3, r0, #16
 8008862:	f104 0210 	addne.w	r2, r4, #16
 8008866:	f100 0318 	addeq.w	r3, r0, #24
 800886a:	f104 0218 	addeq.w	r2, r4, #24
 800886e:	e7e0      	b.n	8008832 <_realloc_r+0x296>
 8008870:	4603      	mov	r3, r0
 8008872:	4622      	mov	r2, r4
 8008874:	e7dd      	b.n	8008832 <_realloc_r+0x296>
 8008876:	4621      	mov	r1, r4
 8008878:	f7ff fe64 	bl	8008544 <memmove>
 800887c:	e7df      	b.n	800883e <_realloc_r+0x2a2>
 800887e:	4637      	mov	r7, r6
 8008880:	e6ed      	b.n	800865e <_realloc_r+0xc2>
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	431f      	orrs	r7, r3
 8008888:	f8c9 7004 	str.w	r7, [r9, #4]
 800888c:	6853      	ldr	r3, [r2, #4]
 800888e:	f043 0301 	orr.w	r3, r3, #1
 8008892:	6053      	str	r3, [r2, #4]
 8008894:	e6ff      	b.n	8008696 <_realloc_r+0xfa>
 8008896:	bf00      	nop
 8008898:	2000018c 	.word	0x2000018c

0800889c <__swbuf_r>:
 800889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889e:	460e      	mov	r6, r1
 80088a0:	4614      	mov	r4, r2
 80088a2:	4605      	mov	r5, r0
 80088a4:	b118      	cbz	r0, 80088ae <__swbuf_r+0x12>
 80088a6:	6983      	ldr	r3, [r0, #24]
 80088a8:	b90b      	cbnz	r3, 80088ae <__swbuf_r+0x12>
 80088aa:	f7fe fe0d 	bl	80074c8 <__sinit>
 80088ae:	4b27      	ldr	r3, [pc, #156]	; (800894c <__swbuf_r+0xb0>)
 80088b0:	429c      	cmp	r4, r3
 80088b2:	d12f      	bne.n	8008914 <__swbuf_r+0x78>
 80088b4:	686c      	ldr	r4, [r5, #4]
 80088b6:	69a3      	ldr	r3, [r4, #24]
 80088b8:	60a3      	str	r3, [r4, #8]
 80088ba:	89a3      	ldrh	r3, [r4, #12]
 80088bc:	0719      	lsls	r1, r3, #28
 80088be:	d533      	bpl.n	8008928 <__swbuf_r+0x8c>
 80088c0:	6923      	ldr	r3, [r4, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d030      	beq.n	8008928 <__swbuf_r+0x8c>
 80088c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ca:	b2f6      	uxtb	r6, r6
 80088cc:	049a      	lsls	r2, r3, #18
 80088ce:	4637      	mov	r7, r6
 80088d0:	d534      	bpl.n	800893c <__swbuf_r+0xa0>
 80088d2:	6923      	ldr	r3, [r4, #16]
 80088d4:	6820      	ldr	r0, [r4, #0]
 80088d6:	1ac0      	subs	r0, r0, r3
 80088d8:	6963      	ldr	r3, [r4, #20]
 80088da:	4298      	cmp	r0, r3
 80088dc:	db04      	blt.n	80088e8 <__swbuf_r+0x4c>
 80088de:	4621      	mov	r1, r4
 80088e0:	4628      	mov	r0, r5
 80088e2:	f7fe fd5d 	bl	80073a0 <_fflush_r>
 80088e6:	bb28      	cbnz	r0, 8008934 <__swbuf_r+0x98>
 80088e8:	68a3      	ldr	r3, [r4, #8]
 80088ea:	3b01      	subs	r3, #1
 80088ec:	60a3      	str	r3, [r4, #8]
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	1c5a      	adds	r2, r3, #1
 80088f2:	6022      	str	r2, [r4, #0]
 80088f4:	701e      	strb	r6, [r3, #0]
 80088f6:	6963      	ldr	r3, [r4, #20]
 80088f8:	3001      	adds	r0, #1
 80088fa:	4298      	cmp	r0, r3
 80088fc:	d004      	beq.n	8008908 <__swbuf_r+0x6c>
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	07db      	lsls	r3, r3, #31
 8008902:	d519      	bpl.n	8008938 <__swbuf_r+0x9c>
 8008904:	2e0a      	cmp	r6, #10
 8008906:	d117      	bne.n	8008938 <__swbuf_r+0x9c>
 8008908:	4621      	mov	r1, r4
 800890a:	4628      	mov	r0, r5
 800890c:	f7fe fd48 	bl	80073a0 <_fflush_r>
 8008910:	b190      	cbz	r0, 8008938 <__swbuf_r+0x9c>
 8008912:	e00f      	b.n	8008934 <__swbuf_r+0x98>
 8008914:	4b0e      	ldr	r3, [pc, #56]	; (8008950 <__swbuf_r+0xb4>)
 8008916:	429c      	cmp	r4, r3
 8008918:	d101      	bne.n	800891e <__swbuf_r+0x82>
 800891a:	68ac      	ldr	r4, [r5, #8]
 800891c:	e7cb      	b.n	80088b6 <__swbuf_r+0x1a>
 800891e:	4b0d      	ldr	r3, [pc, #52]	; (8008954 <__swbuf_r+0xb8>)
 8008920:	429c      	cmp	r4, r3
 8008922:	bf08      	it	eq
 8008924:	68ec      	ldreq	r4, [r5, #12]
 8008926:	e7c6      	b.n	80088b6 <__swbuf_r+0x1a>
 8008928:	4621      	mov	r1, r4
 800892a:	4628      	mov	r0, r5
 800892c:	f7fd fddc 	bl	80064e8 <__swsetup_r>
 8008930:	2800      	cmp	r0, #0
 8008932:	d0c8      	beq.n	80088c6 <__swbuf_r+0x2a>
 8008934:	f04f 37ff 	mov.w	r7, #4294967295
 8008938:	4638      	mov	r0, r7
 800893a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800893c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008940:	81a3      	strh	r3, [r4, #12]
 8008942:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008944:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008948:	6663      	str	r3, [r4, #100]	; 0x64
 800894a:	e7c2      	b.n	80088d2 <__swbuf_r+0x36>
 800894c:	08008da4 	.word	0x08008da4
 8008950:	08008dc4 	.word	0x08008dc4
 8008954:	08008d84 	.word	0x08008d84

08008958 <_wcrtomb_r>:
 8008958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800895a:	4605      	mov	r5, r0
 800895c:	b085      	sub	sp, #20
 800895e:	461e      	mov	r6, r3
 8008960:	460f      	mov	r7, r1
 8008962:	4c0f      	ldr	r4, [pc, #60]	; (80089a0 <_wcrtomb_r+0x48>)
 8008964:	b991      	cbnz	r1, 800898c <_wcrtomb_r+0x34>
 8008966:	6822      	ldr	r2, [r4, #0]
 8008968:	490e      	ldr	r1, [pc, #56]	; (80089a4 <_wcrtomb_r+0x4c>)
 800896a:	6a12      	ldr	r2, [r2, #32]
 800896c:	2a00      	cmp	r2, #0
 800896e:	bf08      	it	eq
 8008970:	460a      	moveq	r2, r1
 8008972:	a901      	add	r1, sp, #4
 8008974:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8008978:	463a      	mov	r2, r7
 800897a:	47a0      	blx	r4
 800897c:	1c43      	adds	r3, r0, #1
 800897e:	bf01      	itttt	eq
 8008980:	2300      	moveq	r3, #0
 8008982:	6033      	streq	r3, [r6, #0]
 8008984:	238a      	moveq	r3, #138	; 0x8a
 8008986:	602b      	streq	r3, [r5, #0]
 8008988:	b005      	add	sp, #20
 800898a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800898c:	6824      	ldr	r4, [r4, #0]
 800898e:	4f05      	ldr	r7, [pc, #20]	; (80089a4 <_wcrtomb_r+0x4c>)
 8008990:	6a24      	ldr	r4, [r4, #32]
 8008992:	2c00      	cmp	r4, #0
 8008994:	bf08      	it	eq
 8008996:	463c      	moveq	r4, r7
 8008998:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800899c:	e7ed      	b.n	800897a <_wcrtomb_r+0x22>
 800899e:	bf00      	nop
 80089a0:	2000059c 	.word	0x2000059c
 80089a4:	20000690 	.word	0x20000690

080089a8 <__ascii_wctomb>:
 80089a8:	b149      	cbz	r1, 80089be <__ascii_wctomb+0x16>
 80089aa:	2aff      	cmp	r2, #255	; 0xff
 80089ac:	bf85      	ittet	hi
 80089ae:	238a      	movhi	r3, #138	; 0x8a
 80089b0:	6003      	strhi	r3, [r0, #0]
 80089b2:	700a      	strbls	r2, [r1, #0]
 80089b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80089b8:	bf98      	it	ls
 80089ba:	2001      	movls	r0, #1
 80089bc:	4770      	bx	lr
 80089be:	4608      	mov	r0, r1
 80089c0:	4770      	bx	lr
	...

080089c4 <_close>:
 80089c4:	4b02      	ldr	r3, [pc, #8]	; (80089d0 <_close+0xc>)
 80089c6:	2258      	movs	r2, #88	; 0x58
 80089c8:	601a      	str	r2, [r3, #0]
 80089ca:	f04f 30ff 	mov.w	r0, #4294967295
 80089ce:	4770      	bx	lr
 80089d0:	20001e00 	.word	0x20001e00

080089d4 <_fstat>:
 80089d4:	4b02      	ldr	r3, [pc, #8]	; (80089e0 <_fstat+0xc>)
 80089d6:	2258      	movs	r2, #88	; 0x58
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	f04f 30ff 	mov.w	r0, #4294967295
 80089de:	4770      	bx	lr
 80089e0:	20001e00 	.word	0x20001e00

080089e4 <_isatty>:
 80089e4:	4b02      	ldr	r3, [pc, #8]	; (80089f0 <_isatty+0xc>)
 80089e6:	2258      	movs	r2, #88	; 0x58
 80089e8:	601a      	str	r2, [r3, #0]
 80089ea:	2000      	movs	r0, #0
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	20001e00 	.word	0x20001e00

080089f4 <_lseek>:
 80089f4:	4b02      	ldr	r3, [pc, #8]	; (8008a00 <_lseek+0xc>)
 80089f6:	2258      	movs	r2, #88	; 0x58
 80089f8:	601a      	str	r2, [r3, #0]
 80089fa:	f04f 30ff 	mov.w	r0, #4294967295
 80089fe:	4770      	bx	lr
 8008a00:	20001e00 	.word	0x20001e00

08008a04 <_read>:
 8008a04:	4b02      	ldr	r3, [pc, #8]	; (8008a10 <_read+0xc>)
 8008a06:	2258      	movs	r2, #88	; 0x58
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a0e:	4770      	bx	lr
 8008a10:	20001e00 	.word	0x20001e00

08008a14 <_sbrk>:
 8008a14:	4b04      	ldr	r3, [pc, #16]	; (8008a28 <_sbrk+0x14>)
 8008a16:	6819      	ldr	r1, [r3, #0]
 8008a18:	4602      	mov	r2, r0
 8008a1a:	b909      	cbnz	r1, 8008a20 <_sbrk+0xc>
 8008a1c:	4903      	ldr	r1, [pc, #12]	; (8008a2c <_sbrk+0x18>)
 8008a1e:	6019      	str	r1, [r3, #0]
 8008a20:	6818      	ldr	r0, [r3, #0]
 8008a22:	4402      	add	r2, r0
 8008a24:	601a      	str	r2, [r3, #0]
 8008a26:	4770      	bx	lr
 8008a28:	20000a80 	.word	0x20000a80
 8008a2c:	20001e04 	.word	0x20001e04

08008a30 <_init>:
 8008a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a32:	bf00      	nop
 8008a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a36:	bc08      	pop	{r3}
 8008a38:	469e      	mov	lr, r3
 8008a3a:	4770      	bx	lr

08008a3c <_fini>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	bf00      	nop
 8008a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a42:	bc08      	pop	{r3}
 8008a44:	469e      	mov	lr, r3
 8008a46:	4770      	bx	lr
